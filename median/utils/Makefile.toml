# vim: set ts=4 sw=4 expandtab:
[config]
additional_profiles = [ "release" ]

[env]
MAX_PACKAGE_NAME = { value = "median", condition = { env_not_set = ["MAX_PACKAGE_NAME"] } }
MAX_EXT_NAME = { value = "${CARGO_MAKE_CRATE_FS_NAME}", condition = { env_not_set = ["MAX_EXT_NAME"] } }
PLATFORM_DYLIB_EXT = { source = "${CARGO_MAKE_RUST_TARGET_OS}", default_value = "so", mapping = {"macos" = "dylib", "windows" = "dll" } }
PLATFORM_EXTERNAL_EXT = { source = "${CARGO_MAKE_RUST_TARGET_OS}", default_value = "ERROR", mapping = {"macos" = "mxo", "windows" = "mxe64"} }
PLATFORM_INSTALL_DIR = { source = "${CARGO_MAKE_RUST_TARGET_OS}", default_value = "ERROR", mapping = {"macos" = "${HOME}/Documents/Max 8/Packages", windows = "${USERPROFILE}/Documents/Max 8/Packages" } }
INIT_INSTALL_DIR = "${PLATFORM_INSTALL_DIR}/${MAX_PACKAGE_NAME}/init/"
EXTERNAL_INSTALL_DIR = "${PLATFORM_INSTALL_DIR}/${MAX_PACKAGE_NAME}/externals/"
PLATFORM_DYLIB_PREFIX = { source = "${CARGO_MAKE_RUST_TARGET_OS}", default_value = "lib", mapping = {"windows" = ""} }
LIB_FILE_NAME = "${PLATFORM_DYLIB_PREFIX}${CARGO_MAKE_CRATE_FS_NAME}.${PLATFORM_DYLIB_EXT}"
LIB_TILDE_FILE_NAME = "${PLATFORM_DYLIB_PREFIX}${CARGO_MAKE_CRATE_FS_NAME}_tilde.${PLATFORM_DYLIB_EXT}"
PACKAGED_LIB_FILE_NAME = "${MAX_EXT_NAME}"
INIT_DIR = "${CARGO_MAKE_WORKING_DIRECTORY}/init"

[env.development]
BUILD_ARGS = "build"
PROFILE_TARGET_DIR = "target/debug"

[env.release]
BUILD_ARGS = "build|--release"
PROFILE_TARGET_DIR = "target/release"

[tasks.build]
args = ["@@split(BUILD_ARGS,|)"]

[tasks.name-env]
dependencies = ["build"]
env = { "PROFILE_EXTERNAL_PATH" = "${PROFILE_TARGET_DIR}/${MAX_EXT_NAME}.${PLATFORM_EXTERNAL_EXT}" }
run_task = "add_tilde"

#see if we should add a tilde
[tasks.add_tilde]
private = true
condition = { files_exist = ["${PROFILE_TARGET_DIR}/${LIB_TILDE_FILE_NAME}"] }
env = { "PROFILE_EXTERNAL_PATH" = "${PROFILE_TARGET_DIR}/${MAX_EXT_NAME}~.${PLATFORM_EXTERNAL_EXT}", "LIB_FILE_NAME" = "${LIB_TILDE_FILE_NAME}", "PACKAGED_LIB_FILE_NAME" = "${PACKAGED_LIB_FILE_NAME}~" }


[tasks.echo]
dependencies = ["name-env"]
script_runner = "@shell"
script = [
'''
echo MAX_EXT_NAME: ${MAX_EXT_NAME}
echo PLATFORM_DYLIB_EXT: ${PLATFORM_DYLIB_EXT}
echo PLATFORM_EXTERNAL_EXT: ${PLATFORM_EXTERNAL_EXT}
echo PLATFORM_INSTALL_DIR: ${PLATFORM_INSTALL_DIR}
echo TARGET_ARCH: ${CARGO_MAKE_RUST_TARGET_ARCH}
echo TARGET_OS: ${CARGO_MAKE_RUST_TARGET_OS}
echo TARGET_TRIPLE: ${CARGO_MAKE_RUST_TARGET_TRIPLE}
echo PROFILE_EXTERNAL_PATH: ${PROFILE_EXTERNAL_PATH}
echo INIT_INSTALL_DIR: ${INIT_INSTALL_DIR}
echo EXTERNAL_INSTALL_DIR: ${EXTERNAL_INSTALL_DIR}
echo CARGO_MAKE_PROJECT_NAME: ${CARGO_MAKE_PROJECT_NAME}
echo LIB_FILE_NAME: ${LIB_FILE_NAME}
echo LIB_TILDE_FILE_NAME: ${LIB_TILDE_FILE_NAME}
'''
]

[tasks.package.windows]
clear = true
dependencies = ["build", "name-env"]
script_runner = "@shell"
script = [
    '''
    cp "${PROFILE_TARGET_DIR}/${LIB_FILE_NAME}" "${PROFILE_EXTERNAL_PATH}"
    '''
]

[tasks.package.mac]
clear = true
dependencies = ["build", "name-env"]
script_runner = "@shell"
script = [
    '''
    mkdir -p ${PROFILE_EXTERNAL_PATH}/Contents/MacOS/
    cp "${PROFILE_TARGET_DIR}/${LIB_FILE_NAME}" "${PROFILE_EXTERNAL_PATH}/Contents/MacOS/${PACKAGED_LIB_FILE_NAME}"
    cp "${CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY}/PkgInfo" "${PROFILE_EXTERNAL_PATH}/Contents/"
    '''
]

[tasks.install.windows]
clear = true
dependencies = ["package"]
script_runner = "powershell"
script_extension = "ps1"
script = [
    '''
    if((Test-Path $env:EXTERNAL_INSTALL_DIR) -eq 0)
    {
        New-Item $env:EXTERNAL_INSTALL_DIR -ItemType Directory
    }
    Copy-Item $env:PROFILE_EXTERNAL_PATH -Destination $env:EXTERNAL_INSTALL_DIR
    '''
]

[tasks.install.mac]
clear = true
dependencies = ["package", "install-init"]
script_runner = "@shell"
script = [
    '''
    mkdir -p "${EXTERNAL_INSTALL_DIR}"
    cp -r "${PROFILE_EXTERNAL_PATH}" "${EXTERNAL_INSTALL_DIR}"
    '''
]

[tasks.install-init.mac]
condition = { files_exist = ["${INIT_DIR}/"] }
script_runner = "@shell"
script = [
    '''
    mkdir -p "${INIT_INSTALL_DIR}"
    cp ${INIT_DIR}/* "${INIT_INSTALL_DIR}"
    '''
]
