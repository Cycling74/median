/* automatically generated by rust-bindgen 0.55.1 */

pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type t_uint8 = u8;
pub type t_int32 = i32;
pub type t_uint32 = u32;
pub type t_int64 = i64;
pub type t_fourcc = t_uint32;
pub type t_ptr_uint = usize;
pub type t_ptr_int = isize;
pub type t_atom_float = f64;
pub type t_getbytes_size = t_ptr_uint;
pub type t_int = t_ptr_int;
pub type t_ptr_size = t_ptr_uint;
pub type t_atom_long = t_ptr_int;
pub type t_max_err = t_atom_long;
pub type t_handle = *mut *mut ::std::os::raw::c_char;
pub type t_ptr = *mut ::std::os::raw::c_char;
pub type t_bool = t_uint8;
pub mod e_max_errorcodes {
    #[doc = " Standard values returned by function calls with a return type of #t_max_err"]
    #[doc = "@ingroup misc"]
    pub type Type = ::std::os::raw::c_int;
    #[doc = "< No error"]
    pub const MAX_ERR_NONE: Type = 0;
    #[doc = "< Generic error"]
    pub const MAX_ERR_GENERIC: Type = -1;
    #[doc = "< Invalid Pointer"]
    pub const MAX_ERR_INVALID_PTR: Type = -2;
    #[doc = "< Duplicate"]
    pub const MAX_ERR_DUPLICATE: Type = -3;
    #[doc = "< Out of memory"]
    pub const MAX_ERR_OUT_OF_MEM: Type = -4;
}
pub type uint = ::std::os::raw::c_uint;
pub type size_t = __darwin_size_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type UInt8 = ::std::os::raw::c_uchar;
pub type SInt16 = ::std::os::raw::c_short;
pub type UInt32 = ::std::os::raw::c_uint;
pub type OSErr = SInt16;
pub type FourCharCode = UInt32;
pub type OSType = FourCharCode;
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type method = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type t_intmethod = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long,
>;
#[doc = " The atomarray object. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup atomarray"]
pub type t_atomarray = _atomarray;
pub type t_outlet = ::std::os::raw::c_void;
pub type t_inlet = ::std::os::raw::c_void;
pub type t_binbuf = ::std::os::raw::c_void;
pub type t_qelem = ::std::os::raw::c_void;
pub type t_scheduler = ::std::os::raw::c_void;
pub type t_clock = ::std::os::raw::c_void;
pub type t_setclock = ::std::os::raw::c_void;
pub type t_toolfile = ::std::os::raw::c_void;
#[doc = " The symbol."]
#[doc = ""]
#[doc = "Note: You should <em>never</em> manipulate the s_name field of the #t_symbol directly!"]
#[doc = "Doing so will corrupt Max's symbol table."]
#[doc = "Instead, <em>always</em> use gensym() to get a symbol with the desired string"]
#[doc = "contents for the s_name field."]
#[doc = ""]
#[doc = "@ingroup symbol"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symbol {
    #[doc = "< name: a c-string"]
    pub s_name: *mut ::std::os::raw::c_char,
    #[doc = "< possible binding to a t_object"]
    pub s_thing: *mut object,
}
#[test]
fn bindgen_test_layout_symbol() {
    assert_eq!(
        ::std::mem::size_of::<symbol>(),
        16usize,
        concat!("Size of: ", stringify!(symbol))
    );
    assert_eq!(
        ::std::mem::align_of::<symbol>(),
        8usize,
        concat!("Alignment of ", stringify!(symbol))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<symbol>())).s_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(symbol),
            "::",
            stringify!(s_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<symbol>())).s_thing as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(symbol),
            "::",
            stringify!(s_thing)
        )
    );
}
#[doc = " The symbol."]
#[doc = ""]
#[doc = "Note: You should <em>never</em> manipulate the s_name field of the #t_symbol directly!"]
#[doc = "Doing so will corrupt Max's symbol table."]
#[doc = "Instead, <em>always</em> use gensym() to get a symbol with the desired string"]
#[doc = "contents for the s_name field."]
#[doc = ""]
#[doc = "@ingroup symbol"]
pub type t_symbol = symbol;
extern "C" {
    #[doc = " function version of NOGOOD test is potentially more reliable"]
    pub fn object_isnogood(x: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long;
}
#[doc = " A list of symbols and their corresponding methods,"]
#[doc = "complete with typechecking information."]
#[doc = "@ingroup obj"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct messlist {
    #[doc = "< Name of the message"]
    pub m_sym: *mut symbol,
    #[doc = "< Method associated with the message"]
    pub m_fun: method,
    #[doc = "< Argument type information"]
    pub m_type: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_messlist() {
    assert_eq!(
        ::std::mem::size_of::<messlist>(),
        24usize,
        concat!("Size of: ", stringify!(messlist))
    );
    assert_eq!(
        ::std::mem::align_of::<messlist>(),
        8usize,
        concat!("Alignment of ", stringify!(messlist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<messlist>())).m_sym as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(messlist),
            "::",
            stringify!(m_sym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<messlist>())).m_fun as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(messlist),
            "::",
            stringify!(m_fun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<messlist>())).m_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(messlist),
            "::",
            stringify!(m_type)
        )
    );
}
#[doc = " A list of symbols and their corresponding methods,"]
#[doc = "complete with typechecking information."]
#[doc = "@ingroup obj"]
pub type t_messlist = messlist;
#[doc = " The structure for the head of any object which wants to have inlets or outlets,"]
#[doc = "or support attributes."]
#[doc = "@ingroup obj"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct object {
    #[doc = "<  list of messages and methods. The -1 entry of the message list of an object contains a pointer to its #t_class entry."]
    pub o_messlist: *mut messlist,
    #[doc = "< magic number"]
    pub o_magic: t_ptr_int,
    #[doc = "<  list of inlets"]
    pub o_inlet: *mut t_inlet,
    #[doc = "<  list of outlets"]
    pub o_outlet: *mut t_outlet,
}
#[test]
fn bindgen_test_layout_object() {
    assert_eq!(
        ::std::mem::size_of::<object>(),
        32usize,
        concat!("Size of: ", stringify!(object))
    );
    assert_eq!(
        ::std::mem::align_of::<object>(),
        8usize,
        concat!("Alignment of ", stringify!(object))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<object>())).o_messlist as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(object),
            "::",
            stringify!(o_messlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<object>())).o_magic as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(object),
            "::",
            stringify!(o_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<object>())).o_inlet as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(object),
            "::",
            stringify!(o_inlet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<object>())).o_outlet as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(object),
            "::",
            stringify!(o_outlet)
        )
    );
}
#[doc = " The structure for the head of any object which wants to have inlets or outlets,"]
#[doc = "or support attributes."]
#[doc = "@ingroup obj"]
pub type t_object = object;
#[doc = "The data structure for a Max class. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup class"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct maxclass {
    #[doc = "< symbol giving name of class"]
    pub c_sym: *mut symbol,
    pub c_freelist: *mut *mut object,
    pub c_freefun: method,
    pub c_size: t_getbytes_size,
    pub c_tiny: ::std::os::raw::c_char,
    pub c_noinlet: ::std::os::raw::c_char,
    #[doc = "< name of file associated with this class"]
    pub c_filename: *mut symbol,
    pub c_newmess: *mut t_messlist,
    pub c_menufun: method,
    pub c_flags: ::std::os::raw::c_long,
    pub c_messcount: ::std::os::raw::c_long,
    pub c_messlist: *mut t_messlist,
    pub c_attributes: *mut ::std::os::raw::c_void,
    pub c_extra: *mut ::std::os::raw::c_void,
    pub c_obexoffset: ::std::os::raw::c_long,
    pub c_methods: *mut ::std::os::raw::c_void,
    pub c_attr_get: method,
    pub c_attr_gettarget: method,
    pub c_attr_getnames: method,
    pub c_superclass: *mut maxclass,
}
#[test]
fn bindgen_test_layout_maxclass() {
    assert_eq!(
        ::std::mem::size_of::<maxclass>(),
        152usize,
        concat!("Size of: ", stringify!(maxclass))
    );
    assert_eq!(
        ::std::mem::align_of::<maxclass>(),
        8usize,
        concat!("Alignment of ", stringify!(maxclass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_sym as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_sym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_freelist as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_freelist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_freefun as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_freefun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_tiny as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_tiny)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_noinlet as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_noinlet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_filename as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_newmess as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_newmess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_menufun as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_menufun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_flags as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_messcount as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_messcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_messlist as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_messlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_attributes as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_attributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_extra as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_obexoffset as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_obexoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_methods as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_attr_get as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_attr_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_attr_gettarget as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_attr_gettarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_attr_getnames as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_attr_getnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<maxclass>())).c_superclass as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(maxclass),
            "::",
            stringify!(c_superclass)
        )
    );
}
#[doc = "The data structure for a Max class. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup class"]
pub type t_class = maxclass;
pub mod e_max_class_flags {
    #[doc = " Class flags. If not box or polyglot, class is only accessible in C via known interface"]
    #[doc = "@ingroup class"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< for use in a patcher"]
    pub const CLASS_FLAG_BOX: Type = 1;
    #[doc = "< for use by any text language (c/js/java/etc)"]
    pub const CLASS_FLAG_POLYGLOT: Type = 2;
    #[doc = "< dictionary based constructor"]
    pub const CLASS_FLAG_NEWDICTIONARY: Type = 4;
    #[doc = "< for backward compatible messlist implementation (once reg'd can't grow)"]
    pub const CLASS_FLAG_REGISTERED: Type = 8;
    #[doc = "< for objects that don't go inside a newobj box."]
    pub const CLASS_FLAG_UIOBJECT: Type = 16;
    #[doc = "< for classes that are just copies of some other class (i.e. del is a copy of delay)"]
    pub const CLASS_FLAG_ALIAS: Type = 32;
    #[doc = "< sent multitouch version of mouse messages"]
    pub const CLASS_FLAG_MULTITOUCH: Type = 64;
    #[doc = "< override dictionary based constructor attr arg parsing"]
    pub const CLASS_FLAG_DO_NOT_PARSE_ATTR_ARGS: Type = 128;
    #[doc = "< don't zero the object struct on construction (for efficiency)"]
    pub const CLASS_FLAG_DO_NOT_ZERO: Type = 256;
    #[doc = "< for efficiency"]
    pub const CLASS_FLAG_NOATTRIBUTES: Type = 65536;
    #[doc = "< for classes which support a custom attr interface (e.g. jitter)"]
    pub const CLASS_FLAG_OWNATTRIBUTES: Type = 131072;
    #[doc = "< for classes which have a parameter"]
    pub const CLASS_FLAG_PARAMETER: Type = 262144;
    #[doc = "< object box can be retyped without recreating the object"]
    pub const CLASS_FLAG_RETYPEABLE: Type = 524288;
    #[doc = "< objects of this class may have object specific methods"]
    pub const CLASS_FLAG_OBJECT_METHOD: Type = 1048576;
    #[doc = "< objects of this class are signal visualizers"]
    pub const CLASS_FLAG_VISUALIZER: Type = 2097152;
    #[doc = "< objects of this class might use proxies (set automatically in proxy_new)"]
    pub const CLASS_FLAG_USES_PROXIES: Type = 4194304;
    #[doc = "< objects of this class save data in their own format"]
    pub const CLASS_FLAG_OWN_DATA: Type = 8388608;
    #[doc = "< objects which contain colors supporting dynamic colors (set automatically in class_attr_dynamiccolor_init)"]
    pub const CLASS_FLAG_DYNAMICCOLOR: Type = 16777216;
}
pub mod e_max_atomtypes {
    #[doc = " the list of officially recognized types, including pseudotypes for"]
    #[doc = "commas and semicolons.  Used in two places: 1. the reader, when it reads"]
    #[doc = "a string, returns long, float, sym, comma, semi, or dollar;"]
    #[doc = "and 2. each object method comes with an array of them saying what types"]
    #[doc = "it needs, from among long, float, sym, obj, gimme, and cant."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = ""]
    #[doc = "@remark\tWhile these values are defined in an enum, you should use a long to represent the value."]
    #[doc = "Using the enum type creates ambiguity in struct size and is subject to various inconsistent"]
    #[doc = "compiler settings."]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< no type, thus no atom"]
    pub const A_NOTHING: Type = 0;
    #[doc = "< long integer"]
    pub const A_LONG: Type = 1;
    #[doc = "< 32-bit float"]
    pub const A_FLOAT: Type = 2;
    #[doc = "< t_symbol pointer"]
    pub const A_SYM: Type = 3;
    #[doc = "< t_object pointer (for argtype lists; passes the value of sym)"]
    pub const A_OBJ: Type = 4;
    #[doc = "< long but defaults to zero"]
    pub const A_DEFLONG: Type = 5;
    #[doc = "< float, but defaults to zero"]
    pub const A_DEFFLOAT: Type = 6;
    #[doc = "< symbol, defaults to \"\""]
    pub const A_DEFSYM: Type = 7;
    #[doc = "< request that args be passed as an array, the routine will check the types itself."]
    pub const A_GIMME: Type = 8;
    #[doc = "< cannot typecheck args"]
    pub const A_CANT: Type = 9;
    #[doc = "< semicolon"]
    pub const A_SEMI: Type = 10;
    #[doc = "< comma"]
    pub const A_COMMA: Type = 11;
    #[doc = "< dollar"]
    pub const A_DOLLAR: Type = 12;
    #[doc = "< dollar"]
    pub const A_DOLLSYM: Type = 13;
    #[doc = "< request that args be passed as an array, the routine will check the types itself. can return atom value in final atom ptr arg. function returns long error code 0 = no err. see gimmeback_meth typedef"]
    pub const A_GIMMEBACK: Type = 14;
    #[doc = "< A special signature for declaring methods. This is like A_GIMME, but the call is deferred."]
    pub const A_DEFER: Type = 65;
    #[doc = "< A special signature for declaring methods. This is like A_GIMME, but the call is deferred and multiple calls within one servicing of the queue are filtered down to one call."]
    pub const A_USURP: Type = 66;
    #[doc = "< A special signature for declaring methods. This is like A_GIMME, but the call is deferref to the back of the queue."]
    pub const A_DEFER_LOW: Type = 67;
    #[doc = "< A special signature for declaring methods. This is like A_GIMME, but the call is deferred to the back of the queue and multiple calls within one servicing of the queue are filtered down to one call."]
    pub const A_USURP_LOW: Type = 68;
}
#[doc = " Union for packing any of the datum defined in #e_max_atomtypes."]
#[doc = "@ingroup atom"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union word {
    #[doc = "< long integer"]
    pub w_long: t_atom_long,
    #[doc = "< 32-bit float"]
    pub w_float: t_atom_float,
    #[doc = "< pointer to a symbol in the Max symbol table"]
    pub w_sym: *mut symbol,
    #[doc = "< pointer to a #t_object or other generic pointer"]
    pub w_obj: *mut object,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_word() {
    assert_eq!(
        ::std::mem::size_of::<word>(),
        8usize,
        concat!("Size of: ", stringify!(word))
    );
    assert_eq!(
        ::std::mem::align_of::<word>(),
        8usize,
        concat!("Alignment of ", stringify!(word))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<word>())).w_long as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(word),
            "::",
            stringify!(w_long)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<word>())).w_float as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(word),
            "::",
            stringify!(w_float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<word>())).w_sym as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(word),
            "::",
            stringify!(w_sym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<word>())).w_obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(word),
            "::",
            stringify!(w_obj)
        )
    );
}
#[doc = " An atom is a typed datum."]
#[doc = "@ingroup atom"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct atom {
    pub a_type: ::std::os::raw::c_short,
    pub a_w: word,
}
#[test]
fn bindgen_test_layout_atom() {
    assert_eq!(
        ::std::mem::size_of::<atom>(),
        16usize,
        concat!("Size of: ", stringify!(atom))
    );
    assert_eq!(
        ::std::mem::align_of::<atom>(),
        8usize,
        concat!("Alignment of ", stringify!(atom))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<atom>())).a_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(atom),
            "::",
            stringify!(a_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<atom>())).a_w as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(atom), "::", stringify!(a_w))
    );
}
#[doc = " An atom is a typed datum."]
#[doc = "@ingroup atom"]
pub type t_atom = atom;
extern "C" {
    pub fn stdinletinfo(
        s: *mut t_object,
        b: *mut ::std::os::raw::c_void,
        a: ::std::os::raw::c_long,
        t: *mut ::std::os::raw::c_char,
    );
}
#[doc = "\tA patcher. As of Max 5, the patcher struct is opaque."]
#[doc = "Messages can be sent to a patcher using object_method() or object_method_typed(), or by using @ref attr accessors."]
#[doc = "@ingroup patcher"]
pub type t_patcher = t_object;
extern "C" {
    pub fn swapf32(f: f32) -> f32;
}
extern "C" {
    pub fn swapf64(f: f64) -> f64;
}
extern "C" {
    #[doc = "Allocate memory."]
    #[doc = "This function is similar to NewPtr() or malloc(). It allocates a pointer of"]
    #[doc = "a given number of bytes and returns a pointer to the memory allocated."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\tsize\tThe amount of memory to allocate."]
    #[doc = "@return\t\t\tA pointer to the allocated memory, or NULL if the allocation fails."]
    pub fn sysmem_newptr(size: t_ptr_size) -> t_ptr;
}
extern "C" {
    #[doc = "Allocate memory and set it to zero."]
    #[doc = "This function is similar to NewPtrClear() or calloc()."]
    #[doc = "It allocates a pointer of a given number of bytes, zeroing all memory,"]
    #[doc = "and returns a pointer to the memory allocated."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\tsize\tThe amount of memory to allocate."]
    #[doc = "@return\t\t\tA pointer to the allocated memory, or NULL if the allocation fails."]
    pub fn sysmem_newptrclear(size: t_ptr_size) -> t_ptr;
}
extern "C" {
    #[doc = "Resize an existing pointer."]
    #[doc = "This function is similar to realloc()."]
    #[doc = "It resizes an existing pointer and returns a new pointer to the resized memory."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\tptr\t\tThe pointer to the memory that will be resized."]
    #[doc = "@param\tnewsize\tThe new size of the pointer in bytes."]
    #[doc = "@return\t\t\tA pointer to the resized memory, or NULL if the allocation fails."]
    pub fn sysmem_resizeptr(ptr: *mut ::std::os::raw::c_void, newsize: t_ptr_size) -> t_ptr;
}
extern "C" {
    #[doc = "Resize an existing pointer and clear the newly allocated memory, if any."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\tptr\t\tThe pointer to the memory that will be resized."]
    #[doc = "@param\tnewsize\tThe new size of the pointer in bytes."]
    #[doc = "@return\t\t\tA pointer to the resized memory, or NULL if the allocation fails."]
    pub fn sysmem_resizeptrclear(ptr: *mut ::std::os::raw::c_void, newsize: t_ptr_size) -> t_ptr;
}
extern "C" {
    #[doc = "Find the size of a pointer.  This function is similar to _msize()."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\tptr\t\tThe pointer whose size will be queried"]
    #[doc = "@return\t\t\tThe number of bytes allocated to the pointer specified."]
    pub fn sysmem_ptrsize(ptr: *mut ::std::os::raw::c_void) -> t_ptr_size;
}
extern "C" {
    #[doc = "Free memory allocated with sysmem_newptr()."]
    #[doc = "This function is similar to DisposePtr or free."]
    #[doc = "It frees the memory that had been allocated to the given pointer."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\tptr\t\tThe pointer whose memory will be freed."]
    pub fn sysmem_freeptr(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Copy memory the contents of one pointer to another pointer."]
    #[doc = "This function is similar to BlockMove() or memcpy()."]
    #[doc = "It copies the contents of the memory from the source to the destination pointer."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\tsrc\t\tA pointer to the memory whose bytes will be copied."]
    #[doc = "@param\tdst\t\tA pointer to the memory where the data will be copied."]
    #[doc = "@param\tbytes\tThe size in bytes of the data to be copied."]
    pub fn sysmem_copyptr(
        src: *const ::std::os::raw::c_void,
        dst: *mut ::std::os::raw::c_void,
        bytes: t_ptr_size,
    );
}
extern "C" {
    #[doc = "Allocate a handle (a pointer to a pointer)."]
    #[doc = "This function is similar to NewHandle()."]
    #[doc = "It allocates a handle of a given number of bytes and returns a #t_handle."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\tsize\tThe size of the handle in bytes that will be allocated."]
    #[doc = "@return\t\t\tA new #t_handle."]
    pub fn sysmem_newhandle(size: t_ptr_size) -> t_handle;
}
extern "C" {
    #[doc = "Allocate a handle (a pointer to a pointer) whose memory is set to zero."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\tsize\tThe size of the handle in bytes that will be allocated."]
    #[doc = "@return\t\t\tA new #t_handle."]
    #[doc = "@see\t\t\tsysmem_newhandle()"]
    pub fn sysmem_newhandleclear(size: t_ptr_size) -> t_handle;
}
extern "C" {
    #[doc = "Resize an existing handle."]
    #[doc = "This function is similar to SetHandleSize()."]
    #[doc = "It resizes an existing handle to the size specified."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\thandle\tThe handle that will be resized."]
    #[doc = "@param\tnewsize\tThe new size of the handle in bytes."]
    #[doc = "@return\t\t\tThe number of bytes allocated to the specified handle."]
    pub fn sysmem_resizehandle(handle: t_handle, newsize: t_ptr_size) -> t_max_err;
}
extern "C" {
    #[doc = "Find the size of a handle."]
    #[doc = "This function is similar to GetHandleSize()."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\thandle\tThe handle whose size will be queried."]
    #[doc = "@return\t\t\tThe number of bytes allocated to the specified handle."]
    pub fn sysmem_handlesize(handle: t_handle) -> t_ptr_size;
}
extern "C" {
    #[doc = "Free memory allocated with sysmem_newhandle()."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\thandle\tThe handle whose memory will be freed."]
    pub fn sysmem_freehandle(handle: t_handle);
}
extern "C" {
    #[doc = "Set the locked/unlocked state of a handle."]
    #[doc = "This function is similar to HLock or HUnlock."]
    #[doc = "It sets the lock state of a handle, using a zero or non-zero number."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\thandle\tThe handle that will be locked."]
    #[doc = "@param\tlock\tThe new lock state of the handle."]
    #[doc = "@return\t\t\tThe previous lock state."]
    pub fn sysmem_lockhandle(
        handle: t_handle,
        lock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "Add memory to an existing handle and copy memory to the resized portion from a pointer."]
    #[doc = "This function is similar to PtrAndHand(). It resizes an existing handle"]
    #[doc = "by adding a given number of bytes to it and copies data from a pointer"]
    #[doc = "into those bytes."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\tp\t\tThe existing pointer whose data will be copied into the resized handle."]
    #[doc = "@param\th\t\tThe handle which will be enlarged by the size of the pointer."]
    #[doc = "@param\tsize\tThe size in bytes that will be added to the handle."]
    #[doc = "@return\t\t\tThe number of bytes allocated to the specified handle."]
    pub fn sysmem_ptrandhand(
        p: *mut ::std::os::raw::c_void,
        h: t_handle,
        size: t_ptr_size,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tAdd memory to an existing handle and copy memory to the resized portion from a pointer."]
    #[doc = "Unlike sysmem_ptrandhand(), however, this copies the ptr before the previously exising handle data."]
    #[doc = ""]
    #[doc = "@ingroup memory"]
    #[doc = "@param\tp\t\tThe existing pointer whose data will be copied into the resized handle."]
    #[doc = "@param\th\t\tThe handle which will be enlarged by the size of the pointer."]
    #[doc = "@param\tsize\tThe size in bytes that will be added to the handle."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn sysmem_ptrbeforehand(
        p: *mut ::std::os::raw::c_void,
        h: t_handle,
        size: t_ptr_size,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tAdd a null terminator to a handle."]
    #[doc = "@ingroup memory"]
    #[doc = "@param\th\t\tA handle to null terminate."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn sysmem_nullterminatehandle(h: t_handle) -> t_max_err;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filestruct {
    _unused: [u8; 0],
}
pub type t_filestruct = _filestruct;
#[doc = " A t_filehandle is a cross-platform way of referring to an open file."]
#[doc = "It is an opaque structure, meaning you don’t have access to the individual"]
#[doc = "elements of the data structure. You can use a t_filehandle only"]
#[doc = "with the file routines in the Sysfile API. Do not use other platform-"]
#[doc = "specific file functions in conjunction with these functions."]
#[doc = "The perm parameter can be either READ_PERM, WRITE_PERM, or RW_PERM."]
#[doc = ""]
#[doc = "@ingroup files"]
pub type t_filehandle = *mut t_filestruct;
pub mod t_sysfile_pos_mode {
    #[doc = " Modes used by sysfile_setpos()"]
    #[doc = "@ingroup files"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< ?"]
    pub const SYSFILE_ATMARK: Type = 0;
    #[doc = "< Calculate the file position from the start of the file."]
    pub const SYSFILE_FROMSTART: Type = 1;
    #[doc = "< Calculate the file position from the logical end of the file."]
    pub const SYSFILE_FROMLEOF: Type = 2;
    #[doc = "< Calculate the file position from the current file position."]
    pub const SYSFILE_FROMMARK: Type = 3;
}
pub mod t_sysfile_flags {
    pub type Type = ::std::os::raw::c_uint;
    pub const SYSFILE_SUBFILE: Type = 1;
    pub const SYSFILE_HANDLE: Type = 2;
    pub const SYSFILE_RESOURCE: Type = 4;
    pub const SYSFILE_MEMORY: Type = 6;
    pub const SYSFILE_RESFILE: Type = 8;
    pub const SYSFILE_OPENRESFILE: Type = 16;
    pub const SYSFILE_EXTERNALDATA: Type = 32;
    pub const SYSFILE_JUSTAPOINTER: Type = 64;
    pub const SYSFILE_EXTERNALDATA_CANWRITE: Type = 128;
    pub const SYSFILE_EXTERNALDATA_CANGROW: Type = 256;
    pub const SYSFILE_EXTERNALDATA_FREE: Type = 512;
    pub const SYSFILE_EXTERNALDATA_LATEFREE: Type = 1024;
}
pub mod t_sysfile_text_flags {
    #[doc = " Flags used reading and writing text files."]
    #[doc = "@ingroup files"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< Use the linebreak format native to the current platform."]
    pub const TEXT_LB_NATIVE: Type = 1;
    #[doc = "< Use Macintosh line breaks"]
    pub const TEXT_LB_MAC: Type = 2;
    #[doc = "< Use Windows line breaks"]
    pub const TEXT_LB_PC: Type = 4;
    #[doc = "< Use Unix line breaks"]
    pub const TEXT_LB_UNIX: Type = 8;
    pub const TEXT_LB_MASK: Type = 15;
    #[doc = "< If this flag is not set then the encoding is forced to UTF8"]
    pub const TEXT_ENCODING_USE_FILE: Type = 256;
    #[doc = "< Terminate memory returned from sysfile_readtextfile() with a NULL character"]
    pub const TEXT_NULL_TERMINATE: Type = 512;
}
extern "C" {
    #[doc = "\tClose a file opened with sysfile_open()."]
    #[doc = "This function is similar to FSClose() or fclose()."]
    #[doc = "It should be used instead of system-specific file closing routines in order to make max external"]
    #[doc = "code that will compile cross-platform."]
    #[doc = ""]
    #[doc = "@ingroup\tfiles"]
    #[doc = "@param\tf\tThe #t_filehandle structure of the file the user wants to close."]
    #[doc = "@return\t\tAn error code."]
    pub fn sysfile_close(f: t_filehandle) -> t_max_err;
}
extern "C" {
    #[doc = "\tRead a file from disk."]
    #[doc = "This function is similar to FSRead() or fread(). It should be used instead of"]
    #[doc = "these functions (or other system-specific file reading routines) in order"]
    #[doc = "to make max external code that will compile cross-platform. It reads"]
    #[doc = "\"count\" bytes from file handle at current file position into \"bufptr\"."]
    #[doc = "The byte count actually read is set in \"count\", and the file position is"]
    #[doc = "updated by the actual byte count read."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tf\t\tThe #t_filehandle structure of the file the user wants to open."]
    #[doc = "@param\tcount\tPointer to the number of bytes that will be read from the file at the current file position."]
    #[doc = "The byte count actually read is returned to this value."]
    #[doc = "@param\tbufptr\tPointer to the buffer that the data will be read into."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn sysfile_read(
        f: t_filehandle,
        count: *mut t_ptr_size,
        bufptr: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tRead the contents of a file into a handle."]
    #[doc = "@ingroup files"]
    #[doc = "@param\tf\tThe open #t_filehandle structure to read into the handle."]
    #[doc = "@param\th\tThe address of a handle into which the file will be read."]
    #[doc = "@return \tAn error code."]
    #[doc = "@remark\t\tYou should free the pointer, when you are done with it, using sysmem_freehandle()."]
    pub fn sysfile_readtohandle(
        f: t_filehandle,
        h: *mut *mut *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tRead the contents of a file into a pointer."]
    #[doc = "@ingroup files"]
    #[doc = "@param\tf\tThe open #t_filehandle structure to read into the handle."]
    #[doc = "@param\tp\tThe address of a pointer into which the file will be read."]
    #[doc = "@return \tAn error code."]
    #[doc = "@remark\t\tYou should free the pointer, when you are done with it, using sysmem_freeptr()."]
    pub fn sysfile_readtoptr(f: t_filehandle, p: *mut *mut ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = " Write part of a file to disk."]
    #[doc = "This function is similar to FSWrite() or fwrite(). It should be used instead"]
    #[doc = "of these functions (or other system-specific file reading routines) in"]
    #[doc = "order to make max external code that will compile cross-platform. The"]
    #[doc = "function writes \"count\" bytes from \"bufptr\" into file handle at current"]
    #[doc = "file position. The byte count actually written is set in \"count\", and the"]
    #[doc = "file position is updated by the actual byte count written."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tf\t\tThe t_filehandle structure of the file to which the user wants to write."]
    #[doc = "@param\tcount\tPointer to the number of bytes that will be written to the file at the current file position."]
    #[doc = "The byte count actually written is returned to this value."]
    #[doc = "@param\tbufptr\tPointer to the buffer that the data will be read from."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn sysfile_write(
        f: t_filehandle,
        count: *mut t_ptr_size,
        bufptr: *const ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the size of a file handle."]
    #[doc = "This function is similar to and should be used instead of SetEOF()."]
    #[doc = "The function sets the size of file handle in bytes, specified by �“logeof?."]
    #[doc = ""]
    #[doc = "@ingroup\t\tfiles"]
    #[doc = "@param\tf\t\tThe file's #t_filehandle structure."]
    #[doc = "@param\tlogeof\tThe file size in bytes."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn sysfile_seteof(f: t_filehandle, logeof: t_ptr_size) -> t_max_err;
}
extern "C" {
    #[doc = "\tGet the size of a file handle."]
    #[doc = "This function is similar to and should be used instead of GetEOF()."]
    #[doc = "The function gets the size of file handle in bytes, and places it in �“logeof?."]
    #[doc = ""]
    #[doc = "@ingroup\t\tfiles"]
    #[doc = "@param\tf\t\tThe file's #t_filehandle structure."]
    #[doc = "@param\tlogeof\tThe file size in bytes is returned to this value."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn sysfile_geteof(f: t_filehandle, logeof: *mut t_ptr_size) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the current file position of a file handle."]
    #[doc = "This function is similar to and should be used instead of SetFPos()."]
    #[doc = "It is used to set the current file position of file handle to by the given"]
    #[doc = "number of offset bytes relative to the mode used, as defined in #t_sysfile_pos_mode."]
    #[doc = ""]
    #[doc = "@ingroup\t\tfiles"]
    #[doc = "@param\tf\t\tThe file's #t_filehandle structure."]
    #[doc = "@param\tmode\tMode from which the offset will be calculated, as defined in #t_sysfile_pos_mode."]
    #[doc = "@param\toffset\tThe offset in bytes relative to the mode."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn sysfile_setpos(
        f: t_filehandle,
        mode: t_sysfile_pos_mode::Type,
        offset: t_ptr_int,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tGet the current file position of a file handle."]
    #[doc = "This function is similar to and should be used instead of GetFPos()."]
    #[doc = "The function gets the current file position of file handle in bytes, and places it in \"filepos\"."]
    #[doc = ""]
    #[doc = "@ingroup\t\tfiles"]
    #[doc = "@param\tf\t\tThe file's #t_filehandle structure."]
    #[doc = "@param\tfilepos\tThe address of a variable to hold the current file position of file handle in bytes."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn sysfile_getpos(f: t_filehandle, filepos: *mut t_ptr_size) -> t_max_err;
}
extern "C" {
    #[doc = "\tCopy the contents of one file handle to another file handle."]
    #[doc = "@ingroup files"]
    #[doc = "@param\tsrc\t\tThe file handle from which to copy."]
    #[doc = "@param\tdst\t\tThe file handle to which the copy is written."]
    #[doc = "@param\tsize\tThe number of bytes to copy.  If 0 the size of src will be used."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn sysfile_spoolcopy(src: t_filehandle, dst: t_filehandle, size: t_ptr_size) -> t_max_err;
}
extern "C" {
    pub fn sysfile_setobject(f: t_filehandle, o: *mut t_object);
}
extern "C" {
    #[doc = "\tRead a text file from disk."]
    #[doc = "This function reads up to the maximum number of bytes given by"]
    #[doc = "maxlen from file handle at current file position into the htext"]
    #[doc = "handle, performing linebreak translation if set in flags."]
    #[doc = ""]
    #[doc = "@ingroup\t\tfiles"]
    #[doc = "@param\tf\t\tThe #t_filehandle structure of the text file the user wants to open."]
    #[doc = "@param\thtext\tHandle that the data will be read into."]
    #[doc = "@param\tmaxlen\tThe maximum length in bytes to be read into the handle."]
    #[doc = "Passing the value 0L indicates no maximum (i.e. read the entire file)."]
    #[doc = "@param\tflags\tFlags to set linebreak translation as defined in #t_sysfile_text_flags."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn sysfile_readtextfile(
        f: t_filehandle,
        htext: t_handle,
        maxlen: t_ptr_size,
        flags: t_sysfile_text_flags::Type,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tWrite a text file to disk."]
    #[doc = "This function writes a text handle to a text file performing linebreak"]
    #[doc = "translation if set in flags."]
    #[doc = ""]
    #[doc = "@ingroup\t\tfiles"]
    #[doc = "@param\tf\t\tThe #t_filehandle structure of the text file to which the user wants to write."]
    #[doc = "@param\thtext\tHandle that the data that will be read from."]
    #[doc = "@param\tflags\tFlags to set linebreak translation as defined in #t_sysfile_text_flags."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn sysfile_writetextfile(
        f: t_filehandle,
        htext: t_handle,
        flags: t_sysfile_text_flags::Type,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tCreate a #t_filehandle from a pre-existing handle."]
    #[doc = "@ingroup\tfiles"]
    #[doc = "@param\t\th\t\tA handle for some data, data is *not* copied and *not* freed on file close."]
    #[doc = "@param\t\tflags\tPass 0 (additional flags are private)."]
    #[doc = "@param\t\tfh\t\tThe address of a #t_filehandle which will be allocated."]
    #[doc = "@return\t\t\t\tAn error code."]
    pub fn sysfile_openhandle(
        h: *mut *mut ::std::os::raw::c_char,
        flags: t_sysfile_flags::Type,
        fh: *mut t_filehandle,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tCreate a #t_filehandle from a pre-existing pointer."]
    #[doc = "@ingroup\tfiles"]
    #[doc = "@param\t\tp\t\tA pointer to some data. Data is *not* copied and *not* freed on file close."]
    #[doc = "@param\t\tlength\tThe size of p."]
    #[doc = "@param\t\tflags\tPass 0 (additional flags are private)."]
    #[doc = "@param\t\tfh\t\tThe address of a #t_filehandle which will be allocated."]
    #[doc = "@return\t\t\t\tAn error code."]
    pub fn sysfile_openptrsize(
        p: *mut ::std::os::raw::c_char,
        length: t_ptr_size,
        flags: t_sysfile_flags::Type,
        fh: *mut t_filehandle,
    ) -> t_max_err;
}
#[doc = "The Systime data structure."]
#[doc = "@ingroup systime"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _datetime {
    #[doc = "< year"]
    pub year: t_uint32,
    #[doc = "< month, in range 1 through 12"]
    pub month: t_uint32,
    #[doc = "< day, in range 1 through 31"]
    pub day: t_uint32,
    #[doc = "< hour"]
    pub hour: t_uint32,
    #[doc = "< minute"]
    pub minute: t_uint32,
    #[doc = "< second"]
    pub second: t_uint32,
    #[doc = "< (reserved for future use)"]
    pub millisecond: t_uint32,
}
#[test]
fn bindgen_test_layout__datetime() {
    assert_eq!(
        ::std::mem::size_of::<_datetime>(),
        28usize,
        concat!("Size of: ", stringify!(_datetime))
    );
    assert_eq!(
        ::std::mem::align_of::<_datetime>(),
        4usize,
        concat!("Alignment of ", stringify!(_datetime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_datetime>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_datetime),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_datetime>())).month as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_datetime),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_datetime>())).day as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_datetime),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_datetime>())).hour as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_datetime),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_datetime>())).minute as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_datetime),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_datetime>())).second as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_datetime),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_datetime>())).millisecond as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_datetime),
            "::",
            stringify!(millisecond)
        )
    );
}
#[doc = "The Systime data structure."]
#[doc = "@ingroup systime"]
pub type t_datetime = _datetime;
pub mod e_max_dateflags {
    #[doc = "\tFlags for the sysdateformat_formatdatetime() function."]
    #[doc = "@ingroup systime"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< short"]
    pub const SYSDATEFORMAT_FLAGS_SHORT: Type = 1;
    #[doc = "< medium"]
    pub const SYSDATEFORMAT_FLAGS_MEDIUM: Type = 2;
    #[doc = "< long"]
    pub const SYSDATEFORMAT_FLAGS_LONG: Type = 3;
    pub const SYSDATEFORMAT_RELATIVE: Type = 16;
}
extern "C" {
    #[doc = "Find out the operating system’s time in ticks."]
    #[doc = "@ingroup systime"]
    #[doc = "@return\tthe system time in ticks."]
    pub fn systime_ticks() -> t_uint32;
}
extern "C" {
    #[doc = "Find out the operating system’s time in milliseconds."]
    #[doc = "Note that this is approximately the number of milliseconds since the OS was started up."]
    #[doc = "@ingroup systime"]
    #[doc = "@return\tthe system time in milliseconds."]
    pub fn systime_ms() -> t_uint32;
}
extern "C" {
    #[doc = "Find out the current date/time as number of ms since January 1, 1970, GMT."]
    #[doc = "@ingroup systime"]
    #[doc = "@return\tthe number of milliseconds since January 1, 1970, GMT."]
    pub fn systime_datetime_milliseconds() -> t_int64;
}
extern "C" {
    #[doc = "Find out the operating system’s current local date and time."]
    #[doc = "@ingroup systime"]
    #[doc = "@param\td\tReturns the system’s date and time in the local time zone in a #t_datetime data structure."]
    pub fn systime_datetime(d: *mut t_datetime);
}
extern "C" {
    #[doc = "Find out the operating system’s time in seconds since midnight, January 1, 1904, GMT (mac HFS time)."]
    #[doc = "@ingroup systime"]
    #[doc = "@return\tthe system time in seconds since midnight, January 1, 1904, GMT."]
    pub fn systime_seconds() -> t_ptr_uint;
}
extern "C" {
    #[doc = "Convert a time in seconds into a #t_datetime representation."]
    #[doc = "@ingroup systime"]
    #[doc = "@param secs\tA number of seconds since midnight, January 1, 1904, GMT, to be represented as a #t_datetime."]
    #[doc = "@param d\tThe address of a #t_datetime that will be filled to the corresponding time, in the local time zone."]
    pub fn systime_secondstodate(secs: t_ptr_uint, d: *mut t_datetime);
}
extern "C" {
    #[doc = "Convert a #t_datetime representation of time into seconds since midnight, January 1, 1904, GMT."]
    #[doc = "@ingroup\tsystime"]
    #[doc = "@param d\tThe address of a #t_datetime to be converted to seconds. The #t_datetime values are in the local time zone."]
    #[doc = "@return \tThe number of seconds between midnight, January 1, 1904, GMT and the time represented in d."]
    pub fn systime_datetoseconds(d: *const t_datetime) -> t_ptr_uint;
}
extern "C" {
    #[doc = "Fill a #t_datetime struct with a datetime formatted string."]
    #[doc = "For example, the string \"2007-12-24 12:21:00\"."]
    #[doc = "@ingroup\tsystime"]
    #[doc = "@param\t\tstrf\tA string containing the datetime."]
    #[doc = "@param\t\td\t\tThe address of a #t_datetime to fill."]
    pub fn sysdateformat_strftimetodatetime(
        strf: *const ::std::os::raw::c_char,
        d: *mut t_datetime,
    );
}
extern "C" {
    #[doc = "Get a human friendly string representation of a #t_datetime."]
    #[doc = "For example: \"Dec 17, 2020 at 10:48 AM\""]
    #[doc = "or, when dateflags is SYSDATEFORMAT_RELATIVE a string like \"Today\", \"Yesterday\", etc."]
    #[doc = "@ingroup\tsystime"]
    #[doc = "@param\t\td\t\t\tThe address of a #t_datetime to format as a string. The t_datetime entries correspond to the local time."]
    #[doc = "@param\t\tdateflags\tOne of the values defined in #e_max_dateflags."]
    #[doc = "@param\t\ttimeflags\tCurrently unused.  Pass 0."]
    #[doc = "@param\t\ts\t\t\tAn already allocated string to hold the human friendly result."]
    #[doc = "@param\t\tbuflen\t\tThe number of characters allocated to the string s."]
    pub fn sysdateformat_formatdatetime(
        d: *const t_datetime,
        dateflags: ::std::os::raw::c_long,
        timeflags: ::std::os::raw::c_long,
        s: *mut ::std::os::raw::c_char,
        buflen: ::std::os::raw::c_long,
    );
}
pub mod e_max_expr_types {
    #[doc = "\tDefines for ex_type."]
    #[doc = "We treat parenthesis and brackets special to keep a pointer to their match in the content."]
    #[doc = "@ingroup expr"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< an int"]
    pub const ET_INT: Type = 1;
    #[doc = "< a float"]
    pub const ET_FLT: Type = 2;
    #[doc = "< operator"]
    pub const ET_OP: Type = 3;
    #[doc = "< string"]
    pub const ET_STR: Type = 4;
    #[doc = "< a table, the content is a pointer"]
    pub const ET_TBL: Type = 5;
    #[doc = "< a function"]
    pub const ET_FUNC: Type = 6;
    #[doc = "< symbol (\"string\")"]
    pub const ET_SYM: Type = 7;
    #[doc = "< variable symbol (\"$s?\")"]
    pub const ET_VSYM: Type = 8;
    #[doc = "< left parenthesis"]
    pub const ET_LP: Type = 9;
    #[doc = "< left bracket"]
    pub const ET_LB: Type = 16;
    #[doc = "< and integer inlet"]
    pub const ET_II: Type = 17;
    #[doc = "< float inlet"]
    pub const ET_FI: Type = 18;
    #[doc = "< string inlet"]
    pub const ET_SI: Type = 19;
}
#[doc = "\tex_ex."]
#[doc = "@ingroup expr"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ex_ex {
    #[doc = "< content"]
    pub ex_cont: ex_ex__bindgen_ty_1,
    #[doc = "< type of the node"]
    pub ex_type: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ex_ex__bindgen_ty_1 {
    pub v_int: t_atom_long,
    pub v_flt: f64,
    pub op: t_atom_long,
    pub ptr: *mut *mut ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_ex_ex__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ex_ex__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ex_ex__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ex_ex__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ex_ex__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ex_ex__bindgen_ty_1>())).v_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ex_ex__bindgen_ty_1),
            "::",
            stringify!(v_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ex_ex__bindgen_ty_1>())).v_flt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ex_ex__bindgen_ty_1),
            "::",
            stringify!(v_flt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ex_ex__bindgen_ty_1>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ex_ex__bindgen_ty_1),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ex_ex__bindgen_ty_1>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ex_ex__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_ex_ex() {
    assert_eq!(
        ::std::mem::size_of::<ex_ex>(),
        16usize,
        concat!("Size of: ", stringify!(ex_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<ex_ex>(),
        8usize,
        concat!("Alignment of ", stringify!(ex_ex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ex_ex>())).ex_cont as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ex_ex),
            "::",
            stringify!(ex_cont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ex_ex>())).ex_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ex_ex),
            "::",
            stringify!(ex_type)
        )
    );
}
#[doc = "\tex_ex."]
#[doc = "@ingroup expr"]
pub type t_ex_ex = ex_ex;
#[doc = "\tStruct for an instance of expr."]
#[doc = "@ingroup expr"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct expr {
    pub exp_ob: t_object,
    pub exp_outlet: *mut ::std::os::raw::c_void,
    pub exp_stack: *mut t_ex_ex,
    pub exp_var: [t_ex_ex; 9usize],
    #[doc = "< the result of last evaluation"]
    pub exp_res: t_ex_ex,
}
#[test]
fn bindgen_test_layout_expr() {
    assert_eq!(
        ::std::mem::size_of::<expr>(),
        208usize,
        concat!("Size of: ", stringify!(expr))
    );
    assert_eq!(
        ::std::mem::align_of::<expr>(),
        8usize,
        concat!("Alignment of ", stringify!(expr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expr>())).exp_ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(expr),
            "::",
            stringify!(exp_ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expr>())).exp_outlet as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(expr),
            "::",
            stringify!(exp_outlet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expr>())).exp_stack as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(expr),
            "::",
            stringify!(exp_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expr>())).exp_var as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(expr),
            "::",
            stringify!(exp_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expr>())).exp_res as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(expr),
            "::",
            stringify!(exp_res)
        )
    );
}
#[doc = "\tStruct for an instance of expr."]
#[doc = "@ingroup expr"]
pub type t_expr = expr;
extern "C" {
    #[doc = "\tCreate a new expr object."]
    #[doc = "@ingroup expr"]
    #[doc = ""]
    #[doc = "@param\targc\tCount of arguments in argv."]
    #[doc = "@param\targv\tArguments that are used to create the expr. See the example below for details."]
    #[doc = "@param\ttypes\tA pre-existing array of nine t_atoms, that will hold the"]
    #[doc = "types of any variable arguments created in the expr."]
    #[doc = "The types are returned in the a_type field of each"]
    #[doc = "#t_atom. If an argument was not present, #A_NOTHING is returned."]
    #[doc = "@return\t\t\texpr_new() creates an expr object from the arguments in argv and"]
    #[doc = "returns the type of any expr-style arguments contained in argv (i.e."]
    #[doc = "$i1, etc.) in atoms in an array pointed to by types."]
    #[doc = ""]
    #[doc = "@remark\t\t\ttypes should already exist as an array of nine t_atom values, all of which will be filled in by"]
    #[doc = "expr_new(). If an argument was not present, it will set to type"]
    #[doc = "#A_NOTHING. For example, suppose argv pointed to the following atoms:"]
    #[doc = "@code"]
    #[doc = "$i1 (A_SYM)"]
    #[doc = "+ (A_SYM)"]
    #[doc = "$f3 (A_SYM)"]
    #[doc = "+ (A_SYM)"]
    #[doc = "3 (A_LONG)"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "After calling expr_new, types would contain the following:"]
    #[doc = "@code"]
    #[doc = "Index\tArgument\tType\t\tValue"]
    #[doc = "0\t1 ($i1)\t\tA_LONG\t\t0"]
    #[doc = "1\t2\t\tA_NOTHING\t0"]
    #[doc = "2\t3 ($f3)\t\tA_FLOAT\t\t0.0"]
    #[doc = "3\t4\t\tA_NOTHING\t0"]
    #[doc = "4\t5\t\tA_NOTHING\t0"]
    #[doc = "5\t6\t\tA_NOTHING\t0"]
    #[doc = "6\t7\t\tA_NOTHING\t0"]
    #[doc = "7\t8\t\tA_NOTHING\t0"]
    #[doc = "8\t9\t\tA_NOTHING\t0"]
    #[doc = "@endcode"]
    pub fn expr_new(
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
        types: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "\tEvaluate an expression in an expr object."]
    #[doc = "@ingroup expr"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe expr object to evaluate."]
    #[doc = "@param\targc\tCount of arguments in argv."]
    #[doc = "@param\targv\tArray of nine t_atom values that will be substituted for"]
    #[doc = "variable arguments (such as $i1) in the expression."]
    #[doc = "Unused arguments should be of type #A_NOTHING."]
    #[doc = "@param\tresult\tA pre-existing t_atom that will hold the type and value"]
    #[doc = "of the result of evaluating the expression."]
    #[doc = "@return\t\t\t."]
    #[doc = ""]
    #[doc = "@remark\t\t\tEvaluates the expression in an expr object with arguments in argv and"]
    #[doc = "returns the type and value of the evaluated expression as a t_atom in"]
    #[doc = "result. result need only point to a single #t_atom, but argv should"]
    #[doc = "contain at least argc t_atom values. If, as in the example shown above under"]
    #[doc = "expr_new(), there are “gaps” between arguments, they should be filled"]
    #[doc = "in with t_atom of type #A_NOTHING."]
    pub fn expr_eval(
        x: *mut t_expr,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
        result: *mut t_atom,
    ) -> ::std::os::raw::c_short;
}
pub mod e_max_path_styles {
    #[doc = "Constants that determine the output of path_nameconform()."]
    #[doc = "@ingroup files"]
    #[doc = "@see #e_max_path_types"]
    #[doc = "@see path_nameconform()"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< use PATH_STYLE_MAX_PLAT"]
    pub const PATH_STYLE_MAX: Type = 0;
    #[doc = "< use PATH_STYLE_NATIVE_PLAT"]
    pub const PATH_STYLE_NATIVE: Type = 1;
    #[doc = "< ':'  sep, \"vol:\"   volume, \":\"   relative, \"^:\" boot"]
    pub const PATH_STYLE_COLON: Type = 2;
    #[doc = "< '/'  sep, \"vol:/\"  volume, \"./\"  relative, \"/\"  boot"]
    pub const PATH_STYLE_SLASH: Type = 3;
    #[doc = "< '\\\\' sep, \"vol:\\\\\" volume, \".\\\\\" relative, \"\\\\\" boot"]
    pub const PATH_STYLE_NATIVE_WIN: Type = 4;
}
pub mod e_max_path_types {
    #[doc = "Constants that determine the output of path_nameconform()."]
    #[doc = "@ingroup files"]
    #[doc = "@see #e_max_path_styles"]
    #[doc = "@see path_nameconform()"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< ignore"]
    pub const PATH_TYPE_IGNORE: Type = 0;
    #[doc = "< absolute path"]
    pub const PATH_TYPE_ABSOLUTE: Type = 1;
    #[doc = "< relative path"]
    pub const PATH_TYPE_RELATIVE: Type = 2;
    #[doc = "< boot path"]
    pub const PATH_TYPE_BOOT: Type = 3;
    #[doc = "< Cycling '74 folder"]
    pub const PATH_TYPE_C74: Type = 4;
    #[doc = "< path"]
    pub const PATH_TYPE_PATH: Type = 5;
    #[doc = "< desktop"]
    pub const PATH_TYPE_DESKTOP: Type = 6;
    #[doc = "< \"home\""]
    pub const PATH_TYPE_TILDE: Type = 7;
    #[doc = "< /tmp"]
    pub const PATH_TYPE_TEMPFOLDER: Type = 8;
    #[doc = "< ~/Documents/Max 8"]
    pub const PATH_TYPE_USERMAX: Type = 9;
    #[doc = "< combi: try PATH_TYPE_C74, PATH_TYPE_TILDE, PATH_TYPE_RELATIVE, PATH_TYPE_ABSOLUTE in that order"]
    pub const PATH_TYPE_MAXDB: Type = 10;
    #[doc = "< AudioUnit/VST plugin (an .auinfo or .vstinfo file in AppSupport)"]
    pub const PATH_TYPE_PLUGIN: Type = 11;
    pub const PATH_TYPE_PACKAGE: Type = 12;
}
pub mod e_max_fileinfo_flags {
    #[doc = "Flags used to represent properties of a file in a #t_fileinfo struct."]
    #[doc = "@ingroup files"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< alias"]
    pub const PATH_FILEINFO_ALIAS: Type = 1;
    #[doc = "< folder"]
    pub const PATH_FILEINFO_FOLDER: Type = 2;
    #[doc = "< package (Mac-only)"]
    pub const PATH_FILEINFO_PACKAGE: Type = 4;
}
pub mod e_max_path_folder_flags {
    #[doc = " Flags used by functions such as path_foldernextfile() and path_openfolder()."]
    #[doc = "@ingroup files"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< if not true, then a Mac OS package will be reported as a file rather than a folder."]
    pub const PATH_REPORTPACKAGEASFOLDER: Type = 1;
    #[doc = "< sniff"]
    pub const PATH_FOLDER_SNIFF: Type = 2;
    #[doc = "< no alias resolution"]
    pub const PATH_NOALIASRESOLUTION: Type = 4;
}
pub mod e_max_openfile_permissions {
    #[doc = "Permissions or mode with which to open a file."]
    #[doc = "@ingroup files"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< Read mode"]
    pub const PATH_READ_PERM: Type = 1;
    #[doc = "< Write mode"]
    pub const PATH_WRITE_PERM: Type = 2;
    #[doc = "< Read/Write mode"]
    pub const PATH_RW_PERM: Type = 3;
}
pub mod e_max_path_indices {
    pub type Type = ::std::os::raw::c_uint;
    pub const PATH_STARTUP_PATH: Type = 0;
    pub const PATH_SEARCH_PATH: Type = 1;
    pub const PATH_ACTION_PATH: Type = 2;
    pub const PATH_HELP_PATH: Type = 3;
}
pub mod e_max_typelists {
    pub type Type = ::std::os::raw::c_uint;
    pub const TYPELIST_MAXFILES: Type = 1;
    pub const TYPELIST_EXTERNS: Type = 2;
    pub const TYPELIST_COLLECTIVES: Type = 4;
    pub const TYPELIST_MAXFORLIVE: Type = 8;
    pub const TYPELIST_SNAPSHOTS: Type = 16;
    pub const TYPELIST_GENPATCHERS: Type = 32;
    pub const TYPELIST_SNIPPETS: Type = 64;
}
#[doc = "Information about a file."]
#[doc = "@ingroup files"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fileinfo {
    #[doc = "< type (four-char-code)"]
    pub type_: t_fourcc,
    #[doc = "< Mac-only creator (four-char-code)"]
    pub creator: t_fourcc,
    #[doc = "< this was date but it wasn't populated and it wasn't used"]
    pub unused: t_uint32,
    #[doc = "< One of the values defined in #e_max_fileinfo_flags"]
    pub flags: t_int32,
}
#[test]
fn bindgen_test_layout__fileinfo() {
    assert_eq!(
        ::std::mem::size_of::<_fileinfo>(),
        16usize,
        concat!("Size of: ", stringify!(_fileinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_fileinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(_fileinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fileinfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fileinfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fileinfo>())).creator as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fileinfo),
            "::",
            stringify!(creator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fileinfo>())).unused as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fileinfo),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fileinfo>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_fileinfo),
            "::",
            stringify!(flags)
        )
    );
}
#[doc = "Information about a file."]
#[doc = "@ingroup files"]
pub type t_fileinfo = _fileinfo;
#[doc = " The pathlink data structure. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = "@ingroup files"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pathlink {
    pub l_path: ::std::os::raw::c_short,
    pub l_ancestor: ::std::os::raw::c_short,
    pub l_temp: ::std::os::raw::c_short,
    pub l_next: *mut _pathlink,
    pub l_parent: ::std::os::raw::c_short,
    pub l_recursive: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__pathlink() {
    assert_eq!(
        ::std::mem::size_of::<_pathlink>(),
        24usize,
        concat!("Size of: ", stringify!(_pathlink))
    );
    assert_eq!(
        ::std::mem::align_of::<_pathlink>(),
        8usize,
        concat!("Alignment of ", stringify!(_pathlink))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pathlink>())).l_path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pathlink),
            "::",
            stringify!(l_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pathlink>())).l_ancestor as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_pathlink),
            "::",
            stringify!(l_ancestor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pathlink>())).l_temp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pathlink),
            "::",
            stringify!(l_temp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pathlink>())).l_next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pathlink),
            "::",
            stringify!(l_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pathlink>())).l_parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pathlink),
            "::",
            stringify!(l_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pathlink>())).l_recursive as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_pathlink),
            "::",
            stringify!(l_recursive)
        )
    );
}
#[doc = " The pathlink data structure. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = "@ingroup files"]
pub type t_pathlink = _pathlink;
pub mod e_max_searchpath_flags {
    pub type Type = ::std::os::raw::c_uint;
    pub const PATH_FLAGS_RECURSIVE: Type = 1;
    pub const PATH_FLAGS_READONLY: Type = 16;
    pub const PATH_FLAGS_INCLUDEINCOLLECTIVE: Type = 256;
}
extern "C" {
    #[doc = "Retrieve the Path ID of the Max application."]
    #[doc = "@ingroup files"]
    #[doc = "@return\tThe path id."]
    pub fn path_getapppath() -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_getsupportpath() -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_tofsref(
        path: ::std::os::raw::c_short,
        filename: *const ::std::os::raw::c_char,
        ref_: *mut FSRef,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_fromfsref(ref_: *mut FSRef) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Find a Max document by name in the search path."]
    #[doc = "This routine performs the same function as the routine path_getdefault()."]
    #[doc = "locatefile() searches through the directories specified by the user for"]
    #[doc = "Patcher files and tables in the File Preferences dialog as well as the"]
    #[doc = "current default path (see path_getdefault) and the directory"]
    #[doc = "containing the Max application"]
    #[doc = ""]
    #[doc = "@ingroup\tfiles"]
    #[doc = "@param\tname\tA C string that is the name of the file to look for."]
    #[doc = "@param\toutvol\tThe Path ID containing the location of the file if it is found."]
    #[doc = "@param\tbinflag\tIf the file found is in binary format (it's of type 'maxb') 1 is returned here;"]
    #[doc = "if it's in text format, 0 is returned."]
    #[doc = ""]
    #[doc = "@return\t\t\tIf a file is found with the name"]
    #[doc = "specified by filename, locatefile returns 0, otherwise it returns non-zero."]
    #[doc = ""]
    #[doc = "@remark\t\t\tfilename and vol can then be passed to binbuf_read to read and open file the file."]
    #[doc = "When using MAXplay, the search path consists of all subdirectories of"]
    #[doc = "the directory containing the MAXplay application. locatefile only"]
    #[doc = "searches for files of type 'maxb' and 'TEXT.'"]
    #[doc = ""]
    #[doc = "@see\t\t\tlocatefile_extended()"]
    pub fn locatefile(
        name: *const ::std::os::raw::c_char,
        outvol: *mut ::std::os::raw::c_short,
        binflag: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Find a Max document by name in the search path."]
    #[doc = "This function searches through the same directories as locatefile,"]
    #[doc = "but allows you to specify a type and creator of your own."]
    #[doc = ""]
    #[doc = "@ingroup\tfiles"]
    #[doc = "@param\tname\t\tA C string that is the name of the file to look for."]
    #[doc = "@param\toutvol\t\tThe Path ID containing the location of the file if it is found."]
    #[doc = "@param\tfiletype\tThe filetype of the file to look for."]
    #[doc = "If you pass 0L, files of all filetypes are considered."]
    #[doc = "@param\tcreator\t\tThe creator of the file to look for. If you pass 0L, files with any creator are considered."]
    #[doc = ""]
    #[doc = "@return\t\t\tIf a file is found with the name"]
    #[doc = "specified by filename, locatefile returns 0, otherwise it returns non-zero."]
    #[doc = ""]
    #[doc = "@see\t\t\tlocatefile_extended()"]
    pub fn locatefiletype(
        name: *const ::std::os::raw::c_char,
        outvol: *mut ::std::os::raw::c_short,
        filetype: t_fourcc,
        creator: t_fourcc,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn locatefilelist(
        name: *mut ::std::os::raw::c_char,
        outvol: *mut ::std::os::raw::c_short,
        outtype: *mut t_fourcc,
        filetypelist: *mut t_fourcc,
        numtypes: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Find a file by name."]
    #[doc = "If a complete path is not specified, search for the name in the search path."]
    #[doc = "This is the preferred method for file searching since its introduction in Max version 4."]
    #[doc = ""]
    #[doc = "@ingroup\tfiles"]
    #[doc = "@version\t4.0"]
    #[doc = ""]
    #[doc = "@param\tname\t\t\tThe file name for the search, receives actual filename upon return."]
    #[doc = "@param\toutvol\t\t\tThe Path ID of the file (if found)."]
    #[doc = "@param\touttype\t\t\tThe file type of the file (if found)."]
    #[doc = "@param\tfiletypelist\tThe file type(s) for which you are searching for, or NULL if any type is acceptable."]
    #[doc = "@param\tnumtypes\t\tThe number of file types in the typelist array (1 if a single entry, 0 if any type is acceptable)."]
    #[doc = ""]
    #[doc = "@return\t\t\t\t\tIf a file is found with the name"]
    #[doc = "specified by filename, locatefile returns 0, otherwise it returns non-zero."]
    #[doc = ""]
    #[doc = "@see\t\t\t\t\tpath_getdefault()."]
    #[doc = ""]
    #[doc = "@remark\t\t\tThe old file search routines locatefile() and locatefiletype()"]
    #[doc = "are still supported in Max 4, but the use of a new routine"]
    #[doc = "locatefile_extended() is highly recommended. However,"]
    #[doc = "locatefile_extended() has an important difference from"]
    #[doc = "locatefile() and locatefiletype() that may require some rewriting"]
    #[doc = "of your code. <em>It modifies its name parameter</em> in certain cases, while"]
    #[doc = "locatefile() and locatefiletype() do not. The two cases where it"]
    #[doc = "could modify the incoming filename string are 1) when an alias is"]
    #[doc = "specified, the file pointed to by the alias is returned; and 2) when a full"]
    #[doc = "path is specified, the output is the filename plus the path number of the"]
    #[doc = "folder it's in."]
    #[doc = ""]
    #[doc = "This is important because many people pass the s_name field of a"]
    #[doc = "#t_symbol to locatefile(). If the name field of a #t_symbol were to be"]
    #[doc = "modified, the symbol table would be corrupted. To avoid this problem,"]
    #[doc = "use strncpy_zero() to copy the contents of a #t_symbol to a character string first,"]
    #[doc = "as shown below:"]
    #[doc = "@code"]
    #[doc = "char filename[MAX_FILENAME_CHARS];"]
    #[doc = "strncpy_zero(filename,str->s_name, MAX_FILENAME_CHARS);"]
    #[doc = "result = locatefile_extended(filename,&path,&type,typelist,1);"]
    #[doc = "@endcode"]
    pub fn locatefile_extended(
        name: *mut ::std::os::raw::c_char,
        outvol: *mut ::std::os::raw::c_short,
        outtype: *mut t_fourcc,
        filetypelist: *const t_fourcc,
        numtypes: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Resolve a Path ID plus a (possibly extended) file name"]
    #[doc = "into a path that identifies the file's directory and a filename."]
    #[doc = "This routine converts a name and Path ID to a standard form in which"]
    #[doc = "the name has no path information and does not refer to an aliased file."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tname\tA file name (which may be fully or partially qualified),"]
    #[doc = "will contain the file name on return."]
    #[doc = "@param\tpath\tThe Path ID to be resolved."]
    #[doc = "@param\toutpath\tThe Path ID of the returned file name."]
    #[doc = ""]
    #[doc = "@return\t\t \tReturns 0 if successful."]
    pub fn path_resolvefile(
        name: *mut ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        outpath: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Retrive a #t_fileinfo structure from a file/path combination."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tname\tThe file name to be queried."]
    #[doc = "@param\tpath\tThe Path ID of the file."]
    #[doc = "@param\tinfo\tThe address of a #t_fileinfo structure to contain the file information."]
    #[doc = ""]
    #[doc = "@return\t\t \tReturns 0 if successful, otherwise it returns an OS-specific error code."]
    pub fn path_fileinfo(
        name: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        info: *mut t_fileinfo,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_tempfolder() -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_desktopfolder() -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_userdocfolder() -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_usermaxfolder() -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_createfolder(
        path: ::std::os::raw::c_short,
        name: *const ::std::os::raw::c_char,
        newpath: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_copyfile(
        srcpath: ::std::os::raw::c_short,
        srcname: *mut ::std::os::raw::c_char,
        dstpath: ::std::os::raw::c_short,
        dstname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_copytotempfile(
        srcpath: ::std::os::raw::c_short,
        srcname: *mut ::std::os::raw::c_char,
        outpath: *mut ::std::os::raw::c_short,
        outname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_copyfolder(
        srcpath: ::std::os::raw::c_short,
        dstpath: ::std::os::raw::c_short,
        dstname: *const ::std::os::raw::c_char,
        recurse: ::std::os::raw::c_long,
        newpath: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_getpath(
        path: ::std::os::raw::c_short,
        name: *const ::std::os::raw::c_char,
        outpath: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_getname(
        path: ::std::os::raw::c_short,
        name: *mut ::std::os::raw::c_char,
        outpath: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Create a fully qualified file name from a Path ID/file name combination."]
    #[doc = "Unlike path_topotentialname(), this routine will only convert a"]
    #[doc = "pathname pair to a valid path string if the path exists."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tpath\tThe path to be used."]
    #[doc = "@param\tfile\tThe file name to be used."]
    #[doc = "@param\tname\tLoaded with the fully extended file name on return."]
    #[doc = "@return\t\t \tReturns 0 if successful, otherwise it returns an OS-specific error code."]
    pub fn path_topathname(
        path: ::std::os::raw::c_short,
        file: *const ::std::os::raw::c_char,
        name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Create a filename and Path ID combination from a fully qualified file name."]
    #[doc = "Note that path_frompathname() does not require that the file actually exist."]
    #[doc = "In this way you can use it to convert a full path you may have received as an"]
    #[doc = "argument to a file writing message to a form appropriate to provide to"]
    #[doc = "a routine such as path_createfile()."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tname\t\tThe extended file path to be converted."]
    #[doc = "@param\tpath\t\tContains the Path ID on return."]
    #[doc = "@param\tfilename\tContains the file name on return."]
    #[doc = "@return\t\t \t\tReturns 0 if successful, otherwise it returns an OS-specific error code."]
    pub fn path_frompathname(
        name: *const ::std::os::raw::c_char,
        path: *mut ::std::os::raw::c_short,
        filename: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_frompotentialpathname(
        name: *const ::std::os::raw::c_char,
        path: *mut ::std::os::raw::c_short,
        filename: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_splitnames(
        pathname: *const ::std::os::raw::c_char,
        foldername: *mut ::std::os::raw::c_char,
        filename: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn path_getnext(
        list: *mut t_pathlink,
        val: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Install a path as the default search path."]
    #[doc = "The default path is searched before the Max search path. For instance,"]
    #[doc = "when loading a patcher from a directory outside the search path, the"]
    #[doc = "patcher's directory is searched for files before the search path."]
    #[doc = "path_setdefault() allows you to set a path as the default."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tpath\t\tThe path to use as the search path."]
    #[doc = "If path is already part of the Max Search path, it will not be added"]
    #[doc = "(since, by default, it will be searched during file searches)."]
    #[doc = "@param\trecursive\tIf non-zero, all subdirectories will be installed in the default search list."]
    #[doc = "Be very careful with the use of the recursive argument.  It has the capacity to"]
    #[doc = "slow down file searches dramatically as the list of folders is being built."]
    #[doc = "Max itself never creates a hierarchical default search path."]
    pub fn path_setdefault(path: ::std::os::raw::c_short, recursive: ::std::os::raw::c_short);
}
extern "C" {
    #[doc = "Retrieve the Path ID of the default search path."]
    #[doc = "@ingroup files"]
    #[doc = "@return\tThe path id of the default search path."]
    pub fn path_getdefault() -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Determine the modification date of the selected path."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tpath\tThe Path ID of the directory to check."]
    #[doc = "@param\tdate\tThe last modification date of the directory."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn path_getmoddate(
        path: ::std::os::raw::c_short,
        date: *mut t_ptr_uint,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Determine the modification date of the selected file."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tfilename\tThe name of the file to query."]
    #[doc = "@param\tpath\t\tThe Path ID of the file."]
    #[doc = "@param\tdate\t\tThe last modification date of the file upon return."]
    #[doc = "@return\t\t\t\tAn error code."]
    pub fn path_getfilemoddate(
        filename: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        date: *mut t_ptr_uint,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_getfilecreationdate(
        filename: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        date: *mut t_ptr_uint,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn nameinpath(
        name: *const ::std::os::raw::c_char,
        ref_: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_nameinpath(
        name: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        ref_: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_sysnameinpath(
        name: *const ::std::os::raw::c_char,
        ref_: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Prepare a directory for iteration."]
    #[doc = "@ingroup files"]
    #[doc = "@param\tpath\tThe directory Path ID to open."]
    #[doc = "@return\t\t\tThe return value of this routine is an internal \"folder state\" structure"]
    #[doc = "used for further folder manipulation. It should be saved and used for"]
    #[doc = "calls to path_foldernextfile() and path_closefolder()."]
    #[doc = "If the folder cannot be found or accessed, path_openfolder() returns 0."]
    pub fn path_openfolder(path: ::std::os::raw::c_short) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Get the next file in the directory."]
    #[doc = "In conjunction with path_openfolder() and path_closefolder(),"]
    #[doc = "this routine allows you to iterate through all of the files in a path."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\txx\t\t\tThe \"folder state\" value returned by path_openfolder()."]
    #[doc = "@param\tfiletype\tContains the file type of the file type on return."]
    #[doc = "@param\tname\t\tContains the file name of the next file on return."]
    #[doc = "@param\tdescend\t\tUnused."]
    #[doc = "@return\t\t\t\tReturns non-zero if successful, and zero when there are no more files."]
    #[doc = "@see\t\t\t\t#e_max_path_folder_flags"]
    pub fn path_foldernextfile(
        xx: *mut ::std::os::raw::c_void,
        filetype: *mut t_fourcc,
        name: *mut ::std::os::raw::c_char,
        descend: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Complete a directory iteration."]
    #[doc = "@ingroup files"]
    #[doc = "@param\tx\tThe \"folder state\" value originally returned by path_openfolder()."]
    pub fn path_closefolder(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn path_renamefile(
        name: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        newname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_getprefstring(
        preftype: ::std::os::raw::c_long,
        index: ::std::os::raw::c_long,
        s: *mut *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn path_setprefstring(
        preftype: ::std::os::raw::c_long,
        index: ::std::os::raw::c_long,
        s: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        label: *mut t_symbol,
        update: ::std::os::raw::c_short,
    );
}
extern "C" {
    #[doc = "Open a file given a filename and Path ID."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tname\tThe name of the file to be opened."]
    #[doc = "@param\tpath\tThe Path ID of the file to be opened."]
    #[doc = "@param\tref\t\tA #t_filehandle reference to the opened file will be returned in this parameter."]
    #[doc = "@param\tperm\tThe permission for the opened file as defined in #e_max_openfile_permissions."]
    #[doc = "@return \t\tAn error code."]
    pub fn path_opensysfile(
        name: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        ref_: *mut t_filehandle,
        perm: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Create a file given a type code, a filename, and a Path ID."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tname\tThe name of the file to be opened."]
    #[doc = "@param\tpath\tThe Path ID of the file to be opened."]
    #[doc = "@param\ttype\tThe file type of the created file."]
    #[doc = "@param\tref\t\tA #t_filehandle reference to the opened file will be returned in this parameter."]
    #[doc = "@return \t\tAn error code."]
    pub fn path_createsysfile(
        name: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        type_: t_fourcc,
        ref_: *mut t_filehandle,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_createressysfile(
        name: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        type_: t_fourcc,
        ref_: *mut t_filehandle,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Convert a source path string to destination path string using the specified style and type."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tsrc\t\tA pointer to source character string to be converted."]
    #[doc = "@param\tdst\t\tA pointer to destination character string."]
    #[doc = "@param\tstyle\tThe destination filepath style, as defined in #e_max_path_styles"]
    #[doc = "@param\ttype\tThe destination filepath type, as defined in #e_max_path_types"]
    #[doc = "@return\t\t\tAn error code."]
    #[doc = ""]
    #[doc = "@see #MAX_PATH_CHARS"]
    pub fn path_nameconform(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        style: ::std::os::raw::c_long,
        type_: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_deletefile(
        name: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_extendedfileinfo(
        name: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        info: *mut t_fileinfo,
        typelist: *const t_fourcc,
        numtypes: ::std::os::raw::c_short,
        sniff: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_getstyle(name: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_getseparator(name: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn path_fileisresource(
        name: *mut ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Create a fully qualified file name from a Path ID/file name combination,"]
    #[doc = "regardless of whether or not the file exists on disk."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tpath\tThe path to be used."]
    #[doc = "@param\tfile\tThe file name to be used."]
    #[doc = "@param\tname\tLoaded with the fully extended file name on return."]
    #[doc = "@param\tcheck\tFlag to check if a file with the given path exists."]
    #[doc = "@return\t\t \tReturns 0 if successful, otherwise it returns an OS-specific error code."]
    #[doc = ""]
    #[doc = "@see path_topathname()"]
    pub fn path_topotentialname(
        path: ::std::os::raw::c_short,
        file: *const ::std::os::raw::c_char,
        name: *mut ::std::os::raw::c_char,
        check: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_topotentialunicodename(
        path: ::std::os::raw::c_short,
        file: *mut ::std::os::raw::c_char,
        name: *mut *mut ::std::os::raw::c_ushort,
        outlen: *mut ::std::os::raw::c_long,
        check: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_fromunicodepathname(
        name: *mut ::std::os::raw::c_ushort,
        path: *mut ::std::os::raw::c_short,
        filename: *mut ::std::os::raw::c_char,
        check: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Translates a Max path+filename combo into a correct POSIX absolute path that can be used to pass to libraries"]
    #[doc = "and also handles multiple volumes correctly."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tin_path\t\t\tThe Max path reference"]
    #[doc = "@param\tin_filename\t\tThe name of the file in that path."]
    #[doc = "@param\tout_filepath\tA string that is MAX_PATH_CHARS in length, which will receive the formatted absolute path upon return."]
    #[doc = "@return\t\t\t\t\tReturns 0 if successful."]
    #[doc = ""]
    #[doc = "@see path_topotentialname()"]
    #[doc = "@see path_nameconform()"]
    #[doc = ""]
    #[doc = "@code"]
    #[doc = "path_toabsolutesystempath(pathid, \"\", filestring);"]
    #[doc = "path_nameconform(filestring, sNativeQualifiedPathname, PATH_STYLE_NATIVE, PATH_TYPE_PATH);"]
    #[doc = "@endcode"]
    pub fn path_toabsolutesystempath(
        in_path: ::std::os::raw::c_short,
        in_filename: *const ::std::os::raw::c_char,
        out_filepath: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convert a path to an absolutepath as done by the absolutepath object in Max."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\treturned_path\tAddress to a symbol pointer which will be filled-in upon successful return."]
    #[doc = "@param\ts\t\t\t\tIncoming (non-absolute) path."]
    #[doc = "@param\tfiletypelist\tThe first of an array of file types to limit the search."]
    #[doc = "@param\tnumtypes\t\tThe number of entries in the filetypelist parameter."]
    #[doc = "@return\t\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see path_topathname()"]
    #[doc = "@see locatefile_extended()"]
    pub fn path_absolutepath(
        returned_path: *mut *mut t_symbol,
        s: *const t_symbol,
        filetypelist: *const t_fourcc,
        numtypes: ::std::os::raw::c_short,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Determine if a path/filename combination exists on disk."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tpath\t\t\tThe Max path reference."]
    #[doc = "@param filename\t\tThe name of the file in that path to test."]
    #[doc = "@return\t\t\t\t1 = the specified file exists, 0 = the specified file does not exist."]
    #[doc = ""]
    #[doc = "@see path_topathname()"]
    #[doc = "@see path_topotentialname()"]
    #[doc = ""]
    pub fn path_exists(
        path: ::std::os::raw::c_short,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn path_addnamed(
        pathtype: ::std::os::raw::c_long,
        name: *mut ::std::os::raw::c_char,
        recursive: ::std::os::raw::c_short,
        permanent: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn path_removefromlist(list: *mut *mut t_pathlink, parent: ::std::os::raw::c_short);
}
extern "C" {
    pub fn path_collpathnamefrompath(
        vol: ::std::os::raw::c_short,
        collvol: *mut ::std::os::raw::c_short,
        filename: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn path_inpath(
        testvol: ::std::os::raw::c_short,
        topvol: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn defvolume() -> ::std::os::raw::c_short;
}
pub mod e_max_wind_advise_result {
    #[doc = " Returned values from wind_advise()"]
    #[doc = "@ingroup misc"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< Yes button was choosen"]
    pub const aaYes: Type = 1;
    #[doc = "< No button was choosen"]
    pub const aaNo: Type = 2;
    #[doc = "< Cancel button was choosen"]
    pub const aaCancel: Type = 3;
}
extern "C" {
    #[doc = "\tThrow a dialog which may have text and up to three buttons."]
    #[doc = "For example, this can be used to ask \"Save changes before...\""]
    #[doc = "@ingroup\tmisc"]
    #[doc = "@param\tw\tThe window with which this dialog is associated."]
    #[doc = "@param\ts\tA string with any sprintf()-like formatting to be displayed."]
    #[doc = "@param\t...\tAny variables that should be substituted in the string defined by s."]
    #[doc = "@return\t\tOne of the values defined in #e_max_wind_advise_result, depending on what the user selected."]
    pub fn wind_advise(
        w: *mut t_object,
        s: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn wind_advise_explain(
        w: *mut t_object,
        note: *const ::std::os::raw::c_char,
        explanation: *const ::std::os::raw::c_char,
        b1: *const ::std::os::raw::c_char,
        b2: *const ::std::os::raw::c_char,
        b3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "\tChange the cursor."]
    #[doc = "@ingroup\t\tmisc"]
    #[doc = ""]
    #[doc = "@param\twhich\tOne of the following predefined cursors:"]
    #[doc = "@code"]
    #[doc = "#define C_ARROW\t\t1"]
    #[doc = "#define C_WATCH\t\t2"]
    #[doc = "#define C_IBEAM\t\t3"]
    #[doc = "#define C_HAND\t\t4"]
    #[doc = "#define\tC_CROSS\t\t5"]
    #[doc = "#define C_PENCIL\t6"]
    #[doc = "#define\tC_GROW\t\t8"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark\t\twind_setcursor() keeps track of what the cursor was previously set"]
    #[doc = "to, so if something else has changed the cursor, you may not see a new"]
    #[doc = "cursor if you set it to the previous argument to wind_setcursor()."]
    #[doc = ""]
    #[doc = "The solution is to call wind_setcursor(0) before calling it with the"]
    #[doc = "desired cursor constant. Use wind_setcursor(-1) to tell Max you’ll set"]
    #[doc = "the cursor to your own cursor directly."]
    pub fn wind_setcursor(which: ::std::os::raw::c_short);
}
extern "C" {
    pub fn setup(
        ident: *mut *mut t_messlist,
        makefun: method,
        freefun: method,
        size: t_getbytes_size,
        menufun: method,
        type_: ::std::os::raw::c_short,
        ...
    );
}
extern "C" {
    pub fn addmess(f: method, s: *mut ::std::os::raw::c_char, type_: ::std::os::raw::c_short, ...);
}
extern "C" {
    pub fn addbang(f: method);
}
extern "C" {
    pub fn addint(f: method);
}
extern "C" {
    pub fn addfloat(f: method);
}
extern "C" {
    pub fn addinx(f: method, n: ::std::os::raw::c_short);
}
extern "C" {
    pub fn addftx(f: method, n: ::std::os::raw::c_short);
}
extern "C" {
    pub fn newobject(maxclass: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Release the memory used by a Max object."]
    #[doc = "freeobject() calls an object's free function, if any, then disposes the"]
    #[doc = "memory used by the object itself. freeobject() should be used on any"]
    #[doc = "instance of a standard Max object data structure, with the exception of"]
    #[doc = "Qelems and Atombufs. Clocks, Binbufs, Proxies, Exprs, etc. should be freed with freeobject()."]
    #[doc = ""]
    #[doc = "@ingroup\tclass_old"]
    #[doc = "@param\t\top\tThe object instance pointer to free."]
    #[doc = ""]
    #[doc = "@remark\t\tThis function can be replaced by the use of object_free()."]
    #[doc = "Unlike freeobject(), object_free() checkes to make sure the pointer is"]
    #[doc = "not NULL before trying to free it."]
    #[doc = ""]
    #[doc = "@see newobject()"]
    #[doc = "@see object_free()"]
    pub fn freeobject(op: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " Make a new instance of an existing Max class."]
    #[doc = "@ingroup class_old"]
    #[doc = ""]
    #[doc = "@param s\tclassName Symbol specifying the name of the class of the instance to be created."]
    #[doc = "@param argc\tCount of arguments in argv."]
    #[doc = "@param argv\tArray of t_atoms; arguments to the class's instance creation function."]
    #[doc = ""]
    #[doc = "@return \tA pointer to the created object, or 0 if the class"]
    #[doc = "didn't exist or there was another type of error in creating the instance."]
    #[doc = ""]
    #[doc = "@remark This function creates a new instance of the specified class. Using"]
    #[doc = "newinstance is equivalent to typing something in a New Object box"]
    #[doc = "when using Max. The difference is that no object box is created in any"]
    #[doc = "Patcher window, and you can send messages to the object directly"]
    #[doc = "without connecting any patch cords. The messages can either be type-"]
    #[doc = "checked (using typedmess) or non-type-checked (using the members"]
    #[doc = "of the getfn family)."]
    #[doc = ""]
    #[doc = "This function is useful for taking advantage of other already-defined"]
    #[doc = "objects that you would like to use 'privately' in your object, such as"]
    #[doc = "tables. See the source code for the coll object for an example of using a"]
    #[doc = "privately defined class."]
    pub fn newinstance(
        s: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn finder_addclass(
        category: *mut ::std::os::raw::c_char,
        classString: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn alias(name: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "@ingroup class_old"]
    pub fn class_noinlet(m: *mut t_messlist);
}
extern "C" {
    #[doc = "Use class_setname() to associate you object's name with it's filename"]
    #[doc = "on disk."]
    #[doc = ""]
    #[doc = "@ingroup class_old"]
    #[doc = "@param\tobname\t\tA character string with the name of your object class as it appears in Max."]
    #[doc = "@param\tfilename\tA character string with the name of your external's file as it appears on disk."]
    pub fn class_setname(
        obname: *mut ::std::os::raw::c_char,
        filename: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn force_install(classname: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn loader_setpath(type_: t_fourcc, path: ::std::os::raw::c_short);
}
extern "C" {
    #[doc = "Allocate small amounts of non-relocatable memory."]
    #[doc = "As of Max 5 it is unified with sysmem_newptr(), which is the preferred method for allocating memory."]
    #[doc = "@ingroup memory"]
    #[doc = "@param\tsize\tThe size to allocate in bytes (up to 32767 bytes)."]
    #[doc = "@return\t\t\tA pointer to the allocated memory."]
    pub fn getbytes(size: t_getbytes_size) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "Free memory allocated with getbytes()."]
    #[doc = "As of Max 5 it is unified with sysmem_newptr(), which is the preferred method for allocating memory."]
    #[doc = "@ingroup memory"]
    #[doc = "@param\tb\t\tA pointer to the block of memory previously allocated that you want to free."]
    #[doc = "@param\tsize\tThe size the block specified (as parameter b) in bytes."]
    pub fn freebytes(b: *mut ::std::os::raw::c_void, size: t_getbytes_size);
}
extern "C" {
    pub fn newhandle(size: ::std::os::raw::c_long) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn growhandle(
        h: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn disposhandle(h: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "Given a C-string, fetch the matching #t_symbol pointer from the symbol table,"]
    #[doc = "generating the symbol if neccessary."]
    #[doc = ""]
    #[doc = "@ingroup symbol"]
    #[doc = "@param\ts\tA C-string to be looked up in Max's symbol table."]
    #[doc = "@return\t\tA pointer to the #t_symbol in the symbol table."]
    pub fn gensym(s: *const ::std::os::raw::c_char) -> *mut t_symbol;
}
extern "C" {
    pub fn gensym_tr(s: *const ::std::os::raw::c_char) -> *mut t_symbol;
}
extern "C" {
    pub fn str_tr(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn symbol_tr(s: *mut t_symbol) -> *mut t_symbol;
}
extern "C" {
    pub fn sprintf_tr(
        d: *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mayquote(s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn advise(s: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn advise_explain(
        note: *const ::std::os::raw::c_char,
        explanation: *const ::std::os::raw::c_char,
        b1: *const ::std::os::raw::c_char,
        b2: *const ::std::os::raw::c_char,
        b3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Print text to the Max window, linked to an instance of your object,"]
    #[doc = "and flagged as an error (highlighted with a red background),"]
    #[doc = "and grab the user's attention by displaying a banner in the patcher window."]
    #[doc = ""]
    #[doc = "This function should be used exceedingly sparingly, with preference given to"]
    #[doc = "object_error() when a problem occurs."]
    #[doc = ""]
    #[doc = "@ingroup console"]
    #[doc = "@param\tx\t\tA pointer to your object."]
    #[doc = "@param\ts\t\tA C-string containing text and printf-like codes"]
    #[doc = "specifying the sizes and formatting of the additional arguments."]
    #[doc = "@param\t...\t\tArguments of any type that correspond to the format codes in fmtString."]
    #[doc = ""]
    #[doc = "@see object_post()"]
    #[doc = "@see object_error()"]
    pub fn object_error_obtrusive(x: *mut t_object, s: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn jdialog_showtext(
        prompt: *const ::std::os::raw::c_char,
        deftext: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_long,
        text: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Use inlet_new() to create an inlet that can receive a specific message or any message."]
    #[doc = ""]
    #[doc = "@ingroup inout"]
    #[doc = "@param\tx\tYour object."]
    #[doc = "@param\ts\tCharacter string of the message, or NULL to receive any message."]
    #[doc = "@return\t\tA pointer to the new inlet."]
    #[doc = ""]
    #[doc = "@remark\t\tinlet_new() ceates a general purpose inlet."]
    #[doc = "You can use it in circumstances where you would like special messages to be received in"]
    #[doc = "inlets other than the leftmost one."]
    #[doc = "To create an inlet that receives a particular message, pass the message's"]
    #[doc = "character string. For example, to create an inlet that receives only bang"]
    #[doc = "messages, do the following"]
    #[doc = "@code"]
    #[doc = "inlet_new (myObject,\"bang\");"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark\t\tTo create an inlet that can receive any message, pass NULL for msg"]
    #[doc = "@code"]
    #[doc = "inlet_new (myObject, NULL);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark\t\tProxies are an alternative method for general-purpose inlets that have"]
    #[doc = "a number of advantages. If you create multiple inlets as shown above,"]
    #[doc = "there would be no way to figure out which inlet received a message. See"]
    #[doc = "the discussion in @ref chapter_inout_proxies."]
    pub fn inlet_new(
        x: *mut ::std::os::raw::c_void,
        s: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Use intin() to create an inlet typed to receive only integers."]
    #[doc = ""]
    #[doc = "@ingroup inout"]
    #[doc = "@param\tx\tYour object."]
    #[doc = "@param\tn\tLocation of the inlet from 1 to 9. 1 is immediately to the right of the leftmost inlet."]
    #[doc = "@return\t\tA pointer to the new inlet."]
    #[doc = ""]
    #[doc = "@remark\t\tintin creates integer inlets."]
    #[doc = "It takes a pointer to your newly created object and an integer n, from 1 to 9."]
    #[doc = "The number specifies the message"]
    #[doc = "type you'll get, so you can distinguish one inlet from another. For"]
    #[doc = "example, an integer sent in inlet 1 will be of message type in1 and a"]
    #[doc = "floating point number sent in inlet 4 will be of type ft4. You use"]
    #[doc = "addinx() and addftx() to add methods to respond to these messages."]
    #[doc = ""]
    #[doc = "The order you create additional inlets is important. If you want the"]
    #[doc = "rightmost inlet to be the have the highest number in- or ft- message"]
    #[doc = "(which is usually the case), you should create the highest number"]
    #[doc = "message inlet first."]
    pub fn intin(
        x: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_short,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Use floatin() to create an inlet typed to receive only floats."]
    #[doc = ""]
    #[doc = "@ingroup inout"]
    #[doc = "@param\tx\tYour object."]
    #[doc = "@param\tn\tLocation of the inlet from 1 to 9. 1 is immediately to the right of the leftmost inlet."]
    #[doc = "@return\t\tA pointer to the new inlet."]
    pub fn floatin(
        x: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_short,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn inlet_append(
        op: *mut t_object,
        who: *mut ::std::os::raw::c_void,
        s1: *mut t_symbol,
        s2: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn inlet_insert_after(
        op: *mut t_object,
        who: *mut ::std::os::raw::c_void,
        s1: *mut t_symbol,
        s2: *mut t_symbol,
        previous_inlet: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn inlet_delete(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn inlet_nth(x: *mut t_object, n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn inlet_count(x: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Use outlet_new() to create an outlet that can send a specific non-standard message, or any message."]
    #[doc = ""]
    #[doc = "@ingroup\tinout"]
    #[doc = "@param\tx\tYour object."]
    #[doc = "@param\ts\tA C-string specifying the message that will be sent out this outlet,"]
    #[doc = "or NULL to indicate the outlet will be used to send various messages."]
    #[doc = "The advantage of this kind of outlet's flexibility is balanced by the fact that"]
    #[doc = "Max must perform a message-lookup in real-time for every message sent through it,"]
    #[doc = "rather than when a patch is being constructed, as is true for other types of outlets."]
    #[doc = "Patchers execute faster when outlets are typed, since the message"]
    #[doc = "lookup can be done before the program executes."]
    #[doc = "@return\t\tA pointer to the new outlet."]
    pub fn outlet_new(
        x: *mut ::std::os::raw::c_void,
        s: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn outlet_append(
        op: *mut t_object,
        s1: *mut t_symbol,
        s2: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn outlet_insert_after(
        op: *mut t_object,
        s1: *mut t_symbol,
        s2: *mut t_symbol,
        previous_outlet: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn outlet_delete(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn outlet_count(x: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn outlet_nth(x: *mut t_object, n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Use bangout() to create an outlet that will always send the bang message."]
    #[doc = ""]
    #[doc = "@ingroup\tinout"]
    #[doc = "@param\tx\tYour object."]
    #[doc = "@return\t\tA pointer to the new outlet."]
    #[doc = ""]
    #[doc = "@remark\t\tYou can send a bang message out a general purpose outlet, but creating"]
    #[doc = "an outlet using bangout() allows Max to type-check the connection a"]
    #[doc = "user might make and refuse to connect the outlet to any object that"]
    #[doc = "cannot receive a bang message. bangout() returns the created outlet."]
    pub fn bangout(x: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Use intout() to create an outlet that will always send the int message."]
    #[doc = ""]
    #[doc = "@ingroup\tinout"]
    #[doc = "@param\tx\tYour object."]
    #[doc = "@return\t\tA pointer to the new outlet."]
    #[doc = ""]
    #[doc = "@remark\t\tYou can send a bang message out a general purpose outlet, but creating"]
    #[doc = "an outlet using bangout() allows Max to type-check the connection a"]
    #[doc = "user might make and refuse to connect the outlet to any object that"]
    #[doc = "cannot receive a bang message. bangout() returns the created outlet."]
    pub fn intout(x: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Use floatout() to create an outlet that will always send the float message."]
    #[doc = ""]
    #[doc = "@ingroup\tinout"]
    #[doc = "@param\tx\tYour object."]
    #[doc = "@return\t\tA pointer to the new outlet."]
    pub fn floatout(x: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Use listout() to create an outlet that will always send the list message."]
    #[doc = "@ingroup\tinout"]
    #[doc = "@param\tx\tYour object."]
    #[doc = "@return\t\tA pointer to the new outlet."]
    pub fn listout(x: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Use outlet_bang() to send a bang message out an outlet."]
    #[doc = ""]
    #[doc = "@ingroup inout"]
    #[doc = "@param\to\tOutlet that will send the message."]
    #[doc = "@return\t\tReturns 0 if a stack overflow occurred, otherwise returns 1."]
    pub fn outlet_bang(x: *mut t_outlet) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn outlet_int(x: *mut t_outlet, n: t_atom_long) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn outlet_float(x: *mut t_outlet, f: f64) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn outlet_list(
        x: *mut t_outlet,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn outlet_anything(
        x: *mut t_outlet,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn inlet4(
        x: *mut ::std::os::raw::c_void,
        w: *mut ::std::os::raw::c_void,
        s: *mut ::std::os::raw::c_char,
        s1: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn inlet_to(x: *mut t_inlet, w: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn outlet_add(x: *mut t_outlet, ip: *mut t_inlet) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn outlet_rm(x: *mut t_outlet, ip: *mut t_inlet);
}
extern "C" {
    pub fn outlet_atoms(
        out: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    );
}
extern "C" {
    #[doc = "Create a new Clock object."]
    #[doc = "Normally, clock_new() is called in your instance creation"]
    #[doc = "function—and it cannot be called from a thread other than the main thread."]
    #[doc = "To get rid of a clock object you created, use freeobject()."]
    #[doc = ""]
    #[doc = "@ingroup clocks"]
    #[doc = "@param\tobj\t\tArgument that will be passed to clock function fn when it is called."]
    #[doc = "This will almost always be a pointer to your object."]
    #[doc = "@param\tfn\t\tFunction to be called when the clock goes off,"]
    #[doc = "declared to take a single argument as shown in @ref clocks_using_clocks."]
    #[doc = "@return\t\t\tA pointer to a newly created Clock object."]
    pub fn clock_new(obj: *mut ::std::os::raw::c_void, fn_: method) -> *mut t_clock;
}
extern "C" {
    pub fn clock_new_withscheduler(
        obj: *mut ::std::os::raw::c_void,
        fn_: method,
        s: *mut t_scheduler,
    ) -> *mut t_clock;
}
extern "C" {
    pub fn clock_set(x: *mut t_clock, when: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Schedule the execution of a Clock."]
    #[doc = "clock_delay() sets a clock to go off at a certain number of"]
    #[doc = "milliseconds from the current logical time."]
    #[doc = ""]
    #[doc = "@ingroup clocks"]
    #[doc = "@param\tx\t\tClock to schedule."]
    #[doc = "@param\tn\t\tDelay, in milliseconds, before the Clock will execute."]
    #[doc = "@see\tclock_fdelay()"]
    pub fn clock_delay(x: *mut t_clock, n: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Cancel the scheduled execution of a Clock."]
    #[doc = "clock_unset() will do nothing (and not complain) if the Clock passed"]
    #[doc = "to it has not been set."]
    #[doc = ""]
    #[doc = "@ingroup clocks"]
    #[doc = "@param\tx\t\tClock to cancel."]
    pub fn clock_unset(x: *mut t_clock);
}
extern "C" {
    #[doc = "Schedule the execution of a Clock using a floating-point argument."]
    #[doc = "clock_delay() sets a clock to go off at a certain number of"]
    #[doc = "milliseconds from the current logical time."]
    #[doc = ""]
    #[doc = "@ingroup clocks"]
    #[doc = "@param\tc\t\tClock to schedule."]
    #[doc = "@param\ttime\tDelay, in milliseconds, before the Clock will execute."]
    #[doc = "@see\tclock_delay()"]
    pub fn clock_fset(x: *mut t_clock, when: f64);
}
extern "C" {
    pub fn clock_fset2(x: *mut t_clock, when: f64, offset: f64);
}
extern "C" {
    pub fn clock_fdelay(x: *mut t_clock, f: f64);
}
extern "C" {
    pub fn clock_fdelay2(x: *mut t_clock, delay: f64, offset: f64);
}
extern "C" {
    #[doc = "Find out the current logical time of the scheduler in milliseconds"]
    #[doc = "as a floating-point number."]
    #[doc = ""]
    #[doc = "@ingroup clocks"]
    #[doc = "@param\ttime\tReturns the current time."]
    #[doc = "@see\tgettime()"]
    #[doc = "@see\tsetclock_getftime()"]
    #[doc = "@see\tsetclock_gettime()"]
    pub fn clock_getftime(time: *mut f64);
}
extern "C" {
    #[doc = " Schedule a Clock on a scheduler."]
    #[doc = "Schedules the Clock c to execute at time units after the current"]
    #[doc = "time. If scheduler x is 0 or does not point to a setclock object, the"]
    #[doc = "internal millisecond scheduler is used. Otherwise c is scheduled on"]
    #[doc = "the setclock object's list of Clocks. The Clock should be created with"]
    #[doc = "clock_new(), the same as for a Clock passed to clock_delay()."]
    #[doc = ""]
    #[doc = "@ingroup clocks"]
    #[doc = "@param\tx\t\tA setclock object to be used for scheduling this clock."]
    #[doc = "@param\tc\t\tClock object containing the function to be executed."]
    #[doc = "@param\ttime\tTime delay (in the units of the Setclock) from the"]
    #[doc = "current time when the Clock will be executed."]
    #[doc = "@see\t@ref \tsetclock"]
    #[doc = "@see\t\t\tsetclock_fdelay()"]
    pub fn setclock_delay(x: *mut t_setclock, c: *mut t_clock, when: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = " Remove a Clock from a scheduler."]
    #[doc = "This function unschedules the Clock c in the list of Clocks in the"]
    #[doc = "setclock object x, or the internal millisecond scheduler if scheduler is 0."]
    #[doc = ""]
    #[doc = "@ingroup clocks"]
    #[doc = "@param\tx\t\tThe setclock object that was used to schedule this clock."]
    #[doc = "If 0, the clock is unscheduled from the internal millisecond scheduler."]
    #[doc = "@param\tc\t\tClock object to be removed from the scheduler."]
    #[doc = "@see\t@ref\tsetclock"]
    pub fn setclock_unset(x: *mut t_setclock, c: *mut t_clock);
}
extern "C" {
    #[doc = " Find out the current time value of a setclock object."]
    #[doc = "@ingroup clocks"]
    #[doc = "@param\tx\t\tA setclock object."]
    #[doc = "@return\t\t\tReturns the current time value of the setclock object scheduler."]
    #[doc = "If scheduler is 0, setclock_gettime is equivalent to the function"]
    #[doc = "gettime that returns the current value of the internal millisecond clock."]
    #[doc = "@see\t@ref\tsetclock"]
    #[doc = "@see\t\t\tsetclock_getftime()"]
    pub fn setclock_gettime(x: *mut t_setclock) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tSchedule a Clock on a scheduler, using a floating-point time argument."]
    #[doc = "@ingroup clocks"]
    #[doc = "@param\ts\t\tA setclock object to be used for scheduling this clock."]
    #[doc = "@param\tc\t\tClock object containing the function to be executed."]
    #[doc = "@param\ttime\tTime delay (in the units of the Setclock) from the"]
    #[doc = "current time when the Clock will be executed."]
    #[doc = "@see\t@ref\tsetclock"]
    #[doc = "@see\t\t\tsetclock_delay()"]
    pub fn setclock_fdelay(x: *mut t_setclock, c: *mut t_clock, f: f64);
}
extern "C" {
    #[doc = " Find out the current time value of a setclock object in floating-point milliseconds."]
    #[doc = "@ingroup clocks"]
    #[doc = "@param\ts\t\tA setclock object."]
    #[doc = "@param\ttime\tThe current time in milliseconds."]
    #[doc = "@see\t@ref\tsetclock"]
    #[doc = "@see\t\t\tsetclock_gettime()"]
    pub fn setclock_getftime(x: *mut t_setclock, time: *mut f64);
}
extern "C" {
    #[doc = "While most Max timing references \"logical\" time derived from Max's millisecond scheduler,"]
    #[doc = "time values produced by the systimer_gettime() are referenced from the CPU clock and can be used"]
    #[doc = "to time real world events with microsecond precision."]
    #[doc = ""]
    #[doc = "The standard 'cpuclock' external in Max is a simple wrapper around this function."]
    #[doc = ""]
    #[doc = "@ingroup\tclocks"]
    #[doc = "@return\t\tReturns the current real-world time."]
    pub fn systimer_gettime() -> f64;
}
extern "C" {
    #[doc = "Find out the current logical time of the scheduler in milliseconds."]
    #[doc = ""]
    #[doc = "@ingroup\tclocks"]
    #[doc = "@return\t\tReturns the current time."]
    #[doc = "@see\t\tclock_getftime()"]
    pub fn gettime() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getschedtime() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getexttime() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sched_isinpoll() -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn sched_isinqueue() -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Find the correct scheduler for the object and return the current time in milliseconds."]
    #[doc = ""]
    #[doc = "@ingroup\tclocks"]
    #[doc = "@return\t\tReturns the current time."]
    #[doc = "@see\t\tclock_getftime()"]
    pub fn gettime_forobject(x: *mut t_object) -> f64;
}
extern "C" {
    #[doc = "Cause a function to be executed at the timer level at some time in the future."]
    #[doc = ""]
    #[doc = "@ingroup\tthreading"]
    #[doc = "@param\t\tob\t\tFirst argument passed to the function fun when it executes."]
    #[doc = "@param\t\tfun\t\tFunction to be called, see below for how it should be declared."]
    #[doc = "@param\t\twhen\tThe logical time that the function fun will be executed."]
    #[doc = "@param\t\tsym\t\tSecond argument passed to the function fun when it executes."]
    #[doc = "@param\t\targc\tCount of arguments in argv. argc is also the third argument passed to the function fun when it executes."]
    #[doc = "@param\t\targv\tArray containing a variable number of #t_atom function arguments."]
    #[doc = "If this argument is non-zero, defer allocates memory to make a copy of the arguments"]
    #[doc = "(according to the size passed in argc)"]
    #[doc = "and passes the copied array to the function fun when it executes as the fourth argument."]
    #[doc = ""]
    #[doc = "@remark\t\t\t\tschedule() calls a function at some time in the future. Unlike defer(),"]
    #[doc = "the function is called in the scheduling loop when logical time is equal"]
    #[doc = "to the specified value when. This means that the function could be"]
    #[doc = "called at interrupt level, so it should follow the usual restrictions on"]
    #[doc = "interrupt-level conduct. The function fun passed to schedule should"]
    #[doc = "be declared as follows:"]
    #[doc = ""]
    #[doc = "@code"]
    #[doc = "void myobject_do (myObject *client, t_symbol *s, short argc, t_atom *argv);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark\t\t\t\tOne use of schedule() is as an alternative to using the lockout flag."]
    #[doc = ""]
    #[doc = "@see\t\tdefer()"]
    pub fn schedule(
        ob: *mut ::std::os::raw::c_void,
        fun: method,
        when: ::std::os::raw::c_long,
        sym: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    );
}
extern "C" {
    pub fn schedulef(
        ob: *mut ::std::os::raw::c_void,
        fun: method,
        when: f64,
        sym: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    );
}
extern "C" {
    #[doc = "\tCreate a new local scheduler."]
    #[doc = "@ingroup\t\tclocks"]
    #[doc = "@return\t\t\tA pointer to the newly created scheduler."]
    #[doc = "@see\t@ref\tcreating_schedulers"]
    pub fn scheduler_new() -> *mut t_scheduler;
}
extern "C" {
    #[doc = "\tMake a scheduler current, so that future related calls (such as"]
    #[doc = "clock_delay()) will affect the appropriate scheduler."]
    #[doc = ""]
    #[doc = "@ingroup\t\tclocks"]
    #[doc = "@param\tx\t\tThe scheduler to make current."]
    #[doc = "@return\t\t\tThis routine returns a pointer to the previously current scheduler,"]
    #[doc = "saved and restored when local scheduling is complete."]
    #[doc = "@see\t@ref\tcreating_schedulers"]
    pub fn scheduler_set(x: *mut t_scheduler) -> *mut t_scheduler;
}
extern "C" {
    #[doc = "\tGet the currently set scheduler."]
    #[doc = ""]
    #[doc = "@ingroup\t\tclocks"]
    #[doc = "@return\t\t\tThis routine returns a pointer to the current scheduler,"]
    #[doc = "@see\t@ref\tcreating_schedulers"]
    pub fn scheduler_get() -> *mut t_scheduler;
}
extern "C" {
    #[doc = "\tGet the scheduler associated with a given object, if any."]
    #[doc = ""]
    #[doc = "@ingroup\t\tclocks"]
    #[doc = "@param o\t\tThe object who's scheduler is to be returned."]
    #[doc = "@return\t\t\tThis routine returns a pointer to the scheduler or the passed in object,"]
    #[doc = "@see\t@ref\tcreating_schedulers"]
    pub fn scheduler_fromobject(obj: *mut t_object) -> *mut t_scheduler;
}
extern "C" {
    #[doc = " Run scheduler events to a selected time."]
    #[doc = "@ingroup\t\tclocks"]
    #[doc = "@param\tx\t\tThe scheduler to advance."]
    #[doc = "@param\tuntil\tThe ending time for this run (in milliseconds)."]
    #[doc = "@see\t@ref\tcreating_schedulers"]
    pub fn scheduler_run(x: *mut t_scheduler, until: f64);
}
extern "C" {
    #[doc = " Set the current time of the scheduler."]
    #[doc = "@ingroup\t\tclocks"]
    #[doc = "@param\tx\t\tThe scheduler to set."]
    #[doc = "@param\ttime\tThe new current time for the selected scheduler (in milliseconds)."]
    #[doc = "@see\t@ref\tcreating_schedulers"]
    pub fn scheduler_settime(x: *mut t_scheduler, time: f64);
}
extern "C" {
    #[doc = " Retrieve the current time of the selected scheduler."]
    #[doc = "@ingroup\t\tclocks"]
    #[doc = "@param\tx\t\tThe scheduler to query."]
    #[doc = "@param\ttime\tThe current time of the selected scheduler."]
    #[doc = "@see\t@ref\tcreating_schedulers"]
    pub fn scheduler_gettime(x: *mut t_scheduler, time: *mut f64);
}
extern "C" {
    #[doc = " Shift scheduler's current time and run time for all pending clock."]
    #[doc = "Could be used to change scheduler's time reference without impacting current clocks."]
    #[doc = "@ingroup\t\tclocks"]
    #[doc = "@param\tx\t\tThe scheduler to affect."]
    #[doc = "@param\tamount\tNumber of milliseconds to shift by."]
    #[doc = "@see\t@ref\tcreating_schedulers"]
    pub fn scheduler_shift(x: *mut t_scheduler, amount: f64);
}
extern "C" {
    #[doc = "Cause a function to be executed at the timer level at some time in the future specified by a delay offset."]
    #[doc = ""]
    #[doc = "@ingroup\tthreading"]
    #[doc = "@param\t\tob\t\tFirst argument passed to the function fun when it executes."]
    #[doc = "@param\t\tfun\t\tFunction to be called, see below for how it should be declared."]
    #[doc = "@param\t\tdelay\tThe delay from the current time before the function will be executed."]
    #[doc = "@param\t\tsym\t\tSecond argument passed to the function fun when it executes."]
    #[doc = "@param\t\targc\tCount of arguments in argv. argc is also the third argument passed to the function fun when it executes."]
    #[doc = "@param\t\targv\tArray containing a variable number of #t_atom function arguments."]
    #[doc = "If this argument is non-zero, schedule_delay() allocates memory to make a copy of the arguments"]
    #[doc = "(according to the size passed in argc)"]
    #[doc = "and passes the copied array to the function fun when it executes as the fourth argument."]
    #[doc = ""]
    #[doc = "@remark\t\t\t\tschedule_delay() is similar to schedule() but allows you to specify the"]
    #[doc = "time as a delay rather than a specific logical time."]
    #[doc = ""]
    #[doc = "@code"]
    #[doc = "void myobject_click (t_myobject *x, Point pt, short modifiers)"]
    #[doc = "{"]
    #[doc = "t_atom a[1];"]
    #[doc = "a[0].a_type = A_LONG;"]
    #[doc = "a[0].a_w.w_long = Random();"]
    #[doc = "schedule_delay(x, myobject_sched, 0 ,0, 1, a);"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "void myobject_sched (t_myobject *x, t_symbol *s, short ac, t_atom *av)"]
    #[doc = "{"]
    #[doc = "outlet_int(x->m_out,av->a_w.w_long);"]
    #[doc = "}"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see schedule()"]
    pub fn schedule_delay(
        ob: *mut ::std::os::raw::c_void,
        fun: method,
        delay: ::std::os::raw::c_long,
        sym: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    );
}
extern "C" {
    pub fn schedule_fdelay(
        ob: *mut ::std::os::raw::c_void,
        fun: method,
        delay: f64,
        sym: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    );
}
extern "C" {
    pub fn schedule_defer(
        ob: *mut ::std::os::raw::c_void,
        fun: method,
        delay: ::std::os::raw::c_long,
        sym: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        arv: *mut t_atom,
    );
}
extern "C" {
    pub fn schedule_fdefer(
        ob: *mut ::std::os::raw::c_void,
        fun: method,
        delay: f64,
        sym: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        arv: *mut t_atom,
    );
}
extern "C" {
    pub fn lockout_set(arg1: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Determine whether your code is executing in the Max scheduler thread."]
    #[doc = ""]
    #[doc = "@ingroup\tthreading"]
    #[doc = "@return\t\tThis function returns non-zero if you are within Max's scheduler thread, zero otherwise."]
    #[doc = "Note that if your code sets up other types of interrupt-level callbacks,"]
    #[doc = "such as for other types of device drivers used in asynchronous mode, isr will return false."]
    pub fn isr() -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Create a new Qelem."]
    #[doc = "The created Qelem will need to be freed using qelem_free(), do not use freeobject()."]
    #[doc = ""]
    #[doc = "@ingroup qelems"]
    #[doc = "@param\tobj\tArgument to be passed to function fun when the Qelem executes."]
    #[doc = "Normally a pointer to your object."]
    #[doc = "@param\tfn\tFunction to execute."]
    #[doc = "@return\t\tA pointer to a Qelem instance."]
    #[doc = "You need to store this value to pass to qelem_set()."]
    #[doc = ""]
    #[doc = "@remark\t\tAny kind of drawing or calling of Macintosh Toolbox routines that"]
    #[doc = "allocate or purge memory should be done in a Qelem function."]
    pub fn qelem_new(obj: *mut ::std::os::raw::c_void, fn_: method) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Cause a Qelem to execute."]
    #[doc = ""]
    #[doc = "@ingroup qelems"]
    #[doc = "@param\tq\tThe Qelem whose function will be executed in the main thread."]
    #[doc = ""]
    #[doc = "@remark\t\tThe key behavior of qelem_set() is this: if the Qelem object has already"]
    #[doc = "been set, it will not be set again. (If this is not what you want, see"]
    #[doc = "defer().) This is useful if you want to redraw the state of some"]
    #[doc = "data when it changes, but not in response to changes that occur faster"]
    #[doc = "than can be drawn. A Qelem object is unset after its queue function has"]
    #[doc = "been called."]
    pub fn qelem_set(x: *mut t_qelem);
}
extern "C" {
    #[doc = "Cancel a Qelem's execution."]
    #[doc = "If the Qelem's function is set to be called, qelem_unset() will stop it"]
    #[doc = "from being called. Otherwise, qelem_unset() does nothing."]
    #[doc = ""]
    #[doc = "@ingroup qelems"]
    #[doc = "@param\tq\tThe Qelem whose execution you wish to cancel."]
    pub fn qelem_unset(x: *mut t_qelem);
}
extern "C" {
    #[doc = "Free a Qelem object created with qelem_new()."]
    #[doc = "Typically this will be in your object's free funtion."]
    #[doc = ""]
    #[doc = "@ingroup qelems"]
    #[doc = "@param\tx\tThe Qelem to destroy."]
    pub fn qelem_free(x: *mut t_qelem);
}
extern "C" {
    #[doc = "Cause a Qelem to execute with a higher priority."]
    #[doc = "This function is identical to qelem_set(), except that the Qelem's"]
    #[doc = "function is placed at the front of the list of routines to execute in the"]
    #[doc = "main thread instead of the back. Be polite and only use"]
    #[doc = "qelem_front() only for special time-critical applications."]
    #[doc = ""]
    #[doc = "@ingroup qelems"]
    #[doc = "@param\tx\tThe Qelem whose function will be executed in the main thread."]
    pub fn qelem_front(x: *mut t_qelem);
}
extern "C" {
    #[doc = "Defer execution of a function to the main thread if (and only if)"]
    #[doc = "your function is executing in the scheduler thread."]
    #[doc = ""]
    #[doc = "@ingroup\tthreading"]
    #[doc = "@param\t\tob\t\tFirst argument passed to the function fun when it executes."]
    #[doc = "@param\t\tfn\t\tFunction to be called, see below for how it should be declared."]
    #[doc = "@param\t\tsym\t\tSecond argument passed to the function fun when it executes."]
    #[doc = "@param\t\targc\tCount of arguments in argv. argc is also the third argument passed to the function fun when it executes."]
    #[doc = "@param\t\targv\tArray containing a variable number of #t_atom function arguments."]
    #[doc = "If this argument is non-zero, defer allocates memory to make a copy of the arguments"]
    #[doc = "(according to the size passed in argc)"]
    #[doc = "and passes the copied array to the function fun when it executes as the fourth argument."]
    #[doc = "@return\t\tReturn values is for internal Cycling '74 use only."]
    #[doc = ""]
    #[doc = "@remark\t\tThis function uses the isr() routine to determine whether you're at the"]
    #[doc = "Max timer interrupt level (in the scheduler thread)."]
    #[doc = "If so, defer() creates a Qelem (see @ref qelems), calls"]
    #[doc = "qelem_front(), and its queue function calls the function fn you"]
    #[doc = "passed with the specified arguments."]
    #[doc = "If you're not in the scheduler thread, the function is executed immediately with the"]
    #[doc = "arguments. Note that this implies that defer() is not appropriate for"]
    #[doc = "using in situations such as Device or File manager I/0 completion routines."]
    #[doc = "The defer_low() function is appropriate however, because it always defers."]
    #[doc = ""]
    #[doc = "The deferred function should be declared as follows:"]
    #[doc = "@code"]
    #[doc = "void myobject_do (myObject *client, t_symbol *s, short argc, t_atom *argv);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see\t\tdefer_low()"]
    pub fn defer(
        ob: *mut ::std::os::raw::c_void,
        fn_: method,
        sym: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Defer execution of a function to the back of the queue on the main thread."]
    #[doc = ""]
    #[doc = "@ingroup\tthreading"]
    #[doc = "@param\t\tob\t\tFirst argument passed to the function fun when it executes."]
    #[doc = "@param\t\tfn\t\tFunction to be called, see below for how it should be declared."]
    #[doc = "@param\t\tsym\t\tSecond argument passed to the function fun when it executes."]
    #[doc = "@param\t\targc\tCount of arguments in argv. argc is also the third argument passed to the function fun when it executes."]
    #[doc = "@param\t\targv\tArray containing a variable number of #t_atom function arguments."]
    #[doc = "If this argument is non-zero, defer allocates memory to make a copy of the arguments"]
    #[doc = "(according to the size passed in argc)"]
    #[doc = "and passes the copied array to the function fun when it executes as the fourth argument."]
    #[doc = "@return\t\tReturn values is for internal Cycling '74 use only."]
    #[doc = ""]
    #[doc = "@remark\t\tdefer_low() always defers a call to the function fun whether you are already"]
    #[doc = "in the main thread or not, and uses qelem_set(), not qelem_front(). This"]
    #[doc = "function is recommended for responding to messages that will cause"]
    #[doc = "your object to open a dialog box, such as read and write."]
    #[doc = ""]
    #[doc = "The deferred function should be declared as follows:"]
    #[doc = "@code"]
    #[doc = "void myobject_do (myObject *client, t_symbol *s, short argc, t_atom *argv);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see\t\tdefer()"]
    pub fn defer_low(
        ob: *mut ::std::os::raw::c_void,
        fn_: method,
        sym: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn defer_medium(
        ob: *mut ::std::os::raw::c_void,
        fn_: method,
        sym: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn defer_front(
        ob: *mut ::std::os::raw::c_void,
        fn_: method,
        sym: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn defer_sys_low(
        ob: *mut ::std::os::raw::c_void,
        fn_: method,
        sym: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Use binbuf_new() to create and initialize a Binbuf."]
    #[doc = "@ingroup\tbinbuf"]
    #[doc = "@return\t\tReturns a new binbuf if successful, otherwise NULL."]
    pub fn binbuf_new() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Use binbuf_vinsert() to append a Max message to a Binbuf adding a semicolon."]
    #[doc = "@ingroup binbuf"]
    #[doc = ""]
    #[doc = "@param\tx\t\tBinbuf containing the desired t_atom."]
    #[doc = "@param\tfmt\t\tA C-string containing one or more letters corresponding to the types of each element of the message."]
    #[doc = "s for #t_symbol*, l for long, or f for float."]
    #[doc = "@param\t...\t\tElements of the message, passed directly to the function as Symbols, longs, or floats."]
    #[doc = ""]
    #[doc = "@remark\tbinbuf_vinsert() works somewhat like a printf() for Binbufs. It"]
    #[doc = "allows you to pass a number of arguments of different types and insert"]
    #[doc = "them into a Binbuf. The entire message will then be terminated with a"]
    #[doc = "semicolon. Only 16 items can be passed to binbuf_vinsert()."]
    #[doc = ""]
    #[doc = "The example below shows the implementation of a normal object's"]
    #[doc = "save method. The save method requires that you build a message that"]
    #[doc = "begins with #N (the new object) , followed by the name of your object"]
    #[doc = "(in this case, represented by the #t_symbol myobject), followed by any"]
    #[doc = "arguments your instance creation function requires. In this example,"]
    #[doc = "we save the values of two fields m_val1 and m_val2 defined as longs."]
    #[doc = ""]
    #[doc = "@code"]
    #[doc = "void myobject_save (myObject *x, Binbuf *dstBuf)"]
    #[doc = "{"]
    #[doc = "binbuf_vinsert(dstBuf, \"ssll\", gensym(\"#N\"),"]
    #[doc = "gensym(\"myobject\"),"]
    #[doc = "x->m_val1, x->m_val2);"]
    #[doc = "}"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "Suppose that such an object had written this data into a file. If you"]
    #[doc = "opened the file as text, you would see the following:"]
    #[doc = ""]
    #[doc = "@code"]
    #[doc = "#N myobject 10 20;"]
    #[doc = "#P newobj 218 82 30 myobject;"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "The first line will result in a new myobject object to be created; the"]
    #[doc = "creation function receives the arguments 10 and 20. The second line"]
    #[doc = "contains the text of the object box. The newobj message to a patcher"]
    #[doc = "creates the object box user interface object and attaches it to the"]
    #[doc = "previously created myobject object. Normally, the newex message is"]
    #[doc = "used. This causes the object to be created using the arguments that"]
    #[doc = "were typed into the object box."]
    pub fn binbuf_vinsert(x: *mut ::std::os::raw::c_void, fmt: *mut ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = "Use binbuf_insert() to append a Max message to a Binbuf adding a semicolon."]
    #[doc = "@ingroup binbuf"]
    #[doc = ""]
    #[doc = "@param\tx\t\tBinbuf to receive the items."]
    #[doc = "@param\ts\t\tIgnored. Pass NULL."]
    #[doc = "@param\targc\tCount of items in the argv array."]
    #[doc = "@param\targv\tArray of t_atoms to add to the Binbuf."]
    #[doc = ""]
    #[doc = "@remark\tYou'll use binbuf_insert() instead of binbuf_append() if you were"]
    #[doc = "saving your object into a Binbuf and wanted a semicolon at the end. If"]
    #[doc = "the message is part of a file that will later be evaluated, such as a"]
    #[doc = "Patcher file, the first argument argv[0] will be the receiver of the"]
    #[doc = "message and must be a Symbol. binbuf_vinsert() is"]
    #[doc = "easier to use than binbuf_insert(), since you don't have to format"]
    #[doc = "your data into an array of Atoms first."]
    #[doc = ""]
    #[doc = "binbuf_insert() will also convert the t_symbols #1 through #9 into"]
    #[doc = "$1 through $9. This is used for saving patcher files that take"]
    #[doc = "arguments; you will probably never save these symbols as part of"]
    #[doc = "anything you are doing."]
    pub fn binbuf_insert(
        x: *mut t_binbuf,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    );
}
extern "C" {
    #[doc = "Use binbuf_eval to evaluate a Max message in a Binbuf, passing it arguments."]
    #[doc = "binbuf_eval() is an advanced function that evaluates the message in a"]
    #[doc = "Binbuf with arguments in argv, and sends it to receiver."]
    #[doc = ""]
    #[doc = "@ingroup binbuf"]
    #[doc = "@param\tx\tBinbuf containing the message."]
    #[doc = "@param\tac\tCount of items in the argv array."]
    #[doc = "@param\tav\tArray of t_atoms as the arguments to the message."]
    #[doc = "@param\tto\tReceiver of the message."]
    #[doc = ""]
    #[doc = "@return\t\tThe result of sending the message."]
    pub fn binbuf_eval(
        x: *mut t_binbuf,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
        to: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Use binbuf_getatom to retrieve a single t_atom from a Binbuf."]
    #[doc = ""]
    #[doc = "@ingroup binbuf"]
    #[doc = "@param\tx\tBinbuf containing the desired #t_atom."]
    #[doc = "@param\tp1\tOffset into the Binbuf's array of types. Modified to point to the next #t_atom."]
    #[doc = "@param\tp2\tOffset into the Binbuf's array of data. Modified to point to the next #t_atom."]
    #[doc = "@param\tap\tLocation of a #t_atom where the retrieved data will be placed."]
    #[doc = ""]
    #[doc = "@return\t\t1 if there were no t_atoms at the specified offsets,"]
    #[doc = "0 if there's a legitimate t_atom returned in result."]
    #[doc = ""]
    #[doc = "@remark\t\tTo get the first t_atom, set both typeOffset and stuffOffset to 0."]
    #[doc = "Here's an example of getting all the items in a Binbuf:"]
    #[doc = "@code"]
    #[doc = "t_atom holder;"]
    #[doc = "long to, so;"]
    #[doc = ""]
    #[doc = "to = 0;"]
    #[doc = "so = 0;"]
    #[doc = "while (!binbuf_getatom(x, &to, &so, &holder)){"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn binbuf_getatom(
        x: *mut t_binbuf,
        p1: *mut ::std::os::raw::c_long,
        p2: *mut ::std::os::raw::c_long,
        ap: *mut t_atom,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Use binbuf_text() to convert a text handle to a Binbuf."]
    #[doc = "binbuf_text() parses the text in the handle srcText and converts it"]
    #[doc = "into binary format. Use it to evaluate a text file or text line entry into a"]
    #[doc = "Binbuf."]
    #[doc = ""]
    #[doc = "@ingroup binbuf"]
    #[doc = "@param\tx\t\tBinbuf to contain the converted text."]
    #[doc = "It must have already been created with binbuf_new."]
    #[doc = "Its previous contents are destroyed."]
    #[doc = "@param\tsrcText\tHandle to the text to be converted. It need not be terminated with a 0."]
    #[doc = "@param\tn\t\tNumber of characters in the text."]
    #[doc = "@return\t\t\tIf binbuf_text encounters an error during its operation,"]
    #[doc = "a non-zero result is returned, otherwise it returns 0."]
    #[doc = ""]
    #[doc = "@remark\t\t\tNote: Commas, symbols containing a dollar sign followed by a number"]
    #[doc = "1-9, and semicolons are identified by special pseudo-type constants for"]
    #[doc = "you when your text is binbuf-ized."]
    #[doc = ""]
    #[doc = "The following constants in the a_type field of Atoms returned by"]
    #[doc = "binbuf_getAtom identify the special symbols #A_SEMI,"]
    #[doc = "#A_COMMA, and #A_DOLLAR."]
    #[doc = ""]
    #[doc = "For a #t_atom of the pseudo-type #A_DOLLAR, the a_w.w_long field of"]
    #[doc = "the #t_atom contains the number after the dollar sign in the original"]
    #[doc = "text or symbol."]
    #[doc = ""]
    #[doc = "Using these pseudo-types may be helpful in separating 'sentences' and"]
    #[doc = "'phrases' in the input language you design. For example, the old pop-up"]
    #[doc = "umenu object allowed users to have spaces in between words by requiring"]
    #[doc = "the menu items be separated by commas. It's reasonably easy, using"]
    #[doc = "binbuf_getatom(), to find the commas in a Binbuf in order to"]
    #[doc = "determine the beginning of a new item when reading the atomized text"]
    #[doc = "to be displayed in the menu."]
    #[doc = ""]
    #[doc = "If you want to use a literal comma or semicolon in a symbol, precede it"]
    #[doc = "with a backslash (\\\\) character. The backslash character can be included"]
    #[doc = "by using two backslashes in a row."]
    pub fn binbuf_text(
        x: *mut t_binbuf,
        srcText: *mut *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Use binbuf_totext() to convert a Binbuf into a text handle."]
    #[doc = "binbuf_totext() converts a Binbuf into text and places it in a handle."]
    #[doc = "Backslashes are added to protect literal commas and semicolons"]
    #[doc = "contained in symbols. The pseudo-types are converted into commas,"]
    #[doc = "semicolons, or dollar-sign and number, without backslashes preceding"]
    #[doc = "them. binbuf_text can read the output of binbuf_totext and"]
    #[doc = "make the same Binbuf."]
    #[doc = ""]
    #[doc = "@ingroup binbuf"]
    #[doc = "@param\tx\t\tBinbuf with data to convert to text."]
    #[doc = "@param\tdstText\tPre-existing handle where the text will be placed."]
    #[doc = "dstText will be resized to accomodate the text."]
    #[doc = "@param\tsizep\tWhere binbuf_totext() returns the number of characters in the converted text handle."]
    #[doc = "@return\t\t\tIf binbuf_totext runs out of memory during its operation, it returns a non-zero result,"]
    #[doc = "otherwise it returns 0."]
    pub fn binbuf_totext(
        x: *mut t_binbuf,
        dstText: *mut *mut ::std::os::raw::c_char,
        sizep: *mut t_ptr_size,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Use binbuf_set() to change the entire contents of a Binbuf."]
    #[doc = "The previous contents of the Binbuf are destroyed."]
    #[doc = ""]
    #[doc = "@ingroup binbuf"]
    #[doc = "@param\tx\t\tBinbuf to receive the items."]
    #[doc = "@param\ts\t\tIgnored. Pass NULL."]
    #[doc = "@param\targc\tCount of items in the argv array."]
    #[doc = "@param\targv\tArray of t_atoms to put in the Binbuf."]
    pub fn binbuf_set(
        x: *mut t_binbuf,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    );
}
extern "C" {
    #[doc = "Use binbuf_append to append t_atoms to a Binbuf without modifying them."]
    #[doc = "@ingroup binbuf"]
    #[doc = "@param\tx\t\tBinbuf to receive the items."]
    #[doc = "@param\ts\t\tIgnored.  Pass NULL."]
    #[doc = "@param\targc\tCount of items in the argv array."]
    #[doc = "@param\targv\tArray of atoms to add to the Binbuf."]
    pub fn binbuf_append(
        x: *mut t_binbuf,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    );
}
extern "C" {
    pub fn binbuf_read(
        x: *mut t_binbuf,
        name: *const ::std::os::raw::c_char,
        volume: ::std::os::raw::c_short,
        binary: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn binbuf_write(
        x: *mut t_binbuf,
        fn_: *mut ::std::os::raw::c_char,
        vol: ::std::os::raw::c_short,
        binary: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn binbuf_delete(
        x: *mut t_binbuf,
        fromType: ::std::os::raw::c_long,
        toType: ::std::os::raw::c_long,
        fromData: ::std::os::raw::c_long,
        toData: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn binbuf_addtext(
        x: *mut t_binbuf,
        text: *mut *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Use readatom() to read a single t_atom from a text buffer."]
    #[doc = "@ingroup\t\tbinbuf"]
    #[doc = "@param\toutstr\tC-string of 256 characters that will receive the next text item read from the buffer."]
    #[doc = "@param\ttext\tHandle to the text buffer to be read."]
    #[doc = "@param\tn\t\tStarts at 0, and is modified by readatom to point to the next item in the text buffer."]
    #[doc = "@param\te\t\tNumber of characters in text."]
    #[doc = "@param\tap\t\tWhere the resulting t_atom read from the text buffer is placed."]
    #[doc = "@return\t\t\treadatom() returns non-zero if there is more text to read,"]
    #[doc = "and zero if it has reached the end of the text."]
    #[doc = "Note that this return value has the opposite logic from that of binbuf_getatom()."]
    #[doc = ""]
    #[doc = "@remark\t\t\tThis function provides access to the low-level Max text evaluator used"]
    #[doc = "by binbuf_text(). It is designed to operate on a handle of characters"]
    #[doc = "(text) and called in a loop, as in the example shown below."]
    #[doc = "@code"]
    #[doc = "long index = 0;"]
    #[doc = "t_atom dst;"]
    #[doc = "char outstr[256];"]
    #[doc = ""]
    #[doc = "while (readatom(outstr,textHandle,&index,textLength,&dst))"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark\t\t\tAn alternative to using readatom is to turn your text into a Binbuf"]
    #[doc = "using binbuf_text(), then call binbuf_getatom() in a loop."]
    pub fn readatom(
        outstr: *mut ::std::os::raw::c_char,
        text: *mut *mut ::std::os::raw::c_char,
        n: *mut ::std::os::raw::c_long,
        e: ::std::os::raw::c_long,
        ap: *mut t_atom,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn readatom_flags(
        outstr: *mut ::std::os::raw::c_char,
        text: *mut *mut ::std::os::raw::c_char,
        n: *mut ::std::os::raw::c_long,
        e: ::std::os::raw::c_long,
        ap: *mut t_atom,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn atom_string(a: *mut t_atom) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSend a typed message directly to a Max object."]
    #[doc = "@ingroup class_old"]
    #[doc = ""]
    #[doc = "@param op\tMax object that will receive the message."]
    #[doc = "@param msg\tThe message selector."]
    #[doc = "@param argc\tCount of message arguments in argv."]
    #[doc = "@param argp\tArray of t_atoms; the message arguments."]
    #[doc = "@return\t\tIf the receiver object can respond to the message,"]
    #[doc = "typedmess() returns the result. Otherwise, an error message will be"]
    #[doc = "seen in the Max window and 0 will be returned."]
    #[doc = ""]
    #[doc = "@remark\ttypedmess sends a message to a Max object (receiver) a message"]
    #[doc = "with arguments. Note that the message"]
    #[doc = "must be a #t_symbol, not a character string, so you must call gensym"]
    #[doc = "on a string before passing it to typedmess. Also, note that untyped"]
    #[doc = "messages defined for classes with the argument list #A_CANT cannot be"]
    #[doc = "sent using typedmess. You must use getfn() etc. instead."]
    #[doc = ""]
    #[doc = "Example:"]
    #[doc = "@code"]
    #[doc = "void *bangResult;"]
    #[doc = "bangResult = typedmess(bang_me,gensym(\"bang\"),0,0L);"]
    #[doc = "@endcode"]
    pub fn typedmess(
        op: *mut t_object,
        msg: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argp: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Use getfn() to send an untyped message to a Max object with error checking."]
    #[doc = "@ingroup class_old"]
    #[doc = ""]
    #[doc = "@param op\tReceiver of the message."]
    #[doc = "@param msg\tMessage selector."]
    #[doc = "@return\t\tgetfn returns a pointer to the method bound to the message selector"]
    #[doc = "msg in the receiver's message list. It returns 0 and prints an error"]
    #[doc = "message in Max Window if the method can't be found."]
    pub fn getfn(op: *mut t_object, msg: *mut t_symbol) -> method;
}
extern "C" {
    #[doc = " Use egetfn() to send an untyped message to a Max object that always works."]
    #[doc = "@ingroup class_old"]
    #[doc = ""]
    #[doc = "@param op\tReceiver of the message."]
    #[doc = "@param msg\tMessage selector."]
    #[doc = "@return\t\tegetfn returns a pointer to the method bound to the message selector"]
    #[doc = "msg in the receiver's message list. If the method can't be found, a"]
    #[doc = "pointer to a do-nothing function is returned."]
    pub fn egetfn(op: *mut t_object, msg: *mut t_symbol) -> method;
}
extern "C" {
    #[doc = " Use zgetfn() to send an untyped message to a Max object without error checking."]
    #[doc = "@ingroup class_old"]
    #[doc = ""]
    #[doc = "@param op\tReceiver of the message."]
    #[doc = "@param msg\tMessage selector."]
    #[doc = "@return\t\tzgetfn returns a pointer to the method bound to the message selector"]
    #[doc = "msg in the receiver's message list. It returns 0 but doesn't print an"]
    #[doc = "error message in Max Window if the method can't be found."]
    pub fn zgetfn(op: *mut t_object, msg: *mut t_symbol) -> method;
}
extern "C" {
    pub fn patcher_eachdo(fun: t_intmethod, arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn loadbang_suspend();
}
extern "C" {
    pub fn loadbang_resume();
}
extern "C" {
    #[doc = "\tGet a handle to the data in a named table object."]
    #[doc = "@ingroup tables"]
    #[doc = ""]
    #[doc = "@param s\tSymbol containing the name of the table object to find."]
    #[doc = "@param hp\tAddress of a handle where the table's data will be returned if the named table object is found."]
    #[doc = "@param sp\tNumber of elements in the table (its size in longs)."]
    #[doc = "@return\t\tIf no table object is associated with the symbol tableName, table_get() returns a non-zero result."]
    #[doc = ""]
    #[doc = "@remark\t\ttable_get searches for a table associated with the t_symbol"]
    #[doc = "tableName. If one is found, a Handle to its elements (stored as an"]
    #[doc = "array of long integers) is returned and the function returns 0."]
    #[doc = "Never count on a table to exist across calls to"]
    #[doc = "one of your methods. Call table_get and check the result each time"]
    #[doc = "you wish to use a table."]
    #[doc = ""]
    #[doc = "Here is an example of retrieving the 40th element of a table:"]
    #[doc = "@code"]
    #[doc = "long **storage,size,value;"]
    #[doc = "if (!table_get(gensym(\"somename\"),&storage,&size)) {"]
    #[doc = "if (size > 40)"]
    #[doc = "value = *((*storage)+40);"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn table_get(
        s: *mut t_symbol,
        hp: *mut *mut *mut ::std::os::raw::c_long,
        sp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "\tMark a table object as having changed data."]
    #[doc = "@ingroup tables"]
    #[doc = "@param s\tSymbol containing the name of a table object."]
    #[doc = "@return\t\tIf no table is associated with tableName, table_dirty returns a non-zero result."]
    pub fn table_dirty(s: *mut t_symbol) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = " Load a data file into a handle."]
    #[doc = "This is a low-level routine used for reading text and data files. You"]
    #[doc = "specify the file's name and Path ID, as well as a pointer to a Handle."]
    #[doc = ""]
    #[doc = "@ingroup loading_max_files"]
    #[doc = "@param\tname\tName of the patcher file to load."]
    #[doc = "@param\tvolume\tPath ID specifying the location of the file."]
    #[doc = "@param\th\t\tPointer to a handle variable that will receive the handle"]
    #[doc = "that contains the data in the file."]
    #[doc = "@param\tsizep\tSize of the handle returned in h."]
    #[doc = "@return\t\t\tIf the file is found, readtohandle creates a Handle, reads all the data in"]
    #[doc = "the file into it, assigns the handle to the variable hp, and returns the"]
    #[doc = "size of the data in size. readtohandle returns 0 if the file was"]
    #[doc = "opened and read successfully, and non-zero if there was an error."]
    pub fn readtohandle(
        name: *const ::std::os::raw::c_char,
        volume: ::std::os::raw::c_short,
        h: *mut *mut *mut ::std::os::raw::c_char,
        sizep: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = " Load a patcher file by name and volume reference number."]
    #[doc = "@ingroup loading_max_files"]
    #[doc = "@param\tname\tFilename of the patcher file to load (C string)."]
    #[doc = "@param\tvol\t\tPath ID specifying the location of the file."]
    #[doc = "@return\t\t\tIf the file is found, fileload tries to open"]
    #[doc = "the file, evaluate it, open a window, and bring it to the front. A pointer"]
    #[doc = "to the newly created Patcher is returned if loading is successful,"]
    #[doc = "otherwise, if the file is not found or there is insufficient memory, zero"]
    #[doc = "is returned."]
    pub fn fileload(
        name: *const ::std::os::raw::c_char,
        vol: ::std::os::raw::c_short,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Pass arguments to Max files when you open them."]
    #[doc = "This function loads the specified file and returns a pointer to the"]
    #[doc = "created object. Historically, intload() is was used to open patcher files,"]
    #[doc = "whether they are in text or Max binary format."]
    #[doc = "It could also open table files whose contents begin with the word \"table\"."]
    #[doc = ""]
    #[doc = "@ingroup loading_max_files"]
    #[doc = "@param\tname\t\tName of the file to open."]
    #[doc = "@param\tvolume\t\tPath ID specifying the location of the file."]
    #[doc = "@param\ts\t\t\tA symbol."]
    #[doc = "@param\tac\t\t\tCount of t_atoms in av. To properly open a patcher file, ac should be 9."]
    #[doc = "@param\tav\t\t\tArray of t_atoms that will replace the changeable"]
    #[doc = "arguments 1-9. The default behavior could be to set"]
    #[doc = "all these to t_atoms of type #A_LONG with a value of 0."]
    #[doc = "@param\tcouldedit\tIf non-zero and the file is not a patcher file, the file is opened as a text file."]
    #[doc = "@return\t\t\t\tIf couldedit is non-zero and the file is not a patcher file, it is made into"]
    #[doc = "a text editor, and intoad() returns 0. If couldedit is non-zero, intload()"]
    #[doc = "will alert the user to an error and return 0. If there is no error, the"]
    #[doc = "value returned will be a pointer to a patcher or table object."]
    pub fn intload(
        name: *const ::std::os::raw::c_char,
        volume: ::std::os::raw::c_short,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
        couldedit: ::std::os::raw::c_short,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Load a patcher file located in the Max search path by name."]
    #[doc = "This function searches for a patcher file, opens it,"]
    #[doc = "evaluates it as a patcher file, opens a window for the patcher and brings"]
    #[doc = "it to the front. You need only specify a filename and Max will look"]
    #[doc = "through its search path for the file. The search path begins with the"]
    #[doc = "current 'default volume' that is often the volume of the last opened"]
    #[doc = "patcher file, then the folders specified in the File Preferences dialog,"]
    #[doc = "searched depth first, then finally the folder that contains the Max"]
    #[doc = "application."]
    #[doc = ""]
    #[doc = "@ingroup loading_max_files"]
    #[doc = "@param\tname\tFilename of the patcher file to load (C string)."]
    #[doc = "@return\t\t\tIf stringload() returns a non-zero result, you can later"]
    #[doc = "use freeobject() to close the patcher, or just let users do it themselves."]
    #[doc = "If stringload() returns zero, no file with the specified name was"]
    #[doc = "found or there was insufficient memory to open it."]
    pub fn stringload(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn toolfile_new(
        name: *const ::std::os::raw::c_char,
        vol: ::std::os::raw::c_short,
        type_: t_fourcc,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn toolfile_fread(
        t: *mut t_toolfile,
        buf: *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn toolfile_fwrite(
        t: *mut t_toolfile,
        buf: *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn toolfile_getc(t: *mut t_toolfile) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn onecopy_fileload(
        s: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Give the preset object a general message to restore the current state of your object."]
    #[doc = "This is a general preset function for use when your object's state"]
    #[doc = "cannot be restored with a simple int or set message. The example"]
    #[doc = "below shows the expected format for specifying what your current"]
    #[doc = "state is to a preset object. The first thing you supply is your object itself,"]
    #[doc = "followed by the symbol that is the name of your object's class (which"]
    #[doc = "you can retrieve from your object using the macro ob_sym, declared in"]
    #[doc = "ext_mess.h). Next, supply the symbol that specifies the message you"]
    #[doc = "want receive (a method for which had better be defined in your class),"]
    #[doc = "followed by the arguments to this message—the current values of your"]
    #[doc = "object's fields."]
    #[doc = ""]
    #[doc = "@ingroup presets"]
    #[doc = "@param\tfmt\t\tC string containing one or more letters corresponding"]
    #[doc = "to the types of each element of the message. s for"]
    #[doc = "Symbol, l for long, or f for float."]
    #[doc = "@param\t...\t\tElements of the message used to restore the state of"]
    #[doc = "your object, passed directly to the function as Symbols,"]
    #[doc = "longs, or floats. See below for an example that"]
    #[doc = "conforms to what the preset object expects."]
    pub fn preset_store(fmt: *mut ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = " Restore the state of your object with a set message."]
    #[doc = "This function causes a set message with the argument value to be sent"]
    #[doc = "to your object from the preset object when the user executes a preset."]
    #[doc = ""]
    #[doc = "@ingroup presets"]
    #[doc = "@param\tobj\t\tYour object."]
    #[doc = "@param\tval\t\tCurrent value of your object."]
    pub fn preset_set(obj: *mut t_object, val: t_atom_long);
}
extern "C" {
    #[doc = "\tRestore the state of your object with an int message."]
    #[doc = "This function causes an int message with the argument value to be"]
    #[doc = "sent to your object from the preset object when the user executes a"]
    #[doc = "preset. All of the existing user interface objects use the int message for"]
    #[doc = "restoring their state when a preset is executed."]
    #[doc = ""]
    #[doc = "@ingroup presets"]
    #[doc = "@param\tx\tYour object."]
    #[doc = "@param\tn\tCurrent value of your object."]
    pub fn preset_int(x: *mut t_object, n: t_atom_long);
}
extern "C" {
    pub fn evnum_incr();
}
extern "C" {
    pub fn evnum_get() -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Use proxy_new to create a new Proxy object."]
    #[doc = ""]
    #[doc = "@ingroup inout"]
    #[doc = "@param\tx\t\t\tYour object."]
    #[doc = "@param\tid\t\t\tA non-zero number to be written into your object when a message is received in this particular Proxy."]
    #[doc = "Normally, id will be the inlet number analogous to in1, in2 etc."]
    #[doc = "@param\tstuffloc\tA pointer to a location where the id value will be written."]
    #[doc = "@return\t\t\t\tA pointer to the new proxy inlet."]
    #[doc = ""]
    #[doc = "@remark\t\tThis routine creates a new Proxy object (that includes an inlet). It"]
    #[doc = "allows you to identify messages based on an id value stored in the"]
    #[doc = "location specified by stuffLoc. You should store the pointer"]
    #[doc = "returned by proxy_new() because you'll need to free all Proxies in your"]
    #[doc = "object's free function using object_free()."]
    #[doc = ""]
    #[doc = "After your method has finished, Proxy sets the stuffLoc location"]
    #[doc = "back to 0, since it never sees messages coming in an object's leftmost"]
    #[doc = "inlet. You'll know you received a message in the leftmost inlet if the"]
    #[doc = "contents of stuffLoc is 0. As of Max 4.3, stuffLoc is not always"]
    #[doc = "guaranteed to be a correct indicator of the inlet in which a message was"]
    #[doc = "received. Use proxy_getinlet() to determine the inlet number."]
    pub fn proxy_new(
        x: *mut ::std::os::raw::c_void,
        id: ::std::os::raw::c_long,
        stuffloc: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Use proxy_getinlet to get the inlet number in which a message was received."]
    #[doc = "Note that the <code>owner</code> argument should point to your external object's instance, not a proxy object."]
    #[doc = ""]
    #[doc = "@ingroup inout"]
    #[doc = "@param\tmaster\tYour object."]
    #[doc = "@return\t\t\tThe index number of the inlet that received the message."]
    pub fn proxy_getinlet(master: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn proxy_append(
        master: *mut t_object,
        id: ::std::os::raw::c_long,
        stuffloc: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn proxy_insert(
        master: *mut t_object,
        id: ::std::os::raw::c_long,
        stuffloc: *mut ::std::os::raw::c_long,
        previous_proxy: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn proxy_new_forinlet(
        master: *mut t_object,
        id: ::std::os::raw::c_long,
        stuffloc: *mut ::std::os::raw::c_long,
        inlet: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn proxy_delete(xx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn proxy_setinletptr(xx: *mut ::std::os::raw::c_void, inlet: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn proxy_getinletptr(xx: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn connection_client(
        cli: *mut t_object,
        name: *mut t_symbol,
        classname: *mut t_symbol,
        traverse: method,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn connection_server(obj: *mut t_object, name: *mut t_symbol);
}
extern "C" {
    pub fn connection_send(
        server: *mut t_object,
        name: *mut t_symbol,
        mess: *mut t_symbol,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn connection_delete(ob: *mut t_object, name: *mut t_symbol);
}
extern "C" {
    #[doc = "Register a function that will be called when Max exits."]
    #[doc = ""]
    #[doc = "@ingroup misc"]
    #[doc = "@param\tm\tA function that will be called on Max exit."]
    #[doc = "@param\ta\tArgument to be used with method m."]
    #[doc = ""]
    #[doc = "@remark\t\tquittask_install() provides a mechanism for your external to"]
    #[doc = "register a routine to be called prior to Max shutdown. This is useful for"]
    #[doc = "objects that need to provide disk-based persistance outside the"]
    #[doc = "standard Max storage mechanisms, or need to shut down hardware or"]
    #[doc = "their connection to system software and cannot do so in the"]
    #[doc = "termination routine of a code fragment."]
    pub fn quittask_install(m: method, a: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Unregister a function previously registered with quittask_install()."]
    #[doc = ""]
    #[doc = "@ingroup misc"]
    #[doc = "@param\tm\tFunction to be removed as a shutdown method."]
    pub fn quittask_remove(m: method);
}
extern "C" {
    pub fn quittask_remove2(m: method, a: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Determine version information about the current Max environment."]
    #[doc = ""]
    #[doc = "This function returns the version number of Max. In Max versions"]
    #[doc = "2.1.4 and later, this number is the version number of the Max kernel"]
    #[doc = "application in binary-coded decimal. Thus, 2.1.4 would return 214 hex"]
    #[doc = "or 532 decimal. Version 3.0 returns 300 hex."]
    #[doc = ""]
    #[doc = "Use this to check for the existence of particular function macros that are only present in more"]
    #[doc = "recent Max versions. Versions before 2.1.4 returned 1, except for"]
    #[doc = "versions 2.1.1 - 2.1.3 which returned 2."]
    #[doc = ""]
    #[doc = "Bit 14 (counting from left) will"]
    #[doc = "be set if Max is running as a standalone application, so you should"]
    #[doc = "mask the lower 12 bits to get the version number."]
    #[doc = ""]
    #[doc = "@ingroup\tmisc"]
    #[doc = "@return\t\tThe Max environment's version number."]
    pub fn maxversion() -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn serialno() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ispatcher(x: *mut t_object) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn isnewex(x: *mut t_object) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Use open_promptset() to add a prompt message to the open file dialog displayed by open_dialog()."]
    #[doc = ""]
    #[doc = "Calling this function before open_dialog() permits a string to"]
    #[doc = "displayed in the dialog box instructing the user as to the purpose of the"]
    #[doc = "file being opened. It will only apply to the call of open_dialog() that"]
    #[doc = "immediately follows open_promptset()."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\ts\t\tA C-string containing the prompt you wish to display in the dialog box."]
    #[doc = "@return\t\t\tIgnore."]
    #[doc = ""]
    #[doc = "@see open_dialog()"]
    pub fn open_promptset(s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "Use saveas_promptset() to add a prompt message to the open file dialog displayed by saveas_dialog()"]
    #[doc = "or saveasdialog_extended()."]
    #[doc = ""]
    #[doc = "Calling this function before saveasdialog_extended() permits a string to"]
    #[doc = "displayed in the dialog box instructing the user as to the purpose of the"]
    #[doc = "file being opened. It will only apply to the call of saveasdialog_extended() that"]
    #[doc = "immediately follows saveas_promptset()."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\ts\t\tA C-string containing the prompt you wish to display in the dialog box."]
    #[doc = "@return\t\t\tIgnore."]
    #[doc = ""]
    #[doc = "@see open_dialog()"]
    pub fn saveas_promptset(s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dialog_setkey(type_: t_fourcc);
}
extern "C" {
    pub fn saveasdialog_pathset(path: ::std::os::raw::c_short, force: ::std::os::raw::c_short);
}
extern "C" {
    pub fn tabfromhandle(h: t_handle, n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stdlist(
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
    );
}
extern "C" {
    pub fn inspector_open(
        x: *mut t_object,
        p: *mut ::std::os::raw::c_void,
        b: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn object_subpatcher(
        x: *mut t_object,
        index: *mut ::std::os::raw::c_long,
        arg: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "\tCreate a new filewatcher."]
    #[doc = "The file will not be actively watched until filewatcher_start() is called."]
    #[doc = "The filewatcher can be freed using object_free()."]
    #[doc = ""]
    #[doc = "@ingroup\t\t\tfiles"]
    #[doc = "@param\towner\t\tYour object."]
    #[doc = "This object will receive the message \"filechanged\" when the watcher sees a change in the file or folder."]
    #[doc = "@param\tpath\t\tThe path in which the file being watched resides, or the path of the folder being watched."]
    #[doc = "@param\tfilename\tThe name of the file being watched, or an empty string if you are simply watching the folder specified by path."]
    #[doc = "@return\t\t\t\tA pointer to the new filewatcher."]
    #[doc = "@remark\t\t\t\tThe \"filechanged\" method should have the prototype:"]
    #[doc = "@code"]
    #[doc = "void myObject_filechanged(t_myObject *x, char *filename, short path);"]
    #[doc = "@endcode"]
    pub fn filewatcher_new(
        owner: *mut t_object,
        path: ::std::os::raw::c_short,
        filename: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "\tStart watching a file using a filewatcher created with filewatcher_new()."]
    #[doc = "@param\tx\t\t\tA filewatcher pointer, as returned by filewatcher_new()."]
    pub fn filewatcher_start(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "\tStop watching a file using a filewatcher created with filewatcher_new()."]
    #[doc = "@param\tx\t\t\tA filewatcher pointer, as returned by filewatcher_new()."]
    pub fn filewatcher_stop(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "\tAdd a file to a collective."]
    #[doc = "@ingroup\t\tfiles"]
    #[doc = "@param\tw\t\tHandle for the collective builder."]
    #[doc = "@param\tflags\tIf flags == 1, copy this file to support folder of an app instead of to the collective in an app."]
    #[doc = "@param\tname\tThe name of the file."]
    #[doc = "@param\tpath\tThe path of the file to add."]
    pub fn fileusage_addfile(
        w: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_long,
        name: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn fileusage_addfilename(
        w: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_long,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = "\tAdd a package to a standalone."]
    #[doc = "@ingroup\t\t\t\t\tfiles"]
    #[doc = "@param\tw\t\t\t\t\tHandle for the standalone builder"]
    #[doc = "@param\tname\t\t\t\tThe name of the package"]
    #[doc = "@param\tsubfoldernames\t\tA #t_atomarray containing symbols, each of which is a foldername in the package to include."]
    #[doc = "Pass NULL to include the entire package contents."]
    #[doc = "@version\t\t\t\t\tIntroduced in Max 7.0.4"]
    pub fn fileusage_addpackage(
        w: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        subfoldernames: *mut t_atomarray,
    );
}
extern "C" {
    pub fn fileusage_addpathname(
        w: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_long,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn fileusage_copyfolder(
        w: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        recursive: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn fileusage_makefolder(
        w: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = "\tAdd a folder to a standalone."]
    #[doc = "@ingroup\t\t\t\t\tfiles"]
    #[doc = "@param\tw\t\t\t\t\tHandle for the standalone builder"]
    #[doc = "@param\tpath\t\t\t\tPath of the folder"]
    #[doc = "@param\trecursive\t\t\tAdd the contents of the folder recursively (respected only when building standalones)"]
    #[doc = "@version\t\t\t\t\tIntroduced in Max 8.0.2"]
    pub fn fileusage_addfolder(
        w: *mut ::std::os::raw::c_void,
        path: ::std::os::raw::c_short,
        recursive: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn fontinfo_getencoding(id: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fontinfo_convert(
        x: *mut t_object,
        src: *mut ::std::os::raw::c_char,
        srclen: ::std::os::raw::c_long,
        encoding: ::std::os::raw::c_long,
        out: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fontinfo_reconverthandle(
        x: *mut t_object,
        h: *mut *mut ::std::os::raw::c_char,
        encoding: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn fontinfo_prefcheckencoding() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atom_dynamic_start(
        static_array: *const t_atom,
        static_count: ::std::os::raw::c_long,
        request_count: ::std::os::raw::c_long,
    ) -> *mut t_atom;
}
extern "C" {
    pub fn atom_dynamic_end(static_array: *const t_atom, request_array: *mut t_atom);
}
extern "C" {
    pub fn getfolder(vol: *mut ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Present the user with the standard open file dialog."]
    #[doc = "This function is convenient wrapper for using Mac OS Navigation"]
    #[doc = "Services or Standard File for opening files."]
    #[doc = ""]
    #[doc = "The mapping of extensions to types is configured in the C74:/init/max-fileformats.txt file."]
    #[doc = "The standard types to use for Max files are 'maxb' for old-format binary files,"]
    #[doc = "'TEXT' for text files, and 'JSON' for newer format patchers or other .json files."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tname\tA C-string that will receive the name of the file the user wants to open."]
    #[doc = "The C-string should be allocated with a size of at least #MAX_FILENAME_CHARS."]
    #[doc = "@param\tvolptr\tReceives the Path ID of the file the user wants to open."]
    #[doc = "@param\ttypeptr\tThe file type of the file the user wants to open."]
    #[doc = "@param\ttypes\tA list of file types to display. This is not limited to 4"]
    #[doc = "types as in the SFGetFile() trap. Pass NULL to display all types."]
    #[doc = "@param\tntypes\tThe number of file types in typelist. Pass 0 to display all types."]
    #[doc = ""]
    #[doc = "@return\t\t\t0 if the user clicked Open in the dialog box."]
    #[doc = "If the user cancelled, open_dialog() returns a non-zero value."]
    #[doc = ""]
    #[doc = "@see saveasdialog_extended()"]
    #[doc = "@see locatefile_extended()"]
    pub fn open_dialog(
        name: *mut ::std::os::raw::c_char,
        volptr: *mut ::std::os::raw::c_short,
        typeptr: *mut t_fourcc,
        types: *mut t_fourcc,
        ntypes: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Present the user with the standard save file dialog."]
    #[doc = ""]
    #[doc = "The mapping of extensions to types is configured in the C74:/init/max-fileformats.txt file."]
    #[doc = "The standard types to use for Max files are 'maxb' for old-format binary files,"]
    #[doc = "'TEXT' for text files, and 'JSON' for newer format patchers or other .json files."]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tfilename\tA C-string containing a default name for the file to save."]
    #[doc = "If the user decides to save a file, its name is returned here."]
    #[doc = "The C-string should be allocated with a size of at least #MAX_FILENAME_CHARS."]
    #[doc = ""]
    #[doc = "@param\tpath\t\tIf the user decides to save the file, the Path ID of the location chosen is returned here."]
    #[doc = ""]
    #[doc = "@param\tbinptr\t\tPass NULL for this parameter."]
    #[doc = "This parameter was used in Max 4 to allow the choice of saving binary or text format patchers."]
    #[doc = ""]
    #[doc = "@return\t\t\t\t0 if the user choose to save the file."]
    #[doc = "If the user cancelled, returns a non-zero value."]
    #[doc = ""]
    #[doc = "@see open_dialog()"]
    #[doc = "@see saveasdialog_extended()"]
    #[doc = "@see locatefile_extended()"]
    pub fn saveas_dialog(
        filename: *mut ::std::os::raw::c_char,
        path: *mut ::std::os::raw::c_short,
        binptr: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Present the user with the standard save file dialog with your own list of file types."]
    #[doc = ""]
    #[doc = "saveasdialog_extended() is similar to saveas_dialog(), but allows the"]
    #[doc = "additional feature of specifying a list of possible types. These will be"]
    #[doc = "displayed in a pop-up menu."]
    #[doc = ""]
    #[doc = "File types found in the typelist argument that match known Max types"]
    #[doc = "will be displayed with descriptive text. Unmatched types will simply"]
    #[doc = "display the type name (for example, \"foXx\" is not a standard type so it"]
    #[doc = "would be shown in the pop-up menu as foXx)"]
    #[doc = ""]
    #[doc = "Known file types include:"]
    #[doc = "- TEXT: text file"]
    #[doc = "- maxb: Max binary patcher"]
    #[doc = "- maxc: Max collective"]
    #[doc = "- Midi: MIDI file"]
    #[doc = "- Sd2f: Sound Designer II audio file"]
    #[doc = "- NxTS: NeXT/Sun audio file"]
    #[doc = "- WAVE: WAVE audio file."]
    #[doc = "- AIFF: AIFF audio file"]
    #[doc = "- mP3f: Max preference file"]
    #[doc = "- PICT: PICT graphic file"]
    #[doc = "- MooV: Quicktime movie file"]
    #[doc = "- aPcs: VST plug-in"]
    #[doc = "- AFxP: VST effect patch data file"]
    #[doc = "- AFxB: VST effect bank data file"]
    #[doc = "- DATA: Raw data audio file"]
    #[doc = "- ULAW: NeXT/Sun audio file"]
    #[doc = ""]
    #[doc = "@ingroup files"]
    #[doc = "@param\tname\t\tA C-string containing a default name for the file to save."]
    #[doc = "If the user decides to save a file, its name is returned here."]
    #[doc = "The C-string should be allocated with a size of at least #MAX_FILENAME_CHARS."]
    #[doc = ""]
    #[doc = "@param\tvol\t\t\tIf the user decides to save the file, the Path ID of the location chosen is returned here."]
    #[doc = ""]
    #[doc = "@param\ttype\t\tReturns the type of file chosen by the user."]
    #[doc = "@param\ttypelist\tThe list of types provided to the user."]
    #[doc = "@param\tnumtypes\tThe number of file types in typelist."]
    #[doc = ""]
    #[doc = "@return\t\t\t\t0 if the user choose to save the file."]
    #[doc = "If the user cancelled, returns a non-zero value."]
    #[doc = ""]
    #[doc = "@see open_dialog()"]
    #[doc = "@see locatefile_extended()"]
    pub fn saveasdialog_extended(
        name: *mut ::std::os::raw::c_char,
        vol: *mut ::std::os::raw::c_short,
        type_: *mut t_fourcc,
        typelist: *mut t_fourcc,
        numtypes: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn saveas_autoextension(way: t_bool);
}
extern "C" {
    pub fn saveas_setselectedtype(type_: t_fourcc);
}
extern "C" {
    pub fn preferences_path(
        name: *const ::std::os::raw::c_char,
        create: ::std::os::raw::c_short,
        path: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn preferences_subpath(
        name: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        create: ::std::os::raw::c_short,
        subpath: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn textpreferences_read(
        filename: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        defaultid: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn textpreferences_default(id: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn textpreferences_open() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn textpreferences_addraw(
        p: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn textpreferences_add(
        p: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn textpreferences_addoption(
        p: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn textpreferences_addrect(
        p: *mut ::std::os::raw::c_void,
        msg: *mut ::std::os::raw::c_char,
        top: ::std::os::raw::c_short,
        left: ::std::os::raw::c_short,
        bottom: ::std::os::raw::c_short,
        right: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn textpreferences_close(
        p: *mut ::std::os::raw::c_void,
        filename: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
#[doc = " The atomarray object. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup atomarray"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _atomarray {
    pub ob: t_object,
    pub ac: ::std::os::raw::c_long,
    pub av: *mut t_atom,
    pub flags: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__atomarray() {
    assert_eq!(
        ::std::mem::size_of::<_atomarray>(),
        56usize,
        concat!("Size of: ", stringify!(_atomarray))
    );
    assert_eq!(
        ::std::mem::align_of::<_atomarray>(),
        8usize,
        concat!("Alignment of ", stringify!(_atomarray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_atomarray>())).ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_atomarray),
            "::",
            stringify!(ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_atomarray>())).ac as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_atomarray),
            "::",
            stringify!(ac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_atomarray>())).av as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_atomarray),
            "::",
            stringify!(av)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_atomarray>())).flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_atomarray),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    #[doc = "Create a new atomarray object."]
    #[doc = "Note that atoms provided to this function will be <em>copied</em>. The copies stored internally to the atomarray instance."]
    #[doc = "You can free the atomarray by calling object_free()."]
    #[doc = ""]
    #[doc = "@ingroup\tatomarray"]
    #[doc = "@param\tac\tThe number of atoms to be initially contained in the atomarray."]
    #[doc = "@param\tav\tA pointer to the first of an array of atoms to initially copy into the atomarray."]
    #[doc = "@return\t\tPointer to the new atomarray object."]
    #[doc = ""]
    #[doc = "@remark\t\tNote that due to the unusual prototype of this method that you cannot instantiate this object using the"]
    #[doc = "object_new_typed() function.  If you wish to use the dynamically bound creator to instantiate the object,"]
    #[doc = "you should instead should use object_new() as demonstrated below.  The primary reason that you might choose"]
    #[doc = "to instantiate an atomarray using object_new() instead of atomarray_new() is for using the atomarray object"]
    #[doc = "in code that is also intended to run in Max 4."]
    #[doc = "@code"]
    #[doc = "object_new(CLASS_NOBOX, gensym(\"atomarray\"), argc, argv);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see\t\tatomarray_duplicate()"]
    pub fn atomarray_new(ac: ::std::os::raw::c_long, av: *mut t_atom) -> *mut t_atomarray;
}
extern "C" {
    #[doc = "Set the atomarray flags."]
    #[doc = ""]
    #[doc = "@ingroup\tatomarray"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe atomarray instance."]
    #[doc = "@param  flags\tThe new value for the flags."]
    pub fn atomarray_flags(x: *mut t_atomarray, flags: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Get the atomarray flags."]
    #[doc = ""]
    #[doc = "@ingroup\tatomarray"]
    #[doc = ""]
    #[doc = "@param\tx\tThe atomarray instance."]
    #[doc = "@return\t\tThe current value of the atomarray flags."]
    pub fn atomarray_getflags(x: *mut t_atomarray) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Replace the existing array contents with a new set of atoms"]
    #[doc = "Note that atoms provided to this function will be <em>copied</em>.  The copies stored internally to the atomarray instance."]
    #[doc = ""]
    #[doc = "@ingroup\tatomarray"]
    #[doc = ""]
    #[doc = "@param\tx\tThe atomarray instance."]
    #[doc = "@param\tac\tThe number of atoms to be initially contained in the atomarray."]
    #[doc = "@param\tav\tA pointer to the first of an array of atoms to initially copy into the atomarray."]
    #[doc = "@return\t\tA Max error code."]
    pub fn atomarray_setatoms(
        x: *mut t_atomarray,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a pointer to the first atom in the internal array of atoms."]
    #[doc = "This method does not copy the atoms, btu simply provides access to them."]
    #[doc = "To retrieve a copy of the atoms use atomarray_copyatoms()."]
    #[doc = ""]
    #[doc = "@ingroup\tatomarray"]
    #[doc = ""]
    #[doc = "@param\tx\tThe atomarray instance."]
    #[doc = "@param\tac\tThe address of a long where the number of atoms will be set."]
    #[doc = "@param\tav\tThe address of a #t_atom pointer where the address of the first atom of the array will be set."]
    #[doc = "@return\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\tatomarray_copyatoms()"]
    pub fn atomarray_getatoms(
        x: *mut t_atomarray,
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a copy of the atoms in the array."]
    #[doc = "To retrieve a pointer to the contained atoms use atomarray_getatoms()."]
    #[doc = ""]
    #[doc = "@ingroup\tatomarray"]
    #[doc = ""]
    #[doc = "@param\tx\tThe atomarray instance."]
    #[doc = "@param\tac\tThe address of a long where the number of atoms will be set."]
    #[doc = "@param\tav\tThe address of a #t_atom pointer where the atoms will be allocated and copied."]
    #[doc = "@return\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@remark\t\tYou are responsible for freeing memory allocated for the copy of the atoms returned."]
    #[doc = "@code"]
    #[doc = "long\tac = 0;"]
    #[doc = "t_atom *av = NULL;"]
    #[doc = ""]
    #[doc = "atomarray_copyatoms(anAtomarray, &ac, &av);"]
    #[doc = "if(ac && av){"]
    #[doc = "sysmem_freeptr(av);"]
    #[doc = "}"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see\t\tatomarray_getatoms()"]
    pub fn atomarray_copyatoms(
        x: *mut t_atomarray,
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Return the number of atoms in the array."]
    #[doc = ""]
    #[doc = "@ingroup\tatomarray"]
    #[doc = "@param\tx\tThe atomarray instance."]
    #[doc = "@return\t\tThe number of atoms in the array."]
    pub fn atomarray_getsize(x: *mut t_atomarray) -> t_atom_long;
}
extern "C" {
    #[doc = "Copy an a specific atom from the array."]
    #[doc = ""]
    #[doc = "@ingroup\t\tatomarray"]
    #[doc = "@param\tx\t\tThe atomarray instance."]
    #[doc = "@param\tindex\tThe zero-based index into the array from which to retrieve an atom pointer."]
    #[doc = "@param\tav\t\tThe address of an atom to contain the copy."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@remark\t\t\tExample:"]
    #[doc = "@code"]
    #[doc = "{"]
    #[doc = "t_atom a;"]
    #[doc = ""]
    #[doc = "atomarray_getindex(anAtomarray, 1, &a);"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn atomarray_getindex(
        x: *mut t_atomarray,
        index: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Create a new atomarray object which is a copy of another atomarray object."]
    #[doc = ""]
    #[doc = "@ingroup\t\tatomarray"]
    #[doc = "@param\tx\t\tThe atomarray instance which is to be copied."]
    #[doc = "@return\t\t\tA new atomarray which is copied from x."]
    #[doc = ""]
    #[doc = "@see\tatomarray_new()"]
    pub fn atomarray_duplicate(x: *mut t_atomarray) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Create a new atomarray object which is a full clone of another atomarray object."]
    #[doc = ""]
    #[doc = "@ingroup\t\tatomarray"]
    #[doc = "@param\tx\t\tThe atomarray instance which is to be copied."]
    #[doc = "@return\t\t\tA new atomarray which is copied from x."]
    #[doc = ""]
    #[doc = "@see\tatomarray_new()"]
    pub fn atomarray_clone(x: *mut t_atomarray) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Copy a new atom onto the end of the array."]
    #[doc = ""]
    #[doc = "@ingroup\t\tatomarray"]
    #[doc = "@param\tx\t\tThe atomarray instance."]
    #[doc = "@param\ta\t\tA pointer to the new atom to append to the end of the array."]
    #[doc = ""]
    #[doc = "@see\tatomarray_appendatoms()"]
    #[doc = "@see\tatomarray_setatoms()"]
    pub fn atomarray_appendatom(x: *mut t_atomarray, a: *mut t_atom);
}
extern "C" {
    #[doc = "Copy multiple new atoms onto the end of the array."]
    #[doc = ""]
    #[doc = "@ingroup\t\tatomarray"]
    #[doc = "@param\tx\t\tThe atomarray instance."]
    #[doc = "@param\tac\t\tThe number of new atoms to be appended to the array."]
    #[doc = "@param\tav\t\tA pointer to the first of the new atoms to append to the end of the array."]
    #[doc = ""]
    #[doc = "@see\tatomarray_appendatom()"]
    #[doc = "@see\tatomarray_setatoms()"]
    pub fn atomarray_appendatoms(x: *mut t_atomarray, ac: ::std::os::raw::c_long, av: *mut t_atom);
}
extern "C" {
    #[doc = "Remove an atom from any location within the array."]
    #[doc = "The array will be resized and collapsed to fill in the gap."]
    #[doc = ""]
    #[doc = "@ingroup\t\tatomarray"]
    #[doc = "@param\tx\t\tThe atomarray instance."]
    #[doc = "@param\tindex\tThe zero-based index of the atom to remove from the array."]
    pub fn atomarray_chuckindex(x: *mut t_atomarray, index: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Clear the array.  Frees all of the atoms and sets the size to zero."]
    #[doc = "This function does not perform a 'deep' free, meaning that any #A_OBJ atoms will not have their object's freed."]
    #[doc = "Only the references to those objects contained in the atomarray will be freed."]
    #[doc = ""]
    #[doc = "@ingroup\tatomarray"]
    #[doc = "@param\tx\tThe atomarray instance."]
    #[doc = "@return\t\tThe number of atoms in the array."]
    pub fn atomarray_clear(x: *mut t_atomarray);
}
extern "C" {
    #[doc = "Call the specified function for every item in the atom array."]
    #[doc = ""]
    #[doc = "@ingroup atomarray"]
    #[doc = "@param\tx\t\tThe atomarray instance."]
    #[doc = "@param\tfun\t\tThe function to call, specified as function pointer cast to a Max #method."]
    #[doc = "@param\targ\t\tAn argument that you would like to pass to the function being called."]
    #[doc = "@return\t\t\tA max error code."]
    #[doc = ""]
    #[doc = "@remark\t\t\tThe atomarray_funall() method will call your function for every item in the list."]
    #[doc = "It will pass both a pointer to the item in the list, and any argument that you"]
    #[doc = "provide.  The following example shows a function that could be called by hashtab_funall()."]
    #[doc = "@code"]
    #[doc = "void myFun(t_atom *a, void *myArg)"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see\t\t\tlinklist_funall()"]
    #[doc = "@see\t\t\thashtab_funall()"]
    pub fn atomarray_funall(x: *mut t_atomarray, fun: method, arg: *mut ::std::os::raw::c_void);
}
#[doc = " The atombuf struct provides a way to pass a collection of atoms."]
#[doc = "@ingroup atombuf"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct atombuf {
    #[doc = "< the number of atoms"]
    pub a_argc: ::std::os::raw::c_long,
    #[doc = "< the first of the array of atoms"]
    pub a_argv: [t_atom; 1usize],
}
#[test]
fn bindgen_test_layout_atombuf() {
    assert_eq!(
        ::std::mem::size_of::<atombuf>(),
        24usize,
        concat!("Size of: ", stringify!(atombuf))
    );
    assert_eq!(
        ::std::mem::align_of::<atombuf>(),
        8usize,
        concat!("Alignment of ", stringify!(atombuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<atombuf>())).a_argc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(atombuf),
            "::",
            stringify!(a_argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<atombuf>())).a_argv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(atombuf),
            "::",
            stringify!(a_argv)
        )
    );
}
#[doc = " The atombuf struct provides a way to pass a collection of atoms."]
#[doc = "@ingroup atombuf"]
pub type t_atombuf = atombuf;
extern "C" {
    #[doc = "Use atombuf_new() to create a new Atombuf from an array of t_atoms."]
    #[doc = ""]
    #[doc = "@ingroup atombuf"]
    #[doc = "@param\targc\tNumber of t_atoms in the argv array. May be 0."]
    #[doc = "@param\targv\tArray of t_atoms. If creating an empty Atombuf, you may pass 0."]
    #[doc = "@return\t\t\tatombuf_new() create a new #t_atombuf and returns a pointer to it."]
    #[doc = "If 0 is returned, insufficient memory was available."]
    pub fn atombuf_new(
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Use atombuf_free() to dispose of the memory used by a #t_atombuf."]
    #[doc = ""]
    #[doc = "@ingroup atombuf"]
    #[doc = "@param\tx\tThe #t_atombuf to free."]
    pub fn atombuf_free(x: *mut t_atombuf);
}
extern "C" {
    #[doc = "Use atombuf_text() to convert text to a #t_atom array in a #t_atombuf."]
    #[doc = "To use this routine to create a new Atombuf from the text buffer, first"]
    #[doc = "create a new empty t_atombuf with a call to atombuf_new(0,NULL)."]
    #[doc = ""]
    #[doc = "@ingroup atombuf"]
    #[doc = "@param\tx\t\tPointer to existing atombuf variable."]
    #[doc = "The variable will be replaced by a new Atombuf containing the converted text."]
    #[doc = "@param\ttext\tHandle to the text to be converted. It need not be zero-terminated."]
    #[doc = "@param\tsize\tNumber of characters in the text."]
    pub fn atombuf_text(
        x: *mut *mut t_atombuf,
        text: *mut *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn atombuf_totext(
        x: *mut t_atombuf,
        text: *mut *mut ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn atombuf_count(x: *mut t_atombuf) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn atombuf_set(
        x: *mut t_atombuf,
        start: ::std::os::raw::c_long,
        num: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn atombuf_replacepoundargs(
        x: *mut t_atombuf,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atombuf_next(
        x: *mut t_atombuf,
        count: *mut ::std::os::raw::c_long,
        atom: *mut t_atom,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn atombuf_replace(
        x: *mut *mut t_atombuf,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    );
}
extern "C" {
    pub fn atombuf_prepend(
        x: *mut *mut t_atombuf,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    );
}
extern "C" {
    pub fn atombuf_append(
        x: *mut *mut t_atombuf,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    );
}
extern "C" {
    pub fn atombuf_eval(
        x: *mut t_atombuf,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        to: *mut t_object,
    ) -> *mut ::std::os::raw::c_void;
}
#[doc = "The string object. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup string"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _string {
    pub s_obj: t_object,
    pub s_text: *mut ::std::os::raw::c_char,
    pub s_size: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__string() {
    assert_eq!(
        ::std::mem::size_of::<_string>(),
        48usize,
        concat!("Size of: ", stringify!(_string))
    );
    assert_eq!(
        ::std::mem::align_of::<_string>(),
        8usize,
        concat!("Alignment of ", stringify!(_string))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_string>())).s_obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_string),
            "::",
            stringify!(s_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_string>())).s_text as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_string),
            "::",
            stringify!(s_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_string>())).s_size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_string),
            "::",
            stringify!(s_size)
        )
    );
}
#[doc = "The string object. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup string"]
pub type t_string = _string;
extern "C" {
    #[doc = "Create a new string object."]
    #[doc = "@ingroup string"]
    #[doc = "@param\tpsz\t\tPointer to a C-string that will be copied to memory internal to this string object instance."]
    #[doc = "@return\t\t\tThe new string object instance pointer."]
    pub fn string_new(psz: *const ::std::os::raw::c_char) -> *mut t_string;
}
extern "C" {
    #[doc = "Fetch a pointer to a string object's internal C-string."]
    #[doc = "@ingroup string"]
    #[doc = "@param\tx\t\tThe string object instance."]
    #[doc = "@return\t\t\tA pointer to the internally maintained C-string."]
    pub fn string_getptr(x: *mut t_string) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "Reserve additional memory for future string growth."]
    #[doc = "@ingroup string"]
    #[doc = "@param\tx\t\t\tThe string object instance."]
    #[doc = "@param\tnumbytes\tThe total number of bytes to allocate for this string object."]
    pub fn string_reserve(x: *mut t_string, numbytes: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Append a C-string onto the existing string maintained by a #t_string object."]
    #[doc = "Memory allocation for the string will grow as needed to hold the concatenated string."]
    #[doc = ""]
    #[doc = "@ingroup string"]
    #[doc = "@param\tx\t\t\tThe string object instance."]
    #[doc = "@param\ts\t\t\tA string to append/concatenate with the existing string."]
    pub fn string_append(x: *mut t_string, s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "Shorten a string by eliminating N characters from the end."]
    #[doc = ""]
    #[doc = "@ingroup string"]
    #[doc = "@param\tx\t\t\tThe string object instance."]
    #[doc = "@param\tnumchars\tThe number of characters to chop from the end of the string."]
    pub fn string_chop(x: *mut t_string, numchars: ::std::os::raw::c_long);
}
pub type t_int32_atomic = i32;
pub type t_uint32_atomic = u_int32_t;
#[doc = " A linklist element. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup linklist"]
#[doc = "@see t_linklist"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _llelem {
    pub thing: *mut t_object,
    pub next: *mut _llelem,
    pub prev: *mut _llelem,
    pub flags: ::std::os::raw::c_long,
    pub marked: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__llelem() {
    assert_eq!(
        ::std::mem::size_of::<_llelem>(),
        40usize,
        concat!("Size of: ", stringify!(_llelem))
    );
    assert_eq!(
        ::std::mem::align_of::<_llelem>(),
        8usize,
        concat!("Alignment of ", stringify!(_llelem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_llelem>())).thing as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_llelem),
            "::",
            stringify!(thing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_llelem>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_llelem),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_llelem>())).prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_llelem),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_llelem>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_llelem),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_llelem>())).marked as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_llelem),
            "::",
            stringify!(marked)
        )
    );
}
#[doc = " A linklist element. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup linklist"]
#[doc = "@see t_linklist"]
pub type t_llelem = _llelem;
#[doc = " The linklist object. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup linklist"]
#[doc = "@see t_llelem"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _linklist {
    pub ob: t_object,
    pub count: ::std::os::raw::c_long,
    pub head: *mut t_llelem,
    pub tail: *mut t_llelem,
    pub readonly: ::std::os::raw::c_long,
    pub lock: *mut ::std::os::raw::c_void,
    pub cache: *mut t_llelem,
    pub flags: ::std::os::raw::c_long,
    pub pending: *mut t_llelem,
    pub iterating: t_uint32_atomic,
    pub sweep: ::std::os::raw::c_long,
    pub locktype: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__linklist() {
    assert_eq!(
        ::std::mem::size_of::<_linklist>(),
        120usize,
        concat!("Size of: ", stringify!(_linklist))
    );
    assert_eq!(
        ::std::mem::align_of::<_linklist>(),
        8usize,
        concat!("Alignment of ", stringify!(_linklist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_linklist>())).ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_linklist),
            "::",
            stringify!(ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_linklist>())).count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_linklist),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_linklist>())).head as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_linklist),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_linklist>())).tail as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_linklist),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_linklist>())).readonly as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_linklist),
            "::",
            stringify!(readonly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_linklist>())).lock as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_linklist),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_linklist>())).cache as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_linklist),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_linklist>())).flags as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_linklist),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_linklist>())).pending as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_linklist),
            "::",
            stringify!(pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_linklist>())).iterating as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_linklist),
            "::",
            stringify!(iterating)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_linklist>())).sweep as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_linklist),
            "::",
            stringify!(sweep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_linklist>())).locktype as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_linklist),
            "::",
            stringify!(locktype)
        )
    );
}
#[doc = " The linklist object. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup linklist"]
#[doc = "@see t_llelem"]
pub type t_linklist = _linklist;
extern "C" {
    #[doc = "Create a new linklist object."]
    #[doc = "You can free the linklist by calling object_free() on the linklist's pointer,"]
    #[doc = "or by using linklist_chuck()."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@return  Pointer to the new linklist object."]
    #[doc = ""]
    #[doc = "@see\t\t\t\tobject_free()"]
    #[doc = "@see\t\t\t\tlinklist_chuck()"]
    pub fn linklist_new() -> *mut t_linklist;
}
extern "C" {
    #[doc = "Free a linklist, but don't free the items it contains."]
    #[doc = ""]
    #[doc = "The linklist can contain a variety of different types of data."]
    #[doc = "By default, the linklist assumes that all items are max objects with a valid"]
    #[doc = "#t_object header."]
    #[doc = ""]
    #[doc = "You can alter the linklist's notion of what it contains by using the"]
    #[doc = "linklist_flags() method."]
    #[doc = ""]
    #[doc = "When you free the linklist by calling object_free() it then tries to free all of the items it contains."]
    #[doc = "If the linklist is storing a custom type of data, or should otherwise not free the data it contains,"]
    #[doc = "then call linklist_chuck() to free the object instead of object_free()."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\tThe linklist object to be freed."]
    #[doc = "@see object_free"]
    pub fn linklist_chuck(x: *mut t_linklist);
}
extern "C" {
    #[doc = "Return the number of items in a linklist object."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\tx\tThe linklist instance."]
    #[doc = "@return\t\tThe number of items in the linklist object."]
    pub fn linklist_getsize(x: *mut t_linklist) -> t_atom_long;
}
extern "C" {
    #[doc = "Return the item stored in a linklist at a specified index."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\tindex\tThe index in the linklist to fetch.  Indices are zero-based."]
    #[doc = "@return\t\t\tThe item from the linklist stored at index."]
    #[doc = "If there is no item at the index, <code>NULL</code> is returned"]
    pub fn linklist_getindex(
        x: *mut t_linklist,
        index: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Return an item's index, given the item itself."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\tp\t\tThe item pointer to search for in the linklist."]
    #[doc = "@return\t\t\tThe index of the item given in the linklist."]
    #[doc = "If the item is not in the linklist #MAX_ERR_GENERIC is returned."]
    pub fn linklist_objptr2index(x: *mut t_linklist, p: *mut ::std::os::raw::c_void)
        -> t_atom_long;
}
extern "C" {
    #[doc = "Add an item to the end of the list."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\to\t\tThe item pointer to append to the linked-list."]
    #[doc = "@return\t\t\tThe updated size of the linklist after appending the new item, or -1 if the append failed."]
    pub fn linklist_append(x: *mut t_linklist, o: *mut ::std::os::raw::c_void) -> t_atom_long;
}
extern "C" {
    #[doc = "\tInsert an item into the list at the specified index."]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\to\t\tThe item pointer to insert."]
    #[doc = "@param\tindex\tThe index at which to insert.  Index 0 is the head of the list."]
    #[doc = "@return\t\t\tThe index of the item in the linklist, or -1 if the insert failed."]
    pub fn linklist_insertindex(
        x: *mut t_linklist,
        o: *mut ::std::os::raw::c_void,
        index: ::std::os::raw::c_long,
    ) -> t_atom_long;
}
extern "C" {
    #[doc = "\tInsert an item into the list, keeping the list sorted according to a specified comparison function."]
    #[doc = "@ingroup\t\tlinklist"]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\to\t\tThe item pointer to insert."]
    #[doc = "@param\tcmpfn\tA comparison function by which the list should be sorted."]
    #[doc = "@return\t\t\tThe index of the new item in the linklist, or -1 if the insert failed."]
    pub fn linklist_insert_sorted(
        x: *mut t_linklist,
        o: *mut ::std::os::raw::c_void,
        cmpfn: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_long,
        >,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Insert an item into the list after another specified item."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\to\t\tThe item pointer to insert."]
    #[doc = "@param\tobjptr\tThe item pointer after which to insert in the list."]
    #[doc = ""]
    #[doc = "@return\t\t\tAn opaque linklist element."]
    pub fn linklist_insertafterobjptr(
        x: *mut t_linklist,
        o: *mut ::std::os::raw::c_void,
        objptr: *mut ::std::os::raw::c_void,
    ) -> *mut t_llelem;
}
extern "C" {
    #[doc = "Insert an item into the list before another specified item."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\to\t\tThe item pointer to insert."]
    #[doc = "@param\tobjptr\tThe item pointer before which to insert in the list."]
    #[doc = ""]
    #[doc = "@return\t\t\tAn opaque linklist element."]
    pub fn linklist_insertbeforeobjptr(
        x: *mut t_linklist,
        o: *mut ::std::os::raw::c_void,
        objptr: *mut ::std::os::raw::c_void,
    ) -> *mut t_llelem;
}
extern "C" {
    #[doc = "Move an existing item in the list to a position after another specified item in the list."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\to\t\tThe item pointer to insert."]
    #[doc = "@param\tobjptr\tThe item pointer after which to move o in the list."]
    #[doc = ""]
    #[doc = "@return\t\t\tAn opaque linklist element."]
    pub fn linklist_moveafterobjptr(
        x: *mut t_linklist,
        o: *mut ::std::os::raw::c_void,
        objptr: *mut ::std::os::raw::c_void,
    ) -> *mut t_llelem;
}
extern "C" {
    #[doc = "Move an existing item in the list to a position before another specified item in the list."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\to\t\tThe item pointer to insert."]
    #[doc = "@param\tobjptr\tThe item pointer before which to move o in the list."]
    #[doc = ""]
    #[doc = "@return\t\t\tAn opaque linklist element."]
    pub fn linklist_movebeforeobjptr(
        x: *mut t_linklist,
        o: *mut ::std::os::raw::c_void,
        objptr: *mut ::std::os::raw::c_void,
    ) -> *mut t_llelem;
}
extern "C" {
    #[doc = "Remove the item from the list at the specified index and free it."]
    #[doc = ""]
    #[doc = "The linklist can contain a variety of different types of data."]
    #[doc = "By default, the linklist assumes that all items are max objects with a valid"]
    #[doc = "#t_object header.  Thus by default, it frees items by calling object_free() on them."]
    #[doc = ""]
    #[doc = "You can alter the linklist's notion of what it contains by using the"]
    #[doc = "linklist_flags() method."]
    #[doc = ""]
    #[doc = "If you wish to remove an item from the linklist and free it yourself, then you"]
    #[doc = "should use linklist_chuckptr()."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\tindex\tThe index of the item to delete."]
    #[doc = "@return\t\t\tReturns the index number of the item delted, or -1 if the operation failed."]
    #[doc = ""]
    #[doc = "@see\t\t\tlinklist_chuckindex"]
    #[doc = "@see\t\t\tlinklist_chuckobject"]
    pub fn linklist_deleteindex(x: *mut t_linklist, index: ::std::os::raw::c_long) -> t_atom_long;
}
extern "C" {
    #[doc = "Remove the item from the list at the specified index."]
    #[doc = ""]
    #[doc = "You are responsible for freeing any memory associated with the item that is"]
    #[doc = "removed from the linklist."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\tindex\tThe index of the item to remove."]
    #[doc = "@return\t\t\tReturns #MAX_ERR_NONE on successful removal, otherwise returns #MAX_ERR_GENERIC"]
    #[doc = ""]
    #[doc = "@see\t\t\tlinklist_deleteindex"]
    #[doc = "@see\t\t\tlinklist_chuckobject"]
    pub fn linklist_chuckindex(
        x: *mut t_linklist,
        index: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Remove the specified item from the list."]
    #[doc = ""]
    #[doc = "You are responsible for freeing any memory associated with the item that is"]
    #[doc = "removed from the linklist."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\to\t\tThe pointer to the item to remove."]
    #[doc = ""]
    #[doc = "@see\t\t\tlinklist_deleteindex"]
    #[doc = "@see\t\t\tlinklist_chuckindex"]
    #[doc = "@see\t\t\tlinklist_deleteobject"]
    pub fn linklist_chuckobject(
        x: *mut t_linklist,
        o: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Delete the specified item from the list."]
    #[doc = ""]
    #[doc = "The object is removed from the list and deleted."]
    #[doc = "The deletion is done with respect to any flags passed to linklist_flags."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\to\t\tThe pointer to the item to delete."]
    #[doc = ""]
    #[doc = "@see\t\t\tlinklist_deleteindex"]
    #[doc = "@see\t\t\tlinklist_chuckindex"]
    #[doc = "@see\t\t\tlinklist_chuckobject"]
    pub fn linklist_deleteobject(
        x: *mut t_linklist,
        o: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn linklist_chuckptr(x: *mut t_linklist, p: *mut t_llelem) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Remove and free all items in the list."]
    #[doc = ""]
    #[doc = "Freeing items in the list is subject to the same rules as linklist_deleteindex()."]
    #[doc = "You can alter the linklist's notion of what it contains, and thus how items are freed,"]
    #[doc = "by using the linklist_flags() method."]
    #[doc = ""]
    #[doc = "@ingroup\tlinklist"]
    #[doc = "@param\t\tx\t\t\tThe linklist instance."]
    pub fn linklist_clear(x: *mut t_linklist);
}
extern "C" {
    #[doc = "Retrieve linklist items as an array of pointers."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\ta\t\tThe address of the first pointer in the array to fill."]
    #[doc = "@param\tmax\t\tThe number of pointers in the array."]
    #[doc = "@return\t\t\tThe number of items from the list actually returned in the array."]
    pub fn linklist_makearray(
        x: *mut t_linklist,
        a: *mut *mut ::std::os::raw::c_void,
        max: ::std::os::raw::c_long,
    ) -> t_atom_long;
}
extern "C" {
    #[doc = "Reverse the order of items in the linked-list."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\tThe linklist instance."]
    pub fn linklist_reverse(x: *mut t_linklist);
}
extern "C" {
    #[doc = "Rotate items in the linked list in circular fashion."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\tThe linklist instance."]
    #[doc = "@param\ti\tThe number of positions in the list to shift items."]
    pub fn linklist_rotate(x: *mut t_linklist, i: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Randomize the order of items in the linked-list."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\tThe linklist instance."]
    pub fn linklist_shuffle(x: *mut t_linklist);
}
extern "C" {
    #[doc = "Swap the position of two items in the linked-list, specified by index."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\tThe linklist instance."]
    #[doc = "@param\ta\tThe index of the first item to swap."]
    #[doc = "@param\tb\tThe index of the second item to swap."]
    pub fn linklist_swap(x: *mut t_linklist, a: ::std::os::raw::c_long, b: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Search the linked list for the first item meeting defined criteria."]
    #[doc = "The items in the list are traversed, calling a specified comparison function on each"]
    #[doc = "until the comparison function returns true."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\to\t\tThe address to pointer that will be set with the matching item."]
    #[doc = "@param\tcmpfn\tThe function used to determine a match in the list."]
    #[doc = "@param\tcmpdata\tAn argument to be passed to the #t_cmpfn."]
    #[doc = "This will be passed as the second of the two args to the #t_cmpfn."]
    #[doc = "The first arg will be the linklist item at each iteration in the list."]
    #[doc = "@return\t\t\tThe index of the matching item, or -1 if no match is found."]
    #[doc = ""]
    #[doc = "@remark\t\tThe following shows how to manually do what linklist_chuckobject() does."]
    #[doc = "@code"]
    #[doc = "void *obj;"]
    #[doc = "long index;"]
    #[doc = ""]
    #[doc = "index = linklist_findfirst(x, &obj, #linklist_match, o);"]
    #[doc = "if(index != -1)"]
    #[doc = "linklist_chuckindex(x, index);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see linklist_match"]
    #[doc = "@see t_cmpfn"]
    #[doc = "@see linklist_findall"]
    pub fn linklist_findfirst(
        x: *mut t_linklist,
        o: *mut *mut ::std::os::raw::c_void,
        cmpfn: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_long,
        >,
        cmpdata: *mut ::std::os::raw::c_void,
    ) -> t_atom_long;
}
extern "C" {
    #[doc = "Search the linked list for all items meeting defined criteria."]
    #[doc = "The items in the list are traversed, calling a specified comparison function on each,"]
    #[doc = "and returning the matches in another linklist."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\tout\t\tThe address to a #t_linklist pointer."]
    #[doc = "You should initialize the pointer to NULL before calling linklist_findall()."]
    #[doc = "A new linklist will be created internally by linklist_findall() and returned here."]
    #[doc = "@param\tcmpfn\tThe function used to determine a match in the list."]
    #[doc = "@param\tcmpdata\tAn argument to be passed to the #t_cmpfn."]
    #[doc = "This will be passed as the second of the two args to the #t_cmpfn."]
    #[doc = "The first arg will be the linklist item at each iteration in the list."]
    #[doc = ""]
    #[doc = "@remark\t\tThe following example assumes you have a linklist called myLinkList, and #t_cmpfn called"]
    #[doc = "myCmpFunction, and some sort of data to match in someCriteria."]
    #[doc = "@code"]
    #[doc = "t_linklist *results = NULL;"]
    #[doc = ""]
    #[doc = "linklist_findall(myLinkList, &results, myCmpFunction, (void *)someCriteria);"]
    #[doc = "linklist_chuck(results);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see\tlinklist_match"]
    #[doc = "@see\tt_cmpfn"]
    #[doc = "@see\tlinklist_findfirst"]
    pub fn linklist_findall(
        x: *mut t_linklist,
        out: *mut *mut t_linklist,
        cmpfn: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_long,
        >,
        cmpdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = "Call the named message on every object in the linklist."]
    #[doc = "The linklist_methodall() function requires that all items in the linklist are"]
    #[doc = "object instances with a valid t_object header."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\tThe linklist instance."]
    #[doc = "@param\ts\tThe name of the message to send to the objects."]
    #[doc = "@param\t...\tAny arguments to be sent with the message."]
    #[doc = ""]
    #[doc = "@remark\t\tInternally, this function uses object_method(), meaning that no errors will be"]
    #[doc = "posted if the message name does not exist for the object.  It also means that"]
    #[doc = "messages sent methods with #A_GIMME definitions will need to be given a symbol"]
    #[doc = "argument prior to the argc and argv array information."]
    pub fn linklist_methodall(x: *mut t_linklist, s: *mut t_symbol, ...);
}
extern "C" {
    pub fn linklist_methodall_imp(
        x: *mut ::std::os::raw::c_void,
        sym: *mut ::std::os::raw::c_void,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut ::std::os::raw::c_void,
        p3: *mut ::std::os::raw::c_void,
        p4: *mut ::std::os::raw::c_void,
        p5: *mut ::std::os::raw::c_void,
        p6: *mut ::std::os::raw::c_void,
        p7: *mut ::std::os::raw::c_void,
        p8: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = "Call the named message on an object specified by index."]
    #[doc = "The item must be an object instance with a valid t_object header."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\tThe linklist instance."]
    #[doc = "@param\ti\tThe index of the item to which to send the message."]
    #[doc = "@param\ts\tThe name of the message to send to the objects."]
    #[doc = "@param\t...\tAny arguments to be sent with the message."]
    #[doc = ""]
    #[doc = "@remark\t\tInternally, this function uses object_method(), meaning that no errors will be"]
    #[doc = "posted if the message name does not exist for the object.  It also means that"]
    #[doc = "messages sent methods with #A_GIMME definitions will need to be given a symbol"]
    #[doc = "argument prior to the argc and argv array information."]
    pub fn linklist_methodindex(
        x: *mut t_linklist,
        i: t_atom_long,
        s: *mut t_symbol,
        ...
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn linklist_methodindex_imp(
        x: *mut ::std::os::raw::c_void,
        i: *mut ::std::os::raw::c_void,
        s: *mut ::std::os::raw::c_void,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut ::std::os::raw::c_void,
        p3: *mut ::std::os::raw::c_void,
        p4: *mut ::std::os::raw::c_void,
        p5: *mut ::std::os::raw::c_void,
        p6: *mut ::std::os::raw::c_void,
        p7: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Sort the linked list."]
    #[doc = "The items in the list are ordered using a #t_cmpfn function that is passed in as an argument."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\tcmpfn\tThe function used to sort the list."]
    #[doc = ""]
    #[doc = "@remark\t\tThe following is example is a real-world example of sorting a linklist of symbols alphabetically"]
    #[doc = "by first letter only.  First the cmpfn is defined, then it is used in a different function"]
    #[doc = "by linklist_sort()."]
    #[doc = "@code"]
    #[doc = "long myAlphabeticalCmpfn(void *a, void *b)"]
    #[doc = "{"]
    #[doc = "t_symbol *s1 = (t_symbol *)a;"]
    #[doc = "t_symbol *s2 = (t_symbol *)b;"]
    #[doc = ""]
    #[doc = "if(s1->s_name[0] < s2->s_name[0])"]
    #[doc = "return true;"]
    #[doc = "else"]
    #[doc = "return false;"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "void mySortMethod(t_myobj *x)"]
    #[doc = "{"]
    #[doc = "linklist_sort(x->myLinkList, myAlphabeticalCmpfn);"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn linklist_sort(
        x: *mut t_linklist,
        cmpfn: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_long,
        >,
    );
}
extern "C" {
    #[doc = "Call the specified function for every item in the linklist."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\tfun\t\tThe function to call, specified as function pointer cast to a Max #method."]
    #[doc = "@param\targ\t\tAn argument that you would like to pass to the function being called."]
    #[doc = ""]
    #[doc = "@remark\t\t\tThe linklist_funall() method will call your function for every item in the list."]
    #[doc = "It will pass both a pointer to the item in the list, and any argument that you"]
    #[doc = "provide.  The following example shows a function that could be called by linklist_funall()."]
    #[doc = "@code"]
    #[doc = "void myFun(t_object *myObj, void *myArg)"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn linklist_funall(x: *mut t_linklist, fun: method, arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Call the specified function for every item in the linklist."]
    #[doc = "The iteration through the list will halt if the function returns a non-zero value."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\tfun\t\tThe function to call, specified as function pointer cast to a Max #method."]
    #[doc = "@param\targ\t\tAn argument that you would like to pass to the function being called."]
    #[doc = ""]
    #[doc = "@remark\t\t\tThe linklist_funall() method will call your function for every item in the list."]
    #[doc = "It will pass both a pointer to the item in the list, and any argument that you"]
    #[doc = "provide.  The following example shows a function that could be called by linklist_funall()."]
    #[doc = "@code"]
    #[doc = "long myFun(t_symbol *myListItemSymbol, void *myArg)"]
    #[doc = "{"]
    #[doc = "if(myListItemSymbol == gensym(\"\")){"]
    #[doc = "error(\"empty symbol -- aborting linklist traversal\")"]
    #[doc = "return 1;"]
    #[doc = "}"]
    #[doc = "else{"]
    #[doc = "return 0;"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn linklist_funall_break(
        x: *mut t_linklist,
        fun: method,
        arg: *mut ::std::os::raw::c_void,
    ) -> t_atom_long;
}
extern "C" {
    #[doc = "Call the specified function for an item specified by index."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\ti\t\tThe index of the item to which to send the message."]
    #[doc = "@param\tfun\t\tThe function to call, specified as function pointer cast to a Max #method."]
    #[doc = "@param\targ\t\tAn argument that you would like to pass to the function being called."]
    #[doc = ""]
    #[doc = "@remark\t\t\tThe linklist_funindex() method will call your function for an item in the list."]
    #[doc = "It will pass both a pointer to the item in the list, and any argument that you"]
    #[doc = "provide.  The following example shows a function that could be called by linklist_funindex()."]
    #[doc = "@code"]
    #[doc = "void myFun(t_object *myObj, void *myArg)"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn linklist_funindex(
        x: *mut t_linklist,
        i: ::std::os::raw::c_long,
        fun: method,
        arg: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Given an item in the list, replace it with a different value."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\tp\t\tAn item in the list."]
    #[doc = "@param\tnewp\tThe new value."]
    #[doc = "@return\t\t\tAlways returns NULL."]
    pub fn linklist_substitute(
        x: *mut t_linklist,
        p: *mut ::std::os::raw::c_void,
        newp: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Given an item in the list, find the next item."]
    #[doc = "This provides an means for walking the list."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\tp\t\tAn item in the list."]
    #[doc = "@param\tnext\tThe address of a pointer to set with the next item in the list."]
    pub fn linklist_next(
        x: *mut t_linklist,
        p: *mut ::std::os::raw::c_void,
        next: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Given an item in the list, find the previous item."]
    #[doc = "This provides an means for walking the list."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\tp\t\tAn item in the list."]
    #[doc = "@param\tprev\tThe address of a pointer to set with the previous item in the list."]
    pub fn linklist_prev(
        x: *mut t_linklist,
        p: *mut ::std::os::raw::c_void,
        prev: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Return the last item (the tail) in the linked-list."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\t\tThe linklist instance."]
    #[doc = "@param\titem\tThe address of pointer in which to store the last item in the linked-list."]
    #[doc = "@return \t\talways returns NULL"]
    pub fn linklist_last(
        x: *mut t_linklist,
        item: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Set the linklist's readonly bit."]
    #[doc = ""]
    #[doc = "By default the readonly bit is 0, indicating that it is threadsafe for both reading and writing."]
    #[doc = "Setting the readonly bit to 1 will disable the linklist's theadsafety mechanism, increasing"]
    #[doc = "performance but at the expense of threadsafe operation."]
    #[doc = "Unless you can guarantee the threading context for a linklist's use, you should leave this set to 0."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\t\t\tThe linklist instance."]
    #[doc = "@param\treadonly\tA 1 or 0 for setting the readonly bit."]
    pub fn linklist_readonly(x: *mut t_linklist, readonly: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Set the linklist's datastore flags.  The available flags are enumerated in #e_max_datastore_flags."]
    #[doc = "These flags control the behavior of the linklist, particularly when removing items from the list"]
    #[doc = "using functions such as linklist_clear(), linklist_deleteindex(), or when freeing the linklist itself."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\t\t\tThe linklist instance."]
    #[doc = "@param\tflags\tA valid value from the #e_max_datastore_flags.  The default is #OBJ_FLAG_OBJ."]
    pub fn linklist_flags(x: *mut t_linklist, flags: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Get the linklist's datastore flags."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = "@param\tx\tThe linklist instance."]
    #[doc = "@return\t\tThe current state of the linklist flags as enumerated in #e_max_datastore_flags."]
    pub fn linklist_getflags(x: *mut t_linklist) -> t_atom_long;
}
extern "C" {
    #[doc = "A linklist comparison method that determines if two item pointers are equal."]
    #[doc = ""]
    #[doc = "@ingroup linklist"]
    #[doc = ""]
    #[doc = "@param\ta\t\tThe first item to compare."]
    #[doc = "@param\tb\t\tThe second item to compare."]
    #[doc = "@return\t\t\tReturns 1 if the items are equal, otherwise 0."]
    #[doc = ""]
    #[doc = "@see\t\t\tt_cmpfn"]
    pub fn linklist_match(
        a: *mut ::std::os::raw::c_void,
        b: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
#[doc = " A hashtab entry. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup hashtab"]
#[doc = "@see t_hashtab"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hashtab_entry {
    pub ob: t_object,
    pub key: *mut t_symbol,
    pub value: *mut t_object,
    pub flags: ::std::os::raw::c_long,
    pub parent: *mut _hashtab,
}
#[test]
fn bindgen_test_layout__hashtab_entry() {
    assert_eq!(
        ::std::mem::size_of::<_hashtab_entry>(),
        64usize,
        concat!("Size of: ", stringify!(_hashtab_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_hashtab_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_hashtab_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hashtab_entry>())).ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_hashtab_entry),
            "::",
            stringify!(ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hashtab_entry>())).key as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_hashtab_entry),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hashtab_entry>())).value as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_hashtab_entry),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hashtab_entry>())).flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_hashtab_entry),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hashtab_entry>())).parent as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_hashtab_entry),
            "::",
            stringify!(parent)
        )
    );
}
#[doc = " A hashtab entry. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup hashtab"]
#[doc = "@see t_hashtab"]
pub type t_hashtab_entry = _hashtab_entry;
#[doc = " The hashtab object. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup hashtab"]
#[doc = "@see t_hashtab"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hashtab {
    pub ob: t_object,
    pub slotcount: ::std::os::raw::c_long,
    pub slots: *mut *mut t_linklist,
    pub readonly: ::std::os::raw::c_long,
    pub flags: ::std::os::raw::c_long,
    pub reserved: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__hashtab() {
    assert_eq!(
        ::std::mem::size_of::<_hashtab>(),
        72usize,
        concat!("Size of: ", stringify!(_hashtab))
    );
    assert_eq!(
        ::std::mem::align_of::<_hashtab>(),
        8usize,
        concat!("Alignment of ", stringify!(_hashtab))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hashtab>())).ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_hashtab),
            "::",
            stringify!(ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hashtab>())).slotcount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_hashtab),
            "::",
            stringify!(slotcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hashtab>())).slots as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_hashtab),
            "::",
            stringify!(slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hashtab>())).readonly as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_hashtab),
            "::",
            stringify!(readonly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hashtab>())).flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_hashtab),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hashtab>())).reserved as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_hashtab),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = " The hashtab object. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup hashtab"]
#[doc = "@see t_hashtab"]
pub type t_hashtab = _hashtab;
extern "C" {
    #[doc = "Create a new hashtab object."]
    #[doc = "You can free the hashtab by calling object_free() on the hashtab's pointer,"]
    #[doc = "or by using hashtab_chuck()."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = "@param\tslotcount\tThe number of slots in the hash table.  Prime numbers typically work well."]
    #[doc = "Pass 0 to get the default size."]
    #[doc = "@return\t\t\t\tPointer to the new hashtab object."]
    #[doc = ""]
    #[doc = "@see\t\t\t\tHASH_DEFSLOTS"]
    #[doc = "@see\t\t\t\tobject_free()"]
    #[doc = "@see\t\t\t\thashtab_chuck()"]
    pub fn hashtab_new(slotcount: ::std::os::raw::c_long) -> *mut t_hashtab;
}
extern "C" {
    #[doc = "Store an item in a hashtab with an associated key."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tkey\t\tThe key in the hashtab with which to associate the value."]
    #[doc = "@param\tval\t\tThe value to store."]
    #[doc = ""]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = "@see\t\t\thashtab_lookup(), hashtab_storesafe(), hashtab_storelong(), hashtab_storesym()"]
    pub fn hashtab_store(x: *mut t_hashtab, key: *mut t_symbol, val: *mut t_object) -> t_max_err;
}
extern "C" {
    #[doc = "Store a t_atom_long value in a hashtab with an associated key."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tkey\t\tThe key in the hashtab with which to associate the value."]
    #[doc = "@param\tval\t\tThe t_atom_long value to store."]
    #[doc = ""]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = "@see\t\t\thashtab_lookuplong(), hashtab_store(), hashtab_storesafe(), hashtab_storesym()"]
    pub fn hashtab_storelong(x: *mut t_hashtab, key: *mut t_symbol, val: t_atom_long) -> t_max_err;
}
extern "C" {
    #[doc = "Store a t_symbol value in a hashtab with an associated key."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tkey\t\tThe key in the hashtab with which to associate the value."]
    #[doc = "@param\tval\t\tThe t_symbol pointer to store."]
    #[doc = ""]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = "@see\t\t\thashtab_lookupsym(), hashtab_store(), hashtab_storesafe(), hashtab_storelong()"]
    pub fn hashtab_storesym(x: *mut t_hashtab, key: *mut t_symbol, val: *mut t_symbol)
        -> t_max_err;
}
extern "C" {
    #[doc = "\tStore an item in a hashtab with an associated key."]
    #[doc = "The difference between hashtab_store_safe() and hashtab_store() is what happens in the event of a collision in the hash table."]
    #[doc = "The normal hashtab_store() function will free the existing value at the collision location with sysmem_freeptr() and then replaces it."]
    #[doc = "This version doesn't try to free the existing value at the collision location, but instead just over-writes it."]
    #[doc = ""]
    #[doc = "@ingroup\t\thashtab"]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tkey\t\tThe key in the hashtab with which to associate the value."]
    #[doc = "@param\tval\t\tThe value to store."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = "@see\t\t\thashtab_store()"]
    pub fn hashtab_store_safe(
        x: *mut t_hashtab,
        key: *mut t_symbol,
        val: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tStore an item in a hashtab with an associated key and also flags that define the behavior of the item."]
    #[doc = "The hashtab_store() method is the same as calling this method with the default (0) flags."]
    #[doc = ""]
    #[doc = "@ingroup\t\thashtab"]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tkey\t\tThe key in the hashtab with which to associate the value."]
    #[doc = "@param\tval\t\tThe value to store."]
    #[doc = "@param\tflags\tOne of the values listed in #e_max_datastore_flags."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = "@see\t\t\thashtab_store()"]
    pub fn hashtab_storeflags(
        x: *mut t_hashtab,
        key: *mut t_symbol,
        val: *mut t_object,
        flags: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Return an item stored in a hashtab with the specified key."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tkey\t\tThe key in the hashtab to fetch."]
    #[doc = "@param\tval\t\tThe address of a pointer to which the fetched value will be assigned."]
    #[doc = ""]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = "@see\t\t\thashtab_store(), hashtab_lookuplong(), hashtab_lookupsym()"]
    pub fn hashtab_lookup(
        x: *mut t_hashtab,
        key: *mut t_symbol,
        val: *mut *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Return a t_atom_long value stored in a hashtab with the specified key."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tkey\t\tThe key in the hashtab to fetch."]
    #[doc = "@param\tval\t\tA pointer to a t_atom_long to which the fetched value will be assigned."]
    #[doc = ""]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = "@see\t\t\thashtab_storelong(), hashtab_lookup(), hashtab_lookupsym()"]
    pub fn hashtab_lookuplong(
        x: *mut t_hashtab,
        key: *mut t_symbol,
        val: *mut t_atom_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Return a t_symbol value stored in a hashtab with the specified key."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tkey\t\tThe key in the hashtab to fetch."]
    #[doc = "@param\tval\t\tA pointer to the address of a t_symbol to which the fetched value will be assigned."]
    #[doc = ""]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = "@see\t\t\thashtab_storesym(), hashtab_lookup(), hashtab_lookuplong()"]
    pub fn hashtab_lookupsym(
        x: *mut t_hashtab,
        key: *mut t_symbol,
        val: *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn hashtab_lookupentry(
        x: *mut t_hashtab,
        key: *mut t_symbol,
        entry: *mut *mut t_hashtab_entry,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tReturn an item stored in a hashtab with the specified key, also returning the items flags."]
    #[doc = "@ingroup\t\thashtab"]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tkey\t\tThe key in the hashtab to fetch."]
    #[doc = "@param\tval\t\tThe address of a pointer to which the fetched value will be assigned."]
    #[doc = "@param\tflags\tThe address of a value to which the fetched flags will be assigned."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = "@see\t\t\thashtab_lookup()"]
    #[doc = "@see\t\t\thashtab_store_flags()"]
    pub fn hashtab_lookupflags(
        x: *mut t_hashtab,
        key: *mut t_symbol,
        val: *mut *mut t_object,
        flags: *mut ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Remove an item from a hashtab associated with the specified key and free it."]
    #[doc = ""]
    #[doc = "The hashtab can contain a variety of different types of data."]
    #[doc = "By default, the hashtab assumes that all items are max objects with a valid"]
    #[doc = "#t_object header.  Thus by default, it frees items by calling object_free() on them."]
    #[doc = ""]
    #[doc = "You can alter the hashtab's notion of what it contains by using the"]
    #[doc = "hashtab_flags() method."]
    #[doc = ""]
    #[doc = "If you wish to remove an item from the hashtab and free it yourself, then you"]
    #[doc = "should use hashtab_chuckkey()."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tkey\t\tThe key of the item to delete."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\thashtab_chuckkey()"]
    #[doc = "@see\t\t\thashtab_clear()"]
    #[doc = "@see\t\t\thashtab_flags()"]
    pub fn hashtab_delete(x: *mut t_hashtab, key: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "Delete all items stored in a hashtab."]
    #[doc = "This is the equivalent of calling hashtab_delete() on every item in a hashtab."]
    #[doc = ""]
    #[doc = "@ingroup\thashtab"]
    #[doc = "@return\t\tA max error code."]
    #[doc = "@see\t\thashtab_flags()"]
    #[doc = "@see\t\thashtab_delete()"]
    pub fn hashtab_clear(x: *mut t_hashtab) -> t_max_err;
}
extern "C" {
    #[doc = "Remove an item from a hashtab associated with a given key."]
    #[doc = ""]
    #[doc = "You are responsible for freeing any memory associated with the item that is"]
    #[doc = "removed from the hashtab."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = ""]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tkey\t\tThe key of the item to delete."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\thashtab_delete"]
    pub fn hashtab_chuckkey(x: *mut t_hashtab, key: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "Free a hashtab, but don't free the items it contains."]
    #[doc = ""]
    #[doc = "The hashtab can contain a variety of different types of data."]
    #[doc = "By default, the hashtab assumes that all items are max objects with a valid"]
    #[doc = "#t_object header."]
    #[doc = ""]
    #[doc = "You can alter the hashtab's notion of what it contains by using the"]
    #[doc = "hashtab_flags() method."]
    #[doc = ""]
    #[doc = "When you free the hashtab by calling object_free() it then tries to free all of the items it contains."]
    #[doc = "If the hashtab is storing a custom type of data, or should otherwise not free the data it contains,"]
    #[doc = "then call hashtab_chuck() to free the object instead of object_free()."]
    #[doc = ""]
    #[doc = "@ingroup\thashtab"]
    #[doc = "@param\tx\tThe hashtab object to be freed."]
    #[doc = "@return\t\tA max error code."]
    #[doc = "@see\t\tobject_free"]
    pub fn hashtab_chuck(x: *mut t_hashtab) -> t_max_err;
}
extern "C" {
    #[doc = "Search the hash table for the first item meeting defined criteria."]
    #[doc = "The items in the hashtab are iteratively processed, calling a specified comparison function on each"]
    #[doc = "until the comparison function returns true."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\to\t\tThe address to pointer that will be set with the matching item."]
    #[doc = "@param\tcmpfn\tThe function used to determine a match in the list."]
    #[doc = "@param\tcmpdata\tAn argument to be passed to the #t_cmpfn."]
    #[doc = "This will be passed as the second of the two args to the #t_cmpfn."]
    #[doc = "The first arg will be the hashtab item at each iteration in the list."]
    #[doc = "@return\t\t\tA max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tlinklist_findfirst()"]
    #[doc = "@see\t\t\tt_cmpfn"]
    pub fn hashtab_findfirst(
        x: *mut t_hashtab,
        o: *mut *mut ::std::os::raw::c_void,
        cmpfn: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_long,
        >,
        cmpdata: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Call the named message on every object in the hashtab."]
    #[doc = "The hashtab_methodall() function requires that all items in the hashtab are"]
    #[doc = "object instances with a valid #t_object header."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = "@param\tx\tThe hashtab instance."]
    #[doc = "@param\ts\tThe name of the message to send to the objects."]
    #[doc = "@param\t...\tAny arguments to be sent with the message."]
    #[doc = "@return\t\tA max error code."]
    #[doc = ""]
    #[doc = "@remark\t\tInternally, this function uses object_method(), meaning that no errors will be"]
    #[doc = "posted if the message name does not exist for the object.  It also means that"]
    #[doc = "messages sent methods with #A_GIMME definitions will need to be given a symbol"]
    #[doc = "argument prior to the argc and argv array information."]
    pub fn hashtab_methodall(x: *mut t_hashtab, s: *mut t_symbol, ...) -> t_max_err;
}
extern "C" {
    pub fn hashtab_methodall_imp(
        x: *mut ::std::os::raw::c_void,
        sym: *mut ::std::os::raw::c_void,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut ::std::os::raw::c_void,
        p3: *mut ::std::os::raw::c_void,
        p4: *mut ::std::os::raw::c_void,
        p5: *mut ::std::os::raw::c_void,
        p6: *mut ::std::os::raw::c_void,
        p7: *mut ::std::os::raw::c_void,
        p8: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Call the specified function for every item in the hashtab."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tfun\t\tThe function to call, specified as function pointer cast to a Max #method."]
    #[doc = "@param\targ\t\tAn argument that you would like to pass to the function being called."]
    #[doc = "@return\t\t\tA max error code."]
    #[doc = ""]
    #[doc = "@remark\t\t\tThe hashtab_funall() method will call your function for every item in the list."]
    #[doc = "It will pass both a pointer to the item in the list, and any argument that you"]
    #[doc = "provide.  The following example shows a function that could be called by hashtab_funall()."]
    #[doc = "@code"]
    #[doc = "void myFun(t_hashtab_entry *e, void *myArg)"]
    #[doc = "{"]
    #[doc = "if (e->key && e->value) {"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn hashtab_funall(
        x: *mut t_hashtab,
        fun: method,
        arg: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    pub fn hashtab_objfunall(
        x: *mut t_hashtab,
        fun: method,
        arg: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Return the number of items stored in a hashtab."]
    #[doc = ""]
    #[doc = "@ingroup\thashtab"]
    #[doc = "@param\tx\tThe hashtab instance."]
    #[doc = "@return\t\tThe number of items in the hash table."]
    pub fn hashtab_getsize(x: *mut t_hashtab) -> t_atom_long;
}
extern "C" {
    #[doc = "Post a hashtab's statistics to the Max window."]
    #[doc = ""]
    #[doc = "@ingroup\thashtab"]
    #[doc = "@param\tx\tThe hashtab instance."]
    pub fn hashtab_print(x: *mut t_hashtab);
}
extern "C" {
    #[doc = "Set the hashtab's readonly bit."]
    #[doc = ""]
    #[doc = "By default the readonly bit is 0, indicating that it is threadsafe for both reading and writing."]
    #[doc = "Setting the readonly bit to 1 will disable the hashtab's theadsafety mechanism, increasing"]
    #[doc = "performance but at the expense of threadsafe operation."]
    #[doc = "Unless you can guarantee the threading context for a hashtab's use, you should leave this set to 0."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = "@param\tx\t\t\tThe hashtab instance."]
    #[doc = "@param\treadonly\tA 1 or 0 for setting the readonly bit."]
    pub fn hashtab_readonly(x: *mut t_hashtab, readonly: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Set the hashtab's datastore flags.  The available flags are enumerated in #e_max_datastore_flags."]
    #[doc = "These flags control the behavior of the hashtab, particularly when removing items from the list"]
    #[doc = "using functions such as hashtab_clear(), hashtab_delete(), or when freeing the hashtab itself."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tflags\tA valid value from the #e_max_datastore_flags.  The default is #OBJ_FLAG_OBJ."]
    pub fn hashtab_flags(x: *mut t_hashtab, flags: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Get the hashtab's datastore flags."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = "@param\tx\tThe hashtab instance."]
    #[doc = "@return\t\tThe current state of the hashtab flags as enumerated in #e_max_datastore_flags."]
    pub fn hashtab_getflags(x: *mut t_hashtab) -> t_atom_long;
}
extern "C" {
    #[doc = "\tChange the flags for an item stored in the hashtab with a given key."]
    #[doc = "@ingroup\t\thashtab"]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tkey\t\tThe key in the hashtab whose flags will be changed."]
    #[doc = "@param\tflags\tOne of the values listed in #e_max_datastore_flags."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = "@see\t\t\thashtab_store_flags()"]
    pub fn hashtab_keyflags(
        x: *mut t_hashtab,
        key: *mut t_symbol,
        flags: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tRetrieve the flags for an item stored in the hashtab with a given key."]
    #[doc = "@ingroup\t\thashtab"]
    #[doc = "@param\tx\t\tThe hashtab instance."]
    #[doc = "@param\tkey\t\tThe key in the hashtab whose flags will be returned."]
    #[doc = "@return\t\t\tThe flags for the given key."]
    #[doc = "@see\t\t\thashtab_store_flags()"]
    pub fn hashtab_getkeyflags(x: *mut t_hashtab, key: *mut t_symbol) -> t_atom_long;
}
extern "C" {
    #[doc = "Retrieve all of the keys stored in a hashtab."]
    #[doc = ""]
    #[doc = "If the kc and kv parameters are properly initialized to zero, then hashtab_getkeys() will allocate memory"]
    #[doc = "for the keys it returns.  You are then responsible for freeing this memory using sysmem_freeptr()."]
    #[doc = ""]
    #[doc = "@ingroup hashtab"]
    #[doc = "@param\t\tx\tThe hashtab instance."]
    #[doc = "@param\t\tkc\tThe address of a long where the number of keys retrieved will be set."]
    #[doc = "@param\t\tkv\tThe address of the first of an array #t_symbol pointers where the retrieved keys will be set."]
    #[doc = "@return\t\tA max error code."]
    #[doc = ""]
    #[doc = "@remark\t\tThe following example demonstrates fetching all of the keys from a hashtab in order to iterate through"]
    #[doc = "each item stored in the hashtab."]
    #[doc = "@code"]
    #[doc = "t_symbol\t**keys = NULL;"]
    #[doc = "long\t\tnumKeys = 0;"]
    #[doc = "long\t\ti;"]
    #[doc = "t_object\t*anItem;"]
    #[doc = ""]
    #[doc = "hashtab_getkeys(aHashtab, &numKeys, &keys);"]
    #[doc = "for(i=0; i<numKeys; i++){"]
    #[doc = "hashtab_lookup(aHashtab, keys[i], &anItem);"]
    #[doc = "}"]
    #[doc = "if(keys)"]
    #[doc = "sysmem_freeptr(keys);"]
    #[doc = "@endcode"]
    pub fn hashtab_getkeys(
        x: *mut t_hashtab,
        kc: *mut ::std::os::raw::c_long,
        kv: *mut *mut *mut t_symbol,
    ) -> t_max_err;
}
#[doc = " A dictionary entry. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup dictionary"]
#[doc = "@see t_dictionary"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dictionary_entry {
    pub e_obj: t_object,
    pub e_key: *mut t_symbol,
    pub e_value: t_atom,
    pub e_flags: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__dictionary_entry() {
    assert_eq!(
        ::std::mem::size_of::<_dictionary_entry>(),
        64usize,
        concat!("Size of: ", stringify!(_dictionary_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_dictionary_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_dictionary_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dictionary_entry>())).e_obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dictionary_entry),
            "::",
            stringify!(e_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dictionary_entry>())).e_key as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dictionary_entry),
            "::",
            stringify!(e_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dictionary_entry>())).e_value as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dictionary_entry),
            "::",
            stringify!(e_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dictionary_entry>())).e_flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dictionary_entry),
            "::",
            stringify!(e_flags)
        )
    );
}
#[doc = " A dictionary entry. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup dictionary"]
#[doc = "@see t_dictionary"]
pub type t_dictionary_entry = _dictionary_entry;
#[doc = " The dictionary object. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup dictionary"]
#[doc = "@see t_dictionary"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dictionary {
    pub d_obj: t_object,
    pub d_hashtab: *mut t_hashtab,
    pub d_linklist: *mut t_linklist,
    pub d_transaction_mutex: *mut ::std::os::raw::c_void,
    pub d_use_transaction: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__dictionary() {
    assert_eq!(
        ::std::mem::size_of::<_dictionary>(),
        64usize,
        concat!("Size of: ", stringify!(_dictionary))
    );
    assert_eq!(
        ::std::mem::align_of::<_dictionary>(),
        8usize,
        concat!("Alignment of ", stringify!(_dictionary))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dictionary>())).d_obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dictionary),
            "::",
            stringify!(d_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dictionary>())).d_hashtab as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dictionary),
            "::",
            stringify!(d_hashtab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dictionary>())).d_linklist as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dictionary),
            "::",
            stringify!(d_linklist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dictionary>())).d_transaction_mutex as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dictionary),
            "::",
            stringify!(d_transaction_mutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dictionary>())).d_use_transaction as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dictionary),
            "::",
            stringify!(d_use_transaction)
        )
    );
}
#[doc = " The dictionary object. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup dictionary"]
#[doc = "@see t_dictionary"]
pub type t_dictionary = _dictionary;
extern "C" {
    #[doc = "Create a new dictionary object."]
    #[doc = "You can free the dictionary by calling object_free()."]
    #[doc = "However, you should keep in mind the guidelines provided in @ref when_to_free_a_dictionary."]
    #[doc = ""]
    #[doc = "@ingroup dictionary"]
    #[doc = "@return  Pointer to the new dictionary object."]
    #[doc = ""]
    #[doc = "@see\t\t\t\tobject_free()"]
    pub fn dictionary_new() -> *mut t_dictionary;
}
extern "C" {
    #[doc = "Add a long integer value to the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe name of the key used to index the new value."]
    #[doc = "All keys must be unique.  If the key name already exists,"]
    #[doc = "then the existing value associated with the key will be freed prior to the new value's assignment."]
    #[doc = "@param\tvalue\tThe new value to append to the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_appendlong(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        value: t_atom_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Add a double-precision float value to the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe name of the key used to index the new value."]
    #[doc = "All keys must be unique.  If the key name already exists,"]
    #[doc = "then the existing value associated with the key will be freed prior to the new value's assignment."]
    #[doc = "@param\tvalue\tThe new value to append to the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_appendfloat(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        value: f64,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Add a #t_symbol* value to the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe name of the key used to index the new value."]
    #[doc = "All keys must be unique.  If the key name already exists,"]
    #[doc = "then the existing value associated with the key will be freed prior to the new value's assignment."]
    #[doc = "@param\tvalue\tThe new value to append to the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_appendsym(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        value: *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Add a #t_atom* value to the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe name of the key used to index the new value."]
    #[doc = "All keys must be unique.  If the key name already exists,"]
    #[doc = "then the existing value associated with the key will be freed prior to the new value's assignment."]
    #[doc = "@param\tvalue\tThe new value to append to the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_appendatom(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        value: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn dictionary_appendattribute(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        attrname: *mut t_symbol,
        obj: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Add a C-string to the dictionary.  Internally this uses the #t_string object."]
    #[doc = "It is useful to use the #t_string in dictionaries rather than the #t_symbol"]
    #[doc = "to avoid bloating Max's symbol table unnecessarily."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe name of the key used to index the new value."]
    #[doc = "All keys must be unique.  If the key name already exists,"]
    #[doc = "then the existing value associated with the key will be freed prior to the new value's assignment."]
    #[doc = "@param\tvalue\tThe new value to append to the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_appendstring(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        value: *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Add an array of atoms to the dictionary."]
    #[doc = "Internally these atoms will be copied into a #t_atomarray object, which will be appended to the dictionary"]
    #[doc = "with the given key."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe name of the key used to index the new value."]
    #[doc = "All keys must be unique.  If the key name already exists,"]
    #[doc = "then the existing value associated with the key will be freed prior to the new value's assignment."]
    #[doc = "@param\targc\tThe number of atoms to append to the dictionary."]
    #[doc = "@param\targv\tThe address of the first atom in the array to append to the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_appendatoms(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn dictionary_appendatoms_flags(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
        flags: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Add an @ref atomarray object to the dictionary."]
    #[doc = "Note that from this point on that you should not free the #t_atomarray*, because the atomarray is now owned by"]
    #[doc = "the dictionary, and freeing the dictionary will free the atomarray as discussed in @ref when_to_free_a_dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe name of the key used to index the new value."]
    #[doc = "All keys must be unique.  If the key name already exists,"]
    #[doc = "then the existing value associated with the key will be freed prior to the new value's assignment."]
    #[doc = "@param\tvalue\tThe new value to append to the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_appendatomarray(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        value: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Add a dictionary object to the dictionary."]
    #[doc = "Note that from this point on that you should not free the #t_dictionary* that is being added,"]
    #[doc = "because the newly-added dictionary is now owned by the dictionary to which it has been added,"]
    #[doc = "as discussed in @ref when_to_free_a_dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe name of the key used to index the new value."]
    #[doc = "All keys must be unique.  If the key name already exists,"]
    #[doc = "then the existing value associated with the key will be freed prior to the new value's assignment."]
    #[doc = "@param\tvalue\tThe new value to append to the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_appenddictionary(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        value: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Add an object to the dictionary."]
    #[doc = "Note that from this point on that you should not free the #t_object* that is being added,"]
    #[doc = "because the newly-added object is now owned by the dictionary to which it has been added,"]
    #[doc = "as discussed in @ref when_to_free_a_dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe name of the key used to index the new value."]
    #[doc = "All keys must be unique.  If the key name already exists,"]
    #[doc = "then the existing value associated with the key will be freed prior to the new value's assignment."]
    #[doc = "@param\tvalue\tThe new value to append to the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_appendobject(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        value: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    pub fn dictionary_appendobject_flags(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        value: *mut t_object,
        flags: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn dictionary_appendbinbuf(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        value: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a long integer from the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tvalue\tThe address of variable to hold the value associated with the key."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_getlong(
        d: *const t_dictionary,
        key: *mut t_symbol,
        value: *mut t_atom_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a double-precision float from the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tvalue\tThe address of variable to hold the value associated with the key."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_getfloat(
        d: *const t_dictionary,
        key: *mut t_symbol,
        value: *mut f64,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a #t_symbol* from the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tvalue\tThe address of variable to hold the value associated with the key."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_getsym(
        d: *const t_dictionary,
        key: *mut t_symbol,
        value: *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Copy a #t_atom from the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tvalue\tThe address of variable to hold the value associated with the key."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_getatom(
        d: *const t_dictionary,
        key: *mut t_symbol,
        value: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn dictionary_getattribute(
        d: *const t_dictionary,
        key: *mut t_symbol,
        attrname: *mut t_symbol,
        obj: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a C-string pointer from the dictionary."]
    #[doc = "The retrieved pointer references the string in the dictionary, it is not a copy."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tvalue\tThe address of variable to hold the value associated with the key."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_getstring(
        d: *const t_dictionary,
        key: *mut t_symbol,
        value: *mut *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve the address of a #t_atom array of in the dictionary."]
    #[doc = "The retrieved pointer references the t_atoms in the dictionary."]
    #[doc = "To fetch a copy of the t_atoms from the dictionary, use dictionary_copyatoms()."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\targc\tThe address of a variable to hold the number of atoms in the array."]
    #[doc = "@param\targv\tThe address of a variable to hold a pointer to the first atom in the array."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_copyatoms()"]
    #[doc = "@see\t\t\tdictionary_getatoms_ext()"]
    pub fn dictionary_getatoms(
        d: *const t_dictionary,
        key: *mut t_symbol,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve the address of a #t_atom array in the dictionary."]
    #[doc = "The retrieved pointer references the t_atoms in the dictionary."]
    #[doc = "Optionally convert strings to symbols."]
    #[doc = "To fetch a copy of the t_atoms from the dictionary, use dictionary_copyatoms()."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tstringstosymbols\t\tThe flag to convert strings to symbols (true,false)."]
    #[doc = "@param\targc\tThe address of a variable to hold the number of atoms in the array."]
    #[doc = "@param\targv\tThe address of a variable to hold a pointer to the first atom in the array."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_copyatoms()"]
    #[doc = "@see\t\t\tdictionary_getatoms()"]
    pub fn dictionary_getatoms_ext(
        d: *const t_dictionary,
        key: *mut t_symbol,
        stringstosymbols: ::std::os::raw::c_long,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve copies of a #t_atom array in the dictionary."]
    #[doc = "The retrieved pointer of t_atoms in the dictionary has memory allocated and copied to it from within the function."]
    #[doc = "You are responsible for freeing it with sysmem_freeptr()."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\targc\tThe address of a variable to hold the number of atoms in the array."]
    #[doc = "@param\targv\tThe address of a variable to hold a pointer to the first atom in the array."]
    #[doc = "You should initialize this pointer to NULL prior to passing it to dictionary_copyatoms()."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_getatoms()"]
    pub fn dictionary_copyatoms(
        d: *const t_dictionary,
        key: *mut t_symbol,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a #t_atomarray pointer from the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tvalue\tThe address of variable to hold the value associated with the key."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_getatomarray(
        d: *const t_dictionary,
        key: *mut t_symbol,
        value: *mut *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a #t_dictionary pointer from the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tvalue\tThe address of variable to hold the value associated with the key."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_getdictionary(
        d: *const t_dictionary,
        key: *mut t_symbol,
        value: *mut *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve the address of a #t_atom array of in the dictionary within nested dictionaries."]
    #[doc = "The address can index into nested dictionaries using the '::' operator.  For example,"]
    #[doc = "the key \"field::subfield\" will look for the value at key \"field\" and then look for the"]
    #[doc = "value \"subfield\" in the value found at \"field\"."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tac\t\tThe number of return values"]
    #[doc = "@param\tav\t\tThe return values"]
    #[doc = "@param\terrstr\tAn error message if an error code was returned.  Optional, pass NULL if you don't want it."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_get_ex(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
        errstr: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a #t_object pointer from the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tvalue\tThe address of variable to hold the value associated with the key."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_getobject(
        d: *const t_dictionary,
        key: *mut t_symbol,
        value: *mut *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Test a key to set if the data stored with that key contains a #t_string object."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to test."]
    #[doc = "@return\t\t\tReturns true if the key contains a #t_string, otherwise returns false."]
    pub fn dictionary_entryisstring(
        d: *const t_dictionary,
        key: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Test a key to set if the data stored with that key contains a #t_atomarray object."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to test."]
    #[doc = "@return\t\t\tReturns true if the key contains a #t_atomarray, otherwise returns false."]
    pub fn dictionary_entryisatomarray(
        d: *const t_dictionary,
        key: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Test a key to set if the data stored with that key contains a #t_dictionary object."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to test."]
    #[doc = "@return\t\t\tReturns true if the key contains a #t_dictionary, otherwise returns false."]
    pub fn dictionary_entryisdictionary(
        d: *const t_dictionary,
        key: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Test a key to set if it exists in the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to test."]
    #[doc = "@return\t\t\tReturns true if the key exists, otherwise returns false."]
    pub fn dictionary_hasentry(
        d: *const t_dictionary,
        key: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Return the number of keys in a dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@return\t\t\tThe number of keys in the dictionary."]
    pub fn dictionary_getentrycount(d: *const t_dictionary) -> t_atom_long;
}
extern "C" {
    #[doc = "Retrieve all of the key names stored in a dictionary."]
    #[doc = ""]
    #[doc = "The numkeys and keys parameters should be initialized to zero."]
    #[doc = "The dictionary_getkeys() method will allocate memory for the keys it returns."]
    #[doc = "You are then responsible for freeing this memory using dictionary_freekeys()."]
    #[doc = "<em>You must use dictionary_freekeys(), not some other method for freeing the memory.</em>"]
    #[doc = ""]
    #[doc = "@ingroup \tdictionary"]
    #[doc = "@param\t\td\t\tThe dictionary instance."]
    #[doc = "@param\t\tnumkeys\tThe address of a long where the number of keys retrieved will be set."]
    #[doc = "@param\t\tkeys\tThe address of the first of an array #t_symbol pointers where the retrieved keys will be set."]
    #[doc = "@return\t\t\t\tA max error code."]
    #[doc = ""]
    #[doc = "@remark\t\tThe following example demonstrates fetching all of the keys from a dictionary named 'd'"]
    #[doc = "in order to iterate through each item stored in the dictionary."]
    #[doc = "@code"]
    #[doc = "t_symbol\t**keys = NULL;"]
    #[doc = "long\t\tnumkeys = 0;"]
    #[doc = "long\t\ti;"]
    #[doc = "t_object\t*anItem;"]
    #[doc = ""]
    #[doc = "dictionary_getkeys(d, &numkeys, &keys);"]
    #[doc = "for(i=0; i<numkeys; i++){"]
    #[doc = "}"]
    #[doc = "if(keys)"]
    #[doc = "dictionary_freekeys(d, numkeys, keys);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see \t\tdictionary_freekeys()"]
    pub fn dictionary_getkeys(
        d: *const t_dictionary,
        numkeys: *mut ::std::os::raw::c_long,
        keys: *mut *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn dictionary_getkeys_ordered(
        d: *const t_dictionary,
        numkeys: *mut ::std::os::raw::c_long,
        keys: *mut *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Free memory allocated by the dictionary_getkeys() method."]
    #[doc = ""]
    #[doc = "@ingroup \tdictionary"]
    #[doc = "@param\t\td\t\tThe dictionary instance."]
    #[doc = "@param\t\tnumkeys\tThe address of a long where the number of keys retrieved will be set."]
    #[doc = "@param\t\tkeys\tThe address of the first of an array #t_symbol pointers where the retrieved keys will be set."]
    #[doc = "@return\t\t\t\tA max error code."]
    #[doc = ""]
    #[doc = "@see \t\tdictionary_getkeys()"]
    pub fn dictionary_freekeys(
        d: *mut t_dictionary,
        numkeys: ::std::os::raw::c_long,
        keys: *mut *mut t_symbol,
    );
}
extern "C" {
    #[doc = "Remove a value from the dictionary."]
    #[doc = "This method will free the object in the dictionary."]
    #[doc = "If freeing the object is inappropriate or undesirable, use dictionary_chuckentry() instead."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to delete."]
    #[doc = "@return\t\t\tA max error code."]
    #[doc = ""]
    #[doc = "@see dictionary_chuckentry()"]
    #[doc = "@see dictionary_clear()"]
    pub fn dictionary_deleteentry(d: *mut t_dictionary, key: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "Remove a value from the dictionary without freeing it."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to delete."]
    #[doc = "@return\t\t\tA max error code."]
    #[doc = ""]
    #[doc = "@see dictionary_deleteentry()"]
    pub fn dictionary_chuckentry(d: *mut t_dictionary, key: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "Delete all values from a dictionary."]
    #[doc = "This method will free the objects in the dictionary."]
    #[doc = "If freeing the objects is inappropriate or undesirable then you should iterate through"]
    #[doc = "the dictionary and use dictionary_chuckentry() instead."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@return\t\t\tA max error code."]
    #[doc = ""]
    #[doc = "@see dictionary_getkeys()"]
    #[doc = "@see dictionary_chuckentry()"]
    #[doc = "@see dictionary_deleteentry()"]
    pub fn dictionary_clear(d: *mut t_dictionary) -> t_max_err;
}
extern "C" {
    pub fn dictionary_clone(d: *mut t_dictionary) -> *mut t_dictionary;
}
extern "C" {
    pub fn dictionary_clone_to_existing(d: *const t_dictionary, dc: *mut t_dictionary)
        -> t_max_err;
}
extern "C" {
    pub fn dictionary_merge_to_existing(d: *const t_dictionary, dc: *mut t_dictionary)
        -> t_max_err;
}
extern "C" {
    pub fn dictionary_copy_nonunique_to_existing(
        d: *const t_dictionary,
        dc: *mut t_dictionary,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Call the specified function for every entry in the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tfun\t\tThe function to call, specified as function pointer cast to a Max #method."]
    #[doc = "@param\targ\t\tAn argument that you would like to pass to the function being called."]
    #[doc = ""]
    #[doc = "@remark\t\t\tThe dictionary_funall() method will call your function for every entry in the dictionary."]
    #[doc = "It will pass both a pointer to the #t_dictionary_entry, and any argument that you provide."]
    #[doc = "The following example shows a function that could be called by dictionary_funall()."]
    #[doc = "@code"]
    #[doc = "void my_function(t_dictionary_entry *entry, void* my_arg)"]
    #[doc = "{"]
    #[doc = "t_symbol\t*key;"]
    #[doc = "t_atom\t\tvalue;"]
    #[doc = ""]
    #[doc = "key = dictionary_entry_getkey(entry);"]
    #[doc = "dictionary_entry_getvalue(entry, &value);"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = "@endcode"]
    #[doc = "@see dictionary_entry_getkey()"]
    #[doc = "@see dictionary_entry_getvalue()"]
    pub fn dictionary_funall(d: *mut t_dictionary, fun: method, arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Given a #t_dictionary_entry*, return the key associated with that entry."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\tx\t\tThe dictionary entry."]
    #[doc = "@return\t\t\tThe key associated with the entry."]
    #[doc = ""]
    #[doc = "@see dictionary_entry_getvalue()"]
    #[doc = "@see dictionary_funall()"]
    pub fn dictionary_entry_getkey(x: *mut t_dictionary_entry) -> *mut t_symbol;
}
extern "C" {
    #[doc = "Given a #t_dictionary_entry*, return the value associated with that entry."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\tx\t\tThe dictionary entry."]
    #[doc = "@param\tvalue\tThe address of a #t_atom to which the value will be copied."]
    #[doc = ""]
    #[doc = "@see dictionary_entry_getkey()"]
    #[doc = "@see dictionary_funall()"]
    pub fn dictionary_entry_getvalue(x: *mut t_dictionary_entry, value: *mut t_atom);
}
extern "C" {
    #[doc = "Given a #t_dictionary_entry*, return the values associated with that entry."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\tx\t\tThe dictionary entry."]
    #[doc = "@param\targc\tThe length of the returned #t_atom vector."]
    #[doc = "@param\targv\tThe address of a #t_atom vector to which the values will be copied."]
    #[doc = ""]
    #[doc = "@see dictionary_entry_getkey()"]
    #[doc = "@see dictionary_funall()"]
    pub fn dictionary_entry_getvalues(
        x: *mut t_dictionary_entry,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    );
}
extern "C" {
    #[doc = "Given 2 dictionaries, copy the keys unique to one of the dictionaries to the other dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\t\t\tdictionary"]
    #[doc = "@param\td\t\t\tA dictionary instance.  This will be the destination for any values that are copied."]
    #[doc = "@param\tcopyfrom\tA dictionary instance from which we will copy any values with unique keys."]
    #[doc = "@return\t\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\t\tdictionary_copyentries()"]
    pub fn dictionary_copyunique(d: *mut t_dictionary, copyfrom: *mut t_dictionary) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a long integer from the dictionary."]
    #[doc = "If the named key doesn't exist, then return a specified default value."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tvalue\tThe address of variable to hold the value associated with the key."]
    #[doc = "@param\tdef\t\tThe default value to return in the absence of the key existing in the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_getlong()"]
    pub fn dictionary_getdeflong(
        d: *const t_dictionary,
        key: *mut t_symbol,
        value: *mut t_atom_long,
        def: t_atom_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a double-precision float from the dictionary."]
    #[doc = "If the named key doesn't exist, then return a specified default value."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tvalue\tThe address of variable to hold the value associated with the key."]
    #[doc = "@param\tdef\t\tThe default value to return in the absence of the key existing in the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_getfloat()"]
    pub fn dictionary_getdeffloat(
        d: *const t_dictionary,
        key: *mut t_symbol,
        value: *mut f64,
        def: f64,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a #t_symbol* from the dictionary."]
    #[doc = "If the named key doesn't exist, then return a specified default value."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tvalue\tThe address of variable to hold the value associated with the key."]
    #[doc = "@param\tdef\t\tThe default value to return in the absence of the key existing in the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_getsym()"]
    pub fn dictionary_getdefsym(
        d: *const t_dictionary,
        key: *mut t_symbol,
        value: *mut *mut t_symbol,
        def: *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a #t_atom* from the dictionary."]
    #[doc = "If the named key doesn't exist, then return a specified default value."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tvalue\tThe address of variable to hold the value associated with the key."]
    #[doc = "@param\tdef\t\tThe default value to return in the absence of the key existing in the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_getatom()"]
    pub fn dictionary_getdefatom(
        d: *const t_dictionary,
        key: *mut t_symbol,
        value: *mut t_atom,
        def: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve a C-string from the dictionary."]
    #[doc = "If the named key doesn't exist, then return a specified default value."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\tvalue\tThe address of variable to hold the value associated with the key."]
    #[doc = "@param\tdef\t\tThe default value to return in the absence of the key existing in the dictionary."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_getstring()"]
    pub fn dictionary_getdefstring(
        d: *const t_dictionary,
        key: *mut t_symbol,
        value: *mut *const ::std::os::raw::c_char,
        def: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve the address of a #t_atom array of in the dictionary."]
    #[doc = "The retrieved pointer references the t_atoms in the dictionary."]
    #[doc = "To fetch a copy of the t_atoms from the dictionary, use dictionary_copyatoms()."]
    #[doc = "If the named key doesn't exist, then return a default array of atoms, specified as a #t_atomarray*."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\targc\tThe address of a variable to hold the number of atoms in the array."]
    #[doc = "@param\targv\tThe address of a variable to hold a pointer to the first atom in the array."]
    #[doc = "@param\tdef\t\tThe default values specified as an instance of the #t_atomarray object."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_getatoms()"]
    #[doc = "@see\t\t\tdictionary_copydefatoms()"]
    pub fn dictionary_getdefatoms(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
        def: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve copies of a #t_atom array in the dictionary."]
    #[doc = "The retrieved pointer of t_atoms in the dictionary has memory allocated and copied to it from within the function."]
    #[doc = "You are responsible for freeing it with sysmem_freeptr()."]
    #[doc = "If the named key doesn't exist, then copy a default array of atoms, specified as a #t_atomarray*."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\tkey\t\tThe key associated with the value to lookup."]
    #[doc = "@param\targc\tThe address of a variable to hold the number of atoms in the array."]
    #[doc = "@param\targv\tThe address of a variable to hold a pointer to the first atom in the array."]
    #[doc = "You should initialize this pointer to NULL prior to passing it to dictionary_copyatoms()."]
    #[doc = "@param\tdef\t\tThe default values specified as an instance of the #t_atomarray object."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_getdefatoms()"]
    #[doc = "@see\t\t\tdictionary_copyatoms()"]
    pub fn dictionary_copydefatoms(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
        def: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Print the contents of a dictionary to the Max window."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary instance."]
    #[doc = "@param\trecurse\tIf non-zero, the dictionary will be recursively unravelled to the Max window."]
    #[doc = "Otherwise it will only print the top level."]
    #[doc = "@param\tconsole\tIf non-zero, the dictionary will be posted to the console rather than the Max window."]
    #[doc = "On the Mac you can view this using Console.app."]
    #[doc = "On Windows you can use the free DbgView program which can be downloaded from Microsoft."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn dictionary_dump(
        d: *mut t_dictionary,
        recurse: ::std::os::raw::c_long,
        console: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Copy specified entries from one dictionary to another."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\tsrc\t\tThe source dictionary from which to copy entries."]
    #[doc = "@param\tdst\t\tThe destination dictionary to which the entries will be copied."]
    #[doc = "@param\tkeys\tThe address of the first of an array of #t_symbol* that specifies which keys to copy."]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_copyunique()"]
    pub fn dictionary_copyentries(
        src: *mut t_dictionary,
        dst: *mut t_dictionary,
        keys: *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Create a new dictionary populated with values using a combination of attribute and sprintf syntax."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\tfmt\t\tAn sprintf-style format string specifying key-value pairs with attribute nomenclature."]
    #[doc = "@param\t...\t\tOne or more arguments which are to be substituted into the format string."]
    #[doc = "@return\t\t\tA new dictionary instance."]
    #[doc = ""]
    #[doc = "@remark\t\t\tMax attribute syntax is used to define key-value pairs.  For example,"]
    #[doc = "@code"]
    #[doc = "\"@key1 value @key2 another_value\""]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark\t\t\tOne common use of this to create dictionary that represents an element of a patcher,"]
    #[doc = "or even an entire patcher itself.  The example below creates a dictionary that can"]
    #[doc = "be passed to a function like newobject_fromdictionary() to create a new object."]
    #[doc = "@code"]
    #[doc = "t_dictionary *d;"]
    #[doc = "char text[4];"]
    #[doc = ""]
    #[doc = "strncpy_zero(text, \"foo\", 4);"]
    #[doc = ""]
    #[doc = "d = dictionary_sprintf(\"@maxclass comment @varname _name \\"]
    #[doc = "@text \\\"%s\\\" @patching_rect %.2f %.2f %.2f %.2f \\"]
    #[doc = "@fontsize %f @textcolor %f %f %f 1.0 \\"]
    #[doc = "@fontname %s @bgcolor 0.001 0.001 0.001 0.\","]
    #[doc = "text, 20.0, 20.0, 200.0, 24.0,"]
    #[doc = "18, 0.9, 0.9, 0.9, \"Arial\");"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "object_free(d);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see\t\t\tnewobject_sprintf()"]
    #[doc = "@see\t\t\tnewobject_fromdictionary()"]
    #[doc = "@see\t\t\tatom_setparse()"]
    pub fn dictionary_sprintf(fmt: *const ::std::os::raw::c_char, ...) -> *mut t_dictionary;
}
extern "C" {
    #[doc = "Take a lock on a dictionary for preventing dictionary lock for transactions"]
    #[doc = "across multiple calls, or holding on to internal dictionary element pointers"]
    #[doc = "for complex operations."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary to lock"]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_transaction_unlock()"]
    pub fn dictionary_transaction_lock(d: *mut t_dictionary) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Release a lock on a dictionary for preventing dictionary lock for transactions"]
    #[doc = "across multiple calls, or holding on to internal dictionary element pointers"]
    #[doc = "for complex operations."]
    #[doc = ""]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tThe dictionary to unlock"]
    #[doc = "@return\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_transaction_lock()"]
    pub fn dictionary_transaction_unlock(d: *mut t_dictionary) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tRead the specified JSON file and return a #t_dictionary object."]
    #[doc = "You are responsible for freeing the dictionary with object_free(),"]
    #[doc = "subject to the caveats explained in @ref when_to_free_a_dictionary."]
    #[doc = "@ingroup\t\t\tdictionary"]
    #[doc = "@param\tfilename\tThe name of the file."]
    #[doc = "@param\tpath\t\tThe path of the file."]
    #[doc = "@param\td\t\t\tThe address of a #t_dictionary pointer that will be set to the newly created dictionary."]
    #[doc = "@return\t\t\t\tA Max error code"]
    pub fn dictionary_read(
        filename: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        d: *mut *mut t_dictionary,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tSerialize the specified #t_dictionary object to a JSON file."]
    #[doc = "@ingroup\t\t\tdictionary"]
    #[doc = "@param\td\t\t\tThe dictionary to serialize into JSON format and write to disk."]
    #[doc = "@param\tfilename\tThe name of the file to write."]
    #[doc = "@param\tpath\t\tThe path to which the file should be written."]
    #[doc = "@return\t\t\t\tA Max error code."]
    pub fn dictionary_write(
        d: *mut t_dictionary,
        filename: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
    ) -> t_max_err;
}
pub mod e_max_atom_gettext_flags {
    #[doc = "Flags that determine how functions convert atoms into text (C-strings)."]
    #[doc = "@ingroup atom"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< default translation rules for getting text from atoms"]
    pub const OBEX_UTIL_ATOM_GETTEXT_DEFAULT: Type = 0;
    #[doc = "< eliminate redundant zeros for floating point numbers (default used)"]
    pub const OBEX_UTIL_ATOM_GETTEXT_TRUNCATE_ZEROS: Type = 1;
    #[doc = "< don't introduce quotes around symbols with spaces"]
    pub const OBEX_UTIL_ATOM_GETTEXT_SYM_NO_QUOTE: Type = 2;
    #[doc = "< always introduce quotes around symbols (useful for JSON)"]
    pub const OBEX_UTIL_ATOM_GETTEXT_SYM_FORCE_QUOTE: Type = 4;
    #[doc = "< separate atoms with commas (useful for JSON)"]
    pub const OBEX_UTIL_ATOM_GETTEXT_COMMA_DELIM: Type = 8;
    #[doc = "< always print the zeros"]
    pub const OBEX_UTIL_ATOM_GETTEXT_FORCE_ZEROS: Type = 16;
    #[doc = "< print more decimal places"]
    pub const OBEX_UTIL_ATOM_GETTEXT_NUM_HI_RES: Type = 32;
    #[doc = "< print fewer decimal places (HI_RES will win though)"]
    pub const OBEX_UTIL_ATOM_GETTEXT_NUM_LO_RES: Type = 64;
    #[doc = "< don't add extra escape characters"]
    pub const OBEX_UTIL_ATOM_GETTEXT_NOESCAPE: Type = 128;
    #[doc = "< don't insert spaces before/after linebreak characters"]
    pub const OBEX_UTIL_ATOM_GETTEXT_LINEBREAK_NODELIM: Type = 256;
}
extern "C" {
    #[doc = "Assign an array of char values to an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms to try to fetch from the array of chars."]
    #[doc = "You should have at least this number of atoms allocated in av."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values in the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe array from which to copy the values into the array of atoms at av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_setchar_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut ::std::os::raw::c_uchar,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Assign an array of long integer values to an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms to try to fetch from the array of longs."]
    #[doc = "You should have at least this number of atoms allocated in av."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values in the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe array from which to copy the values into the array of atoms at av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_setlong_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut t_atom_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Assign an array of 32bit float values to an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms to try to fetch from the array of floats."]
    #[doc = "You should have at least this number of atoms allocated in av."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values in the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe array from which to copy the values into the array of atoms at av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_setfloat_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut f32,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Assign an array of 64bit float values to an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms to try to fetch from the array of doubles."]
    #[doc = "You should have at least this number of atoms allocated in av."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values in the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe array from which to copy the values into the array of atoms at av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_setdouble_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut f64,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Assign an array of #t_symbol* values to an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms to try to fetch from the array of symbols."]
    #[doc = "You should have at least this number of atoms allocated in av."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values in the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe array from which to copy the values into the array of atoms at av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_setsym_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Assign an array of #t_atom values to an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms to try to fetch from the second array of atoms."]
    #[doc = "You should have at least this number of atoms allocated in av."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values in the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe array from which to copy the values into the array of atoms at av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_setatom_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Assign an array of #t_object* values to an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms to try to fetch from the array of objects."]
    #[doc = "You should have at least this number of atoms allocated in av."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values in the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe array from which to copy the values into the array of atoms at av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_setobj_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Parse a C-string into an array of atoms."]
    #[doc = "This function allocates memory for the atoms if the ac and av parameters are NULL."]
    #[doc = "Otherwise it will attempt to use any memory already allocated to av."]
    #[doc = "Any allocated memory should be freed with sysmem_freeptr()."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\tThe address of a variable to hold the number of returned atoms."]
    #[doc = "@param\t\tav\t\t\tThe address of a #t_atom pointer to which memory may be allocated and atoms copied."]
    #[doc = "@param\t\tparsestr\tThe C-string to parse."]
    #[doc = "@return\t\t\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@remark\t\tThe following example will parse the string \"foo bar 1 2 3.0\" into an array of 5 atoms."]
    #[doc = "The atom types will be determined automatically as 2 #A_SYM atoms, 2 #A_LONG atoms, and 1 #A_FLOAT atom."]
    #[doc = "@code"]
    #[doc = "t_atom *av =  NULL;"]
    #[doc = "long ac = 0;"]
    #[doc = "t_max_err err = MAX_ERR_NONE;"]
    #[doc = ""]
    #[doc = "err = atom_setparse(&ac, &av, \"foo bar 1 2 3.0\");"]
    #[doc = "@endcode"]
    pub fn atom_setparse(
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
        parsestr: *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn atom_setbinbuf(
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
        buf: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    pub fn atom_setattrval(
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
        attrname: *mut t_symbol,
        obj: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    pub fn atom_setobjval(
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
        obj: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Create an array of atoms populated with values using sprintf-like syntax."]
    #[doc = "atom_setformat() supports clfdsoaCLFDSOA tokens"]
    #[doc = "(primitive type scalars and arrays respectively for the"]
    #[doc = "char, long, float, double, #t_symbol*, #t_object*, #t_atom*)."]
    #[doc = "It also supports vbp@ tokens (obval, binbuf, parsestr, attribute)."]
    #[doc = ""]
    #[doc = "This function allocates memory for the atoms if the ac and av parameters are NULL."]
    #[doc = "Otherwise it will attempt to use any memory already allocated to av."]
    #[doc = "Any allocated memory should be freed with sysmem_freeptr()."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = ""]
    #[doc = "@param\t\tac\t\t\tThe address of a variable to hold the number of returned atoms."]
    #[doc = "@param\t\tav\t\t\tThe address of a #t_atom pointer to which memory may be allocated and atoms copied."]
    #[doc = "@param\t\tfmt\t\t\tAn sprintf-style format string specifying values for the atoms."]
    #[doc = "@param\t\t...\t\t\tOne or more arguments which are to be substituted into the format string."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tatom_getformat()"]
    #[doc = "@see\t\tatom_setparse()"]
    pub fn atom_setformat(
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieve values from an array of atoms using sscanf-like syntax."]
    #[doc = "atom_getformat() supports clfdsoaCLFDSOA tokens"]
    #[doc = "(primitive type scalars and arrays respectively for the"]
    #[doc = "char, long, float, double, #t_symbol*, #t_object*, #t_atom*)."]
    #[doc = "It does not support vbp@ the tokens found in atom_setformat()."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = ""]
    #[doc = "@param\t\tac\t\t\tThe number of atoms to parse in av."]
    #[doc = "@param\t\tav\t\t\tThe address of the first #t_atom pointer in an array to parse."]
    #[doc = "@param\t\tfmt\t\t\tAn sscanf-style format string specifying types for the atoms."]
    #[doc = "@param\t\t...\t\t\tOne or more arguments which are address of variables to be set according to the fmt string."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tatom_setformat()"]
    pub fn atom_getformat(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convert an array of atoms into a C-string."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = ""]
    #[doc = "@param\t\tac\t\t\tThe number of atoms to fetch in av."]
    #[doc = "@param\t\tav\t\t\tThe address of the first #t_atom pointer in an array to retrieve."]
    #[doc = "@param\t\ttextsize\tThe size of the string to which the atoms will be formatted and copied."]
    #[doc = "@param\t\ttext\t\tThe address of the string to which the text will be written."]
    #[doc = "@param\t\tflags\t\tDetermines the rules by which atoms will be translated into text."]
    #[doc = "Values are bit mask as defined by #e_max_atom_gettext_flags."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tatom_setparse()"]
    pub fn atom_gettext(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        textsize: *mut ::std::os::raw::c_long,
        text: *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convert an array of atoms into a C-string, specifying floating-point precision."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = ""]
    #[doc = "@param\t\tac\t\t\tThe number of atoms to fetch in av."]
    #[doc = "@param\t\tav\t\t\tThe address of the first #t_atom pointer in an array to retrieve."]
    #[doc = "@param\t\ttextsize\tThe size of the string to which the atoms will be formatted and copied."]
    #[doc = "@param\t\ttext\t\tThe address of the string to which the text will be written."]
    #[doc = "@param\t\tflags\t\tDetermines the rules by which atoms will be translated into text."]
    #[doc = "Values are bit mask as defined by #e_max_atom_gettext_flags."]
    #[doc = "@param\t\tprecision\tDetermines the number of digits after the decimal point when floats are translated into text."]
    #[doc = "This overrides the OBEX_UTIL_ATOM_GETTEXT_NUM_HI_RES and"]
    #[doc = "OBEX_UTIL_ATOM_GETTEXT_NUM_LO_RES #e_max_atom_gettext_flags."]
    #[doc = "Pass -1 to ignore this value and behave as atom_gettext()."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tatom_setparse()"]
    pub fn atom_gettext_precision(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        textsize: *mut ::std::os::raw::c_long,
        text: *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_long,
        precision: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Fetch an array of char values from an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms allocated in the av parameter."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values to fetch from the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe address of the array to which is copied the values from av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_getchar_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut ::std::os::raw::c_uchar,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Fetch an array of long integer values from an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms allocated in the av parameter."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values to fetch from the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe address of the array to which is copied the values from av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_getlong_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut t_atom_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Fetch an array of 32bit float values from an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms allocated in the av parameter."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values to fetch from the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe address of the array to which is copied the values from av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_getfloat_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut f32,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Fetch an array of 64bit float values from an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms allocated in the av parameter."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values to fetch from the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe address of the array to which is copied the values from av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_getdouble_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut f64,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Fetch an array of #t_symbol* values from an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms allocated in the av parameter."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values to fetch from the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe address of the array to which is copied the values from av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_getsym_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Fetch an array of #t_atom values from an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms allocated in the av parameter."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values to fetch from the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe address of the array to which is copied the values from av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_getatom_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Fetch an array of #t_object* values from an array of atoms."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\tac\t\t\t\tThe number of atoms allocated in the av parameter."]
    #[doc = "@param\t\tav\t\t\t\tThe address to the first of an array of allocated atoms."]
    #[doc = "@param\t\tcount\t\t\tThe number of values to fetch from the array specified by vals."]
    #[doc = "@param\t\tvals\t\t\tThe address of the array to which is copied the values from av."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    pub fn atom_getobj_array(
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        count: ::std::os::raw::c_long,
        vals: *mut *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Determines whether or not an atom represents a #t_string object."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\ta\t\t\t\tThe address of the atom to test."]
    #[doc = "@return\t\tReturns true if the #t_atom contains a valid #t_string object."]
    pub fn atomisstring(a: *const t_atom) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Determines whether or not an atom represents a #t_atomarray object."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\ta\t\t\t\tThe address of the atom to test."]
    #[doc = "@return\t\tReturns true if the #t_atom contains a valid #t_atomarray object."]
    pub fn atomisatomarray(a: *mut t_atom) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Determines whether or not an atom represents a #t_dictionary object."]
    #[doc = ""]
    #[doc = "@ingroup\tatom"]
    #[doc = "@param\t\ta\t\t\t\tThe address of the atom to test."]
    #[doc = "@return\t\tReturns true if the #t_atom contains a valid #t_dictionary object."]
    pub fn atomisdictionary(a: *mut t_atom) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that uses atom_setparse() to define the arguments."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\t\tThe name of the method to call on the object."]
    #[doc = "@param \t\tparsestr\tA C-string to parse into an array of atoms to pass to the method."]
    #[doc = "@param\t\trv\t\t\tThe address of an atom to hold a return value."]
    #[doc = "@return\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\tobject_method_typed()"]
    #[doc = "@see\t\tatom_setparse()"]
    pub fn object_method_parse(
        x: *mut t_object,
        s: *mut t_symbol,
        parsestr: *const ::std::os::raw::c_char,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_method_binbuf(
        x: *mut t_object,
        s: *mut t_symbol,
        buf: *mut ::std::os::raw::c_void,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_method_attrval(
        x: *mut t_object,
        s: *mut t_symbol,
        attrname: *mut t_symbol,
        obj: *mut t_object,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_method_objval(
        x: *mut t_object,
        s: *mut t_symbol,
        obj: *mut t_object,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that uses atom_setformat() to define the arguments."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\t\tThe name of the method to call on the object."]
    #[doc = "@param\t\trv\t\t\tThe address of an atom to hold a return value."]
    #[doc = "@param\t\tfmt\t\t\tAn sprintf-style format string specifying values for the atoms."]
    #[doc = "@param\t\t...\t\t\tOne or more arguments which are to be substituted into the format string."]
    #[doc = "@return\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\tobject_method_typed()"]
    #[doc = "@see\t\tatom_setformat()"]
    pub fn object_method_format(
        x: *mut t_object,
        s: *mut t_symbol,
        rv: *mut t_atom,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that passes a single char as an argument."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\tThe name of the method to call on the object."]
    #[doc = "@param\t\tv\t\tAn argument to pass to the method."]
    #[doc = "@param\t\trv\t\tThe address of an atom to hold a return value."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tobject_method_typed()"]
    pub fn object_method_char(
        x: *mut t_object,
        s: *mut t_symbol,
        v: ::std::os::raw::c_uchar,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that passes a single long integer as an argument."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\tThe name of the method to call on the object."]
    #[doc = "@param\t\tv\t\tAn argument to pass to the method."]
    #[doc = "@param\t\trv\t\tThe address of an atom to hold a return value."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tobject_method_typed()"]
    pub fn object_method_long(
        x: *mut t_object,
        s: *mut t_symbol,
        v: ::std::os::raw::c_long,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that passes a single 32bit float as an argument."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\tThe name of the method to call on the object."]
    #[doc = "@param\t\tv\t\tAn argument to pass to the method."]
    #[doc = "@param\t\trv\t\tThe address of an atom to hold a return value."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tobject_method_typed()"]
    pub fn object_method_float(
        x: *mut t_object,
        s: *mut t_symbol,
        v: f32,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that passes a single 64bit float as an argument."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\tThe name of the method to call on the object."]
    #[doc = "@param\t\tv\t\tAn argument to pass to the method."]
    #[doc = "@param\t\trv\t\tThe address of an atom to hold a return value."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tobject_method_typed()"]
    pub fn object_method_double(
        x: *mut t_object,
        s: *mut t_symbol,
        v: f64,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that passes a single #t_symbol* as an argument."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\tThe name of the method to call on the object."]
    #[doc = "@param\t\tv\t\tAn argument to pass to the method."]
    #[doc = "@param\t\trv\t\tThe address of an atom to hold a return value."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tobject_method_typed()"]
    pub fn object_method_sym(
        x: *mut t_object,
        s: *mut t_symbol,
        v: *mut t_symbol,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that passes a single #t_object* as an argument."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\tThe name of the method to call on the object."]
    #[doc = "@param\t\tv\t\tAn argument to pass to the method."]
    #[doc = "@param\t\trv\t\tThe address of an atom to hold a return value."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tobject_method_typed()"]
    pub fn object_method_obj(
        x: *mut t_object,
        s: *mut t_symbol,
        v: *mut t_object,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that passes an array of char values as an argument."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\tThe name of the method to call on the object."]
    #[doc = "@param\t\tac\t\tThe number of arguments to pass to the method."]
    #[doc = "@param\t\tav\t\tThe address of the first of the array of arguments to pass to the method."]
    #[doc = "@param\t\trv\t\tThe address of an atom to hold a return value."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tobject_method_typed()"]
    pub fn object_method_char_array(
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut ::std::os::raw::c_uchar,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that passes an array of long integers values as an argument."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\tThe name of the method to call on the object."]
    #[doc = "@param\t\tac\t\tThe number of arguments to pass to the method."]
    #[doc = "@param\t\tav\t\tThe address of the first of the array of arguments to pass to the method."]
    #[doc = "@param\t\trv\t\tThe address of an atom to hold a return value."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tobject_method_typed()"]
    pub fn object_method_long_array(
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom_long,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that passes an array of 32bit floats values as an argument."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\tThe name of the method to call on the object."]
    #[doc = "@param\t\tac\t\tThe number of arguments to pass to the method."]
    #[doc = "@param\t\tav\t\tThe address of the first of the array of arguments to pass to the method."]
    #[doc = "@param\t\trv\t\tThe address of an atom to hold a return value."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tobject_method_typed()"]
    pub fn object_method_float_array(
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut f32,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that passes an array of 64bit float values as an argument."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\tThe name of the method to call on the object."]
    #[doc = "@param\t\tac\t\tThe number of arguments to pass to the method."]
    #[doc = "@param\t\tav\t\tThe address of the first of the array of arguments to pass to the method."]
    #[doc = "@param\t\trv\t\tThe address of an atom to hold a return value."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tobject_method_typed()"]
    pub fn object_method_double_array(
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut f64,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that passes an array of #t_symbol* values as an argument."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\tThe name of the method to call on the object."]
    #[doc = "@param\t\tac\t\tThe number of arguments to pass to the method."]
    #[doc = "@param\t\tav\t\tThe address of the first of the array of arguments to pass to the method."]
    #[doc = "@param\t\trv\t\tThe address of an atom to hold a return value."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tobject_method_typed()"]
    pub fn object_method_sym_array(
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut *mut t_symbol,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Convenience wrapper for object_method_typed() that passes an array of #t_object* values as an argument."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\tThe object to which the message will be sent."]
    #[doc = "@param\t\ts\t\tThe name of the method to call on the object."]
    #[doc = "@param\t\tac\t\tThe number of arguments to pass to the method."]
    #[doc = "@param\t\tav\t\tThe address of the first of the array of arguments to pass to the method."]
    #[doc = "@param\t\trv\t\tThe address of an atom to hold a return value."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tobject_method_typed()"]
    pub fn object_method_obj_array(
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut *mut t_object,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_typed(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_parse(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        parsestr: *mut ::std::os::raw::c_char,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_binbuf(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        buf: *mut ::std::os::raw::c_void,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_attrval(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        attrname: *mut t_symbol,
        obj: *mut t_object,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_objval(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        obj: *mut t_object,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_format(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        rv: *mut t_atom,
        fmt: *mut ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_char(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        v: ::std::os::raw::c_uchar,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_long(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        v: ::std::os::raw::c_long,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_float(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        v: f32,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_double(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        v: f64,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_sym(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        v: *mut t_symbol,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_obj(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        v: *mut t_object,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_char_array(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut ::std::os::raw::c_uchar,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_long_array(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom_long,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_float_array(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut f32,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_double_array(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut f64,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_sym_array(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut *mut t_symbol,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn call_method_obj_array(
        m: method,
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut *mut t_object,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Set an attribute value with one or more atoms parsed from a C-string."]
    #[doc = ""]
    #[doc = "@ingroup\tattr"]
    #[doc = "@param\t\tx\t\t\tThe object whose attribute will be set."]
    #[doc = "@param\t\ts\t\t\tThe name of the attribute to set."]
    #[doc = "@param \t\tparsestr\tA C-string to parse into an array of atoms to set the attribute value."]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\tatom_setparse()"]
    pub fn object_attr_setparse(
        x: *mut t_object,
        s: *mut t_symbol,
        parsestr: *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_setbinbuf(
        x: *mut t_object,
        s: *mut t_symbol,
        buf: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_setattrval(
        x: *mut t_object,
        s: *mut t_symbol,
        attrname: *mut t_symbol,
        obj: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_setobjval(
        x: *mut t_object,
        s: *mut t_symbol,
        obj: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_setformat(
        x: *mut t_object,
        s: *mut t_symbol,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    pub fn attribute_new_atoms(
        attrname: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> *mut t_object;
}
extern "C" {
    pub fn attribute_new_parse(
        attrname: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        parsestr: *const ::std::os::raw::c_char,
    ) -> *mut t_object;
}
extern "C" {
    pub fn attribute_new_binbuf(
        attrname: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        buf: *mut ::std::os::raw::c_void,
    ) -> *mut t_object;
}
extern "C" {
    pub fn attribute_new_attrval(
        attrname: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        objattrname: *mut t_symbol,
        obj: *mut t_object,
    ) -> *mut t_object;
}
extern "C" {
    pub fn attribute_new_objval(
        attrname: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        obj: *mut t_object,
    ) -> *mut t_object;
}
extern "C" {
    pub fn attribute_new_format(
        attrname: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut t_object;
}
extern "C" {
    #[doc = "Create a new object with one or more atoms parsed from a C-string."]
    #[doc = "The object's new method must have an #A_GIMME signature."]
    #[doc = ""]
    #[doc = "@ingroup\tattr"]
    #[doc = "@param\t\tname_space\tThe namespace in which to create the instance. Typically this is either #CLASS_BOX or #CLASS_NOBOX."]
    #[doc = "@param\t\tclassname\tThe name of the class to instantiate."]
    #[doc = "@param \t\tparsestr\tA C-string to parse into an array of atoms to set the attribute value."]
    #[doc = ""]
    #[doc = "@return\t\tA pointer to the new instance."]
    #[doc = "@see\t\tatom_setparse()"]
    #[doc = "@see\t\tobject_new_typed()"]
    pub fn object_new_parse(
        name_space: *mut t_symbol,
        classname: *mut t_symbol,
        parsestr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_new_binbuf(
        name_space: *mut t_symbol,
        classname: *mut t_symbol,
        buf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_new_attrval(
        name_space: *mut t_symbol,
        classname: *mut t_symbol,
        objattrname: *mut t_symbol,
        obj: *mut t_object,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_new_objval(
        name_space: *mut t_symbol,
        classname: *mut t_symbol,
        obj: *mut t_object,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_new_format(
        name_space: *mut t_symbol,
        classname: *mut t_symbol,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_attr_addattr(
        x: *mut t_object,
        attrname: *mut t_symbol,
        attr: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_attr_get(
        x: *mut t_object,
        attrname: *mut t_symbol,
        attrname2: *mut t_symbol,
    ) -> *mut t_object;
}
extern "C" {
    pub fn object_attr_attr_setvalueof(
        x: *mut t_object,
        attrname: *mut t_symbol,
        attrname2: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_attr_getvalueof(
        x: *mut t_object,
        attrname: *mut t_symbol,
        attrname2: *mut t_symbol,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_attr_addattr(
        c: *mut t_class,
        attrname: *mut t_symbol,
        attr: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_attr_attr_get(
        c: *mut t_class,
        attrname: *mut t_symbol,
        attrname2: *mut t_symbol,
    ) -> *mut t_object;
}
extern "C" {
    pub fn class_attr_attr_setvalueof(
        c: *mut t_class,
        attrname: *mut t_symbol,
        attrname2: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_attr_attr_getvalueof(
        c: *mut t_class,
        attrname: *mut t_symbol,
        attrname2: *mut t_symbol,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_enforcelocal(x: *mut t_object, attrname: *mut t_symbol) -> t_max_err;
}
extern "C" {
    pub fn class_addattr_atoms(
        c: *mut t_class,
        attrname: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_addattr_parse(
        c: *mut t_class,
        attrname: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        parsestr: *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_addattr_format(
        c: *mut t_class,
        attrname: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    pub fn class_attr_addattr_atoms(
        c: *mut t_class,
        attrname: *const ::std::os::raw::c_char,
        attrname2: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_attr_addattr_parse(
        c: *mut t_class,
        attrname: *const ::std::os::raw::c_char,
        attrname2: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        parsestr: *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_attr_addattr_format(
        c: *mut t_class,
        attrname: *const ::std::os::raw::c_char,
        attrname2: *const ::std::os::raw::c_char,
        type_: *const t_symbol,
        flags: ::std::os::raw::c_long,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    pub fn object_addattr_atoms(
        x: *mut t_object,
        attrname: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_addattr_parse(
        x: *mut t_object,
        attrname: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        parsestr: *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_addattr_format(
        x: *mut t_object,
        attrname: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_addattr_atoms(
        x: *mut t_object,
        attrname: *const ::std::os::raw::c_char,
        attrname2: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_addattr_parse(
        x: *mut t_object,
        attrname: *const ::std::os::raw::c_char,
        attrname2: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        parsestr: *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_addattr_format(
        x: *mut t_object,
        attrname: *const ::std::os::raw::c_char,
        attrname2: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    pub fn object_clone(x: *mut t_object) -> *mut t_object;
}
extern "C" {
    pub fn object_clone_generic(x: *mut t_object) -> *mut t_object;
}
extern "C" {
    pub fn object_zero(x: *mut t_object);
}
extern "C" {
    pub fn class_addcommand(
        c: *mut t_class,
        cmd: method,
        enabler: method,
        handler: method,
        message: *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_commandenabled(
        o: *mut t_object,
        cmd: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_getenabler(c: *mut t_object, cmd: *mut t_symbol, m: *mut method) -> t_max_err;
}
extern "C" {
    pub fn object_getcommand(o: *mut t_object, cmd: *mut t_symbol, m: *mut method) -> t_max_err;
}
extern "C" {
    pub fn object_handlecommand(
        o: *mut t_object,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
        rv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_attr_getdisabled(o: *mut t_object, attrname: *mut t_symbol) -> t_ptr_int;
}
extern "C" {
    pub fn object_attr_setdisabled(
        o: *mut t_object,
        attrname: *mut t_symbol,
        way: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_replaceargs(
        x: *mut t_object,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
        match_: ::std::os::raw::c_char,
        poundfill: ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_obsolete_getter(
        x: *mut t_object,
        attr: *mut t_object,
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_obsolete_setter(
        x: *mut t_object,
        attr: *mut t_object,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_method_obsolete(
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _common_symbols_table {
    pub version: ::std::os::raw::c_long,
    pub s__preset: *mut t_symbol,
    pub s_abbrev: *mut t_symbol,
    pub s_abbrev_rowcomponent: *mut t_symbol,
    pub s_abbrev_setvalue: *mut t_symbol,
    pub s_acceptsdrag: *mut t_symbol,
    pub s_acceptsdrag_locked: *mut t_symbol,
    pub s_acceptsdrag_unlocked: *mut t_symbol,
    pub s_action: *mut t_symbol,
    pub s_action_rowcomponent: *mut t_symbol,
    pub s_action_setvalue: *mut t_symbol,
    pub s_activate: *mut t_symbol,
    pub s_active: *mut t_symbol,
    pub s_activetab: *mut t_symbol,
    pub s_activetabname: *mut t_symbol,
    pub s_activewindow: *mut t_symbol,
    pub s_adapt: *mut t_symbol,
    pub s_add: *mut t_symbol,
    pub s_addattr: *mut t_symbol,
    pub s_addattr_enable: *mut t_symbol,
    pub s_addclient: *mut t_symbol,
    pub s_addfolder: *mut t_symbol,
    pub s_addfolderandsave: *mut t_symbol,
    pub s_addquerydict: *mut t_symbol,
    pub s_addquerydictfromfile: *mut t_symbol,
    pub s_addslot: *mut t_symbol,
    pub s_addtopresentation: *mut t_symbol,
    pub s_addwiretap: *mut t_symbol,
    pub s_adornments: *mut t_symbol,
    pub s_alias: *mut t_symbol,
    pub s_alignboxes: *mut t_symbol,
    pub s_alignconnections: *mut t_symbol,
    pub s_alignlines: *mut t_symbol,
    pub s_all: *mut t_symbol,
    pub s_allkinds: *mut t_symbol,
    pub s_allowmod: *mut t_symbol,
    pub s_alpha: *mut t_symbol,
    pub s_annotation: *mut t_symbol,
    pub s_annotation_name: *mut t_symbol,
    pub s_anydate: *mut t_symbol,
    pub s_anykind: *mut t_symbol,
    pub s_anything: *mut t_symbol,
    pub s_append: *mut t_symbol,
    pub s_append_sql: *mut t_symbol,
    pub s_appendatoms: *mut t_symbol,
    pub s_appendtodictionary: *mut t_symbol,
    pub s_apply: *mut t_symbol,
    pub s_applyboxprototype: *mut t_symbol,
    pub s_applydeep: *mut t_symbol,
    pub s_applydeepif: *mut t_symbol,
    pub s_applyif: *mut t_symbol,
    pub s_args: *mut t_symbol,
    pub s_argument: *mut t_symbol,
    pub s_arguments: *mut t_symbol,
    pub s_argv: *mut t_symbol,
    pub s_ascending: *mut t_symbol,
    pub s_aspect: *mut t_symbol,
    pub s_assist: *mut t_symbol,
    pub s_assoc: *mut t_symbol,
    pub s_atbclick: *mut t_symbol,
    pub s_atom: *mut t_symbol,
    pub s_atomarray: *mut t_symbol,
    pub s_attach: *mut t_symbol,
    pub s_attr_filter_clip: *mut t_symbol,
    pub s_attr_get: *mut t_symbol,
    pub s_attr_getnames: *mut t_symbol,
    pub s_attr_gettarget: *mut t_symbol,
    pub s_attr_modified: *mut t_symbol,
    pub s_attr_offset_array: *mut t_symbol,
    pub s_attr_renamed: *mut t_symbol,
    pub s_attr_setdisabled: *mut t_symbol,
    pub s_attr_setinvisible: *mut t_symbol,
    pub s_attribute: *mut t_symbol,
    pub s_attributes: *mut t_symbol,
    pub s_attrname: *mut t_symbol,
    pub s_audiofile: *mut t_symbol,
    pub s_audioplugin: *mut t_symbol,
    pub s_author: *mut t_symbol,
    pub s_autocompletion: *mut t_symbol,
    pub s_autocompletion_query: *mut t_symbol,
    pub s_autofixwidth: *mut t_symbol,
    pub s_autoheightchanged: *mut t_symbol,
    pub s_autoscroll: *mut t_symbol,
    pub s_back: *mut t_symbol,
    pub s_background: *mut t_symbol,
    pub s_bang: *mut t_symbol,
    pub s_bbu: *mut t_symbol,
    pub s_bclear: *mut t_symbol,
    pub s_bcopy: *mut t_symbol,
    pub s_bcut: *mut t_symbol,
    pub s_begineditbox: *mut t_symbol,
    pub s_beginswith: *mut t_symbol,
    pub s_beginswithorcontains: *mut t_symbol,
    pub s_bfixwidth: *mut t_symbol,
    pub s_bfont: *mut t_symbol,
    pub s_bgcolor: *mut t_symbol,
    pub s_bgcount: *mut t_symbol,
    pub s_bghidden: *mut t_symbol,
    pub s_bglocked: *mut t_symbol,
    pub s_bgmode: *mut t_symbol,
    pub s_blue: *mut t_symbol,
    pub s_bogus: *mut t_symbol,
    pub s_bold: *mut t_symbol,
    pub s_border: *mut t_symbol,
    pub s_borderchanged: *mut t_symbol,
    pub s_bottom_inset: *mut t_symbol,
    pub s_boundingbox: *mut t_symbol,
    pub s_bounds: *mut t_symbol,
    pub s_box: *mut t_symbol,
    pub s_box1: *mut t_symbol,
    pub s_box2: *mut t_symbol,
    pub s_boxalpha: *mut t_symbol,
    pub s_boxanimatetime: *mut t_symbol,
    pub s_boxcomponent: *mut t_symbol,
    pub s_boxcontextitems: *mut t_symbol,
    pub s_boxcontextmenu: *mut t_symbol,
    pub s_boxes: *mut t_symbol,
    pub s_boxlayer: *mut t_symbol,
    pub s_boxnotify: *mut t_symbol,
    pub s_boxscreenrectchanged: *mut t_symbol,
    pub s_bpaste: *mut t_symbol,
    pub s_bpastepic: *mut t_symbol,
    pub s_bpatcher: *mut t_symbol,
    pub s_bpatcher_holder: *mut t_symbol,
    pub s_bpm: *mut t_symbol,
    pub s_bracket_default: *mut t_symbol,
    pub s_bracket_none: *mut t_symbol,
    pub s_break: *mut t_symbol,
    pub s_bredo: *mut t_symbol,
    pub s_brgba: *mut t_symbol,
    pub s_bringforward: *mut t_symbol,
    pub s_bringtofront: *mut t_symbol,
    pub s_bubblesize: *mut t_symbol,
    pub s_build: *mut t_symbol,
    pub s_buildcolumns: *mut t_symbol,
    pub s_bundo: *mut t_symbol,
    pub s_button: *mut t_symbol,
    pub s_c74object: *mut t_symbol,
    pub s_canback: *mut t_symbol,
    pub s_cancopychanged: *mut t_symbol,
    pub s_candropfiles: *mut t_symbol,
    pub s_canforward: *mut t_symbol,
    pub s_canhilite: *mut t_symbol,
    pub s_canmovebackward: *mut t_symbol,
    pub s_canmoveforward: *mut t_symbol,
    pub s_canpastechanged: *mut t_symbol,
    pub s_canremove: *mut t_symbol,
    pub s_cansave: *mut t_symbol,
    pub s_canschedule: *mut t_symbol,
    pub s_canselectchanged: *mut t_symbol,
    pub s_canvastoscreen: *mut t_symbol,
    pub s_caption: *mut t_symbol,
    pub s_catcolors: *mut t_symbol,
    pub s_category: *mut t_symbol,
    pub s_category_first: *mut t_symbol,
    pub s_cell: *mut t_symbol,
    pub s_cell_clue: *mut t_symbol,
    pub s_cellclue: *mut t_symbol,
    pub s_cellenabled: *mut t_symbol,
    pub s_cellschanged: *mut t_symbol,
    pub s_char: *mut t_symbol,
    pub s_char_comma: *mut t_symbol,
    pub s_char_minus: *mut t_symbol,
    pub s_char_semi: *mut t_symbol,
    pub s_char_space: *mut t_symbol,
    pub s_charset_converter: *mut t_symbol,
    pub s_checkbox: *mut t_symbol,
    pub s_choose: *mut t_symbol,
    pub s_chord: *mut t_symbol,
    pub s_chuck: *mut t_symbol,
    pub s_chuckindex: *mut t_symbol,
    pub s_class: *mut t_symbol,
    pub s_class_jit_attribute: *mut t_symbol,
    pub s_class_jit_matrix: *mut t_symbol,
    pub s_class_jit_namespace: *mut t_symbol,
    pub s_classname: *mut t_symbol,
    pub s_classsym: *mut t_symbol,
    pub s_clear: *mut t_symbol,
    pub s_clearactions: *mut t_symbol,
    pub s_clearcolumns: *mut t_symbol,
    pub s_clearitem: *mut t_symbol,
    pub s_clearslots: *mut t_symbol,
    pub s_click: *mut t_symbol,
    pub s_clickaction: *mut t_symbol,
    pub s_clientcontext: *mut t_symbol,
    pub s_clipboard: *mut t_symbol,
    pub s_clipping: *mut t_symbol,
    pub s_clock: *mut t_symbol,
    pub s_close: *mut t_symbol,
    pub s_closebang: *mut t_symbol,
    pub s_clue_cell: *mut t_symbol,
    pub s_clue_header: *mut t_symbol,
    pub s_clueclass: *mut t_symbol,
    pub s_cluelookupattr: *mut t_symbol,
    pub s_cluename: *mut t_symbol,
    pub s_clues: *mut t_symbol,
    pub s_colhead: *mut t_symbol,
    pub s_coll: *mut t_symbol,
    pub s_collectfiles: *mut t_symbol,
    pub s_collective: *mut t_symbol,
    pub s_color: *mut t_symbol,
    pub s_colorvalue: *mut t_symbol,
    pub s_columnadded: *mut t_symbol,
    pub s_columnclue: *mut t_symbol,
    pub s_columndeleted: *mut t_symbol,
    pub s_columnheaderclue: *mut t_symbol,
    pub s_columnminmaxchanged: *mut t_symbol,
    pub s_columnnamechanged: *mut t_symbol,
    pub s_columns: *mut t_symbol,
    pub s_columnwidthchanged: *mut t_symbol,
    pub s_com: *mut t_symbol,
    pub s_command: *mut t_symbol,
    pub s_command_enable: *mut t_symbol,
    pub s_commandgroup: *mut t_symbol,
    pub s_commands: *mut t_symbol,
    pub s_comment: *mut t_symbol,
    pub s_comparison: *mut t_symbol,
    pub s_comparisons: *mut t_symbol,
    pub s_completeconnection: *mut t_symbol,
    pub s_connect: *mut t_symbol,
    pub s_connectcolor: *mut t_symbol,
    pub s_containersizechange: *mut t_symbol,
    pub s_contains: *mut t_symbol,
    pub s_contextmenu: *mut t_symbol,
    pub s_contextualpaste: *mut t_symbol,
    pub s_controller: *mut t_symbol,
    pub s_convert: *mut t_symbol,
    pub s_copy: *mut t_symbol,
    pub s_copyatoms: *mut t_symbol,
    pub s_copyjundo: *mut t_symbol,
    pub s_coremidi: *mut t_symbol,
    pub s_count: *mut t_symbol,
    pub s_create_backup: *mut t_symbol,
    pub s_createbpatcher: *mut t_symbol,
    pub s_createsubpatcher: *mut t_symbol,
    pub s_current: *mut t_symbol,
    pub s_cut: *mut t_symbol,
    pub s_data: *mut t_symbol,
    pub s_date_created: *mut t_symbol,
    pub s_date_lastaccessed: *mut t_symbol,
    pub s_date_modified: *mut t_symbol,
    pub s_days: *mut t_symbol,
    pub s_dblclick: *mut t_symbol,
    pub s_debugwindow_show: *mut t_symbol,
    pub s_decorator: *mut t_symbol,
    pub s_default: *mut t_symbol,
    pub s_default_fontface: *mut t_symbol,
    pub s_default_fontname: *mut t_symbol,
    pub s_default_fontsize: *mut t_symbol,
    pub s_default_matrixplcolor: *mut t_symbol,
    pub s_default_plcolor: *mut t_symbol,
    pub s_default_query: *mut t_symbol,
    pub s_default_sigplcolor: *mut t_symbol,
    pub s_defaultcommand: *mut t_symbol,
    pub s_defaultfocusbox: *mut t_symbol,
    pub s_defaultname: *mut t_symbol,
    pub s_defaultquery: *mut t_symbol,
    pub s_defaults: *mut t_symbol,
    pub s_defaultvaluechanged: *mut t_symbol,
    pub s_definearg: *mut t_symbol,
    pub s_defineargument: *mut t_symbol,
    pub s_definecomparison: *mut t_symbol,
    pub s_definefield: *mut t_symbol,
    pub s_definefolder: *mut t_symbol,
    pub s_definequantifier: *mut t_symbol,
    pub s_definequery: *mut t_symbol,
    pub s_defineslot: *mut t_symbol,
    pub s_definesort: *mut t_symbol,
    pub s_defrect: *mut t_symbol,
    pub s_delete: *mut t_symbol,
    pub s_deleteindex: *mut t_symbol,
    pub s_deletemetadata: *mut t_symbol,
    pub s_deletequery: *mut t_symbol,
    pub s_depthbuffer: *mut t_symbol,
    pub s_descending: *mut t_symbol,
    pub s_description: *mut t_symbol,
    pub s_dest_closing: *mut t_symbol,
    pub s_destination: *mut t_symbol,
    pub s_destrect: *mut t_symbol,
    pub s_destroy: *mut t_symbol,
    pub s_detach: *mut t_symbol,
    pub s_devicerects: *mut t_symbol,
    pub s_dictionary: *mut t_symbol,
    pub s_digest: *mut t_symbol,
    pub s_dim: *mut t_symbol,
    pub s_dimlink: *mut t_symbol,
    pub s_dirty: *mut t_symbol,
    pub s_disabled: *mut t_symbol,
    pub s_disablewiretap: *mut t_symbol,
    pub s_disconnect: *mut t_symbol,
    pub s_do_get_shared_context: *mut t_symbol,
    pub s_document: *mut t_symbol,
    pub s_docwindow_docrect: *mut t_symbol,
    pub s_docwindow_refrect: *mut t_symbol,
    pub s_docwindow_searchrect: *mut t_symbol,
    pub s_docwindow_tocrect: *mut t_symbol,
    pub s_docwindow_tutrect: *mut t_symbol,
    pub s_domain: *mut t_symbol,
    pub s_done: *mut t_symbol,
    pub s_donewobj: *mut t_symbol,
    pub s_dontsave: *mut t_symbol,
    pub s_doublebuffer: *mut t_symbol,
    pub s_doubleclick: *mut t_symbol,
    pub s_doubleclickaction: *mut t_symbol,
    pub s_doubleclicked: *mut t_symbol,
    pub s_down: *mut t_symbol,
    pub s_downcaption: *mut t_symbol,
    pub s_downicon: *mut t_symbol,
    pub s_drag: *mut t_symbol,
    pub s_dragactive: *mut t_symbol,
    pub s_dragdrop: *mut t_symbol,
    pub s_dragenter: *mut t_symbol,
    pub s_dragexit: *mut t_symbol,
    pub s_draggablechanged: *mut t_symbol,
    pub s_dragmove: *mut t_symbol,
    pub s_dragrole: *mut t_symbol,
    pub s_dragtarget: *mut t_symbol,
    pub s_drawfirstin: *mut t_symbol,
    pub s_drawinlast: *mut t_symbol,
    pub s_drawsresizer: *mut t_symbol,
    pub s_dropaction: *mut t_symbol,
    pub s_dropaction_addapplyprototype: *mut t_symbol,
    pub s_dropaction_addconnectedmessage: *mut t_symbol,
    pub s_dropaction_addcustom: *mut t_symbol,
    pub s_dropaction_addcustom_extended: *mut t_symbol,
    pub s_dropaction_addobjectcreation: *mut t_symbol,
    pub s_dropaction_addopeninnewwindow: *mut t_symbol,
    pub s_dropaction_addprototypeobjectcreation: *mut t_symbol,
    pub s_dropfiles: *mut t_symbol,
    pub s_droprole: *mut t_symbol,
    pub s_droprole_locked: *mut t_symbol,
    pub s_droprole_unlocked: *mut t_symbol,
    pub s_dsp: *mut t_symbol,
    pub s_dump: *mut t_symbol,
    pub s_dumpboxes: *mut t_symbol,
    pub s_dumpout: *mut t_symbol,
    pub s_duplicate: *mut t_symbol,
    pub s_edit: *mut t_symbol,
    pub s_edit_framecolor: *mut t_symbol,
    pub s_editactive: *mut t_symbol,
    pub s_editbox: *mut t_symbol,
    pub s_editcell: *mut t_symbol,
    pub s_editing_bgcolor: *mut t_symbol,
    pub s_editmetadata: *mut t_symbol,
    pub s_editonclick: *mut t_symbol,
    pub s_editor: *mut t_symbol,
    pub s_elements: *mut t_symbol,
    pub s_embed: *mut t_symbol,
    pub s_emptytext: *mut t_symbol,
    pub s_enable: *mut t_symbol,
    pub s_enable_rowcomponent: *mut t_symbol,
    pub s_enable_setvalue: *mut t_symbol,
    pub s_enablehscroll: *mut t_symbol,
    pub s_enabler: *mut t_symbol,
    pub s_enablevscroll: *mut t_symbol,
    pub s_enddrag: *mut t_symbol,
    pub s_endmoveboxes: *mut t_symbol,
    pub s_endpoint: *mut t_symbol,
    pub s_endprobe: *mut t_symbol,
    pub s_endswith: *mut t_symbol,
    pub s_endtransaction: *mut t_symbol,
    pub s_enter: *mut t_symbol,
    pub s_entertext: *mut t_symbol,
    pub s_enum: *mut t_symbol,
    pub s_enumindex: *mut t_symbol,
    pub s_enummsg: *mut t_symbol,
    pub s_enumtarget: *mut t_symbol,
    pub s_enumvals: *mut t_symbol,
    pub s_equalto: *mut t_symbol,
    pub s_error: *mut t_symbol,
    pub s_eventinterval: *mut t_symbol,
    pub s_everything: *mut t_symbol,
    pub s_excludebg: *mut t_symbol,
    pub s_exec: *mut t_symbol,
    pub s_execstring: *mut t_symbol,
    pub s_execstring_safe: *mut t_symbol,
    pub s_execute: *mut t_symbol,
    pub s_executefind: *mut t_symbol,
    pub s_extension: *mut t_symbol,
    pub s_extra: *mut t_symbol,
    pub s_ezquery: *mut t_symbol,
    pub s_fadetinge: *mut t_symbol,
    pub s_fgcolor: *mut t_symbol,
    pub s_fghidden: *mut t_symbol,
    pub s_field: *mut t_symbol,
    pub s_fieldnamebyindex: *mut t_symbol,
    pub s_fields: *mut t_symbol,
    pub s_file: *mut t_symbol,
    pub s_filefolder: *mut t_symbol,
    pub s_fileformat: *mut t_symbol,
    pub s_filename: *mut t_symbol,
    pub s_filepath: *mut t_symbol,
    pub s_filetypemessage: *mut t_symbol,
    pub s_fileusage: *mut t_symbol,
    pub s_filter: *mut t_symbol,
    pub s_filterget: *mut t_symbol,
    pub s_filterset: *mut t_symbol,
    pub s_find: *mut t_symbol,
    pub s_find_enableselectall: *mut t_symbol,
    pub s_findall: *mut t_symbol,
    pub s_finddoneclicked: *mut t_symbol,
    pub s_findfirst: *mut t_symbol,
    pub s_findmaster: *mut t_symbol,
    pub s_findnextclicked: *mut t_symbol,
    pub s_findprevclicked: *mut t_symbol,
    pub s_findreturnkeypressed: *mut t_symbol,
    pub s_findselectallclicked: *mut t_symbol,
    pub s_findsize: *mut t_symbol,
    pub s_findtextchanged: *mut t_symbol,
    pub s_first: *mut t_symbol,
    pub s_firstline: *mut t_symbol,
    pub s_firstobject: *mut t_symbol,
    pub s_firstview: *mut t_symbol,
    pub s_five: *mut t_symbol,
    pub s_fixed: *mut t_symbol,
    pub s_fixwidth: *mut t_symbol,
    pub s_flags: *mut t_symbol,
    pub s_flat: *mut t_symbol,
    pub s_float: *mut t_symbol,
    pub s_float32: *mut t_symbol,
    pub s_float64: *mut t_symbol,
    pub s_floating: *mut t_symbol,
    pub s_flonum: *mut t_symbol,
    pub s_flush: *mut t_symbol,
    pub s_focusgained: *mut t_symbol,
    pub s_focuslost: *mut t_symbol,
    pub s_focusonvis: *mut t_symbol,
    pub s_fold: *mut t_symbol,
    pub s_folder: *mut t_symbol,
    pub s_folderdropped: *mut t_symbol,
    pub s_folderpath: *mut t_symbol,
    pub s_font: *mut t_symbol,
    pub s_fontchanged: *mut t_symbol,
    pub s_fontface: *mut t_symbol,
    pub s_fontfixwidth: *mut t_symbol,
    pub s_fontinfochanged: *mut t_symbol,
    pub s_fontname: *mut t_symbol,
    pub s_fontnamechanged: *mut t_symbol,
    pub s_fontpanel_isclientwindow: *mut t_symbol,
    pub s_fontpanelfontcolor: *mut t_symbol,
    pub s_fontpanelfontface: *mut t_symbol,
    pub s_fontpanelfontname: *mut t_symbol,
    pub s_fontpanelfontsize: *mut t_symbol,
    pub s_fontsize: *mut t_symbol,
    pub s_fontsizechanged: *mut t_symbol,
    pub s_fonttarget: *mut t_symbol,
    pub s_forbidclose: *mut t_symbol,
    pub s_forward: *mut t_symbol,
    pub s_four: *mut t_symbol,
    pub s_fpic: *mut t_symbol,
    pub s_free: *mut t_symbol,
    pub s_freebang: *mut t_symbol,
    pub s_freekeys: *mut t_symbol,
    pub s_freepatcherview: *mut t_symbol,
    pub s_frgb: *mut t_symbol,
    pub s_frgba: *mut t_symbol,
    pub s_fromdictionary: *mut t_symbol,
    pub s_fromgworld: *mut t_symbol,
    pub s_frommatrix: *mut t_symbol,
    pub s_frommatrix_trunc: *mut t_symbol,
    pub s_front: *mut t_symbol,
    pub s_frozen: *mut t_symbol,
    pub s_frozen_box_attributes: *mut t_symbol,
    pub s_frozen_object_attributes: *mut t_symbol,
    pub s_frozen_pendingattrs: *mut t_symbol,
    pub s_frozen_text: *mut t_symbol,
    pub s_fsaa: *mut t_symbol,
    pub s_fullname: *mut t_symbol,
    pub s_fullscreen: *mut t_symbol,
    pub s_funall: *mut t_symbol,
    pub s_function: *mut t_symbol,
    pub s_g_inout_binlet: *mut t_symbol,
    pub s_g_max_newest: *mut t_symbol,
    pub s_g_max_newest_box: *mut t_symbol,
    pub s_gb: *mut t_symbol,
    pub s_genframe: *mut t_symbol,
    pub s_get: *mut t_symbol,
    pub s_get_jit_ob: *mut t_symbol,
    pub s_getargumentlabel: *mut t_symbol,
    pub s_getassoc: *mut t_symbol,
    pub s_getatoms: *mut t_symbol,
    pub s_getattrtext: *mut t_symbol,
    pub s_getbounds: *mut t_symbol,
    pub s_getboxlayer: *mut t_symbol,
    pub s_getcaptioninfo: *mut t_symbol,
    pub s_getcellcolor: *mut t_symbol,
    pub s_getcelldescription: *mut t_symbol,
    pub s_getcelleditable: *mut t_symbol,
    pub s_getcellfiletypes: *mut t_symbol,
    pub s_getcellicon: *mut t_symbol,
    pub s_getcellindentlevel: *mut t_symbol,
    pub s_getcellmenu: *mut t_symbol,
    pub s_getcelltext: *mut t_symbol,
    pub s_getcelltextlength: *mut t_symbol,
    pub s_getcellunits: *mut t_symbol,
    pub s_getcellunitsyms: *mut t_symbol,
    pub s_getcellvalue: *mut t_symbol,
    pub s_getcolumnnames: *mut t_symbol,
    pub s_getcomparisonlabel: *mut t_symbol,
    pub s_getcomponent: *mut t_symbol,
    pub s_getcontainedcomponent: *mut t_symbol,
    pub s_getdata: *mut t_symbol,
    pub s_getdefaultfocuscomponent: *mut t_symbol,
    pub s_getdefext: *mut t_symbol,
    pub s_getdeftype: *mut t_symbol,
    pub s_getdrawparams: *mut t_symbol,
    pub s_getdst: *mut t_symbol,
    pub s_getfieldlabel: *mut t_symbol,
    pub s_getfindtext: *mut t_symbol,
    pub s_getflags: *mut t_symbol,
    pub s_getfolderpath: *mut t_symbol,
    pub s_getfonttarget: *mut t_symbol,
    pub s_getfontview: *mut t_symbol,
    pub s_getformat: *mut t_symbol,
    pub s_gethintdelay: *mut t_symbol,
    pub s_getholder: *mut t_symbol,
    pub s_getimage: *mut t_symbol,
    pub s_getindex: *mut t_symbol,
    pub s_getinfo: *mut t_symbol,
    pub s_getinports: *mut t_symbol,
    pub s_getinput: *mut t_symbol,
    pub s_getinputlist: *mut t_symbol,
    pub s_getioproc: *mut t_symbol,
    pub s_getkeys: *mut t_symbol,
    pub s_getlastinsertid: *mut t_symbol,
    pub s_getlayoutinfo: *mut t_symbol,
    pub s_getlogical: *mut t_symbol,
    pub s_getmatrix: *mut t_symbol,
    pub s_getmethod: *mut t_symbol,
    pub s_getname: *mut t_symbol,
    pub s_getnamed: *mut t_symbol,
    pub s_getnamedbox: *mut t_symbol,
    pub s_getnextrecord: *mut t_symbol,
    pub s_getnthview: *mut t_symbol,
    pub s_getobject: *mut t_symbol,
    pub s_getoffset: *mut t_symbol,
    pub s_getoutports: *mut t_symbol,
    pub s_getoutput: *mut t_symbol,
    pub s_getoutputlist: *mut t_symbol,
    pub s_getprobevalue: *mut t_symbol,
    pub s_getptr: *mut t_symbol,
    pub s_getptr_forview: *mut t_symbol,
    pub s_getquantifierlabel: *mut t_symbol,
    pub s_getquery: *mut t_symbol,
    pub s_getquerydict: *mut t_symbol,
    pub s_getquerynames: *mut t_symbol,
    pub s_getquerytype: *mut t_symbol,
    pub s_getrect: *mut t_symbol,
    pub s_getrowcolor: *mut t_symbol,
    pub s_getrowobject: *mut t_symbol,
    pub s_getselected: *mut t_symbol,
    pub s_getsize: *mut t_symbol,
    pub s_getsort: *mut t_symbol,
    pub s_getspecial: *mut t_symbol,
    pub s_getsrc: *mut t_symbol,
    pub s_getstackbase: *mut t_symbol,
    pub s_getsyswind: *mut t_symbol,
    pub s_gettextptr: *mut t_symbol,
    pub s_gettitle: *mut t_symbol,
    pub s_gettype: *mut t_symbol,
    pub s_gettypelist: *mut t_symbol,
    pub s_getunitstext: *mut t_symbol,
    pub s_getunitsyms: *mut t_symbol,
    pub s_getvalueof: *mut t_symbol,
    pub s_getvisiblecanvasrect: *mut t_symbol,
    pub s_getwind: *mut t_symbol,
    pub s_getwindowrect: *mut t_symbol,
    pub s_gl_line_loop: *mut t_symbol,
    pub s_gl_line_strip: *mut t_symbol,
    pub s_gl_lines: *mut t_symbol,
    pub s_gl_points: *mut t_symbol,
    pub s_gl_polygon: *mut t_symbol,
    pub s_gl_quad_grid: *mut t_symbol,
    pub s_gl_quad_strip: *mut t_symbol,
    pub s_gl_quads: *mut t_symbol,
    pub s_gl_tri_fan: *mut t_symbol,
    pub s_gl_tri_grid: *mut t_symbol,
    pub s_gl_tri_strip: *mut t_symbol,
    pub s_gl_triangles: *mut t_symbol,
    pub s_global: *mut t_symbol,
    pub s_globalpatchername: *mut t_symbol,
    pub s_go: *mut t_symbol,
    pub s_grabfocus: *mut t_symbol,
    pub s_greaterthan: *mut t_symbol,
    pub s_green: *mut t_symbol,
    pub s_grid: *mut t_symbol,
    pub s_gridonopen: *mut t_symbol,
    pub s_gridsize: *mut t_symbol,
    pub s_gridsnap: *mut t_symbol,
    pub s_gridsnaponopen: *mut t_symbol,
    pub s_group: *mut t_symbol,
    pub s_grow: *mut t_symbol,
    pub s_growboth: *mut t_symbol,
    pub s_growy: *mut t_symbol,
    pub s_hasclose: *mut t_symbol,
    pub s_hasdatatype: *mut t_symbol,
    pub s_hasgrow: *mut t_symbol,
    pub s_hashorizscroll: *mut t_symbol,
    pub s_hashtab_entry_free: *mut t_symbol,
    pub s_hashtab_entry_new: *mut t_symbol,
    pub s_hashtab_free: *mut t_symbol,
    pub s_hasmenu: *mut t_symbol,
    pub s_hasminimize: *mut t_symbol,
    pub s_hastitlebar: *mut t_symbol,
    pub s_hasvertscroll: *mut t_symbol,
    pub s_haszoom: *mut t_symbol,
    pub s_head: *mut t_symbol,
    pub s_height: *mut t_symbol,
    pub s_help: *mut t_symbol,
    pub s_helpfile: *mut t_symbol,
    pub s_helpmenu: *mut t_symbol,
    pub s_helpname: *mut t_symbol,
    pub s_hidden: *mut t_symbol,
    pub s_hiddenconnect: *mut t_symbol,
    pub s_hide: *mut t_symbol,
    pub s_hideablechanged: *mut t_symbol,
    pub s_hidecaption: *mut t_symbol,
    pub s_hidewindow: *mut t_symbol,
    pub s_hint: *mut t_symbol,
    pub s_hint_disabled: *mut t_symbol,
    pub s_hinttrack: *mut t_symbol,
    pub s_history: *mut t_symbol,
    pub s_history_entry: *mut t_symbol,
    pub s_hittest: *mut t_symbol,
    pub s_holderoptions: *mut t_symbol,
    pub s_hz: *mut t_symbol,
    pub s_icon: *mut t_symbol,
    pub s_id: *mut t_symbol,
    pub s_identifier: *mut t_symbol,
    pub s_ignoreclick: *mut t_symbol,
    pub s_image: *mut t_symbol,
    pub s_imagefile: *mut t_symbol,
    pub s_imbed: *mut t_symbol,
    pub s_imprint: *mut t_symbol,
    pub s_includebg: *mut t_symbol,
    pub s_index: *mut t_symbol,
    pub s_info: *mut t_symbol,
    pub s_init: *mut t_symbol,
    pub s_inlet: *mut t_symbol,
    pub s_inletinfo: *mut t_symbol,
    pub s_inletnum: *mut t_symbol,
    pub s_inletoutlet: *mut t_symbol,
    pub s_inletscaleratio: *mut t_symbol,
    pub s_inputcount: *mut t_symbol,
    pub s_insert: *mut t_symbol,
    pub s_insertboxtext: *mut t_symbol,
    pub s_insertindex: *mut t_symbol,
    pub s_insertpatcher: *mut t_symbol,
    pub s_insertsegment: *mut t_symbol,
    pub s_insetchanged: *mut t_symbol,
    pub s_insp: *mut t_symbol,
    pub s_inspectee: *mut t_symbol,
    pub s_inspectees: *mut t_symbol,
    pub s_inspector: *mut t_symbol,
    pub s_inspector_clueclass: *mut t_symbol,
    pub s_inspector_color: *mut t_symbol,
    pub s_inspector_customize: *mut t_symbol,
    pub s_inspector_editor: *mut t_symbol,
    pub s_inspector_fontattr: *mut t_symbol,
    pub s_inspector_rect: *mut t_symbol,
    pub s_inspector_tab: *mut t_symbol,
    pub s_inspector_tabheight: *mut t_symbol,
    pub s_inspector_title: *mut t_symbol,
    pub s_inspector_toolbarid: *mut t_symbol,
    pub s_inspectorchange: *mut t_symbol,
    pub s_instance_attributes: *mut t_symbol,
    pub s_instanceattr: *mut t_symbol,
    pub s_int: *mut t_symbol,
    pub s_int16: *mut t_symbol,
    pub s_int24: *mut t_symbol,
    pub s_int32: *mut t_symbol,
    pub s_int8: *mut t_symbol,
    pub s_interface: *mut t_symbol,
    pub s_interp: *mut t_symbol,
    pub s_interp_arg: *mut t_symbol,
    pub s_interval: *mut t_symbol,
    pub s_invalidate: *mut t_symbol,
    pub s_invalidateallboxlayers: *mut t_symbol,
    pub s_invalidateboxlayer: *mut t_symbol,
    pub s_invalidatetoolbar: *mut t_symbol,
    pub s_invis: *mut t_symbol,
    pub s_invisaction: *mut t_symbol,
    pub s_invisible: *mut t_symbol,
    pub s_invlabel: *mut t_symbol,
    pub s_invmsg: *mut t_symbol,
    pub s_ioname: *mut t_symbol,
    pub s_ioproc: *mut t_symbol,
    pub s_is: *mut t_symbol,
    pub s_iscolumnvisible: *mut t_symbol,
    pub s_isfile: *mut t_symbol,
    pub s_isfirstin: *mut t_symbol,
    pub s_isfolder: *mut t_symbol,
    pub s_iso_8859_1: *mut t_symbol,
    pub s_isproto: *mut t_symbol,
    pub s_isselectedqueryremovable: *mut t_symbol,
    pub s_isselectionvalid: *mut t_symbol,
    pub s_issystemquery: *mut t_symbol,
    pub s_italic: *mut t_symbol,
    pub s_items: *mut t_symbol,
    pub s_iterate: *mut t_symbol,
    pub s_javascript: *mut t_symbol,
    pub s_jbogus: *mut t_symbol,
    pub s_jbox: *mut t_symbol,
    pub s_jbox_bytecount: *mut t_symbol,
    pub s_jbox_instances: *mut t_symbol,
    pub s_jboxattr: *mut t_symbol,
    pub s_jdrag: *mut t_symbol,
    pub s_jed: *mut t_symbol,
    pub s_jgraphics: *mut t_symbol,
    pub s_jit_attr_offset: *mut t_symbol,
    pub s_jit_attr_offset_array: *mut t_symbol,
    pub s_jit_attribute: *mut t_symbol,
    pub s_jit_gl_texture: *mut t_symbol,
    pub s_jit_linklist: *mut t_symbol,
    pub s_jit_matrix: *mut t_symbol,
    pub s_jit_mop: *mut t_symbol,
    pub s_jit_namespace: *mut t_symbol,
    pub s_jpatcher: *mut t_symbol,
    pub s_jpatcher_bytecount: *mut t_symbol,
    pub s_jpatcher_instances: *mut t_symbol,
    pub s_jpatchercontroller: *mut t_symbol,
    pub s_jpatcherholder: *mut t_symbol,
    pub s_jpatchline: *mut t_symbol,
    pub s_jpg: *mut t_symbol,
    pub s_jsave: *mut t_symbol,
    pub s_JSON: *mut t_symbol,
    pub s_jsonreader: *mut t_symbol,
    pub s_jsonwriter: *mut t_symbol,
    pub s_juibogus: *mut t_symbol,
    pub s_juiobject: *mut t_symbol,
    pub s_jundo_command: *mut t_symbol,
    pub s_jundo_commandgroup: *mut t_symbol,
    pub s_jweb_history: *mut t_symbol,
    pub s_jwind: *mut t_symbol,
    pub s_kb: *mut t_symbol,
    pub s_key: *mut t_symbol,
    pub s_key_backslash: *mut t_symbol,
    pub s_key_backspace: *mut t_symbol,
    pub s_key_clear: *mut t_symbol,
    pub s_key_delete: *mut t_symbol,
    pub s_key_downarrow: *mut t_symbol,
    pub s_key_end: *mut t_symbol,
    pub s_key_enter: *mut t_symbol,
    pub s_key_esc: *mut t_symbol,
    pub s_key_grave: *mut t_symbol,
    pub s_key_helpkey: *mut t_symbol,
    pub s_key_home: *mut t_symbol,
    pub s_key_insert: *mut t_symbol,
    pub s_key_leftarrow: *mut t_symbol,
    pub s_key_optionspace: *mut t_symbol,
    pub s_key_pagedown: *mut t_symbol,
    pub s_key_pageup: *mut t_symbol,
    pub s_key_return: *mut t_symbol,
    pub s_key_rightarrow: *mut t_symbol,
    pub s_key_spacebar: *mut t_symbol,
    pub s_key_tab: *mut t_symbol,
    pub s_key_tilde: *mut t_symbol,
    pub s_key_uparrow: *mut t_symbol,
    pub s_key_vertbar: *mut t_symbol,
    pub s_keyaction: *mut t_symbol,
    pub s_keyfilter: *mut t_symbol,
    pub s_keyfocuschanged: *mut t_symbol,
    pub s_keymessage: *mut t_symbol,
    pub s_kind: *mut t_symbol,
    pub s_kindenum: *mut t_symbol,
    pub s_kindis: *mut t_symbol,
    pub s_kindmenu: *mut t_symbol,
    pub s_label: *mut t_symbol,
    pub s_labels: *mut t_symbol,
    pub s_last: *mut t_symbol,
    pub s_last_access: *mut t_symbol,
    pub s_lastmessage: *mut t_symbol,
    pub s_lastmodified: *mut t_symbol,
    pub s_lastobject: *mut t_symbol,
    pub s_latency: *mut t_symbol,
    pub s_lessthan: *mut t_symbol,
    pub s_linear: *mut t_symbol,
    pub s_linechanged: *mut t_symbol,
    pub s_linecontextmenu: *mut t_symbol,
    pub s_linecount: *mut t_symbol,
    pub s_linenotify: *mut t_symbol,
    pub s_lines: *mut t_symbol,
    pub s_lineup: *mut t_symbol,
    pub s_list: *mut t_symbol,
    pub s_list_rowcomponent: *mut t_symbol,
    pub s_list_setvalue: *mut t_symbol,
    pub s_listboxprototype: *mut t_symbol,
    pub s_listfiles: *mut t_symbol,
    pub s_listwindow: *mut t_symbol,
    pub s_loadbang: *mut t_symbol,
    pub s_local: *mut t_symbol,
    pub s_lock: *mut t_symbol,
    pub s_locked: *mut t_symbol,
    pub s_locked_iocolor: *mut t_symbol,
    pub s_lockeddragscroll: *mut t_symbol,
    pub s_lockedpatchercontextmenu: *mut t_symbol,
    pub s_log: *mut t_symbol,
    pub s_long: *mut t_symbol,
    pub s_lookup: *mut t_symbol,
    pub s_lookupcommand: *mut t_symbol,
    pub s_loop: *mut t_symbol,
    pub s_macroman: *mut t_symbol,
    pub s_mainsearchentry: *mut t_symbol,
    pub s_makearray: *mut t_symbol,
    pub s_makeview: *mut t_symbol,
    pub s_margin: *mut t_symbol,
    pub s_matchdragrole: *mut t_symbol,
    pub s_matchinspectees: *mut t_symbol,
    pub s_matrix: *mut t_symbol,
    pub s_matrix_calc: *mut t_symbol,
    pub s_matrixctrl: *mut t_symbol,
    pub s_matrixname: *mut t_symbol,
    pub s_max: *mut t_symbol,
    pub s_max_jit_classex: *mut t_symbol,
    pub s_maxapplication: *mut t_symbol,
    pub s_maxclass: *mut t_symbol,
    pub s_maxdebug: *mut t_symbol,
    pub s_maxdim: *mut t_symbol,
    pub s_maximize: *mut t_symbol,
    pub s_maxmessage: *mut t_symbol,
    pub s_maxplanecount: *mut t_symbol,
    pub s_maxwindow: *mut t_symbol,
    pub s_mb: *mut t_symbol,
    pub s_measuretext: *mut t_symbol,
    pub s_menu: *mut t_symbol,
    pub s_menubar: *mut t_symbol,
    pub s_menus: *mut t_symbol,
    pub s_menus_runtime: *mut t_symbol,
    pub s_message: *mut t_symbol,
    pub s_messages: *mut t_symbol,
    pub s_metadata: *mut t_symbol,
    pub s_metadatalist: *mut t_symbol,
    pub s_metadatawindow: *mut t_symbol,
    pub s_methodall: *mut t_symbol,
    pub s_methodindex: *mut t_symbol,
    pub s_methods: *mut t_symbol,
    pub s_midpoints: *mut t_symbol,
    pub s_min: *mut t_symbol,
    pub s_mindim: *mut t_symbol,
    pub s_minimize: *mut t_symbol,
    pub s_minplanecount: *mut t_symbol,
    pub s_minus: *mut t_symbol,
    pub s_mode: *mut t_symbol,
    pub s_modified: *mut t_symbol,
    pub s_monitor: *mut t_symbol,
    pub s_months: *mut t_symbol,
    pub s_mousedoubleclick: *mut t_symbol,
    pub s_mousedown: *mut t_symbol,
    pub s_mousedownonchar: *mut t_symbol,
    pub s_mousedrag: *mut t_symbol,
    pub s_mousedragdelta: *mut t_symbol,
    pub s_mouseenter: *mut t_symbol,
    pub s_mouseleave: *mut t_symbol,
    pub s_mousemove: *mut t_symbol,
    pub s_mousescale: *mut t_symbol,
    pub s_mouseup: *mut t_symbol,
    pub s_mousewheel: *mut t_symbol,
    pub s_move: *mut t_symbol,
    pub s_moveboxes: *mut t_symbol,
    pub s_moved: *mut t_symbol,
    pub s_moveifoffdisplay: *mut t_symbol,
    pub s_movelines: *mut t_symbol,
    pub s_movesegment: *mut t_symbol,
    pub s_moviedim: *mut t_symbol,
    pub s_moviefile: *mut t_symbol,
    pub s_ms: *mut t_symbol,
    pub s_ms_ansi: *mut t_symbol,
    pub s_mulaw: *mut t_symbol,
    pub s_mult: *mut t_symbol,
    pub s_multiboxcontextmenu: *mut t_symbol,
    pub s_multilinecontextmenu: *mut t_symbol,
    pub s_mute: *mut t_symbol,
    pub s_name: *mut t_symbol,
    pub s_name_changed: *mut t_symbol,
    pub s_name_rowcomponent: *mut t_symbol,
    pub s_name_setvalue: *mut t_symbol,
    pub s_name_textcolor: *mut t_symbol,
    pub s_name_textstyle: *mut t_symbol,
    pub s_name_width: *mut t_symbol,
    pub s_nameinspector: *mut t_symbol,
    pub s_nativewindow: *mut t_symbol,
    pub s_navkey: *mut t_symbol,
    pub s_new: *mut t_symbol,
    pub s_newcopy: *mut t_symbol,
    pub s_newdefault: *mut t_symbol,
    pub s_newex: *mut t_symbol,
    pub s_newfilebrowser: *mut t_symbol,
    pub s_newfolder: *mut t_symbol,
    pub s_newlines: *mut t_symbol,
    pub s_newobj: *mut t_symbol,
    pub s_newobject: *mut t_symbol,
    pub s_newobjects: *mut t_symbol,
    pub s_newpatcherview: *mut t_symbol,
    pub s_newpatchline: *mut t_symbol,
    pub s_newquery: *mut t_symbol,
    pub s_next: *mut t_symbol,
    pub s_nextline: *mut t_symbol,
    pub s_nextobject: *mut t_symbol,
    pub s_nextrecord: *mut t_symbol,
    pub s_nextview: *mut t_symbol,
    pub s_nfilters: *mut t_symbol,
    pub s_No: *mut t_symbol,
    pub s_noactivate: *mut t_symbol,
    pub s_nobox: *mut t_symbol,
    pub s_noclipse: *mut t_symbol,
    pub s_noclose: *mut t_symbol,
    pub s_noedit: *mut t_symbol,
    pub s_noeval: *mut t_symbol,
    pub s_nofloat: *mut t_symbol,
    pub s_nofontpanel: *mut t_symbol,
    pub s_nogrow: *mut t_symbol,
    pub s_nomad: *mut t_symbol,
    pub s_nomenu: *mut t_symbol,
    pub s_nominimize: *mut t_symbol,
    pub s_none: *mut t_symbol,
    pub s_nonomad: *mut t_symbol,
    pub s_normalheight: *mut t_symbol,
    pub s_normalwidth: *mut t_symbol,
    pub s_noscroll: *mut t_symbol,
    pub s_not: *mut t_symbol,
    pub s_notevalues: *mut t_symbol,
    pub s_nothing: *mut t_symbol,
    pub s_notify: *mut t_symbol,
    pub s_notifyall: *mut t_symbol,
    pub s_notifyall_delete: *mut t_symbol,
    pub s_notifyall_new: *mut t_symbol,
    pub s_notitle: *mut t_symbol,
    pub s_nozoom: *mut t_symbol,
    pub s_nth: *mut t_symbol,
    pub s_number: *mut t_symbol,
    pub s_number_paint: *mut t_symbol,
    pub s_number_rowcomponent: *mut t_symbol,
    pub s_number_setvalue: *mut t_symbol,
    pub s_numfields: *mut t_symbol,
    pub s_nummidpoints: *mut t_symbol,
    pub s_numrecords: *mut t_symbol,
    pub s_numresults: *mut t_symbol,
    pub s_numrowschanged: *mut t_symbol,
    pub s_numtabs: *mut t_symbol,
    pub s_numviews: *mut t_symbol,
    pub s_numwindowviews: *mut t_symbol,
    pub s_ob_sym: *mut t_symbol,
    pub s_obex_container: *mut t_symbol,
    pub s_objargs: *mut t_symbol,
    pub s_object: *mut t_symbol,
    pub s_object_id: *mut t_symbol,
    pub s_objectcount: *mut t_symbol,
    pub s_objectfilename: *mut t_symbol,
    pub s_objectlist: *mut t_symbol,
    pub s_objectpalette: *mut t_symbol,
    pub s_objectview_doubleclick: *mut t_symbol,
    pub s_objectview_selected: *mut t_symbol,
    pub s_objptr2index: *mut t_symbol,
    pub s_objtype: *mut t_symbol,
    pub s_obtrusiveerror: *mut t_symbol,
    pub s_offset: *mut t_symbol,
    pub s_offset_rowcomponent: *mut t_symbol,
    pub s_offset_setvalue: *mut t_symbol,
    pub s_offsetfrom: *mut t_symbol,
    pub s_offsetmidpoints: *mut t_symbol,
    pub s_okclose: *mut t_symbol,
    pub s_oksize: *mut t_symbol,
    pub s_one: *mut t_symbol,
    pub s_onoff: *mut t_symbol,
    pub s_opaque: *mut t_symbol,
    pub s_open: *mut t_symbol,
    pub s_openassoc: *mut t_symbol,
    pub s_openfile: *mut t_symbol,
    pub s_openinpresentation: *mut t_symbol,
    pub s_openquery: *mut t_symbol,
    pub s_openrect: *mut t_symbol,
    pub s_openweb: *mut t_symbol,
    pub s_optional: *mut t_symbol,
    pub s_optionsdirty: *mut t_symbol,
    pub s_order: *mut t_symbol,
    pub s_order_by: *mut t_symbol,
    pub s_orderbefore: *mut t_symbol,
    pub s_orderfront: *mut t_symbol,
    pub s_orientation: *mut t_symbol,
    pub s_outlet: *mut t_symbol,
    pub s_outletnum: *mut t_symbol,
    pub s_outline: *mut t_symbol,
    pub s_outmode: *mut t_symbol,
    pub s_output: *mut t_symbol,
    pub s_outputcount: *mut t_symbol,
    pub s_outputmatrix: *mut t_symbol,
    pub s_outputmode: *mut t_symbol,
    pub s_overdrive: *mut t_symbol,
    pub s_owner: *mut t_symbol,
    pub s_ownervis: *mut t_symbol,
    pub s_p: *mut t_symbol,
    pub s_paint: *mut t_symbol,
    pub s_paintsbackground: *mut t_symbol,
    pub s_palette_action: *mut t_symbol,
    pub s_palette_caption: *mut t_symbol,
    pub s_palette_category: *mut t_symbol,
    pub s_palette_numerical_order: *mut t_symbol,
    pub s_palette_order: *mut t_symbol,
    pub s_palette_protocount: *mut t_symbol,
    pub s_palette_tab_action: *mut t_symbol,
    pub s_parameter_enable: *mut t_symbol,
    pub s_parent: *mut t_symbol,
    pub s_parentclass: *mut t_symbol,
    pub s_parentpatcher: *mut t_symbol,
    pub s_parse: *mut t_symbol,
    pub s_parsefile: *mut t_symbol,
    pub s_paste: *mut t_symbol,
    pub s_pastefileintoobject: *mut t_symbol,
    pub s_pastefrom: *mut t_symbol,
    pub s_pastereplace: *mut t_symbol,
    pub s_patcher: *mut t_symbol,
    pub s_patchercomponent: *mut t_symbol,
    pub s_patchercontextmenu: *mut t_symbol,
    pub s_patchereditor: *mut t_symbol,
    pub s_patchername: *mut t_symbol,
    pub s_patchernotify: *mut t_symbol,
    pub s_patcherview: *mut t_symbol,
    pub s_patcherview_instances: *mut t_symbol,
    pub s_patcherview_invis: *mut t_symbol,
    pub s_patcherview_notify_locked: *mut t_symbol,
    pub s_patcherview_notify_presentation: *mut t_symbol,
    pub s_patcherview_vis: *mut t_symbol,
    pub s_patching_position: *mut t_symbol,
    pub s_patching_rect: *mut t_symbol,
    pub s_patching_size: *mut t_symbol,
    pub s_patchline: *mut t_symbol,
    pub s_path: *mut t_symbol,
    pub s_pattrstorage: *mut t_symbol,
    pub s_pclose: *mut t_symbol,
    pub s_pending: *mut t_symbol,
    pub s_pic: *mut t_symbol,
    pub s_pictctrl: *mut t_symbol,
    pub s_plane: *mut t_symbol,
    pub s_planecount: *mut t_symbol,
    pub s_planelink: *mut t_symbol,
    pub s_plugconfig: *mut t_symbol,
    pub s_plus: *mut t_symbol,
    pub s_png: *mut t_symbol,
    pub s_pointer: *mut t_symbol,
    pub s_popupmenu: *mut t_symbol,
    pub s_portenable: *mut t_symbol,
    pub s_position: *mut t_symbol,
    pub s_postname: *mut t_symbol,
    pub s_pound_B: *mut t_symbol,
    pub s_pound_D: *mut t_symbol,
    pub s_pound_N: *mut t_symbol,
    pub s_pound_P: *mut t_symbol,
    pub s_pound_X: *mut t_symbol,
    pub s_preferences: *mut t_symbol,
    pub s_preload: *mut t_symbol,
    pub s_presentation: *mut t_symbol,
    pub s_presentation_linecount: *mut t_symbol,
    pub s_presentation_position: *mut t_symbol,
    pub s_presentation_rect: *mut t_symbol,
    pub s_presentation_size: *mut t_symbol,
    pub s_preset: *mut t_symbol,
    pub s_preset_data: *mut t_symbol,
    pub s_preview: *mut t_symbol,
    pub s_preview_image: *mut t_symbol,
    pub s_previewheight: *mut t_symbol,
    pub s_previewimagedata: *mut t_symbol,
    pub s_prevobject: *mut t_symbol,
    pub s_print: *mut t_symbol,
    pub s_priority: *mut t_symbol,
    pub s_prototype: *mut t_symbol,
    pub s_prototype_binbuf: *mut t_symbol,
    pub s_prototypename: *mut t_symbol,
    pub s_psave: *mut t_symbol,
    pub s_pulsate: *mut t_symbol,
    pub s_pupdate: *mut t_symbol,
    pub s_quantifier: *mut t_symbol,
    pub s_quantifier_exists: *mut t_symbol,
    pub s_quantifiers: *mut t_symbol,
    pub s_quantize: *mut t_symbol,
    pub s_queries: *mut t_symbol,
    pub s_query: *mut t_symbol,
    pub s_query_selected: *mut t_symbol,
    pub s_querycontroller: *mut t_symbol,
    pub s_queryid: *mut t_symbol,
    pub s_querylist: *mut t_symbol,
    pub s_queryname: *mut t_symbol,
    pub s_querypreview: *mut t_symbol,
    pub s_querysearch: *mut t_symbol,
    pub s_quickmap: *mut t_symbol,
    pub s_quit: *mut t_symbol,
    pub s_quitting: *mut t_symbol,
    pub s_radial: *mut t_symbol,
    pub s_range: *mut t_symbol,
    pub s_rawfind: *mut t_symbol,
    pub s_rawwindsave: *mut t_symbol,
    pub s_rawwindsaveas: *mut t_symbol,
    pub s_read: *mut t_symbol,
    pub s_readonly: *mut t_symbol,
    pub s_realclass: *mut t_symbol,
    pub s_rebuilding: *mut t_symbol,
    pub s_recordbyindex: *mut t_symbol,
    pub s_recreate_invis: *mut t_symbol,
    pub s_recreate_vis: *mut t_symbol,
    pub s_rect: *mut t_symbol,
    pub s_rectangle: *mut t_symbol,
    pub s_rectangular: *mut t_symbol,
    pub s_red: *mut t_symbol,
    pub s_redostack: *mut t_symbol,
    pub s_redraw: *mut t_symbol,
    pub s_redrawcontents: *mut t_symbol,
    pub s_reference: *mut t_symbol,
    pub s_reffile: *mut t_symbol,
    pub s_refinequery: *mut t_symbol,
    pub s_refresh: *mut t_symbol,
    pub s_register: *mut t_symbol,
    pub s_remove: *mut t_symbol,
    pub s_removeattr: *mut t_symbol,
    pub s_removeattr_enable: *mut t_symbol,
    pub s_removeboxlayer: *mut t_symbol,
    pub s_removeclient: *mut t_symbol,
    pub s_removefrompresentation: *mut t_symbol,
    pub s_removelines: *mut t_symbol,
    pub s_removeobjects: *mut t_symbol,
    pub s_removesegment: *mut t_symbol,
    pub s_removeslot: *mut t_symbol,
    pub s_removewiretap: *mut t_symbol,
    pub s_rename: *mut t_symbol,
    pub s_renumberslot: *mut t_symbol,
    pub s_replace: *mut t_symbol,
    pub s_replaced_args: *mut t_symbol,
    pub s_reschedule: *mut t_symbol,
    pub s_reset: *mut t_symbol,
    pub s_resize: *mut t_symbol,
    pub s_resizeaction: *mut t_symbol,
    pub s_resized: *mut t_symbol,
    pub s_resizelimits: *mut t_symbol,
    pub s_resizenotify: *mut t_symbol,
    pub s_resolve_name: *mut t_symbol,
    pub s_resolve_raw: *mut t_symbol,
    pub s_resort: *mut t_symbol,
    pub s_resource: *mut t_symbol,
    pub s_respondtoclick: *mut t_symbol,
    pub s_restore: *mut t_symbol,
    pub s_restrict_dim: *mut t_symbol,
    pub s_restrict_planecount: *mut t_symbol,
    pub s_restrict_type: *mut t_symbol,
    pub s_result: *mut t_symbol,
    pub s_retain: *mut t_symbol,
    pub s_revealinfinder: *mut t_symbol,
    pub s_reverse: *mut t_symbol,
    pub s_rgb: *mut t_symbol,
    pub s_rgba: *mut t_symbol,
    pub s_rolename: *mut t_symbol,
    pub s_rotate: *mut t_symbol,
    pub s_rounded: *mut t_symbol,
    pub s_rowcolorchanged: *mut t_symbol,
    pub s_rowcomponent: *mut t_symbol,
    pub s_rowenabled: *mut t_symbol,
    pub s_rowhead: *mut t_symbol,
    pub s_rowheightchanged: *mut t_symbol,
    pub s_safebang: *mut t_symbol,
    pub s_safeclear: *mut t_symbol,
    pub s_samples: *mut t_symbol,
    pub s_save: *mut t_symbol,
    pub s_save2: *mut t_symbol,
    pub s_saveas: *mut t_symbol,
    pub s_saveboxprototype: *mut t_symbol,
    pub s_saved_object_attributes: *mut t_symbol,
    pub s_savefilepath: *mut t_symbol,
    pub s_savelasttab: *mut t_symbol,
    pub s_savequery: *mut t_symbol,
    pub s_saveto: *mut t_symbol,
    pub s_savewindow: *mut t_symbol,
    pub s_savingdefault: *mut t_symbol,
    pub s_scale: *mut t_symbol,
    pub s_script: *mut t_symbol,
    pub s_scrollanimatetime: *mut t_symbol,
    pub s_scrolloffset: *mut t_symbol,
    pub s_scrollorigin: *mut t_symbol,
    pub s_scrollposition: *mut t_symbol,
    pub s_scrollselectedobjectsintoview: *mut t_symbol,
    pub s_scrollto: *mut t_symbol,
    pub s_scrollviewtoshow: *mut t_symbol,
    pub s_search: *mut t_symbol,
    pub s_searchterm: *mut t_symbol,
    pub s_searchtext: *mut t_symbol,
    pub s_select: *mut t_symbol,
    pub s_selectallonedit: *mut t_symbol,
    pub s_selectbox: *mut t_symbol,
    pub s_selectcategory: *mut t_symbol,
    pub s_selectcell: *mut t_symbol,
    pub s_selectdropped: *mut t_symbol,
    pub s_selected: *mut t_symbol,
    pub s_selectedboxes: *mut t_symbol,
    pub s_selectedlines: *mut t_symbol,
    pub s_selectedrow: *mut t_symbol,
    pub s_selectedrow_contextual: *mut t_symbol,
    pub s_selfsave: *mut t_symbol,
    pub s_selmode: *mut t_symbol,
    pub s_send: *mut t_symbol,
    pub s_sendbackward: *mut t_symbol,
    pub s_sendbox: *mut t_symbol,
    pub s_sendboxmsg: *mut t_symbol,
    pub s_senderclasssym: *mut t_symbol,
    pub s_sendtoback: *mut t_symbol,
    pub s_session_usage_count: *mut t_symbol,
    pub s_set: *mut t_symbol,
    pub s_setall: *mut t_symbol,
    pub s_setassoc: *mut t_symbol,
    pub s_setatoms: *mut t_symbol,
    pub s_setattr: *mut t_symbol,
    pub s_setboxrect: *mut t_symbol,
    pub s_setcellunits: *mut t_symbol,
    pub s_setcellvalue: *mut t_symbol,
    pub s_setcontainedcomponent: *mut t_symbol,
    pub s_setdata: *mut t_symbol,
    pub s_setdefaults: *mut t_symbol,
    pub s_setdirty: *mut t_symbol,
    pub s_seteditboxcaretposition: *mut t_symbol,
    pub s_seteditboxhighlightedregion: *mut t_symbol,
    pub s_seteditview: *mut t_symbol,
    pub s_setfilter: *mut t_symbol,
    pub s_setflags: *mut t_symbol,
    pub s_setfont: *mut t_symbol,
    pub s_setglobalcoords: *mut t_symbol,
    pub s_setinfo: *mut t_symbol,
    pub s_setinfo_ex: *mut t_symbol,
    pub s_setmethod: *mut t_symbol,
    pub s_setmidpoint: *mut t_symbol,
    pub s_setpatcherattr: *mut t_symbol,
    pub s_setptr: *mut t_symbol,
    pub s_setrect: *mut t_symbol,
    pub s_setspecialrow: *mut t_symbol,
    pub s_settext: *mut t_symbol,
    pub s_setunitsym: *mut t_symbol,
    pub s_setvalue: *mut t_symbol,
    pub s_setvalueof: *mut t_symbol,
    pub s_setvaluetext: *mut t_symbol,
    pub s_setwindowrect: *mut t_symbol,
    pub s_setwindowsize: *mut t_symbol,
    pub s_setzorder: *mut t_symbol,
    pub s_shortcut: *mut t_symbol,
    pub s_show: *mut t_symbol,
    pub s_showcaption: *mut t_symbol,
    pub s_showdoc: *mut t_symbol,
    pub s_showfind: *mut t_symbol,
    pub s_showpreview: *mut t_symbol,
    pub s_showrecent: *mut t_symbol,
    pub s_showrow: *mut t_symbol,
    pub s_showsaveable: *mut t_symbol,
    pub s_showtarget: *mut t_symbol,
    pub s_shuffle: *mut t_symbol,
    pub s_signal: *mut t_symbol,
    pub s_sinceyesterday: *mut t_symbol,
    pub s_singleinspector: *mut t_symbol,
    pub s_size: *mut t_symbol,
    pub s_sizeboxes: *mut t_symbol,
    pub s_slot_definition: *mut t_symbol,
    pub s_slot_modified: *mut t_symbol,
    pub s_slots: *mut t_symbol,
    pub s_smpte: *mut t_symbol,
    pub s_snaptogrid: *mut t_symbol,
    pub s_sort: *mut t_symbol,
    pub s_sortablechanged: *mut t_symbol,
    pub s_sortcolumn: *mut t_symbol,
    pub s_sortdata: *mut t_symbol,
    pub s_sorted: *mut t_symbol,
    pub s_sorted_by_column: *mut t_symbol,
    pub s_source: *mut t_symbol,
    pub s_spacing: *mut t_symbol,
    pub s_special: *mut t_symbol,
    pub s_specialclick: *mut t_symbol,
    pub s_specialcount: *mut t_symbol,
    pub s_sql: *mut t_symbol,
    pub s_sql2: *mut t_symbol,
    pub s_sqlite: *mut t_symbol,
    pub s_sqlite_result: *mut t_symbol,
    pub s_sqlstring: *mut t_symbol,
    pub s_sr: *mut t_symbol,
    pub s_start: *mut t_symbol,
    pub s_startdrag: *mut t_symbol,
    pub s_startmoveboxes: *mut t_symbol,
    pub s_startpoint: *mut t_symbol,
    pub s_startprobe: *mut t_symbol,
    pub s_starttransaction: *mut t_symbol,
    pub s_startwindow: *mut t_symbol,
    pub s_state: *mut t_symbol,
    pub s_sticky_attr: *mut t_symbol,
    pub s_sticky_method: *mut t_symbol,
    pub s_stop: *mut t_symbol,
    pub s_store: *mut t_symbol,
    pub s_straighten: *mut t_symbol,
    pub s_straightend: *mut t_symbol,
    pub s_straightstart: *mut t_symbol,
    pub s_straightthresh: *mut t_symbol,
    pub s_string: *mut t_symbol,
    pub s_style: *mut t_symbol,
    pub s_sub: *mut t_symbol,
    pub s_subpatcher: *mut t_symbol,
    pub s_surfacebuffer: *mut t_symbol,
    pub s_svg: *mut t_symbol,
    pub s_swap: *mut t_symbol,
    pub s_swatches: *mut t_symbol,
    pub s_symbol: *mut t_symbol,
    pub s_sysqelem: *mut t_symbol,
    pub s_t: *mut t_symbol,
    pub s_tab_bgcolor: *mut t_symbol,
    pub s_table: *mut t_symbol,
    pub s_tabledata: *mut t_symbol,
    pub s_tag: *mut t_symbol,
    pub s_tags: *mut t_symbol,
    pub s_tapcontroller_show: *mut t_symbol,
    pub s_tapwindow: *mut t_symbol,
    pub s_target: *mut t_symbol,
    pub s_template: *mut t_symbol,
    pub s_tempo: *mut t_symbol,
    pub s_text: *mut t_symbol,
    pub s_text_commaseparated: *mut t_symbol,
    pub s_text_large: *mut t_symbol,
    pub s_text_onesymbol: *mut t_symbol,
    pub s_textchanged: *mut t_symbol,
    pub s_textcolor: *mut t_symbol,
    pub s_textfield: *mut t_symbol,
    pub s_textfile: *mut t_symbol,
    pub s_textmargins: *mut t_symbol,
    pub s_textstyle: *mut t_symbol,
    pub s_thismonth: *mut t_symbol,
    pub s_thisweek: *mut t_symbol,
    pub s_threadpriority: *mut t_symbol,
    pub s_threadsafe: *mut t_symbol,
    pub s_three: *mut t_symbol,
    pub s_ticks: *mut t_symbol,
    pub s_time: *mut t_symbol,
    pub s_timeobj: *mut t_symbol,
    pub s_timesigchanged: *mut t_symbol,
    pub s_timeupdate: *mut t_symbol,
    pub s_tinge: *mut t_symbol,
    pub s_title: *mut t_symbol,
    pub s_titleassoc: *mut t_symbol,
    pub s_tobinbuf: *mut t_symbol,
    pub s_toc: *mut t_symbol,
    pub s_today: *mut t_symbol,
    pub s_todictionary: *mut t_symbol,
    pub s_togworld: *mut t_symbol,
    pub s_tool: *mut t_symbol,
    pub s_tool_paint: *mut t_symbol,
    pub s_tool_rowcomponent: *mut t_symbol,
    pub s_tool_setvalue: *mut t_symbol,
    pub s_tool_sort: *mut t_symbol,
    pub s_toolbarheight: *mut t_symbol,
    pub s_toolbarid: *mut t_symbol,
    pub s_toolbars: *mut t_symbol,
    pub s_toolbarvisible: *mut t_symbol,
    pub s_top_inset: *mut t_symbol,
    pub s_topmost: *mut t_symbol,
    pub s_toppatcher: *mut t_symbol,
    pub s_topredoname: *mut t_symbol,
    pub s_topundoname: *mut t_symbol,
    pub s_trackaction: *mut t_symbol,
    pub s_transparent: *mut t_symbol,
    pub s_transport: *mut t_symbol,
    pub s_traverse: *mut t_symbol,
    pub s_triangle: *mut t_symbol,
    pub s_tutorial: *mut t_symbol,
    pub s_two: *mut t_symbol,
    pub s_twobytecomment: *mut t_symbol,
    pub s_type: *mut t_symbol,
    pub s_typed_usage_count: *mut t_symbol,
    pub s_typedwrapper: *mut t_symbol,
    pub s_typelink: *mut t_symbol,
    pub s_types: *mut t_symbol,
    pub s_underline: *mut t_symbol,
    pub s_understands: *mut t_symbol,
    pub s_undo: *mut t_symbol,
    pub s_undostack: *mut t_symbol,
    pub s_unimbed: *mut t_symbol,
    pub s_uninitialized: *mut t_symbol,
    pub s_unique: *mut t_symbol,
    pub s_unit: *mut t_symbol,
    pub s_units: *mut t_symbol,
    pub s_unlocked_iocolor: *mut t_symbol,
    pub s_unlockedinteraction: *mut t_symbol,
    pub s_unset: *mut t_symbol,
    pub s_up: *mut t_symbol,
    pub s_update: *mut t_symbol,
    pub s_update_metadata: *mut t_symbol,
    pub s_updatecommand: *mut t_symbol,
    pub s_updatecontent: *mut t_symbol,
    pub s_updatefind: *mut t_symbol,
    pub s_updatelookandfeel: *mut t_symbol,
    pub s_updatemenu: *mut t_symbol,
    pub s_updateprototypes: *mut t_symbol,
    pub s_updatequery: *mut t_symbol,
    pub s_updatequerydict: *mut t_symbol,
    pub s_updaterect: *mut t_symbol,
    pub s_url: *mut t_symbol,
    pub s_us_ascii: *mut t_symbol,
    pub s_usage_count: *mut t_symbol,
    pub s_usedslotlist: *mut t_symbol,
    pub s_useellipsis: *mut t_symbol,
    pub s_useimagebuffer: *mut t_symbol,
    pub s_usemax: *mut t_symbol,
    pub s_usemin: *mut t_symbol,
    pub s_user: *mut t_symbol,
    pub s_usercanget: *mut t_symbol,
    pub s_usercanset: *mut t_symbol,
    pub s_utf_16: *mut t_symbol,
    pub s_utf_16be: *mut t_symbol,
    pub s_utf_16le: *mut t_symbol,
    pub s_utf_8: *mut t_symbol,
    pub s_val: *mut t_symbol,
    pub s_value: *mut t_symbol,
    pub s_value_endchange: *mut t_symbol,
    pub s_value_rowcomponent: *mut t_symbol,
    pub s_valuebyindex: *mut t_symbol,
    pub s_varname: *mut t_symbol,
    pub s_varname_set: *mut t_symbol,
    pub s_varname_unset: *mut t_symbol,
    pub s_version: *mut t_symbol,
    pub s_videofile: *mut t_symbol,
    pub s_views: *mut t_symbol,
    pub s_viewspan: *mut t_symbol,
    pub s_vignette: *mut t_symbol,
    pub s_vis: *mut t_symbol,
    pub s_visibilitychanged: *mut t_symbol,
    pub s_visible: *mut t_symbol,
    pub s_visiblecanvasrect: *mut t_symbol,
    pub s_vol: *mut t_symbol,
    pub s_vpicture: *mut t_symbol,
    pub s_vpreset: *mut t_symbol,
    pub s_wantfree: *mut t_symbol,
    pub s_wantsreturn: *mut t_symbol,
    pub s_wantstab: *mut t_symbol,
    pub s_watch: *mut t_symbol,
    pub s_watchpoint_flags: *mut t_symbol,
    pub s_watchpoint_id: *mut t_symbol,
    pub s_wclose: *mut t_symbol,
    pub s_webpage: *mut t_symbol,
    pub s_weeks: *mut t_symbol,
    pub s_wind: *mut t_symbol,
    pub s_window: *mut t_symbol,
    pub s_windowbounds: *mut t_symbol,
    pub s_windowrect: *mut t_symbol,
    pub s_windsave: *mut t_symbol,
    pub s_wiretap: *mut t_symbol,
    pub s_withinlast: *mut t_symbol,
    pub s_wobjectname: *mut t_symbol,
    pub s_wordwrap: *mut t_symbol,
    pub s_workspace: *mut t_symbol,
    pub s_write: *mut t_symbol,
    pub s_writedictionary: *mut t_symbol,
    pub s_xmlfile: *mut t_symbol,
    pub s_years: *mut t_symbol,
    pub s_zero: *mut t_symbol,
    pub s_zoom: *mut t_symbol,
    pub s_zoombox: *mut t_symbol,
    pub s_zoomfactor: *mut t_symbol,
    pub s_zorder: *mut t_symbol,
    pub s_zzz: *mut t_symbol,
    pub s_Sans_Serif: *mut t_symbol,
}
#[test]
fn bindgen_test_layout__common_symbols_table() {
    assert_eq!(
        ::std::mem::size_of::<_common_symbols_table>(),
        11640usize,
        concat!("Size of: ", stringify!(_common_symbols_table))
    );
    assert_eq!(
        ::std::mem::align_of::<_common_symbols_table>(),
        8usize,
        concat!("Alignment of ", stringify!(_common_symbols_table))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s__preset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s__preset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_abbrev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_abbrev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_abbrev_rowcomponent as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_abbrev_rowcomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_abbrev_setvalue as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_abbrev_setvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_acceptsdrag as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_acceptsdrag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_acceptsdrag_locked as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_acceptsdrag_locked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_acceptsdrag_unlocked as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_acceptsdrag_unlocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_action as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_action)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_action_rowcomponent as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_action_rowcomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_action_setvalue as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_action_setvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_activate as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_activate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_active as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_active)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_activetab as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_activetab)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_activetabname as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_activetabname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_activewindow as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_activewindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_adapt as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_adapt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_add as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_add)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_addattr as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_addattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_addattr_enable as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_addattr_enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_addclient as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_addclient)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_addfolder as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_addfolder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_addfolderandsave as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_addfolderandsave)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_addquerydict as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_addquerydict)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_addquerydictfromfile as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_addquerydictfromfile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_addslot as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_addslot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_addtopresentation as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_addtopresentation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_addwiretap as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_addwiretap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_adornments as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_adornments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_alias as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_alias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_alignboxes as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_alignboxes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_alignconnections as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_alignconnections)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_alignlines as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_alignlines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_all as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_all)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_allkinds as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_allkinds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_allowmod as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_allowmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_alpha as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_alpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_annotation as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_annotation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_annotation_name as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_annotation_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_anydate as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_anydate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_anykind as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_anykind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_anything as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_anything)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_append as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_append)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_append_sql as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_append_sql)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_appendatoms as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_appendatoms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_appendtodictionary as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_appendtodictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_apply as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_apply)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_applyboxprototype as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_applyboxprototype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_applydeep as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_applydeep)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_applydeepif as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_applydeepif)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_applyif as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_applyif)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_args as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_argument as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_argument)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_arguments as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_arguments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_argv as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_argv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_ascending as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_ascending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_aspect as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_aspect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_assist as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_assist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_assoc as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_assoc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_atbclick as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_atbclick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_atom as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_atom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_atomarray as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_atomarray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_attach as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_attach)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_attr_filter_clip as *const _
                as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_attr_filter_clip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_attr_get as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_attr_get)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_attr_getnames as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_attr_getnames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_attr_gettarget as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_attr_gettarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_attr_modified as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_attr_modified)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_attr_offset_array as *const _
                as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_attr_offset_array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_attr_renamed as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_attr_renamed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_attr_setdisabled as *const _
                as usize
        },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_attr_setdisabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_attr_setinvisible as *const _
                as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_attr_setinvisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_attribute as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_attributes as *const _ as usize
        },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_attrname as *const _ as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_attrname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_audiofile as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_audiofile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_audioplugin as *const _ as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_audioplugin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_author as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_author)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_autocompletion as *const _ as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_autocompletion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_autocompletion_query as *const _
                as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_autocompletion_query)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_autofixwidth as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_autofixwidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_autoheightchanged as *const _
                as usize
        },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_autoheightchanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_autoscroll as *const _ as usize
        },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_autoscroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_back as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_back)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_background as *const _ as usize
        },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_background)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bang as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bbu as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bbu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bclear as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bclear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bcopy as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bcopy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bcut as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bcut)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_begineditbox as *const _ as usize
        },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_begineditbox)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_beginswith as *const _ as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_beginswith)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_beginswithorcontains as *const _
                as usize
        },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_beginswithorcontains)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_bfixwidth as *const _ as usize
        },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bfixwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bfont as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bfont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bgcolor as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bgcolor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bgcount as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bgcount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_bghidden as *const _ as usize
        },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bghidden)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_bglocked as *const _ as usize
        },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bglocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bgmode as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bgmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_blue as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bogus as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bogus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bold as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_border as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_border)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_borderchanged as *const _ as usize
        },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_borderchanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_bottom_inset as *const _ as usize
        },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bottom_inset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_boundingbox as *const _ as usize
        },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_boundingbox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bounds as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_box as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_box)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_box1 as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_box1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_box2 as *const _ as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_box2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_boxalpha as *const _ as usize
        },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_boxalpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_boxanimatetime as *const _ as usize
        },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_boxanimatetime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_boxcomponent as *const _ as usize
        },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_boxcomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_boxcontextitems as *const _ as usize
        },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_boxcontextitems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_boxcontextmenu as *const _ as usize
        },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_boxcontextmenu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_boxes as *const _ as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_boxes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_boxlayer as *const _ as usize
        },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_boxlayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_boxnotify as *const _ as usize
        },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_boxnotify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_boxscreenrectchanged as *const _
                as usize
        },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_boxscreenrectchanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bpaste as *const _ as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bpaste)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_bpastepic as *const _ as usize
        },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bpastepic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_bpatcher as *const _ as usize
        },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bpatcher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_bpatcher_holder as *const _ as usize
        },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bpatcher_holder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bpm as *const _ as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bpm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_bracket_default as *const _ as usize
        },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bracket_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_bracket_none as *const _ as usize
        },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bracket_none)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_break as *const _ as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_break)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bredo as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bredo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_brgba as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_brgba)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_bringforward as *const _ as usize
        },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bringforward)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_bringtofront as *const _ as usize
        },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bringtofront)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_bubblesize as *const _ as usize
        },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bubblesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_build as *const _ as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_build)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_buildcolumns as *const _ as usize
        },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_buildcolumns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_bundo as *const _ as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_bundo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_button as *const _ as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_button)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_c74object as *const _ as usize
        },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_c74object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_canback as *const _ as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_canback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_cancopychanged as *const _ as usize
        },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_cancopychanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_candropfiles as *const _ as usize
        },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_candropfiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_canforward as *const _ as usize
        },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_canforward)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_canhilite as *const _ as usize
        },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_canhilite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_canmovebackward as *const _ as usize
        },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_canmovebackward)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_canmoveforward as *const _ as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_canmoveforward)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_canpastechanged as *const _ as usize
        },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_canpastechanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_canremove as *const _ as usize
        },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_canremove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_cansave as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_cansave)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_canschedule as *const _ as usize
        },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_canschedule)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_canselectchanged as *const _
                as usize
        },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_canselectchanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_canvastoscreen as *const _ as usize
        },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_canvastoscreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_caption as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_caption)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_catcolors as *const _ as usize
        },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_catcolors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_category as *const _ as usize
        },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_category)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_category_first as *const _ as usize
        },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_category_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_cell as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_cell)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_cell_clue as *const _ as usize
        },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_cell_clue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_cellclue as *const _ as usize
        },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_cellclue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_cellenabled as *const _ as usize
        },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_cellenabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_cellschanged as *const _ as usize
        },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_cellschanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_char as *const _ as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_char)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_char_comma as *const _ as usize
        },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_char_comma)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_char_minus as *const _ as usize
        },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_char_minus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_char_semi as *const _ as usize
        },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_char_semi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_char_space as *const _ as usize
        },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_char_space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_charset_converter as *const _
                as usize
        },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_charset_converter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_checkbox as *const _ as usize
        },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_checkbox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_choose as *const _ as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_choose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_chord as *const _ as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_chord)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_chuck as *const _ as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_chuck)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_chuckindex as *const _ as usize
        },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_chuckindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_class as *const _ as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_class_jit_attribute as *const _
                as usize
        },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_class_jit_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_class_jit_matrix as *const _
                as usize
        },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_class_jit_matrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_class_jit_namespace as *const _
                as usize
        },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_class_jit_namespace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_classname as *const _ as usize
        },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_classname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_classsym as *const _ as usize
        },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_classsym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_clear as *const _ as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_clearactions as *const _ as usize
        },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clearactions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_clearcolumns as *const _ as usize
        },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clearcolumns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_clearitem as *const _ as usize
        },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clearitem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_clearslots as *const _ as usize
        },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clearslots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_click as *const _ as usize },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_click)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_clickaction as *const _ as usize
        },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clickaction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_clientcontext as *const _ as usize
        },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clientcontext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_clipboard as *const _ as usize
        },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clipboard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_clipping as *const _ as usize
        },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clipping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_clock as *const _ as usize },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_close as *const _ as usize },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_close)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_closebang as *const _ as usize
        },
        1512usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_closebang)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_clue_cell as *const _ as usize
        },
        1520usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clue_cell)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_clue_header as *const _ as usize
        },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clue_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_clueclass as *const _ as usize
        },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clueclass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_cluelookupattr as *const _ as usize
        },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_cluelookupattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_cluename as *const _ as usize
        },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_cluename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_clues as *const _ as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_clues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_colhead as *const _ as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_colhead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_coll as *const _ as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_coll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_collectfiles as *const _ as usize
        },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_collectfiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_collective as *const _ as usize
        },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_collective)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_color as *const _ as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_colorvalue as *const _ as usize
        },
        1608usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_colorvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_columnadded as *const _ as usize
        },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_columnadded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_columnclue as *const _ as usize
        },
        1624usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_columnclue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_columndeleted as *const _ as usize
        },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_columndeleted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_columnheaderclue as *const _
                as usize
        },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_columnheaderclue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_columnminmaxchanged as *const _
                as usize
        },
        1648usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_columnminmaxchanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_columnnamechanged as *const _
                as usize
        },
        1656usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_columnnamechanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_columns as *const _ as usize },
        1664usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_columns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_columnwidthchanged as *const _
                as usize
        },
        1672usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_columnwidthchanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_com as *const _ as usize },
        1680usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_com)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_command as *const _ as usize },
        1688usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_command_enable as *const _ as usize
        },
        1696usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_command_enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_commandgroup as *const _ as usize
        },
        1704usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_commandgroup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_commands as *const _ as usize
        },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_commands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_comment as *const _ as usize },
        1720usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_comment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_comparison as *const _ as usize
        },
        1728usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_comparison)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_comparisons as *const _ as usize
        },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_comparisons)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_completeconnection as *const _
                as usize
        },
        1744usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_completeconnection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_connect as *const _ as usize },
        1752usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_connect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_connectcolor as *const _ as usize
        },
        1760usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_connectcolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_containersizechange as *const _
                as usize
        },
        1768usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_containersizechange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_contains as *const _ as usize
        },
        1776usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_contains)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_contextmenu as *const _ as usize
        },
        1784usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_contextmenu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_contextualpaste as *const _ as usize
        },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_contextualpaste)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_controller as *const _ as usize
        },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_controller)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_convert as *const _ as usize },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_convert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_copy as *const _ as usize },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_copyatoms as *const _ as usize
        },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_copyatoms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_copyjundo as *const _ as usize
        },
        1832usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_copyjundo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_coremidi as *const _ as usize
        },
        1840usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_coremidi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_count as *const _ as usize },
        1848usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_create_backup as *const _ as usize
        },
        1856usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_create_backup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_createbpatcher as *const _ as usize
        },
        1864usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_createbpatcher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_createsubpatcher as *const _
                as usize
        },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_createsubpatcher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_current as *const _ as usize },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_cut as *const _ as usize },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_cut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_data as *const _ as usize },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_date_created as *const _ as usize
        },
        1904usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_date_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_date_lastaccessed as *const _
                as usize
        },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_date_lastaccessed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_date_modified as *const _ as usize
        },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_date_modified)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_days as *const _ as usize },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_days)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dblclick as *const _ as usize
        },
        1936usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dblclick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_debugwindow_show as *const _
                as usize
        },
        1944usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_debugwindow_show)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_decorator as *const _ as usize
        },
        1952usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_decorator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_default as *const _ as usize },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_default_fontface as *const _
                as usize
        },
        1968usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_default_fontface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_default_fontname as *const _
                as usize
        },
        1976usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_default_fontname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_default_fontsize as *const _
                as usize
        },
        1984usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_default_fontsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_default_matrixplcolor as *const _
                as usize
        },
        1992usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_default_matrixplcolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_default_plcolor as *const _ as usize
        },
        2000usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_default_plcolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_default_query as *const _ as usize
        },
        2008usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_default_query)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_default_sigplcolor as *const _
                as usize
        },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_default_sigplcolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_defaultcommand as *const _ as usize
        },
        2024usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_defaultcommand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_defaultfocusbox as *const _ as usize
        },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_defaultfocusbox)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_defaultname as *const _ as usize
        },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_defaultname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_defaultquery as *const _ as usize
        },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_defaultquery)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_defaults as *const _ as usize
        },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_defaults)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_defaultvaluechanged as *const _
                as usize
        },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_defaultvaluechanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_definearg as *const _ as usize
        },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_definearg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_defineargument as *const _ as usize
        },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_defineargument)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_definecomparison as *const _
                as usize
        },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_definecomparison)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_definefield as *const _ as usize
        },
        2096usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_definefield)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_definefolder as *const _ as usize
        },
        2104usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_definefolder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_definequantifier as *const _
                as usize
        },
        2112usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_definequantifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_definequery as *const _ as usize
        },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_definequery)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_defineslot as *const _ as usize
        },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_defineslot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_definesort as *const _ as usize
        },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_definesort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_defrect as *const _ as usize },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_defrect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_delete as *const _ as usize },
        2152usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_delete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_deleteindex as *const _ as usize
        },
        2160usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_deleteindex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_deletemetadata as *const _ as usize
        },
        2168usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_deletemetadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_deletequery as *const _ as usize
        },
        2176usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_deletequery)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_depthbuffer as *const _ as usize
        },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_depthbuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_descending as *const _ as usize
        },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_descending)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_description as *const _ as usize
        },
        2200usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_description)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dest_closing as *const _ as usize
        },
        2208usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dest_closing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_destination as *const _ as usize
        },
        2216usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_destination)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_destrect as *const _ as usize
        },
        2224usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_destrect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_destroy as *const _ as usize },
        2232usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_destroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_detach as *const _ as usize },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_detach)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_devicerects as *const _ as usize
        },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_devicerects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dictionary as *const _ as usize
        },
        2256usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_digest as *const _ as usize },
        2264usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_dim as *const _ as usize },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_dimlink as *const _ as usize },
        2280usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dimlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_dirty as *const _ as usize },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dirty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_disabled as *const _ as usize
        },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_disabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_disablewiretap as *const _ as usize
        },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_disablewiretap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_disconnect as *const _ as usize
        },
        2312usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_disconnect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_do_get_shared_context as *const _
                as usize
        },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_do_get_shared_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_document as *const _ as usize
        },
        2328usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_document)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_docwindow_docrect as *const _
                as usize
        },
        2336usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_docwindow_docrect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_docwindow_refrect as *const _
                as usize
        },
        2344usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_docwindow_refrect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_docwindow_searchrect as *const _
                as usize
        },
        2352usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_docwindow_searchrect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_docwindow_tocrect as *const _
                as usize
        },
        2360usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_docwindow_tocrect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_docwindow_tutrect as *const _
                as usize
        },
        2368usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_docwindow_tutrect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_domain as *const _ as usize },
        2376usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_done as *const _ as usize },
        2384usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_done)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_donewobj as *const _ as usize
        },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_donewobj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dontsave as *const _ as usize
        },
        2400usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dontsave)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_doublebuffer as *const _ as usize
        },
        2408usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_doublebuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_doubleclick as *const _ as usize
        },
        2416usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_doubleclick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_doubleclickaction as *const _
                as usize
        },
        2424usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_doubleclickaction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_doubleclicked as *const _ as usize
        },
        2432usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_doubleclicked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_down as *const _ as usize },
        2440usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_down)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_downcaption as *const _ as usize
        },
        2448usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_downcaption)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_downicon as *const _ as usize
        },
        2456usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_downicon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_drag as *const _ as usize },
        2464usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_drag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dragactive as *const _ as usize
        },
        2472usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dragactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dragdrop as *const _ as usize
        },
        2480usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dragdrop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dragenter as *const _ as usize
        },
        2488usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dragenter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dragexit as *const _ as usize
        },
        2496usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dragexit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_draggablechanged as *const _
                as usize
        },
        2504usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_draggablechanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dragmove as *const _ as usize
        },
        2512usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dragmove)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dragrole as *const _ as usize
        },
        2520usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dragrole)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dragtarget as *const _ as usize
        },
        2528usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dragtarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_drawfirstin as *const _ as usize
        },
        2536usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_drawfirstin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_drawinlast as *const _ as usize
        },
        2544usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_drawinlast)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_drawsresizer as *const _ as usize
        },
        2552usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_drawsresizer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dropaction as *const _ as usize
        },
        2560usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dropaction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dropaction_addapplyprototype
                as *const _ as usize
        },
        2568usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dropaction_addapplyprototype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dropaction_addconnectedmessage
                as *const _ as usize
        },
        2576usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dropaction_addconnectedmessage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dropaction_addcustom as *const _
                as usize
        },
        2584usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dropaction_addcustom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dropaction_addcustom_extended
                as *const _ as usize
        },
        2592usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dropaction_addcustom_extended)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dropaction_addobjectcreation
                as *const _ as usize
        },
        2600usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dropaction_addobjectcreation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dropaction_addopeninnewwindow
                as *const _ as usize
        },
        2608usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dropaction_addopeninnewwindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>()))
                .s_dropaction_addprototypeobjectcreation as *const _ as usize
        },
        2616usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dropaction_addprototypeobjectcreation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dropfiles as *const _ as usize
        },
        2624usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dropfiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_droprole as *const _ as usize
        },
        2632usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_droprole)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_droprole_locked as *const _ as usize
        },
        2640usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_droprole_locked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_droprole_unlocked as *const _
                as usize
        },
        2648usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_droprole_unlocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_dsp as *const _ as usize },
        2656usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_dump as *const _ as usize },
        2664usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dump)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_dumpboxes as *const _ as usize
        },
        2672usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dumpboxes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_dumpout as *const _ as usize },
        2680usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_dumpout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_duplicate as *const _ as usize
        },
        2688usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_duplicate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_edit as *const _ as usize },
        2696usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_edit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_edit_framecolor as *const _ as usize
        },
        2704usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_edit_framecolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_editactive as *const _ as usize
        },
        2712usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_editactive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_editbox as *const _ as usize },
        2720usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_editbox)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_editcell as *const _ as usize
        },
        2728usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_editcell)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_editing_bgcolor as *const _ as usize
        },
        2736usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_editing_bgcolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_editmetadata as *const _ as usize
        },
        2744usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_editmetadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_editonclick as *const _ as usize
        },
        2752usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_editonclick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_editor as *const _ as usize },
        2760usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_editor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_elements as *const _ as usize
        },
        2768usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_embed as *const _ as usize },
        2776usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_embed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_emptytext as *const _ as usize
        },
        2784usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_emptytext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_enable as *const _ as usize },
        2792usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_enable_rowcomponent as *const _
                as usize
        },
        2800usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_enable_rowcomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_enable_setvalue as *const _ as usize
        },
        2808usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_enable_setvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_enablehscroll as *const _ as usize
        },
        2816usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_enablehscroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_enabler as *const _ as usize },
        2824usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_enabler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_enablevscroll as *const _ as usize
        },
        2832usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_enablevscroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_enddrag as *const _ as usize },
        2840usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_enddrag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_endmoveboxes as *const _ as usize
        },
        2848usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_endmoveboxes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_endpoint as *const _ as usize
        },
        2856usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_endpoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_endprobe as *const _ as usize
        },
        2864usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_endprobe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_endswith as *const _ as usize
        },
        2872usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_endswith)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_endtransaction as *const _ as usize
        },
        2880usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_endtransaction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_enter as *const _ as usize },
        2888usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_enter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_entertext as *const _ as usize
        },
        2896usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_entertext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_enum as *const _ as usize },
        2904usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_enum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_enumindex as *const _ as usize
        },
        2912usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_enumindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_enummsg as *const _ as usize },
        2920usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_enummsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_enumtarget as *const _ as usize
        },
        2928usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_enumtarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_enumvals as *const _ as usize
        },
        2936usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_enumvals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_equalto as *const _ as usize },
        2944usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_equalto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_error as *const _ as usize },
        2952usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_eventinterval as *const _ as usize
        },
        2960usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_eventinterval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_everything as *const _ as usize
        },
        2968usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_everything)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_excludebg as *const _ as usize
        },
        2976usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_excludebg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_exec as *const _ as usize },
        2984usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_exec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_execstring as *const _ as usize
        },
        2992usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_execstring)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_execstring_safe as *const _ as usize
        },
        3000usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_execstring_safe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_execute as *const _ as usize },
        3008usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_execute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_executefind as *const _ as usize
        },
        3016usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_executefind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_extension as *const _ as usize
        },
        3024usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_extension)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_extra as *const _ as usize },
        3032usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_ezquery as *const _ as usize },
        3040usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_ezquery)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fadetinge as *const _ as usize
        },
        3048usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fadetinge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_fgcolor as *const _ as usize },
        3056usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fgcolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fghidden as *const _ as usize
        },
        3064usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fghidden)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_field as *const _ as usize },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_field)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fieldnamebyindex as *const _
                as usize
        },
        3080usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fieldnamebyindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_fields as *const _ as usize },
        3088usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_file as *const _ as usize },
        3096usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_filefolder as *const _ as usize
        },
        3104usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_filefolder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fileformat as *const _ as usize
        },
        3112usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fileformat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_filename as *const _ as usize
        },
        3120usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_filename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_filepath as *const _ as usize
        },
        3128usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_filepath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_filetypemessage as *const _ as usize
        },
        3136usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_filetypemessage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fileusage as *const _ as usize
        },
        3144usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fileusage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_filter as *const _ as usize },
        3152usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_filterget as *const _ as usize
        },
        3160usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_filterget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_filterset as *const _ as usize
        },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_filterset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_find as *const _ as usize },
        3176usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_find)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_find_enableselectall as *const _
                as usize
        },
        3184usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_find_enableselectall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_findall as *const _ as usize },
        3192usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_findall)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_finddoneclicked as *const _ as usize
        },
        3200usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_finddoneclicked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_findfirst as *const _ as usize
        },
        3208usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_findfirst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_findmaster as *const _ as usize
        },
        3216usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_findmaster)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_findnextclicked as *const _ as usize
        },
        3224usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_findnextclicked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_findprevclicked as *const _ as usize
        },
        3232usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_findprevclicked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_findreturnkeypressed as *const _
                as usize
        },
        3240usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_findreturnkeypressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_findselectallclicked as *const _
                as usize
        },
        3248usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_findselectallclicked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_findsize as *const _ as usize
        },
        3256usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_findsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_findtextchanged as *const _ as usize
        },
        3264usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_findtextchanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_first as *const _ as usize },
        3272usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_first)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_firstline as *const _ as usize
        },
        3280usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_firstline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_firstobject as *const _ as usize
        },
        3288usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_firstobject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_firstview as *const _ as usize
        },
        3296usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_firstview)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_five as *const _ as usize },
        3304usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_five)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_fixed as *const _ as usize },
        3312usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fixed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fixwidth as *const _ as usize
        },
        3320usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fixwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_flags as *const _ as usize },
        3328usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_flat as *const _ as usize },
        3336usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_flat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_float as *const _ as usize },
        3344usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_float32 as *const _ as usize },
        3352usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_float32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_float64 as *const _ as usize },
        3360usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_float64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_floating as *const _ as usize
        },
        3368usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_floating)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_flonum as *const _ as usize },
        3376usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_flonum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_flush as *const _ as usize },
        3384usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_flush)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_focusgained as *const _ as usize
        },
        3392usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_focusgained)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_focuslost as *const _ as usize
        },
        3400usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_focuslost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_focusonvis as *const _ as usize
        },
        3408usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_focusonvis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_fold as *const _ as usize },
        3416usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_folder as *const _ as usize },
        3424usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_folder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_folderdropped as *const _ as usize
        },
        3432usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_folderdropped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_folderpath as *const _ as usize
        },
        3440usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_folderpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_font as *const _ as usize },
        3448usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_font)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fontchanged as *const _ as usize
        },
        3456usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fontchanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fontface as *const _ as usize
        },
        3464usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fontface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fontfixwidth as *const _ as usize
        },
        3472usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fontfixwidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fontinfochanged as *const _ as usize
        },
        3480usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fontinfochanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fontname as *const _ as usize
        },
        3488usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fontname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fontnamechanged as *const _ as usize
        },
        3496usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fontnamechanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fontpanel_isclientwindow as *const _
                as usize
        },
        3504usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fontpanel_isclientwindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fontpanelfontcolor as *const _
                as usize
        },
        3512usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fontpanelfontcolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fontpanelfontface as *const _
                as usize
        },
        3520usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fontpanelfontface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fontpanelfontname as *const _
                as usize
        },
        3528usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fontpanelfontname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fontpanelfontsize as *const _
                as usize
        },
        3536usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fontpanelfontsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fontsize as *const _ as usize
        },
        3544usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fontsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fontsizechanged as *const _ as usize
        },
        3552usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fontsizechanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fonttarget as *const _ as usize
        },
        3560usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fonttarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_forbidclose as *const _ as usize
        },
        3568usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_forbidclose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_forward as *const _ as usize },
        3576usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_forward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_four as *const _ as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_four)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_fpic as *const _ as usize },
        3592usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fpic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_free as *const _ as usize },
        3600usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_free)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_freebang as *const _ as usize
        },
        3608usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_freebang)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_freekeys as *const _ as usize
        },
        3616usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_freekeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_freepatcherview as *const _ as usize
        },
        3624usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_freepatcherview)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_frgb as *const _ as usize },
        3632usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_frgb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_frgba as *const _ as usize },
        3640usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_frgba)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fromdictionary as *const _ as usize
        },
        3648usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fromdictionary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fromgworld as *const _ as usize
        },
        3656usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fromgworld)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_frommatrix as *const _ as usize
        },
        3664usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_frommatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_frommatrix_trunc as *const _
                as usize
        },
        3672usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_frommatrix_trunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_front as *const _ as usize },
        3680usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_front)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_frozen as *const _ as usize },
        3688usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_frozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_frozen_box_attributes as *const _
                as usize
        },
        3696usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_frozen_box_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_frozen_object_attributes as *const _
                as usize
        },
        3704usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_frozen_object_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_frozen_pendingattrs as *const _
                as usize
        },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_frozen_pendingattrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_frozen_text as *const _ as usize
        },
        3720usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_frozen_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_fsaa as *const _ as usize },
        3728usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fsaa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fullname as *const _ as usize
        },
        3736usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fullname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_fullscreen as *const _ as usize
        },
        3744usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_fullscreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_funall as *const _ as usize },
        3752usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_funall)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_function as *const _ as usize
        },
        3760usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_g_inout_binlet as *const _ as usize
        },
        3768usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_g_inout_binlet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_g_max_newest as *const _ as usize
        },
        3776usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_g_max_newest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_g_max_newest_box as *const _
                as usize
        },
        3784usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_g_max_newest_box)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_gb as *const _ as usize },
        3792usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_genframe as *const _ as usize
        },
        3800usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_genframe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_get as *const _ as usize },
        3808usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_get)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_get_jit_ob as *const _ as usize
        },
        3816usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_get_jit_ob)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getargumentlabel as *const _
                as usize
        },
        3824usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getargumentlabel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getassoc as *const _ as usize
        },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getassoc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getatoms as *const _ as usize
        },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getatoms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getattrtext as *const _ as usize
        },
        3848usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getattrtext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getbounds as *const _ as usize
        },
        3856usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getbounds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getboxlayer as *const _ as usize
        },
        3864usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getboxlayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcaptioninfo as *const _ as usize
        },
        3872usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcaptioninfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcellcolor as *const _ as usize
        },
        3880usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcellcolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcelldescription as *const _
                as usize
        },
        3888usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcelldescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcelleditable as *const _ as usize
        },
        3896usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcelleditable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcellfiletypes as *const _
                as usize
        },
        3904usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcellfiletypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcellicon as *const _ as usize
        },
        3912usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcellicon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcellindentlevel as *const _
                as usize
        },
        3920usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcellindentlevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcellmenu as *const _ as usize
        },
        3928usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcellmenu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcelltext as *const _ as usize
        },
        3936usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcelltext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcelltextlength as *const _
                as usize
        },
        3944usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcelltextlength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcellunits as *const _ as usize
        },
        3952usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcellunits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcellunitsyms as *const _ as usize
        },
        3960usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcellunitsyms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcellvalue as *const _ as usize
        },
        3968usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcellvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcolumnnames as *const _ as usize
        },
        3976usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcolumnnames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcomparisonlabel as *const _
                as usize
        },
        3984usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcomparisonlabel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcomponent as *const _ as usize
        },
        3992usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getcontainedcomponent as *const _
                as usize
        },
        4000usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getcontainedcomponent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_getdata as *const _ as usize },
        4008usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getdefaultfocuscomponent as *const _
                as usize
        },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getdefaultfocuscomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getdefext as *const _ as usize
        },
        4024usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getdefext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getdeftype as *const _ as usize
        },
        4032usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getdeftype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getdrawparams as *const _ as usize
        },
        4040usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getdrawparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_getdst as *const _ as usize },
        4048usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getdst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getfieldlabel as *const _ as usize
        },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getfieldlabel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getfindtext as *const _ as usize
        },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getfindtext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getflags as *const _ as usize
        },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getfolderpath as *const _ as usize
        },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getfolderpath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getfonttarget as *const _ as usize
        },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getfonttarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getfontview as *const _ as usize
        },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getfontview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getformat as *const _ as usize
        },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getformat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gethintdelay as *const _ as usize
        },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gethintdelay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getholder as *const _ as usize
        },
        4120usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getholder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getimage as *const _ as usize
        },
        4128usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getimage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getindex as *const _ as usize
        },
        4136usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_getinfo as *const _ as usize },
        4144usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getinports as *const _ as usize
        },
        4152usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getinports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getinput as *const _ as usize
        },
        4160usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getinput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getinputlist as *const _ as usize
        },
        4168usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getinputlist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getioproc as *const _ as usize
        },
        4176usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getioproc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_getkeys as *const _ as usize },
        4184usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getkeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getlastinsertid as *const _ as usize
        },
        4192usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getlastinsertid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getlayoutinfo as *const _ as usize
        },
        4200usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getlayoutinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getlogical as *const _ as usize
        },
        4208usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getlogical)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getmatrix as *const _ as usize
        },
        4216usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getmatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getmethod as *const _ as usize
        },
        4224usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getmethod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_getname as *const _ as usize },
        4232usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getnamed as *const _ as usize
        },
        4240usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getnamed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getnamedbox as *const _ as usize
        },
        4248usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getnamedbox)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getnextrecord as *const _ as usize
        },
        4256usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getnextrecord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getnthview as *const _ as usize
        },
        4264usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getnthview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getobject as *const _ as usize
        },
        4272usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getobject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getoffset as *const _ as usize
        },
        4280usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getoffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getoutports as *const _ as usize
        },
        4288usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getoutports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getoutput as *const _ as usize
        },
        4296usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getoutput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getoutputlist as *const _ as usize
        },
        4304usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getoutputlist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getprobevalue as *const _ as usize
        },
        4312usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getprobevalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_getptr as *const _ as usize },
        4320usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getptr_forview as *const _ as usize
        },
        4328usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getptr_forview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getquantifierlabel as *const _
                as usize
        },
        4336usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getquantifierlabel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getquery as *const _ as usize
        },
        4344usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getquery)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getquerydict as *const _ as usize
        },
        4352usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getquerydict)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getquerynames as *const _ as usize
        },
        4360usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getquerynames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getquerytype as *const _ as usize
        },
        4368usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getquerytype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_getrect as *const _ as usize },
        4376usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getrect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getrowcolor as *const _ as usize
        },
        4384usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getrowcolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getrowobject as *const _ as usize
        },
        4392usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getrowobject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getselected as *const _ as usize
        },
        4400usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getselected)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_getsize as *const _ as usize },
        4408usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_getsort as *const _ as usize },
        4416usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getsort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getspecial as *const _ as usize
        },
        4424usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getspecial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_getsrc as *const _ as usize },
        4432usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getsrc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getstackbase as *const _ as usize
        },
        4440usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getstackbase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getsyswind as *const _ as usize
        },
        4448usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getsyswind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gettextptr as *const _ as usize
        },
        4456usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gettextptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gettitle as *const _ as usize
        },
        4464usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gettitle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_gettype as *const _ as usize },
        4472usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gettype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gettypelist as *const _ as usize
        },
        4480usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gettypelist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getunitstext as *const _ as usize
        },
        4488usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getunitstext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getunitsyms as *const _ as usize
        },
        4496usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getunitsyms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getvalueof as *const _ as usize
        },
        4504usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getvalueof)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getvisiblecanvasrect as *const _
                as usize
        },
        4512usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getvisiblecanvasrect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_getwind as *const _ as usize },
        4520usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getwind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_getwindowrect as *const _ as usize
        },
        4528usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_getwindowrect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gl_line_loop as *const _ as usize
        },
        4536usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gl_line_loop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gl_line_strip as *const _ as usize
        },
        4544usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gl_line_strip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gl_lines as *const _ as usize
        },
        4552usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gl_lines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gl_points as *const _ as usize
        },
        4560usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gl_points)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gl_polygon as *const _ as usize
        },
        4568usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gl_polygon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gl_quad_grid as *const _ as usize
        },
        4576usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gl_quad_grid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gl_quad_strip as *const _ as usize
        },
        4584usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gl_quad_strip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gl_quads as *const _ as usize
        },
        4592usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gl_quads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gl_tri_fan as *const _ as usize
        },
        4600usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gl_tri_fan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gl_tri_grid as *const _ as usize
        },
        4608usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gl_tri_grid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gl_tri_strip as *const _ as usize
        },
        4616usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gl_tri_strip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gl_triangles as *const _ as usize
        },
        4624usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gl_triangles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_global as *const _ as usize },
        4632usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_global)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_globalpatchername as *const _
                as usize
        },
        4640usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_globalpatchername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_go as *const _ as usize },
        4648usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_go)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_grabfocus as *const _ as usize
        },
        4656usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_grabfocus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_greaterthan as *const _ as usize
        },
        4664usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_greaterthan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_green as *const _ as usize },
        4672usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_grid as *const _ as usize },
        4680usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_grid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gridonopen as *const _ as usize
        },
        4688usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gridonopen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gridsize as *const _ as usize
        },
        4696usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gridsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gridsnap as *const _ as usize
        },
        4704usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gridsnap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_gridsnaponopen as *const _ as usize
        },
        4712usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_gridsnaponopen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_group as *const _ as usize },
        4720usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_grow as *const _ as usize },
        4728usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_grow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_growboth as *const _ as usize
        },
        4736usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_growboth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_growy as *const _ as usize },
        4744usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_growy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hasclose as *const _ as usize
        },
        4752usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hasclose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hasdatatype as *const _ as usize
        },
        4760usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hasdatatype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_hasgrow as *const _ as usize },
        4768usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hasgrow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hashorizscroll as *const _ as usize
        },
        4776usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hashorizscroll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hashtab_entry_free as *const _
                as usize
        },
        4784usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hashtab_entry_free)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hashtab_entry_new as *const _
                as usize
        },
        4792usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hashtab_entry_new)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hashtab_free as *const _ as usize
        },
        4800usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hashtab_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_hasmenu as *const _ as usize },
        4808usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hasmenu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hasminimize as *const _ as usize
        },
        4816usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hasminimize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hastitlebar as *const _ as usize
        },
        4824usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hastitlebar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hasvertscroll as *const _ as usize
        },
        4832usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hasvertscroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_haszoom as *const _ as usize },
        4840usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_haszoom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_head as *const _ as usize },
        4848usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_height as *const _ as usize },
        4856usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_help as *const _ as usize },
        4864usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_help)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_helpfile as *const _ as usize
        },
        4872usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_helpfile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_helpmenu as *const _ as usize
        },
        4880usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_helpmenu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_helpname as *const _ as usize
        },
        4888usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_helpname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_hidden as *const _ as usize },
        4896usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hidden)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hiddenconnect as *const _ as usize
        },
        4904usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hiddenconnect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_hide as *const _ as usize },
        4912usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hide)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hideablechanged as *const _ as usize
        },
        4920usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hideablechanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hidecaption as *const _ as usize
        },
        4928usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hidecaption)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hidewindow as *const _ as usize
        },
        4936usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hidewindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_hint as *const _ as usize },
        4944usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hint_disabled as *const _ as usize
        },
        4952usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hint_disabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_hinttrack as *const _ as usize
        },
        4960usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hinttrack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_history as *const _ as usize },
        4968usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_history)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_history_entry as *const _ as usize
        },
        4976usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_history_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_hittest as *const _ as usize },
        4984usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hittest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_holderoptions as *const _ as usize
        },
        4992usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_holderoptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_hz as *const _ as usize },
        5000usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_hz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_icon as *const _ as usize },
        5008usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_icon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_id as *const _ as usize },
        5016usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_identifier as *const _ as usize
        },
        5024usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_identifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_ignoreclick as *const _ as usize
        },
        5032usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_ignoreclick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_image as *const _ as usize },
        5040usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_imagefile as *const _ as usize
        },
        5048usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_imagefile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_imbed as *const _ as usize },
        5056usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_imbed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_imprint as *const _ as usize },
        5064usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_imprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_includebg as *const _ as usize
        },
        5072usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_includebg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_index as *const _ as usize },
        5080usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_info as *const _ as usize },
        5088usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_init as *const _ as usize },
        5096usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_inlet as *const _ as usize },
        5104usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inlet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inletinfo as *const _ as usize
        },
        5112usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inletinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inletnum as *const _ as usize
        },
        5120usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inletnum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inletoutlet as *const _ as usize
        },
        5128usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inletoutlet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inletscaleratio as *const _ as usize
        },
        5136usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inletscaleratio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inputcount as *const _ as usize
        },
        5144usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inputcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_insert as *const _ as usize },
        5152usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_insert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_insertboxtext as *const _ as usize
        },
        5160usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_insertboxtext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_insertindex as *const _ as usize
        },
        5168usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_insertindex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_insertpatcher as *const _ as usize
        },
        5176usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_insertpatcher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_insertsegment as *const _ as usize
        },
        5184usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_insertsegment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_insetchanged as *const _ as usize
        },
        5192usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_insetchanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_insp as *const _ as usize },
        5200usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_insp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspectee as *const _ as usize
        },
        5208usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspectee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspectees as *const _ as usize
        },
        5216usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspectees)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspector as *const _ as usize
        },
        5224usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspector_clueclass as *const _
                as usize
        },
        5232usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspector_clueclass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspector_color as *const _ as usize
        },
        5240usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspector_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspector_customize as *const _
                as usize
        },
        5248usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspector_customize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspector_editor as *const _
                as usize
        },
        5256usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspector_editor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspector_fontattr as *const _
                as usize
        },
        5264usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspector_fontattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspector_rect as *const _ as usize
        },
        5272usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspector_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspector_tab as *const _ as usize
        },
        5280usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspector_tab)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspector_tabheight as *const _
                as usize
        },
        5288usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspector_tabheight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspector_title as *const _ as usize
        },
        5296usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspector_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspector_toolbarid as *const _
                as usize
        },
        5304usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspector_toolbarid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_inspectorchange as *const _ as usize
        },
        5312usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_inspectorchange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_instance_attributes as *const _
                as usize
        },
        5320usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_instance_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_instanceattr as *const _ as usize
        },
        5328usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_instanceattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_int as *const _ as usize },
        5336usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_int16 as *const _ as usize },
        5344usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_int16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_int24 as *const _ as usize },
        5352usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_int24)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_int32 as *const _ as usize },
        5360usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_int32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_int8 as *const _ as usize },
        5368usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_int8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_interface as *const _ as usize
        },
        5376usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_interp as *const _ as usize },
        5384usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_interp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_interp_arg as *const _ as usize
        },
        5392usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_interp_arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_interval as *const _ as usize
        },
        5400usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_invalidate as *const _ as usize
        },
        5408usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_invalidate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_invalidateallboxlayers as *const _
                as usize
        },
        5416usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_invalidateallboxlayers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_invalidateboxlayer as *const _
                as usize
        },
        5424usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_invalidateboxlayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_invalidatetoolbar as *const _
                as usize
        },
        5432usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_invalidatetoolbar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_invis as *const _ as usize },
        5440usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_invis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_invisaction as *const _ as usize
        },
        5448usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_invisaction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_invisible as *const _ as usize
        },
        5456usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_invisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_invlabel as *const _ as usize
        },
        5464usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_invlabel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_invmsg as *const _ as usize },
        5472usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_invmsg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_ioname as *const _ as usize },
        5480usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_ioname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_ioproc as *const _ as usize },
        5488usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_ioproc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_is as *const _ as usize },
        5496usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_is)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_iscolumnvisible as *const _ as usize
        },
        5504usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_iscolumnvisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_isfile as *const _ as usize },
        5512usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_isfile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_isfirstin as *const _ as usize
        },
        5520usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_isfirstin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_isfolder as *const _ as usize
        },
        5528usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_isfolder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_iso_8859_1 as *const _ as usize
        },
        5536usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_iso_8859_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_isproto as *const _ as usize },
        5544usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_isproto)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_isselectedqueryremovable as *const _
                as usize
        },
        5552usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_isselectedqueryremovable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_isselectionvalid as *const _
                as usize
        },
        5560usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_isselectionvalid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_issystemquery as *const _ as usize
        },
        5568usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_issystemquery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_italic as *const _ as usize },
        5576usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_italic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_items as *const _ as usize },
        5584usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_iterate as *const _ as usize },
        5592usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_iterate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_javascript as *const _ as usize
        },
        5600usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_javascript)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_jbogus as *const _ as usize },
        5608usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jbogus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_jbox as *const _ as usize },
        5616usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jbox)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jbox_bytecount as *const _ as usize
        },
        5624usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jbox_bytecount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jbox_instances as *const _ as usize
        },
        5632usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jbox_instances)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jboxattr as *const _ as usize
        },
        5640usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jboxattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_jdrag as *const _ as usize },
        5648usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jdrag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_jed as *const _ as usize },
        5656usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jgraphics as *const _ as usize
        },
        5664usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jgraphics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jit_attr_offset as *const _ as usize
        },
        5672usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jit_attr_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jit_attr_offset_array as *const _
                as usize
        },
        5680usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jit_attr_offset_array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jit_attribute as *const _ as usize
        },
        5688usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jit_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jit_gl_texture as *const _ as usize
        },
        5696usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jit_gl_texture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jit_linklist as *const _ as usize
        },
        5704usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jit_linklist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jit_matrix as *const _ as usize
        },
        5712usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jit_matrix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_jit_mop as *const _ as usize },
        5720usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jit_mop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jit_namespace as *const _ as usize
        },
        5728usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jit_namespace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jpatcher as *const _ as usize
        },
        5736usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jpatcher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jpatcher_bytecount as *const _
                as usize
        },
        5744usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jpatcher_bytecount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jpatcher_instances as *const _
                as usize
        },
        5752usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jpatcher_instances)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jpatchercontroller as *const _
                as usize
        },
        5760usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jpatchercontroller)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jpatcherholder as *const _ as usize
        },
        5768usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jpatcherholder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jpatchline as *const _ as usize
        },
        5776usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jpatchline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_jpg as *const _ as usize },
        5784usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jpg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_jsave as *const _ as usize },
        5792usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jsave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_JSON as *const _ as usize },
        5800usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_JSON)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jsonreader as *const _ as usize
        },
        5808usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jsonreader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jsonwriter as *const _ as usize
        },
        5816usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jsonwriter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_juibogus as *const _ as usize
        },
        5824usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_juibogus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_juiobject as *const _ as usize
        },
        5832usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_juiobject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jundo_command as *const _ as usize
        },
        5840usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jundo_command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jundo_commandgroup as *const _
                as usize
        },
        5848usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jundo_commandgroup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_jweb_history as *const _ as usize
        },
        5856usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jweb_history)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_jwind as *const _ as usize },
        5864usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_jwind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_kb as *const _ as usize },
        5872usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_kb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_key as *const _ as usize },
        5880usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_backslash as *const _ as usize
        },
        5888usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_backslash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_backspace as *const _ as usize
        },
        5896usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_backspace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_clear as *const _ as usize
        },
        5904usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_clear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_delete as *const _ as usize
        },
        5912usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_delete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_downarrow as *const _ as usize
        },
        5920usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_downarrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_key_end as *const _ as usize },
        5928usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_enter as *const _ as usize
        },
        5936usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_enter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_key_esc as *const _ as usize },
        5944usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_esc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_grave as *const _ as usize
        },
        5952usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_grave)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_helpkey as *const _ as usize
        },
        5960usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_helpkey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_home as *const _ as usize
        },
        5968usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_home)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_insert as *const _ as usize
        },
        5976usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_insert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_leftarrow as *const _ as usize
        },
        5984usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_leftarrow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_optionspace as *const _ as usize
        },
        5992usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_optionspace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_pagedown as *const _ as usize
        },
        6000usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_pagedown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_pageup as *const _ as usize
        },
        6008usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_pageup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_return as *const _ as usize
        },
        6016usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_return)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_rightarrow as *const _ as usize
        },
        6024usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_rightarrow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_spacebar as *const _ as usize
        },
        6032usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_spacebar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_key_tab as *const _ as usize },
        6040usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_tab)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_tilde as *const _ as usize
        },
        6048usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_tilde)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_uparrow as *const _ as usize
        },
        6056usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_uparrow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_key_vertbar as *const _ as usize
        },
        6064usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_key_vertbar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_keyaction as *const _ as usize
        },
        6072usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_keyaction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_keyfilter as *const _ as usize
        },
        6080usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_keyfilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_keyfocuschanged as *const _ as usize
        },
        6088usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_keyfocuschanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_keymessage as *const _ as usize
        },
        6096usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_keymessage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_kind as *const _ as usize },
        6104usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_kindenum as *const _ as usize
        },
        6112usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_kindenum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_kindis as *const _ as usize },
        6120usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_kindis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_kindmenu as *const _ as usize
        },
        6128usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_kindmenu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_label as *const _ as usize },
        6136usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_labels as *const _ as usize },
        6144usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_labels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_last as *const _ as usize },
        6152usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_last)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_last_access as *const _ as usize
        },
        6160usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_last_access)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_lastmessage as *const _ as usize
        },
        6168usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_lastmessage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_lastmodified as *const _ as usize
        },
        6176usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_lastmodified)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_lastobject as *const _ as usize
        },
        6184usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_lastobject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_latency as *const _ as usize },
        6192usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_lessthan as *const _ as usize
        },
        6200usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_lessthan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_linear as *const _ as usize },
        6208usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_linear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_linechanged as *const _ as usize
        },
        6216usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_linechanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_linecontextmenu as *const _ as usize
        },
        6224usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_linecontextmenu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_linecount as *const _ as usize
        },
        6232usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_linecount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_linenotify as *const _ as usize
        },
        6240usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_linenotify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_lines as *const _ as usize },
        6248usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_lineup as *const _ as usize },
        6256usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_lineup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_list as *const _ as usize },
        6264usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_list_rowcomponent as *const _
                as usize
        },
        6272usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_list_rowcomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_list_setvalue as *const _ as usize
        },
        6280usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_list_setvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_listboxprototype as *const _
                as usize
        },
        6288usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_listboxprototype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_listfiles as *const _ as usize
        },
        6296usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_listfiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_listwindow as *const _ as usize
        },
        6304usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_listwindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_loadbang as *const _ as usize
        },
        6312usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_loadbang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_local as *const _ as usize },
        6320usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_local)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_lock as *const _ as usize },
        6328usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_locked as *const _ as usize },
        6336usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_locked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_locked_iocolor as *const _ as usize
        },
        6344usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_locked_iocolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_lockeddragscroll as *const _
                as usize
        },
        6352usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_lockeddragscroll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_lockedpatchercontextmenu as *const _
                as usize
        },
        6360usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_lockedpatchercontextmenu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_log as *const _ as usize },
        6368usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_long as *const _ as usize },
        6376usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_long)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_lookup as *const _ as usize },
        6384usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_lookup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_lookupcommand as *const _ as usize
        },
        6392usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_lookupcommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_loop as *const _ as usize },
        6400usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_loop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_macroman as *const _ as usize
        },
        6408usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_macroman)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_mainsearchentry as *const _ as usize
        },
        6416usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mainsearchentry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_makearray as *const _ as usize
        },
        6424usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_makearray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_makeview as *const _ as usize
        },
        6432usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_makeview)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_margin as *const _ as usize },
        6440usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_margin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_matchdragrole as *const _ as usize
        },
        6448usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_matchdragrole)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_matchinspectees as *const _ as usize
        },
        6456usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_matchinspectees)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_matrix as *const _ as usize },
        6464usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_matrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_matrix_calc as *const _ as usize
        },
        6472usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_matrix_calc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_matrixctrl as *const _ as usize
        },
        6480usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_matrixctrl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_matrixname as *const _ as usize
        },
        6488usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_matrixname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_max as *const _ as usize },
        6496usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_max_jit_classex as *const _ as usize
        },
        6504usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_max_jit_classex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_maxapplication as *const _ as usize
        },
        6512usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_maxapplication)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_maxclass as *const _ as usize
        },
        6520usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_maxclass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_maxdebug as *const _ as usize
        },
        6528usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_maxdebug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_maxdim as *const _ as usize },
        6536usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_maxdim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_maximize as *const _ as usize
        },
        6544usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_maximize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_maxmessage as *const _ as usize
        },
        6552usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_maxmessage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_maxplanecount as *const _ as usize
        },
        6560usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_maxplanecount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_maxwindow as *const _ as usize
        },
        6568usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_maxwindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_mb as *const _ as usize },
        6576usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_measuretext as *const _ as usize
        },
        6584usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_measuretext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_menu as *const _ as usize },
        6592usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_menu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_menubar as *const _ as usize },
        6600usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_menubar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_menus as *const _ as usize },
        6608usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_menus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_menus_runtime as *const _ as usize
        },
        6616usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_menus_runtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_message as *const _ as usize },
        6624usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_messages as *const _ as usize
        },
        6632usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_messages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_metadata as *const _ as usize
        },
        6640usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_metadatalist as *const _ as usize
        },
        6648usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_metadatalist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_metadatawindow as *const _ as usize
        },
        6656usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_metadatawindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_methodall as *const _ as usize
        },
        6664usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_methodall)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_methodindex as *const _ as usize
        },
        6672usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_methodindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_methods as *const _ as usize },
        6680usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_methods)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_midpoints as *const _ as usize
        },
        6688usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_midpoints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_min as *const _ as usize },
        6696usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_mindim as *const _ as usize },
        6704usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mindim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_minimize as *const _ as usize
        },
        6712usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_minimize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_minplanecount as *const _ as usize
        },
        6720usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_minplanecount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_minus as *const _ as usize },
        6728usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_minus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_mode as *const _ as usize },
        6736usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_modified as *const _ as usize
        },
        6744usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_modified)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_monitor as *const _ as usize },
        6752usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_monitor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_months as *const _ as usize },
        6760usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_months)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_mousedoubleclick as *const _
                as usize
        },
        6768usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mousedoubleclick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_mousedown as *const _ as usize
        },
        6776usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mousedown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_mousedownonchar as *const _ as usize
        },
        6784usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mousedownonchar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_mousedrag as *const _ as usize
        },
        6792usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mousedrag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_mousedragdelta as *const _ as usize
        },
        6800usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mousedragdelta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_mouseenter as *const _ as usize
        },
        6808usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mouseenter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_mouseleave as *const _ as usize
        },
        6816usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mouseleave)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_mousemove as *const _ as usize
        },
        6824usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mousemove)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_mousescale as *const _ as usize
        },
        6832usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mousescale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_mouseup as *const _ as usize },
        6840usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mouseup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_mousewheel as *const _ as usize
        },
        6848usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mousewheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_move as *const _ as usize },
        6856usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_move)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_moveboxes as *const _ as usize
        },
        6864usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_moveboxes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_moved as *const _ as usize },
        6872usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_moved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_moveifoffdisplay as *const _
                as usize
        },
        6880usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_moveifoffdisplay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_movelines as *const _ as usize
        },
        6888usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_movelines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_movesegment as *const _ as usize
        },
        6896usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_movesegment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_moviedim as *const _ as usize
        },
        6904usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_moviedim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_moviefile as *const _ as usize
        },
        6912usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_moviefile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_ms as *const _ as usize },
        6920usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_ms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_ms_ansi as *const _ as usize },
        6928usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_ms_ansi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_mulaw as *const _ as usize },
        6936usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mulaw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_mult as *const _ as usize },
        6944usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mult)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_multiboxcontextmenu as *const _
                as usize
        },
        6952usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_multiboxcontextmenu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_multilinecontextmenu as *const _
                as usize
        },
        6960usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_multilinecontextmenu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_mute as *const _ as usize },
        6968usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_mute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_name as *const _ as usize },
        6976usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_name_changed as *const _ as usize
        },
        6984usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_name_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_name_rowcomponent as *const _
                as usize
        },
        6992usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_name_rowcomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_name_setvalue as *const _ as usize
        },
        7000usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_name_setvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_name_textcolor as *const _ as usize
        },
        7008usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_name_textcolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_name_textstyle as *const _ as usize
        },
        7016usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_name_textstyle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_name_width as *const _ as usize
        },
        7024usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_name_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_nameinspector as *const _ as usize
        },
        7032usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nameinspector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_nativewindow as *const _ as usize
        },
        7040usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nativewindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_navkey as *const _ as usize },
        7048usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_navkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_new as *const _ as usize },
        7056usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_new)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_newcopy as *const _ as usize },
        7064usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_newcopy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_newdefault as *const _ as usize
        },
        7072usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_newdefault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_newex as *const _ as usize },
        7080usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_newex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_newfilebrowser as *const _ as usize
        },
        7088usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_newfilebrowser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_newfolder as *const _ as usize
        },
        7096usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_newfolder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_newlines as *const _ as usize
        },
        7104usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_newlines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_newobj as *const _ as usize },
        7112usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_newobj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_newobject as *const _ as usize
        },
        7120usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_newobject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_newobjects as *const _ as usize
        },
        7128usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_newobjects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_newpatcherview as *const _ as usize
        },
        7136usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_newpatcherview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_newpatchline as *const _ as usize
        },
        7144usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_newpatchline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_newquery as *const _ as usize
        },
        7152usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_newquery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_next as *const _ as usize },
        7160usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_nextline as *const _ as usize
        },
        7168usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nextline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_nextobject as *const _ as usize
        },
        7176usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nextobject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_nextrecord as *const _ as usize
        },
        7184usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nextrecord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_nextview as *const _ as usize
        },
        7192usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nextview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_nfilters as *const _ as usize
        },
        7200usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nfilters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_No as *const _ as usize },
        7208usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_No)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_noactivate as *const _ as usize
        },
        7216usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_noactivate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_nobox as *const _ as usize },
        7224usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nobox)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_noclipse as *const _ as usize
        },
        7232usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_noclipse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_noclose as *const _ as usize },
        7240usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_noclose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_noedit as *const _ as usize },
        7248usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_noedit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_noeval as *const _ as usize },
        7256usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_noeval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_nofloat as *const _ as usize },
        7264usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nofloat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_nofontpanel as *const _ as usize
        },
        7272usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nofontpanel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_nogrow as *const _ as usize },
        7280usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nogrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_nomad as *const _ as usize },
        7288usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nomad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_nomenu as *const _ as usize },
        7296usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nomenu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_nominimize as *const _ as usize
        },
        7304usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nominimize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_none as *const _ as usize },
        7312usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_none)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_nonomad as *const _ as usize },
        7320usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nonomad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_normalheight as *const _ as usize
        },
        7328usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_normalheight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_normalwidth as *const _ as usize
        },
        7336usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_normalwidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_noscroll as *const _ as usize
        },
        7344usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_noscroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_not as *const _ as usize },
        7352usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_not)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_notevalues as *const _ as usize
        },
        7360usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_notevalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_nothing as *const _ as usize },
        7368usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nothing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_notify as *const _ as usize },
        7376usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_notify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_notifyall as *const _ as usize
        },
        7384usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_notifyall)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_notifyall_delete as *const _
                as usize
        },
        7392usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_notifyall_delete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_notifyall_new as *const _ as usize
        },
        7400usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_notifyall_new)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_notitle as *const _ as usize },
        7408usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_notitle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_nozoom as *const _ as usize },
        7416usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nozoom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_nth as *const _ as usize },
        7424usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_number as *const _ as usize },
        7432usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_number_paint as *const _ as usize
        },
        7440usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_number_paint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_number_rowcomponent as *const _
                as usize
        },
        7448usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_number_rowcomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_number_setvalue as *const _ as usize
        },
        7456usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_number_setvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_numfields as *const _ as usize
        },
        7464usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_numfields)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_nummidpoints as *const _ as usize
        },
        7472usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_nummidpoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_numrecords as *const _ as usize
        },
        7480usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_numrecords)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_numresults as *const _ as usize
        },
        7488usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_numresults)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_numrowschanged as *const _ as usize
        },
        7496usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_numrowschanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_numtabs as *const _ as usize },
        7504usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_numtabs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_numviews as *const _ as usize
        },
        7512usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_numviews)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_numwindowviews as *const _ as usize
        },
        7520usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_numwindowviews)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_ob_sym as *const _ as usize },
        7528usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_ob_sym)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_obex_container as *const _ as usize
        },
        7536usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_obex_container)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_objargs as *const _ as usize },
        7544usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_objargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_object as *const _ as usize },
        7552usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_object_id as *const _ as usize
        },
        7560usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_object_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_objectcount as *const _ as usize
        },
        7568usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_objectcount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_objectfilename as *const _ as usize
        },
        7576usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_objectfilename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_objectlist as *const _ as usize
        },
        7584usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_objectlist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_objectpalette as *const _ as usize
        },
        7592usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_objectpalette)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_objectview_doubleclick as *const _
                as usize
        },
        7600usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_objectview_doubleclick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_objectview_selected as *const _
                as usize
        },
        7608usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_objectview_selected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_objptr2index as *const _ as usize
        },
        7616usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_objptr2index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_objtype as *const _ as usize },
        7624usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_objtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_obtrusiveerror as *const _ as usize
        },
        7632usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_obtrusiveerror)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_offset as *const _ as usize },
        7640usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_offset_rowcomponent as *const _
                as usize
        },
        7648usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_offset_rowcomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_offset_setvalue as *const _ as usize
        },
        7656usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_offset_setvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_offsetfrom as *const _ as usize
        },
        7664usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_offsetfrom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_offsetmidpoints as *const _ as usize
        },
        7672usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_offsetmidpoints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_okclose as *const _ as usize },
        7680usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_okclose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_oksize as *const _ as usize },
        7688usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_oksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_one as *const _ as usize },
        7696usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_one)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_onoff as *const _ as usize },
        7704usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_opaque as *const _ as usize },
        7712usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_opaque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_open as *const _ as usize },
        7720usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_open)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_openassoc as *const _ as usize
        },
        7728usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_openassoc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_openfile as *const _ as usize
        },
        7736usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_openfile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_openinpresentation as *const _
                as usize
        },
        7744usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_openinpresentation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_openquery as *const _ as usize
        },
        7752usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_openquery)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_openrect as *const _ as usize
        },
        7760usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_openrect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_openweb as *const _ as usize },
        7768usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_openweb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_optional as *const _ as usize
        },
        7776usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_optional)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_optionsdirty as *const _ as usize
        },
        7784usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_optionsdirty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_order as *const _ as usize },
        7792usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_order)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_order_by as *const _ as usize
        },
        7800usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_order_by)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_orderbefore as *const _ as usize
        },
        7808usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_orderbefore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_orderfront as *const _ as usize
        },
        7816usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_orderfront)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_orientation as *const _ as usize
        },
        7824usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_orientation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_outlet as *const _ as usize },
        7832usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_outlet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_outletnum as *const _ as usize
        },
        7840usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_outletnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_outline as *const _ as usize },
        7848usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_outline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_outmode as *const _ as usize },
        7856usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_outmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_output as *const _ as usize },
        7864usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_output)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_outputcount as *const _ as usize
        },
        7872usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_outputcount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_outputmatrix as *const _ as usize
        },
        7880usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_outputmatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_outputmode as *const _ as usize
        },
        7888usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_outputmode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_overdrive as *const _ as usize
        },
        7896usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_overdrive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_owner as *const _ as usize },
        7904usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_ownervis as *const _ as usize
        },
        7912usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_ownervis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_p as *const _ as usize },
        7920usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_paint as *const _ as usize },
        7928usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_paint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_paintsbackground as *const _
                as usize
        },
        7936usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_paintsbackground)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_palette_action as *const _ as usize
        },
        7944usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_palette_action)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_palette_caption as *const _ as usize
        },
        7952usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_palette_caption)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_palette_category as *const _
                as usize
        },
        7960usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_palette_category)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_palette_numerical_order as *const _
                as usize
        },
        7968usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_palette_numerical_order)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_palette_order as *const _ as usize
        },
        7976usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_palette_order)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_palette_protocount as *const _
                as usize
        },
        7984usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_palette_protocount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_palette_tab_action as *const _
                as usize
        },
        7992usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_palette_tab_action)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_parameter_enable as *const _
                as usize
        },
        8000usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_parameter_enable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_parent as *const _ as usize },
        8008usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_parentclass as *const _ as usize
        },
        8016usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_parentclass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_parentpatcher as *const _ as usize
        },
        8024usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_parentpatcher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_parse as *const _ as usize },
        8032usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_parse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_parsefile as *const _ as usize
        },
        8040usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_parsefile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_paste as *const _ as usize },
        8048usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_paste)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_pastefileintoobject as *const _
                as usize
        },
        8056usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pastefileintoobject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_pastefrom as *const _ as usize
        },
        8064usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pastefrom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_pastereplace as *const _ as usize
        },
        8072usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pastereplace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_patcher as *const _ as usize },
        8080usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patcher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patchercomponent as *const _
                as usize
        },
        8088usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patchercomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patchercontextmenu as *const _
                as usize
        },
        8096usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patchercontextmenu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patchereditor as *const _ as usize
        },
        8104usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patchereditor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patchername as *const _ as usize
        },
        8112usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patchername)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patchernotify as *const _ as usize
        },
        8120usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patchernotify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patcherview as *const _ as usize
        },
        8128usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patcherview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patcherview_instances as *const _
                as usize
        },
        8136usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patcherview_instances)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patcherview_invis as *const _
                as usize
        },
        8144usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patcherview_invis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patcherview_notify_locked
                as *const _ as usize
        },
        8152usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patcherview_notify_locked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patcherview_notify_presentation
                as *const _ as usize
        },
        8160usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patcherview_notify_presentation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patcherview_vis as *const _ as usize
        },
        8168usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patcherview_vis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patching_position as *const _
                as usize
        },
        8176usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patching_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patching_rect as *const _ as usize
        },
        8184usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patching_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patching_size as *const _ as usize
        },
        8192usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patching_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_patchline as *const _ as usize
        },
        8200usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_patchline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_path as *const _ as usize },
        8208usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_pattrstorage as *const _ as usize
        },
        8216usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pattrstorage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_pclose as *const _ as usize },
        8224usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pclose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_pending as *const _ as usize },
        8232usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_pic as *const _ as usize },
        8240usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_pictctrl as *const _ as usize
        },
        8248usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pictctrl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_plane as *const _ as usize },
        8256usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_plane)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_planecount as *const _ as usize
        },
        8264usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_planecount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_planelink as *const _ as usize
        },
        8272usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_planelink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_plugconfig as *const _ as usize
        },
        8280usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_plugconfig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_plus as *const _ as usize },
        8288usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_plus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_png as *const _ as usize },
        8296usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_png)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_pointer as *const _ as usize },
        8304usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_popupmenu as *const _ as usize
        },
        8312usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_popupmenu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_portenable as *const _ as usize
        },
        8320usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_portenable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_position as *const _ as usize
        },
        8328usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_postname as *const _ as usize
        },
        8336usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_postname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_pound_B as *const _ as usize },
        8344usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pound_B)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_pound_D as *const _ as usize },
        8352usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pound_D)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_pound_N as *const _ as usize },
        8360usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pound_N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_pound_P as *const _ as usize },
        8368usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pound_P)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_pound_X as *const _ as usize },
        8376usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pound_X)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_preferences as *const _ as usize
        },
        8384usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_preferences)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_preload as *const _ as usize },
        8392usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_preload)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_presentation as *const _ as usize
        },
        8400usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_presentation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_presentation_linecount as *const _
                as usize
        },
        8408usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_presentation_linecount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_presentation_position as *const _
                as usize
        },
        8416usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_presentation_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_presentation_rect as *const _
                as usize
        },
        8424usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_presentation_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_presentation_size as *const _
                as usize
        },
        8432usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_presentation_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_preset as *const _ as usize },
        8440usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_preset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_preset_data as *const _ as usize
        },
        8448usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_preset_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_preview as *const _ as usize },
        8456usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_preview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_preview_image as *const _ as usize
        },
        8464usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_preview_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_previewheight as *const _ as usize
        },
        8472usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_previewheight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_previewimagedata as *const _
                as usize
        },
        8480usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_previewimagedata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_prevobject as *const _ as usize
        },
        8488usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_prevobject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_print as *const _ as usize },
        8496usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_print)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_priority as *const _ as usize
        },
        8504usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_prototype as *const _ as usize
        },
        8512usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_prototype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_prototype_binbuf as *const _
                as usize
        },
        8520usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_prototype_binbuf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_prototypename as *const _ as usize
        },
        8528usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_prototypename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_psave as *const _ as usize },
        8536usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_psave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_pulsate as *const _ as usize },
        8544usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pulsate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_pupdate as *const _ as usize },
        8552usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_pupdate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_quantifier as *const _ as usize
        },
        8560usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_quantifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_quantifier_exists as *const _
                as usize
        },
        8568usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_quantifier_exists)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_quantifiers as *const _ as usize
        },
        8576usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_quantifiers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_quantize as *const _ as usize
        },
        8584usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_quantize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_queries as *const _ as usize },
        8592usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_queries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_query as *const _ as usize },
        8600usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_query)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_query_selected as *const _ as usize
        },
        8608usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_query_selected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_querycontroller as *const _ as usize
        },
        8616usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_querycontroller)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_queryid as *const _ as usize },
        8624usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_queryid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_querylist as *const _ as usize
        },
        8632usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_querylist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_queryname as *const _ as usize
        },
        8640usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_queryname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_querypreview as *const _ as usize
        },
        8648usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_querypreview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_querysearch as *const _ as usize
        },
        8656usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_querysearch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_quickmap as *const _ as usize
        },
        8664usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_quickmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_quit as *const _ as usize },
        8672usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_quit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_quitting as *const _ as usize
        },
        8680usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_quitting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_radial as *const _ as usize },
        8688usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_radial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_range as *const _ as usize },
        8696usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_rawfind as *const _ as usize },
        8704usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rawfind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_rawwindsave as *const _ as usize
        },
        8712usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rawwindsave)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_rawwindsaveas as *const _ as usize
        },
        8720usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rawwindsaveas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_read as *const _ as usize },
        8728usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_readonly as *const _ as usize
        },
        8736usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_readonly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_realclass as *const _ as usize
        },
        8744usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_realclass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_rebuilding as *const _ as usize
        },
        8752usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rebuilding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_recordbyindex as *const _ as usize
        },
        8760usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_recordbyindex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_recreate_invis as *const _ as usize
        },
        8768usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_recreate_invis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_recreate_vis as *const _ as usize
        },
        8776usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_recreate_vis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_rect as *const _ as usize },
        8784usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_rectangle as *const _ as usize
        },
        8792usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rectangle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_rectangular as *const _ as usize
        },
        8800usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rectangular)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_red as *const _ as usize },
        8808usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_red)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_redostack as *const _ as usize
        },
        8816usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_redostack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_redraw as *const _ as usize },
        8824usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_redraw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_redrawcontents as *const _ as usize
        },
        8832usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_redrawcontents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_reference as *const _ as usize
        },
        8840usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_reffile as *const _ as usize },
        8848usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_reffile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_refinequery as *const _ as usize
        },
        8856usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_refinequery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_refresh as *const _ as usize },
        8864usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_refresh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_register as *const _ as usize
        },
        8872usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_register)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_remove as *const _ as usize },
        8880usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_remove)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_removeattr as *const _ as usize
        },
        8888usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_removeattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_removeattr_enable as *const _
                as usize
        },
        8896usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_removeattr_enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_removeboxlayer as *const _ as usize
        },
        8904usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_removeboxlayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_removeclient as *const _ as usize
        },
        8912usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_removeclient)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_removefrompresentation as *const _
                as usize
        },
        8920usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_removefrompresentation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_removelines as *const _ as usize
        },
        8928usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_removelines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_removeobjects as *const _ as usize
        },
        8936usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_removeobjects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_removesegment as *const _ as usize
        },
        8944usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_removesegment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_removeslot as *const _ as usize
        },
        8952usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_removeslot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_removewiretap as *const _ as usize
        },
        8960usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_removewiretap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_rename as *const _ as usize },
        8968usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_renumberslot as *const _ as usize
        },
        8976usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_renumberslot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_replace as *const _ as usize },
        8984usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_replace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_replaced_args as *const _ as usize
        },
        8992usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_replaced_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_reschedule as *const _ as usize
        },
        9000usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_reschedule)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_reset as *const _ as usize },
        9008usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_resize as *const _ as usize },
        9016usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_resize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_resizeaction as *const _ as usize
        },
        9024usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_resizeaction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_resized as *const _ as usize },
        9032usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_resized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_resizelimits as *const _ as usize
        },
        9040usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_resizelimits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_resizenotify as *const _ as usize
        },
        9048usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_resizenotify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_resolve_name as *const _ as usize
        },
        9056usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_resolve_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_resolve_raw as *const _ as usize
        },
        9064usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_resolve_raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_resort as *const _ as usize },
        9072usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_resort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_resource as *const _ as usize
        },
        9080usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_resource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_respondtoclick as *const _ as usize
        },
        9088usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_respondtoclick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_restore as *const _ as usize },
        9096usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_restore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_restrict_dim as *const _ as usize
        },
        9104usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_restrict_dim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_restrict_planecount as *const _
                as usize
        },
        9112usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_restrict_planecount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_restrict_type as *const _ as usize
        },
        9120usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_restrict_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_result as *const _ as usize },
        9128usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_retain as *const _ as usize },
        9136usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_retain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_revealinfinder as *const _ as usize
        },
        9144usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_revealinfinder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_reverse as *const _ as usize },
        9152usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_reverse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_rgb as *const _ as usize },
        9160usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rgb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_rgba as *const _ as usize },
        9168usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rgba)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_rolename as *const _ as usize
        },
        9176usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rolename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_rotate as *const _ as usize },
        9184usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rotate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_rounded as *const _ as usize },
        9192usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rounded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_rowcolorchanged as *const _ as usize
        },
        9200usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rowcolorchanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_rowcomponent as *const _ as usize
        },
        9208usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rowcomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_rowenabled as *const _ as usize
        },
        9216usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rowenabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_rowhead as *const _ as usize },
        9224usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rowhead)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_rowheightchanged as *const _
                as usize
        },
        9232usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_rowheightchanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_safebang as *const _ as usize
        },
        9240usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_safebang)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_safeclear as *const _ as usize
        },
        9248usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_safeclear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_samples as *const _ as usize },
        9256usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_save as *const _ as usize },
        9264usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_save2 as *const _ as usize },
        9272usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_save2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_saveas as *const _ as usize },
        9280usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_saveas)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_saveboxprototype as *const _
                as usize
        },
        9288usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_saveboxprototype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_saved_object_attributes as *const _
                as usize
        },
        9296usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_saved_object_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_savefilepath as *const _ as usize
        },
        9304usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_savefilepath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_savelasttab as *const _ as usize
        },
        9312usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_savelasttab)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_savequery as *const _ as usize
        },
        9320usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_savequery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_saveto as *const _ as usize },
        9328usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_saveto)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_savewindow as *const _ as usize
        },
        9336usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_savewindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_savingdefault as *const _ as usize
        },
        9344usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_savingdefault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_scale as *const _ as usize },
        9352usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_script as *const _ as usize },
        9360usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_script)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_scrollanimatetime as *const _
                as usize
        },
        9368usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_scrollanimatetime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_scrolloffset as *const _ as usize
        },
        9376usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_scrolloffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_scrollorigin as *const _ as usize
        },
        9384usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_scrollorigin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_scrollposition as *const _ as usize
        },
        9392usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_scrollposition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_scrollselectedobjectsintoview
                as *const _ as usize
        },
        9400usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_scrollselectedobjectsintoview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_scrollto as *const _ as usize
        },
        9408usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_scrollto)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_scrollviewtoshow as *const _
                as usize
        },
        9416usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_scrollviewtoshow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_search as *const _ as usize },
        9424usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_search)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_searchterm as *const _ as usize
        },
        9432usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_searchterm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_searchtext as *const _ as usize
        },
        9440usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_searchtext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_select as *const _ as usize },
        9448usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_select)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_selectallonedit as *const _ as usize
        },
        9456usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_selectallonedit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_selectbox as *const _ as usize
        },
        9464usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_selectbox)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_selectcategory as *const _ as usize
        },
        9472usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_selectcategory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_selectcell as *const _ as usize
        },
        9480usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_selectcell)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_selectdropped as *const _ as usize
        },
        9488usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_selectdropped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_selected as *const _ as usize
        },
        9496usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_selected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_selectedboxes as *const _ as usize
        },
        9504usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_selectedboxes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_selectedlines as *const _ as usize
        },
        9512usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_selectedlines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_selectedrow as *const _ as usize
        },
        9520usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_selectedrow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_selectedrow_contextual as *const _
                as usize
        },
        9528usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_selectedrow_contextual)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_selfsave as *const _ as usize
        },
        9536usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_selfsave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_selmode as *const _ as usize },
        9544usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_selmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_send as *const _ as usize },
        9552usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_send)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sendbackward as *const _ as usize
        },
        9560usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sendbackward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_sendbox as *const _ as usize },
        9568usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sendbox)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sendboxmsg as *const _ as usize
        },
        9576usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sendboxmsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_senderclasssym as *const _ as usize
        },
        9584usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_senderclasssym)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sendtoback as *const _ as usize
        },
        9592usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sendtoback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_session_usage_count as *const _
                as usize
        },
        9600usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_session_usage_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_set as *const _ as usize },
        9608usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_setall as *const _ as usize },
        9616usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setall)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setassoc as *const _ as usize
        },
        9624usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setassoc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setatoms as *const _ as usize
        },
        9632usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setatoms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_setattr as *const _ as usize },
        9640usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setboxrect as *const _ as usize
        },
        9648usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setboxrect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setcellunits as *const _ as usize
        },
        9656usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setcellunits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setcellvalue as *const _ as usize
        },
        9664usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setcellvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setcontainedcomponent as *const _
                as usize
        },
        9672usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setcontainedcomponent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_setdata as *const _ as usize },
        9680usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setdefaults as *const _ as usize
        },
        9688usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setdefaults)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setdirty as *const _ as usize
        },
        9696usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setdirty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_seteditboxcaretposition as *const _
                as usize
        },
        9704usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_seteditboxcaretposition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_seteditboxhighlightedregion
                as *const _ as usize
        },
        9712usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_seteditboxhighlightedregion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_seteditview as *const _ as usize
        },
        9720usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_seteditview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setfilter as *const _ as usize
        },
        9728usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setfilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setflags as *const _ as usize
        },
        9736usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_setfont as *const _ as usize },
        9744usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setfont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setglobalcoords as *const _ as usize
        },
        9752usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setglobalcoords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_setinfo as *const _ as usize },
        9760usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setinfo_ex as *const _ as usize
        },
        9768usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setinfo_ex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setmethod as *const _ as usize
        },
        9776usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setmethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setmidpoint as *const _ as usize
        },
        9784usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setmidpoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setpatcherattr as *const _ as usize
        },
        9792usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setpatcherattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_setptr as *const _ as usize },
        9800usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_setrect as *const _ as usize },
        9808usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setrect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setspecialrow as *const _ as usize
        },
        9816usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setspecialrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_settext as *const _ as usize },
        9824usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_settext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setunitsym as *const _ as usize
        },
        9832usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setunitsym)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setvalue as *const _ as usize
        },
        9840usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setvalueof as *const _ as usize
        },
        9848usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setvalueof)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setvaluetext as *const _ as usize
        },
        9856usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setvaluetext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setwindowrect as *const _ as usize
        },
        9864usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setwindowrect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setwindowsize as *const _ as usize
        },
        9872usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setwindowsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_setzorder as *const _ as usize
        },
        9880usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_setzorder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_shortcut as *const _ as usize
        },
        9888usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_shortcut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_show as *const _ as usize },
        9896usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_show)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_showcaption as *const _ as usize
        },
        9904usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_showcaption)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_showdoc as *const _ as usize },
        9912usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_showdoc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_showfind as *const _ as usize
        },
        9920usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_showfind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_showpreview as *const _ as usize
        },
        9928usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_showpreview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_showrecent as *const _ as usize
        },
        9936usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_showrecent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_showrow as *const _ as usize },
        9944usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_showrow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_showsaveable as *const _ as usize
        },
        9952usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_showsaveable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_showtarget as *const _ as usize
        },
        9960usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_showtarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_shuffle as *const _ as usize },
        9968usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_shuffle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_signal as *const _ as usize },
        9976usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_signal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sinceyesterday as *const _ as usize
        },
        9984usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sinceyesterday)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_singleinspector as *const _ as usize
        },
        9992usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_singleinspector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_size as *const _ as usize },
        10000usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sizeboxes as *const _ as usize
        },
        10008usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sizeboxes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_slot_definition as *const _ as usize
        },
        10016usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_slot_definition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_slot_modified as *const _ as usize
        },
        10024usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_slot_modified)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_slots as *const _ as usize },
        10032usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_smpte as *const _ as usize },
        10040usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_smpte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_snaptogrid as *const _ as usize
        },
        10048usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_snaptogrid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_sort as *const _ as usize },
        10056usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sortablechanged as *const _ as usize
        },
        10064usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sortablechanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sortcolumn as *const _ as usize
        },
        10072usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sortcolumn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sortdata as *const _ as usize
        },
        10080usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sortdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_sorted as *const _ as usize },
        10088usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sorted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sorted_by_column as *const _
                as usize
        },
        10096usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sorted_by_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_source as *const _ as usize },
        10104usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_spacing as *const _ as usize },
        10112usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_spacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_special as *const _ as usize },
        10120usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_special)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_specialclick as *const _ as usize
        },
        10128usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_specialclick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_specialcount as *const _ as usize
        },
        10136usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_specialcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_sql as *const _ as usize },
        10144usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sql)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_sql2 as *const _ as usize },
        10152usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sql2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_sqlite as *const _ as usize },
        10160usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sqlite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sqlite_result as *const _ as usize
        },
        10168usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sqlite_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sqlstring as *const _ as usize
        },
        10176usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sqlstring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_sr as *const _ as usize },
        10184usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_start as *const _ as usize },
        10192usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_startdrag as *const _ as usize
        },
        10200usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_startdrag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_startmoveboxes as *const _ as usize
        },
        10208usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_startmoveboxes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_startpoint as *const _ as usize
        },
        10216usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_startpoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_startprobe as *const _ as usize
        },
        10224usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_startprobe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_starttransaction as *const _
                as usize
        },
        10232usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_starttransaction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_startwindow as *const _ as usize
        },
        10240usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_startwindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_state as *const _ as usize },
        10248usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sticky_attr as *const _ as usize
        },
        10256usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sticky_attr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sticky_method as *const _ as usize
        },
        10264usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sticky_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_stop as *const _ as usize },
        10272usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_store as *const _ as usize },
        10280usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_store)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_straighten as *const _ as usize
        },
        10288usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_straighten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_straightend as *const _ as usize
        },
        10296usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_straightend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_straightstart as *const _ as usize
        },
        10304usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_straightstart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_straightthresh as *const _ as usize
        },
        10312usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_straightthresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_string as *const _ as usize },
        10320usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_style as *const _ as usize },
        10328usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_sub as *const _ as usize },
        10336usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sub)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_subpatcher as *const _ as usize
        },
        10344usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_subpatcher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_surfacebuffer as *const _ as usize
        },
        10352usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_surfacebuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_svg as *const _ as usize },
        10360usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_svg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_swap as *const _ as usize },
        10368usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_swap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_swatches as *const _ as usize
        },
        10376usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_swatches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_symbol as *const _ as usize },
        10384usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_symbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_sysqelem as *const _ as usize
        },
        10392usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_sysqelem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_t as *const _ as usize },
        10400usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_tab_bgcolor as *const _ as usize
        },
        10408usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tab_bgcolor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_table as *const _ as usize },
        10416usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_tabledata as *const _ as usize
        },
        10424usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tabledata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_tag as *const _ as usize },
        10432usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_tags as *const _ as usize },
        10440usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_tapcontroller_show as *const _
                as usize
        },
        10448usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tapcontroller_show)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_tapwindow as *const _ as usize
        },
        10456usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tapwindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_target as *const _ as usize },
        10464usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_template as *const _ as usize
        },
        10472usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_template)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_tempo as *const _ as usize },
        10480usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tempo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_text as *const _ as usize },
        10488usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_text_commaseparated as *const _
                as usize
        },
        10496usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_text_commaseparated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_text_large as *const _ as usize
        },
        10504usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_text_large)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_text_onesymbol as *const _ as usize
        },
        10512usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_text_onesymbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_textchanged as *const _ as usize
        },
        10520usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_textchanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_textcolor as *const _ as usize
        },
        10528usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_textcolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_textfield as *const _ as usize
        },
        10536usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_textfield)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_textfile as *const _ as usize
        },
        10544usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_textfile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_textmargins as *const _ as usize
        },
        10552usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_textmargins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_textstyle as *const _ as usize
        },
        10560usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_textstyle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_thismonth as *const _ as usize
        },
        10568usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_thismonth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_thisweek as *const _ as usize
        },
        10576usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_thisweek)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_threadpriority as *const _ as usize
        },
        10584usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_threadpriority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_threadsafe as *const _ as usize
        },
        10592usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_threadsafe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_three as *const _ as usize },
        10600usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_three)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_ticks as *const _ as usize },
        10608usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_ticks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_time as *const _ as usize },
        10616usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_timeobj as *const _ as usize },
        10624usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_timeobj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_timesigchanged as *const _ as usize
        },
        10632usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_timesigchanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_timeupdate as *const _ as usize
        },
        10640usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_timeupdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_tinge as *const _ as usize },
        10648usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tinge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_title as *const _ as usize },
        10656usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_titleassoc as *const _ as usize
        },
        10664usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_titleassoc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_tobinbuf as *const _ as usize
        },
        10672usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tobinbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_toc as *const _ as usize },
        10680usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_toc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_today as *const _ as usize },
        10688usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_today)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_todictionary as *const _ as usize
        },
        10696usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_todictionary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_togworld as *const _ as usize
        },
        10704usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_togworld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_tool as *const _ as usize },
        10712usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_tool_paint as *const _ as usize
        },
        10720usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tool_paint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_tool_rowcomponent as *const _
                as usize
        },
        10728usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tool_rowcomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_tool_setvalue as *const _ as usize
        },
        10736usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tool_setvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_tool_sort as *const _ as usize
        },
        10744usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tool_sort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_toolbarheight as *const _ as usize
        },
        10752usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_toolbarheight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_toolbarid as *const _ as usize
        },
        10760usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_toolbarid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_toolbars as *const _ as usize
        },
        10768usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_toolbars)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_toolbarvisible as *const _ as usize
        },
        10776usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_toolbarvisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_top_inset as *const _ as usize
        },
        10784usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_top_inset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_topmost as *const _ as usize },
        10792usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_topmost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_toppatcher as *const _ as usize
        },
        10800usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_toppatcher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_topredoname as *const _ as usize
        },
        10808usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_topredoname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_topundoname as *const _ as usize
        },
        10816usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_topundoname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_trackaction as *const _ as usize
        },
        10824usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_trackaction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_transparent as *const _ as usize
        },
        10832usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_transparent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_transport as *const _ as usize
        },
        10840usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_transport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_traverse as *const _ as usize
        },
        10848usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_traverse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_triangle as *const _ as usize
        },
        10856usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_triangle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_tutorial as *const _ as usize
        },
        10864usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_tutorial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_two as *const _ as usize },
        10872usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_two)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_twobytecomment as *const _ as usize
        },
        10880usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_twobytecomment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_type as *const _ as usize },
        10888usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_typed_usage_count as *const _
                as usize
        },
        10896usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_typed_usage_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_typedwrapper as *const _ as usize
        },
        10904usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_typedwrapper)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_typelink as *const _ as usize
        },
        10912usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_typelink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_types as *const _ as usize },
        10920usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_types)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_underline as *const _ as usize
        },
        10928usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_underline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_understands as *const _ as usize
        },
        10936usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_understands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_undo as *const _ as usize },
        10944usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_undo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_undostack as *const _ as usize
        },
        10952usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_undostack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_unimbed as *const _ as usize },
        10960usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_unimbed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_uninitialized as *const _ as usize
        },
        10968usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_uninitialized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_unique as *const _ as usize },
        10976usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_unique)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_unit as *const _ as usize },
        10984usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_units as *const _ as usize },
        10992usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_unlocked_iocolor as *const _
                as usize
        },
        11000usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_unlocked_iocolor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_unlockedinteraction as *const _
                as usize
        },
        11008usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_unlockedinteraction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_unset as *const _ as usize },
        11016usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_unset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_up as *const _ as usize },
        11024usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_update as *const _ as usize },
        11032usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_update_metadata as *const _ as usize
        },
        11040usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_update_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_updatecommand as *const _ as usize
        },
        11048usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_updatecommand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_updatecontent as *const _ as usize
        },
        11056usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_updatecontent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_updatefind as *const _ as usize
        },
        11064usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_updatefind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_updatelookandfeel as *const _
                as usize
        },
        11072usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_updatelookandfeel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_updatemenu as *const _ as usize
        },
        11080usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_updatemenu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_updateprototypes as *const _
                as usize
        },
        11088usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_updateprototypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_updatequery as *const _ as usize
        },
        11096usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_updatequery)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_updatequerydict as *const _ as usize
        },
        11104usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_updatequerydict)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_updaterect as *const _ as usize
        },
        11112usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_updaterect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_url as *const _ as usize },
        11120usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_us_ascii as *const _ as usize
        },
        11128usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_us_ascii)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_usage_count as *const _ as usize
        },
        11136usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_usage_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_usedslotlist as *const _ as usize
        },
        11144usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_usedslotlist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_useellipsis as *const _ as usize
        },
        11152usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_useellipsis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_useimagebuffer as *const _ as usize
        },
        11160usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_useimagebuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_usemax as *const _ as usize },
        11168usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_usemax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_usemin as *const _ as usize },
        11176usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_usemin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_user as *const _ as usize },
        11184usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_usercanget as *const _ as usize
        },
        11192usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_usercanget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_usercanset as *const _ as usize
        },
        11200usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_usercanset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_utf_16 as *const _ as usize },
        11208usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_utf_16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_utf_16be as *const _ as usize
        },
        11216usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_utf_16be)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_utf_16le as *const _ as usize
        },
        11224usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_utf_16le)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_utf_8 as *const _ as usize },
        11232usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_utf_8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_val as *const _ as usize },
        11240usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_value as *const _ as usize },
        11248usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_value_endchange as *const _ as usize
        },
        11256usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_value_endchange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_value_rowcomponent as *const _
                as usize
        },
        11264usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_value_rowcomponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_valuebyindex as *const _ as usize
        },
        11272usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_valuebyindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_varname as *const _ as usize },
        11280usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_varname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_varname_set as *const _ as usize
        },
        11288usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_varname_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_varname_unset as *const _ as usize
        },
        11296usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_varname_unset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_version as *const _ as usize },
        11304usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_videofile as *const _ as usize
        },
        11312usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_videofile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_views as *const _ as usize },
        11320usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_views)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_viewspan as *const _ as usize
        },
        11328usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_viewspan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_vignette as *const _ as usize
        },
        11336usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_vignette)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_vis as *const _ as usize },
        11344usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_vis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_visibilitychanged as *const _
                as usize
        },
        11352usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_visibilitychanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_visible as *const _ as usize },
        11360usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_visible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_visiblecanvasrect as *const _
                as usize
        },
        11368usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_visiblecanvasrect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_vol as *const _ as usize },
        11376usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_vol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_vpicture as *const _ as usize
        },
        11384usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_vpicture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_vpreset as *const _ as usize },
        11392usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_vpreset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_wantfree as *const _ as usize
        },
        11400usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_wantfree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_wantsreturn as *const _ as usize
        },
        11408usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_wantsreturn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_wantstab as *const _ as usize
        },
        11416usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_wantstab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_watch as *const _ as usize },
        11424usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_watch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_watchpoint_flags as *const _
                as usize
        },
        11432usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_watchpoint_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_watchpoint_id as *const _ as usize
        },
        11440usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_watchpoint_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_wclose as *const _ as usize },
        11448usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_wclose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_webpage as *const _ as usize },
        11456usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_webpage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_weeks as *const _ as usize },
        11464usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_weeks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_wind as *const _ as usize },
        11472usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_wind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_window as *const _ as usize },
        11480usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_windowbounds as *const _ as usize
        },
        11488usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_windowbounds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_windowrect as *const _ as usize
        },
        11496usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_windowrect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_windsave as *const _ as usize
        },
        11504usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_windsave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_wiretap as *const _ as usize },
        11512usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_wiretap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_withinlast as *const _ as usize
        },
        11520usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_withinlast)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_wobjectname as *const _ as usize
        },
        11528usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_wobjectname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_wordwrap as *const _ as usize
        },
        11536usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_wordwrap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_workspace as *const _ as usize
        },
        11544usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_workspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_write as *const _ as usize },
        11552usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_writedictionary as *const _ as usize
        },
        11560usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_writedictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_xmlfile as *const _ as usize },
        11568usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_xmlfile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_years as *const _ as usize },
        11576usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_years)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_zero as *const _ as usize },
        11584usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_zero)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_zoom as *const _ as usize },
        11592usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_zoom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_zoombox as *const _ as usize },
        11600usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_zoombox)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_zoomfactor as *const _ as usize
        },
        11608usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_zoomfactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_zorder as *const _ as usize },
        11616usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_zorder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_common_symbols_table>())).s_zzz as *const _ as usize },
        11624usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_zzz)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_common_symbols_table>())).s_Sans_Serif as *const _ as usize
        },
        11632usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_symbols_table),
            "::",
            stringify!(s_Sans_Serif)
        )
    );
}
pub type t_common_symbols_table = _common_symbols_table;
extern "C" {
    pub fn common_symbols_gettable() -> *mut t_common_symbols_table;
}
extern "C" {
    #[doc = "\tCopy the contents of one string to another, in a manner safer than the standard strcpy() or strncpy()."]
    #[doc = "This is the prefered function to use for this operation in Max."]
    #[doc = "@ingroup misc"]
    #[doc = "@param\tdst\t\tThe destination string (already allocated) for the copy."]
    #[doc = "@param\tsrc\t\tThe source string that will be copied."]
    #[doc = "@param\tsize\tThe number of chars allocated to the dst string."]
    pub fn strncpy_zero(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tConcatenate the contents of one string onto the end of another,"]
    #[doc = "in a manner safer than the standard strcat() or strncat()."]
    #[doc = "This is the prefered function to use for this operation in Max."]
    #[doc = "@ingroup misc"]
    #[doc = "@param\tdst\t\tThe destination string onto whose end the src string will be appended."]
    #[doc = "@param\tsrc\t\tThe source string that will be copied."]
    #[doc = "@param\tsize\tThe number of chars allocated to the dst string."]
    pub fn strncat_zero(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tCopy the contents of a string together with value substitutions,"]
    #[doc = "in a manner safer than the standard sprintf() or snprintf()."]
    #[doc = "This is the prefered function to use for this operation in Max."]
    #[doc = "@ingroup misc"]
    #[doc = "@param\tbuffer\tThe destination string (already allocated) for the copy."]
    #[doc = "@param\tcount\tThe number of chars allocated to the buffer string."]
    #[doc = "@param\tformat\tThe source string that will be copied, which may include sprintf() formatting codes for substitutions."]
    #[doc = "@param\t...\t\tAn array of arguments to be substituted into the format string."]
    pub fn snprintf_zero(
        buffer: *mut ::std::os::raw::c_char,
        count: size_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctopcpy(p1: *mut ::std::os::raw::c_uchar, p2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn ptoccpy(p1: *mut ::std::os::raw::c_char, p2: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn pstrcpy(p2: *mut ::std::os::raw::c_uchar, p1: *mut ::std::os::raw::c_uchar);
}
pub mod e_max_attrflags {
    #[doc = " Attribute flags"]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@remark \tTo create a readonly attribute, for example,"]
    #[doc = "you should pass ATTR_SET_OPAQUE or ATTR_SET_OPAQUE_USER as a flag when you create your attribute."]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< No flags"]
    pub const ATTR_FLAGS_NONE: Type = 0;
    #[doc = "< The attribute cannot be queried by either max message when used inside of a CLASS_BOX object, nor from C code."]
    pub const ATTR_GET_OPAQUE: Type = 1;
    #[doc = "< The attribute cannot be set by either max message when used inside of a CLASS_BOX object, nor from C code."]
    pub const ATTR_SET_OPAQUE: Type = 2;
    #[doc = "< The attribute cannot be queried by max message when used inside of a CLASS_BOX object, but <em>can</em> be queried from C code."]
    pub const ATTR_GET_OPAQUE_USER: Type = 256;
    #[doc = "< The attribute cannot be set by max message when used inside of a CLASS_BOX object, but <em>can</em> be set from C code."]
    pub const ATTR_SET_OPAQUE_USER: Type = 512;
    pub const ATTR_GET_DEFER: Type = 65536;
    pub const ATTR_GET_USURP: Type = 131072;
    pub const ATTR_GET_DEFER_LOW: Type = 262144;
    pub const ATTR_GET_USURP_LOW: Type = 524288;
    pub const ATTR_SET_DEFER: Type = 16777216;
    pub const ATTR_SET_USURP: Type = 33554432;
    pub const ATTR_SET_DEFER_LOW: Type = 67108864;
    pub const ATTR_SET_USURP_LOW: Type = 134217728;
    pub const ATTR_IS_JBOXATTR: Type = 268435456;
    pub const ATTR_DIRTY: Type = 536870912;
}
pub mod e_max_datastore_flags {
    #[doc = " Flags used in linklist and hashtab objects"]
    #[doc = "@ingroup datastore"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< free using object_free()"]
    pub const OBJ_FLAG_OBJ: Type = 0;
    #[doc = "< don't free"]
    pub const OBJ_FLAG_REF: Type = 1;
    #[doc = "< don't free data or call method"]
    pub const OBJ_FLAG_DATA: Type = 2;
    #[doc = "< don't call method, and when freeing use sysmem_freeptr() instead of freeobject"]
    pub const OBJ_FLAG_MEMORY: Type = 4;
    #[doc = "< don't notify when modified"]
    pub const OBJ_FLAG_SILENT: Type = 256;
    #[doc = "< obexprototype entry will be inherited by subpatchers and abstractions"]
    pub const OBJ_FLAG_INHERITABLE: Type = 512;
    #[doc = "< used by linklist to signal when is inside iteration"]
    pub const OBJ_FLAG_ITERATING: Type = 4096;
    #[doc = "< object should be cloned when added to data structure (i.e. dictionary)"]
    pub const OBJ_FLAG_CLONE: Type = 8192;
    #[doc = "< context-dependent flag, used internally for hashtable code"]
    pub const OBJ_FLAG_DANGER: Type = 536870912;
    #[doc = "< context-dependent flag, used internally for linklist debug code"]
    pub const OBJ_FLAG_DEBUG: Type = 1073741824;
}
extern "C" {
    #[doc = "A method that always returns true."]
    #[doc = "@ingroup misc"]
    pub fn method_true(x: *mut ::std::os::raw::c_void) -> t_atom_long;
}
extern "C" {
    #[doc = "A method that always returns false."]
    #[doc = "@ingroup misc"]
    pub fn method_false(x: *mut ::std::os::raw::c_void) -> t_atom_long;
}
extern "C" {
    #[doc = "Initializes a class by informing Max of its name, instance creation and free functions, size and argument types."]
    #[doc = "Developers wishing to use obex class features (attributes, etc.) <em>must</em> use class_new()"]
    #[doc = "instead of the traditional setup() function."]
    #[doc = ""]
    #[doc = "@ingroup class"]
    #[doc = ""]
    #[doc = "@param \tname\tThe class's name, as a C-string"]
    #[doc = "@param \tmnew\tThe instance creation function"]
    #[doc = "@param \tmfree\tThe instance free function"]
    #[doc = "@param \tsize\tThe size of the object's data structure in bytes."]
    #[doc = "Usually you use the C sizeof operator here."]
    #[doc = "@param \tmmenu\tObsolete - pass NULL."]
    #[doc = "In Max 4 this was a function pointer for UI objects called when the user created a new object of the"]
    #[doc = "class from the Patch window's palette."]
    #[doc = "@param \ttype\tA standard Max <em>type list</em> as explained in Chapter 3"]
    #[doc = "of the Writing Externals in Max document (in the Max SDK)."]
    #[doc = "The final argument of the type list should be a 0."]
    #[doc = "<em>Generally, obex objects have a single type argument</em>,"]
    #[doc = "#A_GIMME, followed by a 0."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the class pointer for the new object class."]
    #[doc = "<em>This pointer is used by numerous other functions and should be"]
    #[doc = "stored in a global or static variable.</em>"]
    pub fn class_new(
        name: *const ::std::os::raw::c_char,
        mnew: method,
        mfree: method,
        size: ::std::os::raw::c_long,
        mmenu: method,
        type_: ::std::os::raw::c_short,
        ...
    ) -> *mut t_class;
}
extern "C" {
    #[doc = "Frees a previously defined object class. <em>This function is not typically used by external developers.</em>"]
    #[doc = ""]
    #[doc = "@ingroup class"]
    #[doc = "@param \tc\t\tThe class pointer"]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn class_free(c: *mut t_class) -> t_max_err;
}
extern "C" {
    #[doc = "Registers a previously defined object class. This function is required, and should be called at the end of <tt>main()</tt>."]
    #[doc = ""]
    #[doc = "@ingroup class"]
    #[doc = ""]
    #[doc = "@param \tname_space\tThe desired class's name space. Typically, either the"]
    #[doc = "constant #CLASS_BOX, for obex classes which can"]
    #[doc = "instantiate inside of a Max patcher (e.g. boxes, UI objects,"]
    #[doc = "etc.), or the constant #CLASS_NOBOX, for classes"]
    #[doc = "which will only be used internally. Developers can define"]
    #[doc = "their own name spaces as well, but this functionality is"]
    #[doc = "currently undocumented."]
    #[doc = "@param \tc\t\t\tThe class pointer"]
    #[doc = ""]
    #[doc = "@return \t\t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn class_register(name_space: *mut t_symbol, c: *mut t_class) -> t_max_err;
}
extern "C" {
    #[doc = "Registers an alias for a previously defined object class."]
    #[doc = ""]
    #[doc = "@ingroup class"]
    #[doc = "@param \tc\t\t\tThe class pointer"]
    #[doc = "@param\taliasname\tA symbol who's name will become an alias for the given class"]
    #[doc = ""]
    #[doc = "@return \t\t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn class_alias(c: *mut t_class, aliasname: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = " Duplicates a previously registered object class, and registers a copy of this class."]
    #[doc = ""]
    #[doc = " @ingroup classmod"]
    #[doc = ""]
    #[doc = " @param \tsrc_name_space\tThe source class's name space."]
    #[doc = " @param \tsrc_classname\tThe source class's class name."]
    #[doc = " @param \tdst_name_space\tThe copied class's name space."]
    #[doc = " @param \tdst_classname\tThe copied class's class name."]
    #[doc = ""]
    #[doc = " @return \tThis function returns the error code <tt>MAX_ERR_NONE</tt> if successful,"]
    #[doc = " \t\t\tor one of the other error codes defined in \"ext_obex.h\" if unsuccessful."]
    #[doc = ""]
    pub fn class_copy(
        src_name_space: *mut t_symbol,
        src_classname: *mut t_symbol,
        dst_name_space: *mut t_symbol,
        dst_classname: *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Adds a method to a previously defined object class."]
    #[doc = ""]
    #[doc = "@ingroup class"]
    #[doc = ""]
    #[doc = "@param \tc\t\tThe class pointer"]
    #[doc = "@param \tm\t\tFunction to be called when the method is invoked"]
    #[doc = "@param \tname\tC-string defining the message (message selector)"]
    #[doc = "@param \t...\t\tOne or more integers specifying the arguments to the message,"]
    #[doc = "in the standard Max type list format (see Chapter 3 of the"]
    #[doc = "Writing Externals in Max document for more information)."]
    #[doc = ""]
    #[doc = "@return\t\t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tThe class_addmethod() function works essentially like the"]
    #[doc = "traditional addmess() function, adding the function pointed to"]
    #[doc = "by <tt>m</tt>, to respond to the message string <tt>name</tt> in the"]
    #[doc = "leftmost inlet of the object."]
    pub fn class_addmethod(
        c: *mut t_class,
        m: method,
        name: *const ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Adds an attribute to a previously defined object class."]
    #[doc = ""]
    #[doc = "@ingroup class"]
    #[doc = ""]
    #[doc = "@param \tc\t\tThe class pointer"]
    #[doc = "@param \tattr\tThe attribute to add. The attribute will be a pointer returned"]
    #[doc = "by attribute_new(), attr_offset_new() or"]
    #[doc = "attr_offset_array_new()."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn class_addattr(c: *mut t_class, attr: *mut t_object) -> t_max_err;
}
extern "C" {
    pub fn class_addadornment(c: *mut t_class, o: *mut t_object) -> t_max_err;
}
extern "C" {
    pub fn class_adornment_get(
        c: *mut t_class,
        classname: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Retrieves the name of a class, given the class's pointer."]
    #[doc = ""]
    #[doc = "@ingroup class"]
    #[doc = "@param \tc\t\tThe class pointer"]
    #[doc = "@return \t\tIf successful, this function returns the name of the class as a t_symbol *."]
    pub fn class_nameget(c: *mut t_class) -> *mut t_symbol;
}
extern "C" {
    #[doc = "Finds the class pointer for a class, given the class's namespace and name."]
    #[doc = ""]
    #[doc = "@ingroup class"]
    #[doc = ""]
    #[doc = "@param \tname_space\tThe desired class's name space. Typically, either the"]
    #[doc = "constant #CLASS_BOX, for obex classes which can"]
    #[doc = "instantiate inside of a Max patcher (e.g. boxes, UI objects,"]
    #[doc = "etc.), or the constant #CLASS_NOBOX, for classes"]
    #[doc = "which will only be used internally. Developers can define"]
    #[doc = "their own name spaces as well, but this functionality is"]
    #[doc = "currently undocumented."]
    #[doc = "@param \tclassname\tThe name of the class to be looked up"]
    #[doc = ""]
    #[doc = "@return \t\t\tIf successful, this function returns the class's data pointer. Otherwise, it returns NULL."]
    pub fn class_findbyname(name_space: *mut t_symbol, classname: *mut t_symbol) -> *mut t_class;
}
extern "C" {
    #[doc = "Finds the class pointer for a class, given the class's namespace and name."]
    #[doc = ""]
    #[doc = "@ingroup class"]
    #[doc = ""]
    #[doc = "@param \tname_space\tThe desired class's name space. Typically, either the"]
    #[doc = "constant #CLASS_BOX, for obex classes which can"]
    #[doc = "instantiate inside of a Max patcher (e.g. boxes, UI objects,"]
    #[doc = "etc.), or the constant #CLASS_NOBOX, for classes"]
    #[doc = "which will only be used internally. Developers can define"]
    #[doc = "their own name spaces as well, but this functionality is"]
    #[doc = "currently undocumented."]
    #[doc = "@param \tclassname\tThe name of the class to be looked up (case free)"]
    #[doc = ""]
    #[doc = "@return \t\t\tIf successful, this function returns the class's data pointer. Otherwise, it returns NULL."]
    pub fn class_findbyname_casefree(
        name_space: *mut t_symbol,
        classname: *mut t_symbol,
    ) -> *mut t_class;
}
extern "C" {
    #[doc = "Wraps user gettable attributes with a method that gets the values and sends out dumpout outlet."]
    #[doc = ""]
    #[doc = "@ingroup class"]
    #[doc = "@param \tc\t\tThe class pointer"]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn class_dumpout_wrap(c: *mut t_class) -> t_max_err;
}
extern "C" {
    pub fn class_getifloaded(name_space: *mut t_symbol, classname: *mut t_symbol) -> *mut t_class;
}
extern "C" {
    pub fn class_getifloaded_casefree(
        name_space: *mut t_symbol,
        classname: *mut t_symbol,
    ) -> *mut t_class;
}
extern "C" {
    #[doc = "Determines if a particular object is an instance of a given class."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe object to test"]
    #[doc = "@param \tname\tThe name of the class to test this object against"]
    #[doc = "@return \t\tThis function returns 1 if the object is an instance of the named class. Otherwise, 0 is returned."]
    #[doc = "@remark \t\tFor instance, to determine whether an unknown object pointer is a pointer to a print object, one would call:"]
    #[doc = ""]
    #[doc = "@code"]
    #[doc = "long isprint = object_classname_compare(x, gensym(\"print\"));"]
    #[doc = "@endcode"]
    pub fn object_classname_compare(
        x: *mut ::std::os::raw::c_void,
        name: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn reg_object_namespace_lookup(name_space: *mut t_symbol) -> *mut t_hashtab;
}
extern "C" {
    pub fn class_method(x: *mut t_class, methodname: *mut t_symbol) -> method;
}
extern "C" {
    pub fn class_mess(x: *mut t_class, methodname: *mut t_symbol) -> *mut t_messlist;
}
extern "C" {
    pub fn object_mess(x: *mut t_object, methodname: *mut t_symbol) -> *mut t_messlist;
}
extern "C" {
    pub fn class_attr_method(
        x: *mut t_class,
        methodname: *mut t_symbol,
        attr: *mut *mut ::std::os::raw::c_void,
        get: *mut ::std::os::raw::c_long,
    ) -> method;
}
extern "C" {
    pub fn class_attr_get(x: *mut t_class, attrname: *mut t_symbol) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn class_extra_store(x: *mut t_class, s: *mut t_symbol, o: *mut t_object) -> t_max_err;
}
extern "C" {
    pub fn class_extra_storeflags(
        x: *mut t_class,
        s: *mut t_symbol,
        o: *mut t_object,
        flags: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_extra_lookup(x: *mut t_class, s: *mut t_symbol) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn class_addtypedwrapper(
        x: *mut t_class,
        m: method,
        name: *mut ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    pub fn class_typedwrapper_get(x: *mut t_class, s: *mut t_symbol) -> *mut t_messlist;
}
extern "C" {
    pub fn object_typedwrapper_get(x: *mut t_object, s: *mut t_symbol) -> *mut t_messlist;
}
extern "C" {
    pub fn class_namespace_fromsym(name_space: *mut t_symbol) -> *mut t_hashtab;
}
extern "C" {
    pub fn class_namespace_getclassnames(
        name_space: *mut t_symbol,
        kc: *mut ::std::os::raw::c_long,
        kv: *mut *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_setpath(x: *mut t_class, vol: ::std::os::raw::c_short) -> t_max_err;
}
extern "C" {
    pub fn class_getpath(x: *mut t_class) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Allocates the memory for an instance of an object class and initialize its object header."]
    #[doc = "It is used like the traditional function newobject, inside of an object's <tt>new</tt> method, but its use is required with obex-class objects."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = "@param \tc\t\tThe class pointer, returned by class_new()"]
    #[doc = "@return \t\tThis function returns a new instance of an object class if successful, or NULL if unsuccessful."]
    pub fn object_alloc(c: *mut t_class) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Allocates the memory for an instance of an object class and initialize its object header <em>internal to Max</em>."]
    #[doc = "It is used similarly to the traditional function newinstance(), but its use is required with obex-class objects."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tname_space\tThe desired object's name space. Typically, either the"]
    #[doc = "constant #CLASS_BOX, for obex classes which can"]
    #[doc = "instantiate inside of a Max patcher (e.g. boxes, UI objects,"]
    #[doc = "etc.), or the constant #CLASS_NOBOX, for classes"]
    #[doc = "which will only be used internally. Developers can define"]
    #[doc = "their own name spaces as well, but this functionality is"]
    #[doc = "currently undocumented."]
    #[doc = "@param \tclassname\tThe name of the class of the object to be created"]
    #[doc = "@param \t...\t\t\tAny arguments expected by the object class being instantiated"]
    #[doc = ""]
    #[doc = "@return \t\t\tThis function returns a new instance of the object class if successful, or NULL if unsuccessful."]
    pub fn object_new(
        name_space: *mut t_symbol,
        classname: *mut t_symbol,
        ...
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_new_imp(
        p1: *mut ::std::os::raw::c_void,
        p2: *mut ::std::os::raw::c_void,
        p3: *mut ::std::os::raw::c_void,
        p4: *mut ::std::os::raw::c_void,
        p5: *mut ::std::os::raw::c_void,
        p6: *mut ::std::os::raw::c_void,
        p7: *mut ::std::os::raw::c_void,
        p8: *mut ::std::os::raw::c_void,
        p9: *mut ::std::os::raw::c_void,
        p10: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Allocates the memory for an instance of an object class and initialize its object header <em>internal to Max</em>."]
    #[doc = "It is used similarly to the traditional function newinstance(), but its use is required with obex-class objects."]
    #[doc = "The object_new_typed() function differs from object_new() by its use of an atom list for object arguments—in this way,"]
    #[doc = "it more resembles the effect of typing something into an object box from the Max interface."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tname_space\tThe desired object's name space. Typically, either the"]
    #[doc = "constant #CLASS_BOX, for obex classes which can"]
    #[doc = "instantiate inside of a Max patcher (e.g. boxes, UI objects,"]
    #[doc = "etc.), or the constant #CLASS_NOBOX, for classes"]
    #[doc = "which will only be used internally. Developers can define"]
    #[doc = "their own name spaces as well, but this functionality is"]
    #[doc = "currently undocumented."]
    #[doc = "@param \tclassname\tThe name of the class of the object to be created"]
    #[doc = "@param \tac\t\t\tCount of arguments in <tt>av</tt>"]
    #[doc = "@param \tav\t\t\tArray of t_atoms; arguments to the class's instance creation function."]
    #[doc = ""]
    #[doc = "@return \t\t\tThis function returns a new instance of the object class if successful, or NULL if unsuccessful."]
    pub fn object_new_typed(
        name_space: *mut t_symbol,
        classname: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Call the free function and release the memory for an instance of an internal object class previously instantiated using object_new(),"]
    #[doc = "object_new_typed() or other new-style object constructor functions (e.g. hashtab_new())."]
    #[doc = "It is, at the time of this writing, a wrapper for the traditional function freeobject(), but its use is suggested with obex-class objects."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = "@param \tx\t\tThe pointer to the object to be freed."]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_free(x: *mut ::std::os::raw::c_void) -> t_max_err;
}
extern "C" {
    #[doc = "Sends an untyped message to an object."]
    #[doc = "There are some caveats to its use, however, particularly for 64-bit architectures."]
    #[doc = "object_method_direct() should be used in cases where floating-point or other non-integer types are being passed on the stack or in return values."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe object that will receive the message"]
    #[doc = "@param \ts\t\tThe message selector"]
    #[doc = "@param \t...\t\tAny arguments to the message"]
    #[doc = ""]
    #[doc = "@return \t\tIf the receiver object can respond to the message, object_method() returns the result. Otherwise, the function will return 0."]
    #[doc = ""]
    #[doc = "@remark \t\tExample: To send the message <tt>bang</tt> to the object <tt>bang_me</tt>:"]
    #[doc = "@code"]
    #[doc = "void *bang_result;"]
    #[doc = "bang_result = object_method(bang_me, gensym(\"bang\"));"]
    #[doc = "@endcode"]
    pub fn object_method(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        ...
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_method_imp(
        x: *mut ::std::os::raw::c_void,
        sym: *mut ::std::os::raw::c_void,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut ::std::os::raw::c_void,
        p3: *mut ::std::os::raw::c_void,
        p4: *mut ::std::os::raw::c_void,
        p5: *mut ::std::os::raw::c_void,
        p6: *mut ::std::os::raw::c_void,
        p7: *mut ::std::os::raw::c_void,
        p8: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_method_direct_getmethod(x: *mut t_object, sym: *mut t_symbol) -> method;
}
extern "C" {
    pub fn object_method_direct_getobject(
        x: *mut t_object,
        sym: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Sends a type-checked message to an object."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe object that will receive the message"]
    #[doc = "@param \ts\t\tThe message selector"]
    #[doc = "@param \tac\t\tCount of message arguments in <tt>av</tt>"]
    #[doc = "@param \tav\t\tArray of t_atoms; the message arguments"]
    #[doc = "@param \trv\t\tReturn value of function, if available"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tIf the receiver object can respond to the message, object_method_typed() returns the result in <tt>rv</tt>. Otherwise, <tt>rv</tt> will contain an #A_NOTHING atom."]
    pub fn object_method_typed(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Currently undocumented."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe object that will receive the message"]
    #[doc = "@param \tmp\t\tUndocumented"]
    #[doc = "@param \ts\t\tThe message selector"]
    #[doc = "@param \tac\t\tCount of message arguments in <tt>av</tt>"]
    #[doc = "@param \tav\t\tArray of t_atoms; the message arguments"]
    #[doc = "@param \trv\t\tReturn value of function, if available"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tIf the receiver object can respond to the message, object_method_typedfun() returns the result in <tt>rv</tt>. Otherwise, <tt>rv</tt> will contain an #A_NOTHING atom."]
    pub fn object_method_typedfun(
        x: *mut ::std::os::raw::c_void,
        mp: *mut t_messlist,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        rv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieves an object's #method for a particular message selector."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = "@param \tx\t\tThe object whose method is being queried"]
    #[doc = "@param \ts\t\tThe message selector"]
    #[doc = "@return \t\tThis function returns the #method if successful, or method_false() if unsuccessful."]
    pub fn object_getmethod(x: *mut ::std::os::raw::c_void, s: *mut t_symbol) -> method;
}
extern "C" {
    #[doc = "Retrieves an object instance's class name"]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = "@param \tx\t\tThe object instance whose class name is being queried"]
    #[doc = "@return \t\tThe classname, or NULL if unsuccessful."]
    pub fn object_classname(x: *mut ::std::os::raw::c_void) -> *mut t_symbol;
}
extern "C" {
    pub fn object_namespace(x: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    pub fn class_namespace(c: *mut t_class) -> *mut t_symbol;
}
extern "C" {
    #[doc = "Registers an object in a namespace."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tname_space\tThe namespace in which to register the object. The namespace can be any symbol."]
    #[doc = "If the namespace does not already exist, it is created automatically."]
    #[doc = "@param \ts\t\t\tThe name of the object in the namespace. This name will be"]
    #[doc = "used by other objects to attach and detach from the registered object."]
    #[doc = "@param \tx\t\t\tThe object to register"]
    #[doc = ""]
    #[doc = "@return \tThe function returns a pointer to the registered object. Under some"]
    #[doc = "circumstances, object_register will <em>duplicate</em> the object,"]
    #[doc = "and return a pointer to the duplicate—the developer should not assume"]
    #[doc = "that the pointer passed in is the same pointer that has been registered."]
    #[doc = "To be safe, the returned pointer should be stored and used with the"]
    #[doc = "bject_unregister() function."]
    #[doc = ""]
    #[doc = "@remark\t\tYou should not register an object if the object is a UI object."]
    #[doc = "UI objects automatically register and attach to themselves in jbox_new()."]
    pub fn object_register(
        name_space: *mut t_symbol,
        s: *mut t_symbol,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_register_unique(
        name_space: *mut t_symbol,
        s: *mut t_symbol,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut t_symbol;
}
extern "C" {
    #[doc = "Determines a registered object's pointer, given its namespace and name."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tname_space\tThe namespace of the registered object"]
    #[doc = "@param \ts\t\t\tThe name of the registered object in the namespace"]
    #[doc = ""]
    #[doc = "@return \tThis function returns the pointer of the registered object,"]
    #[doc = "if successful, or NULL, if unsuccessful."]
    pub fn object_findregistered(
        name_space: *mut t_symbol,
        s: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Determines the namespace and/or name of a registered object, given the object's pointer."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tname_space\tPointer to a t_symbol *, to receive the namespace of the registered object"]
    #[doc = "@param \ts\t\t\tPointer to a t_symbol *, to receive the name of the registered object within the namespace"]
    #[doc = "@param \tx\t\t\tPointer to the registered object"]
    #[doc = ""]
    #[doc = "@return \tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_findregisteredbyptr(
        name_space: *mut *mut t_symbol,
        s: *mut *mut t_symbol,
        x: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Returns all registered names in a namespace"]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tname_space\tPointer to a t_symbol, the namespace to lookup names in"]
    #[doc = "@param \tnamecount\tPointer to a long, to receive the count of the registered names within the namespace"]
    #[doc = "@param \tnames\t\tPointer to a t_symbol **, to receive the allocated names. This pointer should be freed after use"]
    #[doc = ""]
    #[doc = "@return \tThis function returns the error code <tt>MAX_ERR_NONE</tt> if successful,"]
    #[doc = "or one of the other error codes defined in \"ext_obex.h\" if unsuccessful."]
    pub fn object_register_getnames(
        name_space: *mut t_symbol,
        namecount: *mut ::std::os::raw::c_long,
        names: *mut *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Attaches a client to a registered object."]
    #[doc = "Once attached, the object will receive notifications sent from the registered object (via the object_notify() function),"]
    #[doc = "if it has a <tt>notify</tt> method defined and implemented."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tname_space\tThe namespace of the registered object."]
    #[doc = "This should be the same value used in object_register() to register the object."]
    #[doc = "If you don't know the registered object's namespace, the object_findregisteredbyptr() function can be used to determine it."]
    #[doc = "@param \ts\t\t\tThe name of the registered object in the namespace."]
    #[doc = "If you don't know the name of the registered object, the object_findregisteredbyptr() function can be used to determine it."]
    #[doc = "@param \tx\t\t\tThe client object to attach. Generally, this is the pointer to your Max object."]
    #[doc = ""]
    #[doc = "@return \tThis function returns a pointer to the registered object (to the object"]
    #[doc = "referred to by the combination of <tt>name_space</tt> and <tt>s</tt>"]
    #[doc = "arguments) if successful, or NULL if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark\t\tYou should not attach an object to itself if the object is a UI object."]
    #[doc = "UI objects automatically register and attach to themselves in jbox_new()."]
    #[doc = ""]
    #[doc = "@see\t\tobject_notify()"]
    #[doc = "@see\t\tobject_detach()"]
    #[doc = "@see\t\tobject_attach_byptr()"]
    #[doc = "@see\t\tobject_register()"]
    pub fn object_attach(
        name_space: *mut t_symbol,
        s: *mut t_symbol,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Detach a client from a registered object."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tname_space\tThe namespace of the registered object."]
    #[doc = "This should be the same value used in object_register() to register the object."]
    #[doc = "If you don't know the registered object's namespace, the object_findregisteredbyptr() function can be used to determine it."]
    #[doc = "@param \ts\t\t\tThe name of the registered object in the namespace."]
    #[doc = "If you don't know the name of the registered object, the object_findregisteredbyptr() function can be used to determine it."]
    #[doc = "@param \tx\t\t\tThe client object to attach. Generally, this is the pointer to your Max object."]
    #[doc = ""]
    #[doc = "@return\t\t\t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_detach(
        name_space: *mut t_symbol,
        s: *mut t_symbol,
        x: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Attaches a client to a registered object."]
    #[doc = "Unlike object_attach(), the client is specified by providing a pointer to that object"]
    #[doc = "rather than the registered name of that object."]
    #[doc = ""]
    #[doc = "Once attached, the object will receive notifications sent from the registered object (via the object_notify() function),"]
    #[doc = "if it has a <tt>notify</tt> method defined and implemented."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = "@param\tx\t\t\t\t\tThe attaching client object. Generally, this is the pointer to your Max object."]
    #[doc = "@param\tregisteredobject\tA pointer to the registered object to which you wish to attach."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@remark\t\t\t\t\t\tYou should not attach an object to itself if the object is a UI object."]
    #[doc = "UI objects automatically register and attach to themselves in jbox_new()."]
    #[doc = ""]
    #[doc = "@see\t\tobject_notify()"]
    #[doc = "@see\t\tobject_detach()"]
    #[doc = "@see\t\tobject_attach()"]
    #[doc = "@see\t\tobject_register()"]
    #[doc = "@see\t\tobject_attach_byptr_register()"]
    pub fn object_attach_byptr(
        x: *mut ::std::os::raw::c_void,
        registeredobject: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "A convenience function wrapping object_register() and object_attach_byptr()."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param\tx\t\t\t\t\tThe attaching client object. Generally, this is the pointer to your Max object."]
    #[doc = "@param\tobject_to_attach\tA pointer to the object to which you wish to registered and then to which to attach."]
    #[doc = "@param\treg_name_space\t\tThe namespace in which to register the object_to_attach."]
    #[doc = "@return\t\t\t\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\tobject_register()"]
    #[doc = "@see\t\tobject_attach_byptr()"]
    pub fn object_attach_byptr_register(
        x: *mut ::std::os::raw::c_void,
        object_to_attach: *mut ::std::os::raw::c_void,
        reg_name_space: *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Detach a client from a registered object."]
    #[doc = ""]
    #[doc = "@ingroup\tobj"]
    #[doc = "@param\t\tx\t\t\t\t\tThe attaching client object. Generally, this is the pointer to your Max object."]
    #[doc = "@param\t\tregisteredobject\tThe object from which to detach."]
    #[doc = "@return\t\t\t\t\t\t\tA Max error code."]
    #[doc = ""]
    #[doc = "@see\t\tobject_detach()"]
    #[doc = "@see\t\tobject_attach_byptr()"]
    pub fn object_detach_byptr(
        x: *mut ::std::os::raw::c_void,
        registeredobject: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = " Subscribes a client to wait for an object to register. Upon registration, the object will attach. Once attached, the object will receive notifications sent from the registered object (via the <tt>object_notify</tt> function), if it has a <tt>notify</tt> method defined and implemented. See below for more information, in the reference for <tt>object_notify</tt>."]
    #[doc = ""]
    #[doc = " @ingroup obj"]
    #[doc = ""]
    #[doc = " @param \tname_space\tThe namespace of the registered object. This should be the"]
    #[doc = "\t\t\t\t\t\tsame value used in <tt>object_register</tt> to register the"]
    #[doc = "\t\t\t\t\t\tobject. If you don't know the registered object's namespace,"]
    #[doc = "\t\t\t\t\t\tthe <tt>object_findregisteredbyptr</tt> function can be"]
    #[doc = "\t\t\t\t\t\tused to determine it."]
    #[doc = " @param \ts\t\t\tThe name of the registered object in the namespace. If you"]
    #[doc = "\t\t\t\t\t\tdon't know the name of the registered object, the"]
    #[doc = "\t\t\t\t\t\t<tt>object_findregisteredbyptr</tt> function can be used to"]
    #[doc = "\t\t\t\t\t\tdetermine it."]
    #[doc = " @param \tclassname\tThe classname of the registered object in the namespace to"]
    #[doc = "\t\t\t\t\t\tuse as a filter. If NULL, then it will attach to any class"]
    #[doc = "\t\t\t\t\t\tof object."]
    #[doc = " @param \tx\t\t\tThe client object to attach. Generally, this is the pointer to your Max object."]
    #[doc = ""]
    #[doc = " @return \tThis function returns a pointer to the object if registered (to the object"]
    #[doc = "\t\t\treferred to by the combination of <tt>name_space</tt> and <tt>s</tt>"]
    #[doc = "\t\t\targuments) if successful, or NULL if the object is not yet registered."]
    #[doc = ""]
    pub fn object_subscribe(
        name_space: *mut t_symbol,
        s: *mut t_symbol,
        classname: *mut t_symbol,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Unsubscribe a client from a registered object, detaching if the object is registered."]
    #[doc = ""]
    #[doc = " @ingroup obj"]
    #[doc = ""]
    #[doc = " @param \tname_space\tThe namespace of the registered object. This should be the"]
    #[doc = "\t\t\t\t\t\tsame value used in <tt>object_register</tt> to register the"]
    #[doc = "\t\t\t\t\t\tobject. If you don't know the registered object's namespace,"]
    #[doc = "\t\t\t\t\t\tthe <tt>object_findregisteredbyptr</tt> function can be"]
    #[doc = "\t\t\t\t\t\tused to determine it."]
    #[doc = " @param \ts\t\t\tThe name of the registered object in the namespace. If you"]
    #[doc = "\t\t\t\t\t\tdon't know the name of the registered object, the"]
    #[doc = "\t\t\t\t\t\t<tt>object_findregisteredbyptr</tt> function can be used to"]
    #[doc = "\t\t\t\t\t\tdetermine it."]
    #[doc = " @param \tclassname\tThe classname of the registered object in the namespace to"]
    #[doc = "\t\t\t\t\t\tuse as a filter. Currently unused for unsubscribe."]
    #[doc = " @param \tx\t\t\tThe client object to detach. Generally, this is the pointer to your Max object."]
    #[doc = ""]
    #[doc = " @return \tThis function returns the error code <tt>MAX_ERR_NONE</tt> if successful,"]
    #[doc = "\t\t\tor one of the other error codes defined in \"ext_obex.h\" if unsuccessful."]
    #[doc = ""]
    pub fn object_unsubscribe(
        name_space: *mut t_symbol,
        s: *mut t_symbol,
        classname: *mut t_symbol,
        x: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Removes a registered object from a namespace."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = "@param \tx\t\tThe object to unregister. This should be the pointer returned from the object_register() function."]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_unregister(x: *mut ::std::os::raw::c_void) -> t_max_err;
}
extern "C" {
    #[doc = "Broadcast a message (with an optional argument) from a registered object to any attached client objects."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\tPointer to the registered object"]
    #[doc = "@param \ts\t\tThe message to send"]
    #[doc = "@param \tdata\tAn optional argument which will be passed with the message."]
    #[doc = "Sets this argument to NULL if it will be unused."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tIn order for client objects to receive notifications, they must define and implement a special method, <tt>notify</tt>, like so:"]
    #[doc = "@code"]
    #[doc = "class_addmethod(c, (method)myobject_notify, \"notify\", A_CANT, 0);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark \t\tThe <tt>notify</tt> method should be prototyped as:"]
    #[doc = "@code"]
    #[doc = "void myobject_notify(t_myobject *x, t_symbol *s, t_symbol *msg, void *sender, void *data);"]
    #[doc = "@endcode"]
    #[doc = "where"]
    #[doc = "<tt>x</tt> is the pointer to the receiving object,"]
    #[doc = "<tt>s</tt> is the name of the sending (registered) object in its namespace,"]
    #[doc = "<tt>msg</tt> is the sent message,"]
    #[doc = "<tt>sender</tt> is the pointer to the sending object, and"]
    #[doc = "<tt>data</tt> is an optional argument sent with the message."]
    #[doc = "This value corresponds to the data argument in the object_notify() method."]
    pub fn object_notify(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        data: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Determines the class of a given object."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = "@param\tx\t\tThe object to test"]
    #[doc = "@return \t\tThis function returns the t_class * of the object's class, if successful, or NULL, if unsuccessful."]
    pub fn object_class(x: *mut ::std::os::raw::c_void) -> *mut t_class;
}
extern "C" {
    #[doc = "Retrieves the value of an object which supports the <tt>getvalueof/setvalueof</tt> interface. See part 2 of the pattr SDK for more information on this interface."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe object whose value is of interest"]
    #[doc = "@param \tac\t\tPointer to a long variable to receive the count of arguments in <tt>av</tt>. The long variable itself should be set to 0 previous to calling this function."]
    #[doc = "@param \tav\t\tPointer to a t_atom *, to receive object data. The t_atom * itself should be set to NULL previous to calling this function."]
    #[doc = ""]
    #[doc = "@return\t\t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tCalling the object_getvalueof() function allocates memory for any data it returns."]
    #[doc = "It is the developer's responsibility to free it, using the freebytes() function."]
    #[doc = ""]
    #[doc = "@remark \t\tDevelopers wishing to design objects which will support this function being called on them must define and implement a special method, <tt>getvalueof</tt>, like so:"]
    #[doc = "@code"]
    #[doc = "class_addmethod(c, (method)myobject_getvalueof, \"getvalueof\", A_CANT, 0);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark \t\tThe <tt>getvalueof</tt> method should be prototyped as:"]
    #[doc = "@code"]
    #[doc = "t_max_err myobject_getvalueof(t_myobject *x, long *ac, t_atom **av);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark \t\tAnd implemented, generally, as:"]
    #[doc = "@code"]
    #[doc = "t_max_err myobj_getvalueof(t_myobj *x, long *ac, t_atom **av)"]
    #[doc = "{"]
    #[doc = "if (ac && av) {"]
    #[doc = "if (*ac && *av) {"]
    #[doc = "} else {"]
    #[doc = "av = (t_atom *)getbytes(sizeof(t_atom));"]
    #[doc = "}"]
    #[doc = "ac = 1; // our data is a single floating point value"]
    #[doc = "atom_setfloat(*av, x->objvalue);"]
    #[doc = "}"]
    #[doc = "return MAX_ERR_NONE;"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "@remark \t\tBy convention, and to permit the interoperability of objects using the obex API,"]
    #[doc = "developers should allocate memory in their <tt>getvalueof</tt> methods using the getbytes() function."]
    #[doc = "@endcode"]
    pub fn object_getvalueof(
        x: *mut ::std::os::raw::c_void,
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Sets the value of an object which supports the <tt>getvalueof/setvalueof</tt> interface."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe object whose value is of interest"]
    #[doc = "@param \tac\t\tThe count of arguments in <tt>av</tt>"]
    #[doc = "@param \tav\t\tArray of t_atoms; the new desired data for the object"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tDevelopers wishing to design objects which will support this function being called on them must define and implement a special method, <tt>setvalueof</tt>, like so:"]
    #[doc = "@code"]
    #[doc = "class_addmethod(c, (method)myobject_setvalueof, \"setvalueof\", A_CANT, 0);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark \t\tThe <tt>setvalueof</tt> method should be prototyped as:"]
    #[doc = "@code"]
    #[doc = "t_max_err myobject_setvalueof(t_myobject *x, long *ac, t_atom **av);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark \t\tAnd implemented, generally, as:"]
    #[doc = "@code"]
    #[doc = "t_max_err myobject_setvalueof(t_myobject *x, long ac, t_atom *av)"]
    #[doc = "{"]
    #[doc = "if (ac && av) {"]
    #[doc = "myobject_float(x, atom_getfloat(av));"]
    #[doc = "}"]
    #[doc = "return MAX_ERR_NONE;"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn object_setvalueof(
        x: *mut ::std::os::raw::c_void,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Returns the pointer to an attribute, given its name."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\t\tPointer to the object whose attribute is of interest"]
    #[doc = "@param \tattrname\tThe attribute's name"]
    #[doc = ""]
    #[doc = "@return \t\t\tThis function returns a pointer to the attribute, if successful, or NULL, if unsuccessful."]
    pub fn object_attr_get(
        x: *mut ::std::os::raw::c_void,
        attrname: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Returns the method of an attribute's <tt>get</tt> or <tt>set</tt> function, as well as a pointer to the attribute itself, from a message name."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\t\tPointer to the object whose attribute is of interest"]
    #[doc = "@param \tmethodname\tThe Max message used to call the attribute's <tt>get</tt> or <tt>set</tt> function. For example, <tt>gensym(\"mode\")</tt> or <tt>gensym(\"getthresh\")</tt>."]
    #[doc = "@param \tattr\t\tA pointer to a void *, which will be set to the attribute pointer upon successful completion of the function"]
    #[doc = "@param \tget\t\t\tA pointer to a long variable, which will be set to 1 upon successful completion of the function,"]
    #[doc = "if the queried method corresponds to the <tt>get</tt> function of the attribute."]
    #[doc = ""]
    #[doc = "@return \t\t\tThis function returns the requested method, if successful, or NULL, if unsuccessful."]
    pub fn object_attr_method(
        x: *mut ::std::os::raw::c_void,
        methodname: *mut t_symbol,
        attr: *mut *mut ::std::os::raw::c_void,
        get: *mut ::std::os::raw::c_long,
    ) -> method;
}
extern "C" {
    #[doc = "Determines if an object's attribute can be set from the Max interface (i.e. if its #ATTR_SET_OPAQUE_USER flag is set)."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tPointer to the object whose attribute is of interest"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns 1 if the attribute can be set from the Max interface. Otherwise, it returns 0."]
    pub fn object_attr_usercanset(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Determines if the value of an object's attribute can be queried from the Max interface (i.e. if its #ATTR_GET_OPAQUE_USER flag is set)."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tPointer to the object whose attribute is of interest"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns 1 if the value of the attribute can be queried from the Max interface. Otherwise, it returns 0."]
    pub fn object_attr_usercanget(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Forces a specified object's attribute to send its value from the object's dumpout outlet in the Max interface."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tPointer to the object whose attribute is of interest"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \targc\tUnused"]
    #[doc = "@param \targv\tUnused"]
    pub fn object_attr_getdump(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    );
}
extern "C" {
    pub fn object_attr_getvalueof(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Sets the value of an object's attribute."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tPointer to the object whose attribute is of interest"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \targc\tThe count of arguments in <tt>argv</tt>"]
    #[doc = "@param \targv\tArray of t_atoms; the new desired data for the attribute"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_setvalueof(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_lock(x: *mut t_object, s: *mut t_symbol) -> t_max_err;
}
extern "C" {
    pub fn object_attr_unlock(x: *mut t_object, s: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "Attaches an attribute directly to an object."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tAn object to which the attribute should be attached"]
    #[doc = "@param \tattr\tThe attribute's pointer—this should be a pointer returned from attribute_new(), attr_offset_new() or attr_offset_array_new()."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_addattr(x: *mut ::std::os::raw::c_void, attr: *mut t_object) -> t_max_err;
}
extern "C" {
    #[doc = "Detach an attribute from an object that was previously attached with object_addattr()."]
    #[doc = "The function will also free all memory associated with the attribute."]
    #[doc = "If you only wish to detach the attribute, without freeing it, see the object_chuckattr() function."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\t\tThe object to which the attribute is attached"]
    #[doc = "@param \tattrsym\t\tThe attribute's name"]
    #[doc = ""]
    #[doc = "@return \t\t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_deleteattr(x: *mut ::std::os::raw::c_void, attrsym: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "Detach an attribute from an object that was previously attached with object_addattr()."]
    #[doc = "This function will <em>not</em> free the attribute (use object_free() to do this manually)."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\t\tThe object to which the attribute is attached"]
    #[doc = "@param \tattrsym\t\tThe attribute's name"]
    #[doc = ""]
    #[doc = "@return \t\t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_chuckattr(x: *mut ::std::os::raw::c_void, attrsym: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "Registers the byte-offset of the obex member of the class's data structure with the previously defined object class."]
    #[doc = "Use of this function is required for obex-class objects. It must be called from <tt>main()</tt>."]
    #[doc = ""]
    #[doc = "@ingroup class"]
    #[doc = ""]
    #[doc = "@param \tc\t\t\tThe class pointer"]
    #[doc = "@param \toffset\t\tThe byte-offset to the obex member of the object's data structure."]
    #[doc = "Conventionally, the macro #calcoffset is used to calculate the offset."]
    pub fn class_obexoffset_set(c: *mut t_class, offset: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Retrieves the byte-offset of the obex member of the class's data structure."]
    #[doc = ""]
    #[doc = "@ingroup\tclass"]
    #[doc = "@param\tc\tThe class pointer"]
    #[doc = "@return \tThis function returns the byte-offset of the obex member of the class's data structure."]
    pub fn class_obexoffset_get(c: *mut t_class) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Retrieves the value of a data stored in the obex."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe object pointer. This function should only be called on instantiated objects (i.e. in the <tt>new</tt> method or later), not directly on classes (i.e. in <tt>main()</tt>)."]
    #[doc = "@param \tkey\t\tThe symbolic name for the data to be retrieved"]
    #[doc = "@param \tval\t\tA pointer to a #t_object *, to be filled with the data retrieved from the obex."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tBy default, pointers to the object's containing patcher and box objects are stored in the obex, under the keys '#P' and '#B', respectively."]
    #[doc = "To retrieve them, the developer could do something like the following:"]
    #[doc = "@code"]
    #[doc = "void post_containers(t_obexobj *x)"]
    #[doc = "{"]
    #[doc = "t_patcher *p;"]
    #[doc = "t_box *b;"]
    #[doc = "t_max_err err;"]
    #[doc = ""]
    #[doc = "err = object_obex_lookup(x, gensym(\"#P\"), (t_object **)&p);"]
    #[doc = "err = object_obex_lookup(x, gensym(\"#B\"), (t_object **)&b);"]
    #[doc = ""]
    #[doc = "post(\"my patcher is located at 0x%X\", p);"]
    #[doc = "post(\"my box is located at 0x%X\", b);"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn object_obex_lookup(
        x: *mut ::std::os::raw::c_void,
        key: *mut t_symbol,
        val: *mut *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_obex_lookuplong(
        x: *mut ::std::os::raw::c_void,
        key: *mut t_symbol,
        val: *mut t_atom_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_obex_lookupsym(
        x: *mut ::std::os::raw::c_void,
        key: *mut t_symbol,
        val: *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Stores data in the object's obex."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe object pointer. This function should only be called on instantiated objects (i.e. in the <tt>new</tt> method or later), not directly on classes (i.e. in <tt>main()</tt>)."]
    #[doc = "@param \tkey\t\tA symbolic name for the data to be stored"]
    #[doc = "@param \tval\t\tA #t_object *, to be stored in the obex, referenced under the <tt>key</tt>."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tMost developers will need to use this function for the specific purpose of storing the dumpout outlet in the obex"]
    #[doc = "(the dumpout outlet is used by attributes to report data in response to 'get' queries)."]
    #[doc = "For this, the developer should use something like the following in the object's <tt>new</tt> method:"]
    #[doc = "@code"]
    #[doc = "object_obex_store(x, _sym_dumpout, outlet_new(x, NULL));"]
    #[doc = "@endcode"]
    pub fn object_obex_store(
        x: *mut ::std::os::raw::c_void,
        key: *mut t_symbol,
        val: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_obex_storeflags(
        x: *mut ::std::os::raw::c_void,
        key: *mut t_symbol,
        val: *mut t_object,
        flags: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_obex_storelong(
        x: *mut ::std::os::raw::c_void,
        key: *mut t_symbol,
        val: t_atom_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_obex_storesym(
        x: *mut ::std::os::raw::c_void,
        key: *mut t_symbol,
        val: *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_obex_set(x: *mut ::std::os::raw::c_void, obex: *mut t_hashtab) -> t_max_err;
}
extern "C" {
    pub fn object_obex_get(x: *mut ::std::os::raw::c_void) -> *mut t_hashtab;
}
extern "C" {
    pub fn object_obex_enforce(x: *mut ::std::os::raw::c_void) -> *mut t_hashtab;
}
extern "C" {
    #[doc = "Sends data from the object's dumpout outlet."]
    #[doc = "The dumpout outlet is stored in the obex using the object_obex_store() function (see above)."]
    #[doc = "It is used approximately like outlet_anything()."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe object pointer."]
    #[doc = "This function should only be called on instantiated objects (i.e. in the <tt>new</tt> method or later), not directly on classes (i.e. in <tt>main()</tt>)."]
    #[doc = "@param \ts\t\tThe message selector #t_symbol *"]
    #[doc = "@param \targc\tNumber of elements in the argument list in argv"]
    #[doc = "@param \targv\tt_atoms constituting the message arguments"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_obex_dumpout(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    );
}
extern "C" {
    pub fn object_obex_free(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Inserts an integer into a #t_atom and change the t_atom's type to #A_LONG."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = ""]
    #[doc = "@param \ta\t\tPointer to a #t_atom whose value and type will be modified"]
    #[doc = "@param \tb\t\tInteger value to copy into the #t_atom"]
    #[doc = ""]
    #[doc = "@return \tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn atom_setlong(a: *mut t_atom, b: t_atom_long) -> t_max_err;
}
extern "C" {
    #[doc = "Inserts a floating point number into a #t_atom and change the t_atom's type to #A_FLOAT."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = ""]
    #[doc = "@param \ta\t\tPointer to a #t_atom whose value and type will be modified"]
    #[doc = "@param \tb\t\tFloating point value to copy into the #t_atom"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn atom_setfloat(a: *mut t_atom, b: f64) -> t_max_err;
}
extern "C" {
    #[doc = "Inserts a #t_symbol * into a #t_atom and change the t_atom's type to #A_SYM."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = ""]
    #[doc = "@param \ta\t\tPointer to a #t_atom whose value and type will be modified"]
    #[doc = "@param \tb\t\tPointer to a #t_symbol to copy into the #t_atom"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn atom_setsym(a: *mut t_atom, b: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "Inserts a generic pointer value into a #t_atom and change the t_atom's type to #A_OBJ."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = ""]
    #[doc = "@param \ta\t\tPointer to a #t_atom whose value and type will be modified"]
    #[doc = "@param \tb\t\tPointer value to copy into the #t_atom"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn atom_setobj(a: *mut t_atom, b: *mut ::std::os::raw::c_void) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieves a long integer value from a #t_atom."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = ""]
    #[doc = "@param \ta\t\tPointer to a #t_atom whose value is of interest"]
    #[doc = "@return \t\tThis function returns the value of the specified #t_atom as an integer, if possible. Otherwise, it returns 0."]
    #[doc = "@remark \t\tIf the #t_atom is not of the type specified by the function, the function will attempt to coerce a valid value from the t_atom."]
    #[doc = "For instance, if the t_atom <tt>at</tt> is set to type #A_FLOAT with a value of <tt>3.7</tt>,"]
    #[doc = "the atom_getlong() function will return the truncated integer value of <tt>at</tt>, or <tt>3</tt>."]
    #[doc = "An attempt is also made to coerce #t_symbol data."]
    pub fn atom_getlong(a: *const t_atom) -> t_atom_long;
}
extern "C" {
    #[doc = "Retrieves a floating point value from a #t_atom."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = "@param \ta\t\tPointer to a #t_atom whose value is of interest"]
    #[doc = "@return \t\tThis function returns the value of the specified #t_atom as a floating point number, if possible. Otherwise, it returns 0."]
    #[doc = ""]
    #[doc = "@remark \t\tIf the #t_atom is not of the type specified by the function, the function will attempt to coerce a valid value from the t_atom."]
    #[doc = "For instance, if the t_atom <tt>at</tt> is set to type #A_LONG with a value of <tt>5</tt>,"]
    #[doc = "the atom_getfloat() function will return the value of <tt>at</tt> as a float, or <tt>5.0</tt>."]
    #[doc = "An attempt is also made to coerce #t_symbol data."]
    pub fn atom_getfloat(a: *const t_atom) -> t_atom_float;
}
extern "C" {
    #[doc = "Retrieves a t_symbol * value from a t_atom."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = "@param \ta\t\tPointer to a t_atom whose value is of interest"]
    #[doc = "@return \t\tThis function returns the value of the specified #A_SYM-typed #t_atom, if possible."]
    #[doc = "Otherwise, it returns an empty, but valid, #t_symbol *, equivalent to <tt>gensym(\"\")</tt>, or <tt>_sym_nothing</tt>."]
    #[doc = ""]
    #[doc = "@remark \t\tNo attempt is made to coerce non-matching data types."]
    pub fn atom_getsym(a: *const t_atom) -> *mut t_symbol;
}
extern "C" {
    #[doc = "Retrieves a generic pointer value from a #t_atom."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = "@param \ta\t\tPointer to a #t_atom whose value is of interest"]
    #[doc = "@return \t\tThis function returns the value of the specified #A_OBJ-typed t_atom, if possible. Otherwise, it returns NULL."]
    pub fn atom_getobj(a: *const t_atom) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Retrieves an unsigned integer value between 0 and 255 from a t_atom."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = "@param \ta\t\tPointer to a #t_atom whose value is of interest"]
    #[doc = "@return \t\tThis function returns the value of the specified #t_atom as an integer between 0 and 255, if possible. Otherwise, it returns 0."]
    #[doc = ""]
    #[doc = "@remark \t\tIf the #t_atom is typed #A_LONG, but the data falls outside of the range 0-255, the data is truncated to that range before output."]
    #[doc = ""]
    #[doc = "@remark \t\tIf the t_atom is typed #A_FLOAT, the floating point value is multiplied by 255. and truncated to the range 0-255 before output."]
    #[doc = "For example, the floating point value <tt>0.5</tt> would be output from atom_getcharfix as <tt>127</tt> (0.5 * 255. = 127.5)."]
    #[doc = ""]
    #[doc = "@remark \t\tNo attempt is also made to coerce #t_symbol data."]
    pub fn atom_getcharfix(a: *const t_atom) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Retrieves type from a #t_atom."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = "@param \ta\t\tPointer to a #t_atom whose type is of interest"]
    #[doc = "@return \t\tThis function returns the type of the specified t_atom as defined in #e_max_atomtypes"]
    pub fn atom_gettype(a: *const t_atom) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Retrieves the integer value of a particular t_atom from an atom list, if the atom exists."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = ""]
    #[doc = "@param \tc\t\tPointer to a long variable to receive the atom's data if the function is successful."]
    #[doc = "@param \tidx\t\tOffset into the atom list of the atom of interest, starting from 0."]
    #[doc = "For instance, if you want data from the 3rd atom in the atom list, <tt>idx</tt> should be set to 2."]
    #[doc = "@param \tac\t\tCount of av."]
    #[doc = "@param \tav\t\tPointer to the first t_atom of an atom list."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tThe atom_arg_getlong() function only changes the value of <tt>c</tt> if the function is successful."]
    #[doc = "For instance, the following code snippet illustrates a simple, but typical use:"]
    #[doc = "@code"]
    #[doc = "void myobject_mymessage(t_myobject *x, t_symbol *s, long ac, t_atom *av)"]
    #[doc = "{"]
    #[doc = "t_atom_long var = -1;"]
    #[doc = ""]
    #[doc = "atom_arg_getlong(&var, 0, ac, av);"]
    #[doc = "if (val == -1) // i.e. unchanged"]
    #[doc = "post(\"it is likely that the user did not provide a valid argument\");"]
    #[doc = "else {"]
    #[doc = "..."]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn atom_arg_getlong(
        c: *mut t_atom_long,
        idx: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_long,
        av: *const t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieves the floating point value of a particular t_atom from an atom list, if the atom exists."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = ""]
    #[doc = "@param \tc\t\tPointer to a float variable to receive the atom's data if the function is successful. Otherwise, the value is left unchanged."]
    #[doc = "@param \tidx\t\tOffset into the atom list of the atom of interest, starting from 0."]
    #[doc = "For instance, if you want data from the 3rd atom in the atom list, <tt>idx</tt> should be set to 2."]
    #[doc = "@param \tac\t\tCount of av."]
    #[doc = "@param \tav\t\tPointer to the first t_atom of an atom list."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn atom_arg_getfloat(
        c: *mut f32,
        idx: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_long,
        av: *const t_atom,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Retrieves the floating point value, as a double, of a particular t_atom from an atom list, if the atom exists."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = ""]
    #[doc = "@param \tc\t\tPointer to a double variable to receive the atom's data if the function is successful. Otherwise the value is left unchanged."]
    #[doc = "@param \tidx\t\tOffset into the atom list of the atom of interest, starting from 0."]
    #[doc = "For instance, if you want data from the 3rd atom in the atom list, <tt>idx</tt> should be set to 2."]
    #[doc = "@param \tac\t\tCount of av."]
    #[doc = "@param \tav\t\tPointer to the first t_atom of an atom list."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn atom_arg_getdouble(
        c: *mut f64,
        idx: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_long,
        av: *const t_atom,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Retrieves the t_symbol * value of a particular t_atom from an atom list, if the atom exists."]
    #[doc = ""]
    #[doc = "@ingroup atom"]
    #[doc = ""]
    #[doc = "@param \tc\t\tPointer to a t_symbol * variable to receive the atom's data if the function is successful. Otherwise, the value is left unchanged."]
    #[doc = "@param \tidx\t\tOffset into the atom list of the atom of interest, starting from 0."]
    #[doc = "For instance, if you want data from the 3rd atom in the atom list, <tt>idx</tt> should be set to 2."]
    #[doc = "@param \tac\t\tCount of av."]
    #[doc = "@param \tav\t\tPointer to the first t_atom of an atom list."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tThe atom_arg_getsym() function only changes the value of <tt>c</tt> if the function is successful."]
    #[doc = "For instance, the following code snippet illustrates a simple, but typical use:"]
    #[doc = "@code"]
    #[doc = "void myobject_open(t_myobject *x, t_symbol *s, long ac, t_atom *av)"]
    #[doc = "{"]
    #[doc = "t_symbol *filename = _sym_nothing;"]
    #[doc = ""]
    #[doc = "atom_arg_getsym(&filename, 0, ac, av);"]
    #[doc = "if (filename == _sym_nothing) { // i.e. unchanged"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn atom_arg_getsym(
        c: *mut *mut t_symbol,
        idx: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_long,
        av: *const t_atom,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Determines the point in an atom list where attribute arguments begin."]
    #[doc = "Developers can use this function to assist in the manual processing of attribute arguments, when attr_args_process()"]
    #[doc = "doesn't provide the correct functionality for a particular purpose."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tac\t\tThe count of t_atoms in <tt>av</tt>"]
    #[doc = "@param \tav\t\tAn atom list"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns an offset into the atom list, where the first attribute argument occurs."]
    #[doc = "For instance, the atom list <tt>foo bar 3.0 \\@mode 6</tt> would cause <tt>attr_args_offset</tt> to return 3"]
    #[doc = "(the attribute <tt>mode</tt> appears at position 3 in the atom list)."]
    pub fn attr_args_offset(ac: ::std::os::raw::c_short, av: *mut t_atom)
        -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Takes an atom list and properly set any attributes described within. This function is typically used in an object's <tt>new</tt> method to conveniently process attribute arguments."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe object whose attributes will be processed"]
    #[doc = "@param \tac\t\tThe count of t_atoms in <tt>av</tt>"]
    #[doc = "@param \tav\t\tAn atom list"]
    #[doc = ""]
    #[doc = "@remark \t\tHere is a typical example of usage:"]
    #[doc = "@code"]
    #[doc = "void *myobject_new(t_symbol *s, long ac, t_atom *av)"]
    #[doc = "{"]
    #[doc = "t_myobject *x = NULL;"]
    #[doc = ""]
    #[doc = "if (x=(t_myobject *)object_alloc(myobject_class))"]
    #[doc = "{"]
    #[doc = "x->data = 0;"]
    #[doc = ""]
    #[doc = "attr_args_process(x, ac, av);"]
    #[doc = "}"]
    #[doc = "return x;"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn attr_args_process(
        x: *mut ::std::os::raw::c_void,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
    );
}
extern "C" {
    #[doc = "Create a new attribute. The attribute will allocate memory and store its own data. Attributes created using attribute_new() can be assigned either to classes (using the class_addattr() function) or to objects (using the object_addattr() function)."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tname\tA name for the attribute, as a C-string"]
    #[doc = "@param \ttype\tA t_symbol * representing a valid attribute type."]
    #[doc = "At the time of this writing, the valid type-symbols are:"]
    #[doc = "<tt>_sym_char</tt> (char),"]
    #[doc = "<tt>_sym_long</tt> (long),"]
    #[doc = "<tt>_sym_float32</tt> (32-bit float),"]
    #[doc = "<tt>_sym_float64</tt> (64-bit float),"]
    #[doc = "<tt>_sym_atom</tt> (Max #t_atom pointer),"]
    #[doc = "<tt>_sym_symbol</tt> (Max #t_symbol pointer),"]
    #[doc = "<tt>_sym_pointer</tt> (generic pointer) and"]
    #[doc = "<tt>_sym_object</tt> (Max #t_object pointer)."]
    #[doc = "@param \tflags\tAny attribute flags, expressed as a bitfield."]
    #[doc = "Attribute flags are used to determine if an attribute is accessible for setting or querying."]
    #[doc = "The available accessor flags are defined in #e_max_attrflags."]
    #[doc = "@param \tmget\tThe method to use for the attribute's <tt>get</tt> functionality. If <tt>mget</tt> is NULL, the default method is used."]
    #[doc = "@param \tmset\tThe method to use for the attribute's <tt>set</tt> functionality. If <tt>mset</tt> is NULL, the default method is used."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the new attribute's object pointer if successful, or NULL if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tDevelopers wishing to define custom methods for <tt>get</tt> or <tt>set</tt> functionality need to prototype them as:"]
    #[doc = "@code"]
    #[doc = "t_max_err myobject_myattr_get(t_myobject *x, void *attr, long *ac, t_atom **av);"]
    #[doc = "@endcode"]
    #[doc = "@code"]
    #[doc = "t_max_err myobject_myattr_set(t_myobject *x, void *attr, long ac, t_atom *av);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark \t\tImplementation will vary, of course, but need to follow the following basic models."]
    #[doc = "Note that, as with custom <tt>getvalueof</tt> and <tt>setvalueof</tt> methods for the object,"]
    #[doc = "assumptions are made throughout Max that getbytes() has been used for memory allocation."]
    #[doc = "Developers are strongly urged to do the same:"]
    #[doc = "@code"]
    #[doc = "t_max_err myobject_myattr_get(t_myobject *x, void *attr, long *ac, t_atom **av)"]
    #[doc = "{"]
    #[doc = "if (*ac && *av)"]
    #[doc = "else {"]
    #[doc = "ac = 1; // size of attr data"]
    #[doc = "av = (t_atom *)getbytes(sizeof(t_atom) * (*ac));"]
    #[doc = "if (!(*av)) {"]
    #[doc = "ac = 0;"]
    #[doc = "return MAX_ERR_OUT_OF_MEM;"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "atom_setlong(*av, x->some_value);"]
    #[doc = "return MAX_ERR_NONE;"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "t_max_err myobject_myattr_set(t_myobject *x, void *attr, long ac, t_atom *av)"]
    #[doc = "{"]
    #[doc = "if (ac && av) {"]
    #[doc = "x->some_value = atom_getlong(av);"]
    #[doc = "}"]
    #[doc = "return MAX_ERR_NONE;"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn attribute_new(
        name: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        flags: ::std::os::raw::c_long,
        mget: method,
        mset: method,
    ) -> *mut t_object;
}
extern "C" {
    #[doc = "Create a new attribute. The attribute references memory stored outside of itself, in the object's data structure. Attributes created using attr_offset_new() can be assigned either to classes (using the class_addattr() function) or to objects (using the object_addattr() function)."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tname\tA name for the attribute, as a C-string"]
    #[doc = "@param \ttype\tA t_symbol * representing a valid attribute type."]
    #[doc = "At the time of this writing, the valid type-symbols are:"]
    #[doc = "<tt>_sym_char</tt> (char),"]
    #[doc = "<tt>_sym_long</tt> (long),"]
    #[doc = "<tt>_sym_float32</tt> (32-bit float),"]
    #[doc = "<tt>_sym_float64</tt> (64-bit float),"]
    #[doc = "<tt>_sym_atom</tt> (Max #t_atom pointer),"]
    #[doc = "<tt>_sym_symbol</tt> (Max #t_symbol pointer),"]
    #[doc = "<tt>_sym_pointer</tt> (generic pointer) and"]
    #[doc = "<tt>_sym_object</tt> (Max #t_object pointer)."]
    #[doc = "@param \tflags\tAny attribute flags, expressed as a bitfield."]
    #[doc = "Attribute flags are used to determine if an attribute is accessible for setting or querying."]
    #[doc = "The available accessor flags are defined in #e_max_attrflags."]
    #[doc = "@param \tmget\tThe method to use for the attribute's <tt>get</tt> functionality."]
    #[doc = "If <tt>mget</tt> is NULL, the default method is used. See the discussion under attribute_new(), for more information."]
    #[doc = "@param \tmset\tThe method to use for the attribute's <tt>set</tt> functionality."]
    #[doc = "If <tt>mset</tt> is NULL, the default method is used. See the discussion under attribute_new(), for more information."]
    #[doc = "@param \toffset\tByte offset into the class data structure of the object which will \"own\" the attribute."]
    #[doc = "The offset should point to the data to be referenced by the attribute."]
    #[doc = "Typically, the #calcoffset macro (described above) is used to calculate this offset."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the new attribute's object pointer if successful, or NULL if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tFor instance, to create a new attribute which references the value of a double variable (<tt>val</tt>) in an object class's data structure:"]
    #[doc = "@code"]
    #[doc = "t_object *attr = attr_offset_new(\"myattr\", _sym_float64 / * matches data size * /, 0 / * no flags * /, (method)0L, (method)0L, calcoffset(t_myobject, val));"]
    #[doc = "@endcode"]
    pub fn attr_offset_new(
        name: *const ::std::os::raw::c_char,
        type_: *const t_symbol,
        flags: ::std::os::raw::c_long,
        mget: method,
        mset: method,
        offset: ::std::os::raw::c_long,
    ) -> *mut t_object;
}
extern "C" {
    #[doc = "Create a new attribute. The attribute references an array of memory stored outside of itself, in the object's data structure. Attributes created using attr_offset_array_new() can be assigned either to classes (using the class_addattr() function) or to objects (using the object_addattr() function)."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tname\t\tA name for the attribute, as a C-string"]
    #[doc = "@param \ttype\t\tA t_symbol * representing a valid attribute type."]
    #[doc = "At the time of this writing, the valid type-symbols are:"]
    #[doc = "<tt>_sym_char</tt> (char),"]
    #[doc = "<tt>_sym_long</tt> (long),"]
    #[doc = "<tt>_sym_float32</tt> (32-bit float),"]
    #[doc = "<tt>_sym_float64</tt> (64-bit float),"]
    #[doc = "<tt>_sym_atom</tt> (Max #t_atom pointer),"]
    #[doc = "<tt>_sym_symbol</tt> (Max #t_symbol pointer),"]
    #[doc = "<tt>_sym_pointer</tt> (generic pointer) and"]
    #[doc = "<tt>_sym_object</tt> (Max #t_object pointer)."]
    #[doc = "@param\tsize\t\tMaximum number of items that may be in the array."]
    #[doc = "@param \tflags\t\tAny attribute flags, expressed as a bitfield."]
    #[doc = "Attribute flags are used to determine if an attribute is accessible for setting or querying."]
    #[doc = "The available accessor flags are defined in #e_max_attrflags."]
    #[doc = "@param \tmget\t\tThe method to use for the attribute's <tt>get</tt> functionality."]
    #[doc = "If <tt>mget</tt> is NULL, the default method is used. See the discussion under attribute_new(), for more information."]
    #[doc = "@param \tmset\t\tThe method to use for the attribute's <tt>set</tt> functionality."]
    #[doc = "If <tt>mset</tt> is NULL, the default method is used. See the discussion under attribute_new(), for more information."]
    #[doc = "@param \toffsetcount\tByte offset into the object class's data structure of a long variable describing how many array elements"]
    #[doc = "(up to <tt>size</tt>) comprise the data to be referenced by the attribute."]
    #[doc = "Typically, the #calcoffset macro is used to calculate this offset."]
    #[doc = "@param \toffset\t\tByte offset into the class data structure of the object which will \"own\" the attribute."]
    #[doc = "The offset should point to the data to be referenced by the attribute."]
    #[doc = "Typically, the #calcoffset macro is used to calculate this offset."]
    #[doc = ""]
    #[doc = "@return \t\t\tThis function returns the new attribute's object pointer if successful, or NULL if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\t\tFor instance, to create a new attribute which references an array of 10 t_atoms (<tt>atm</tt>;"]
    #[doc = "the current number of \"active\" elements in the array is held in the variable <tt>atmcount</tt>) in an object class's data structure:"]
    #[doc = "@code"]
    #[doc = "t_object *attr = attr_offset_array_new(\"myattrarray\", _sym_atom / * matches data size * /, 10 / * max * /, 0 / * no flags * /, (method)0L, (method)0L, calcoffset(t_myobject, atmcount) / * count * /, calcoffset(t_myobject, atm) / * data * /);"]
    #[doc = "@endcode"]
    pub fn attr_offset_array_new(
        name: *const ::std::os::raw::c_char,
        type_: *mut t_symbol,
        size: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
        mget: method,
        mset: method,
        offsetcount: ::std::os::raw::c_long,
        offset: ::std::os::raw::c_long,
    ) -> *mut t_object;
}
extern "C" {
    pub fn attr_filter_clip_new() -> *mut t_object;
}
extern "C" {
    pub fn attr_filter_proc_new(proc_: method) -> *mut t_object;
}
extern "C" {
    #[doc = "Retrieves the value of an attribute, given its parent object and name."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the value of the specified attribute, if successful, or 0, if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tIf the attribute is not of the type specified by the function, the"]
    #[doc = "function will attempt to coerce a valid value from the attribute."]
    pub fn object_attr_getlong(x: *mut ::std::os::raw::c_void, s: *mut t_symbol) -> t_atom_long;
}
extern "C" {
    #[doc = "Sets the value of an attribute, given its parent object and name. The function will call the attribute's <tt>set</tt> method, using the data provided."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \tc\t\tAn integer value; the new value for the attribute"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_setlong(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        c: t_atom_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieves the value of an attribute, given its parent object and name."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the value of the specified attribute, if successful, or 0, if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tIf the attribute is not of the type specified by the function, the"]
    #[doc = "function will attempt to coerce a valid value from the attribute."]
    pub fn object_attr_getfloat(x: *mut ::std::os::raw::c_void, s: *mut t_symbol) -> t_atom_float;
}
extern "C" {
    #[doc = "Sets the value of an attribute, given its parent object and name. The function will call the attribute's <tt>set</tt> method, using the data provided."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \tc\t\tAn floating point value; the new value for the attribute"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_setfloat(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        c: t_atom_float,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieves the value of an attribute, given its parent object and name."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the value of the specified attribute, if successful, or the empty symbol (equivalent to <tt>gensym(\"\")</tt> or <tt>_sym_nothing</tt>), if unsuccessful."]
    pub fn object_attr_getsym(x: *mut ::std::os::raw::c_void, s: *mut t_symbol) -> *mut t_symbol;
}
extern "C" {
    #[doc = "Sets the value of an attribute, given its parent object and name. The function will call the attribute's <tt>set</tt> method, using the data provided."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \tc\t\tA t_symbol *; the new value for the attribute"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_setsym(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        c: *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_getchar(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn object_attr_setchar(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        c: ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_getobj(x: *mut ::std::os::raw::c_void, s: *mut t_symbol) -> *mut t_object;
}
extern "C" {
    pub fn object_attr_setobj(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        o: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieves the value of an attribute, given its parent object and name."]
    #[doc = "This function uses a developer-allocated array to copy data to."]
    #[doc = "Developers wishing to retrieve the value of an attribute without pre-allocating memory should refer to the object_attr_getvalueof() function."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \tmax\t\tThe number of array elements in <tt>vals</tt>. The function will take care not to overwrite the bounds of the array."]
    #[doc = "@param \tvals\tPointer to the first element of a pre-allocated array of long data."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the number of elements copied into <tt>vals</tt>."]
    #[doc = ""]
    #[doc = "@remark \t\tIf the attribute is not of the type specified by the function, the"]
    #[doc = "function will attempt to coerce a valid value from the attribute."]
    pub fn object_attr_getlong_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        max: ::std::os::raw::c_long,
        vals: *mut t_atom_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Sets the value of an attribute, given its parent object and name. The function will call the attribute's <tt>set</tt> method, using the data provided."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \tcount\tThe number of array elements in vals"]
    #[doc = "@param \tvals\tPointer to the first element of an array of long data"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_setlong_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        count: ::std::os::raw::c_long,
        vals: *mut t_atom_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieves the value of an attribute, given its parent object and name."]
    #[doc = "This function uses a developer-allocated array to copy data to."]
    #[doc = "Developers wishing to retrieve the value of an attribute without pre-allocating memory should refer to the object_attr_getvalueof() function."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \tmax\t\tThe number of array elements in <tt>vals</tt>. The function will take care not to overwrite the bounds of the array."]
    #[doc = "@param \tvals\tPointer to the first element of a pre-allocated array of unsigned char data."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the number of elements copied into <tt>vals</tt>."]
    #[doc = ""]
    #[doc = "@remark \t\tIf the attribute is not of the type specified by the function, the"]
    #[doc = "function will attempt to coerce a valid value from the attribute."]
    pub fn object_attr_getchar_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        max: ::std::os::raw::c_long,
        vals: *mut t_uint8,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Sets the value of an attribute, given its parent object and name. The function will call the attribute's <tt>set</tt> method, using the data provided."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \tcount\tThe number of array elements in vals"]
    #[doc = "@param \tvals\tPointer to the first element of an array of unsigned char data"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_setchar_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        count: ::std::os::raw::c_long,
        vals: *const t_uint8,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieves the value of an attribute, given its parent object and name."]
    #[doc = "This function uses a developer-allocated array to copy data to."]
    #[doc = "Developers wishing to retrieve the value of an attribute without pre-allocating memory should refer to the object_attr_getvalueof() function."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \tmax\t\tThe number of array elements in <tt>vals</tt>. The function will take care not to overwrite the bounds of the array."]
    #[doc = "@param \tvals\tPointer to the first element of a pre-allocated array of float data."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the number of elements copied into <tt>vals</tt>."]
    #[doc = ""]
    #[doc = "@remark \t\tIf the attribute is not of the type specified by the function, the"]
    #[doc = "function will attempt to coerce a valid value from the attribute."]
    pub fn object_attr_getfloat_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        max: ::std::os::raw::c_long,
        vals: *mut f32,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Sets the value of an attribute, given its parent object and name. The function will call the attribute's <tt>set</tt> method, using the data provided."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \tcount\tThe number of array elements in vals"]
    #[doc = "@param \tvals\tPointer to the first element of an array of float data"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_setfloat_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        count: ::std::os::raw::c_long,
        vals: *mut f32,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieves the value of an attribute, given its parent object and name."]
    #[doc = "This function uses a developer-allocated array to copy data to."]
    #[doc = "Developers wishing to retrieve the value of an attribute without pre-allocating memory should refer to the object_attr_getvalueof() function."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \tmax\t\tThe number of array elements in <tt>vals</tt>. The function will take care not to overwrite the bounds of the array."]
    #[doc = "@param \tvals\tPointer to the first element of a pre-allocated array of double data."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the number of elements copied into <tt>vals</tt>."]
    #[doc = ""]
    #[doc = "@remark \t\tIf the attribute is not of the type specified by the function, the"]
    #[doc = "function will attempt to coerce a valid value from the attribute."]
    pub fn object_attr_getdouble_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        max: ::std::os::raw::c_long,
        vals: *mut f64,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Sets the value of an attribute, given its parent object and name. The function will call the attribute's <tt>set</tt> method, using the data provided."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \tcount\tThe number of array elements in vals"]
    #[doc = "@param \tvals\tPointer to the first element of an array of double data"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_setdouble_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        count: ::std::os::raw::c_long,
        vals: *mut f64,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieves the value of an attribute, given its parent object and name."]
    #[doc = "This function uses a developer-allocated array to copy data to."]
    #[doc = "Developers wishing to retrieve the value of an attribute without pre-allocating memory should refer to the object_attr_getvalueof() function."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \tmax\t\tThe number of array elements in <tt>vals</tt>. The function will take care not to overwrite the bounds of the array."]
    #[doc = "@param \tvals\tPointer to the first element of a pre-allocated array of #t_symbol *s."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the number of elements copied into <tt>vals</tt>."]
    pub fn object_attr_getsym_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        max: ::std::os::raw::c_long,
        vals: *mut *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Sets the value of an attribute, given its parent object and name."]
    #[doc = "The function will call the attribute's <tt>set</tt> method, using the data provided."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param \tcount\tThe number of array elements in vals"]
    #[doc = "@param \tvals\tPointer to the first element of an array of #t_symbol *s"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_setsym_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        count: ::std::os::raw::c_long,
        vals: *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Attaches a clip filter to an attribute."]
    #[doc = "The filter will <em>only</em> clip values sent to the attribute using the attribute's <tt>set</tt> function."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tPointer to the attribute to receive the filter"]
    #[doc = "@param \tmin\t\tMinimum value for the clip filter"]
    #[doc = "@param \tmax\t\tMaximum value for the clip filter"]
    #[doc = "@param \tusemin\tSets this value to 0 if the minimum clip value should <em>not</em> be used. Otherwise, set the value to non-zero."]
    #[doc = "@param \tusemax\tSets this value to 0 if the minimum clip value should <em>not</em> be used. Otherwise, set the value to non-zero."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn attr_addfilterset_clip(
        x: *mut ::std::os::raw::c_void,
        min: f64,
        max: f64,
        usemin: ::std::os::raw::c_long,
        usemax: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Attaches a clip/scale filter to an attribute."]
    #[doc = "The filter will <em>only</em> clip and scale values sent to the attribute using the attribute's <tt>set</tt> function."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tPointer to the attribute to receive the filter"]
    #[doc = "@param \tscale\tScale value. Data sent to the attribute will be scaled by this amount. <em>Scaling occurs previous to clipping</em>."]
    #[doc = "@param \tmin\t\tMinimum value for the clip filter"]
    #[doc = "@param \tmax\t\tMaximum value for the clip filter"]
    #[doc = "@param \tusemin\tSets this value to 0 if the minimum clip value should <em>not</em> be used. Otherwise, set the value to non-zero."]
    #[doc = "@param \tusemax\tSets this value to 0 if the minimum clip value should <em>not</em> be used. Otherwise, set the value to non-zero."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn attr_addfilterset_clip_scale(
        x: *mut ::std::os::raw::c_void,
        scale: f64,
        min: f64,
        max: f64,
        usemin: ::std::os::raw::c_long,
        usemax: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Attaches a clip filter to an attribute."]
    #[doc = "The filter will <em>only</em> clip values retrieved from the attribute using the attribute's <tt>get</tt> function."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tPointer to the attribute to receive the filter"]
    #[doc = "@param \tmin\t\tMinimum value for the clip filter"]
    #[doc = "@param \tmax\t\tMaximum value for the clip filter"]
    #[doc = "@param \tusemin\tSets this value to 0 if the minimum clip value should <em>not</em> be used. Otherwise, set the value to non-zero."]
    #[doc = "@param \tusemax\tSets this value to 0 if the minimum clip value should <em>not</em> be used. Otherwise, set the value to non-zero."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn attr_addfilterget_clip(
        x: *mut ::std::os::raw::c_void,
        min: f64,
        max: f64,
        usemin: ::std::os::raw::c_long,
        usemax: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Attaches a clip/scale filter to an attribute."]
    #[doc = "The filter will <em>only</em> clip and scale values retrieved from the attribute using the attribute's <tt>get</tt> function."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tPointer to the attribute to receive the filter"]
    #[doc = "@param \tscale\tScale value. Data retrieved from the attribute will be scaled by this amount. <em>Scaling occurs previous to clipping</em>."]
    #[doc = "@param \tmin\t\tMinimum value for the clip filter"]
    #[doc = "@param \tmax\t\tMaximum value for the clip filter"]
    #[doc = "@param \tusemin\tSets this value to 0 if the minimum clip value should <em>not</em> be used. Otherwise, set the value to non-zero."]
    #[doc = "@param \tusemax\tSets this value to 0 if the minimum clip value should <em>not</em> be used. Otherwise, set the value to non-zero."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn attr_addfilterget_clip_scale(
        x: *mut ::std::os::raw::c_void,
        scale: f64,
        min: f64,
        max: f64,
        usemin: ::std::os::raw::c_long,
        usemax: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Attaches a clip filter to an attribute."]
    #[doc = "The filter will clip any values sent to or retrieved from the attribute using the attribute's <tt>get</tt> and <tt>set</tt> functions."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tPointer to the attribute to receive the filter"]
    #[doc = "@param \tmin\t\tMinimum value for the clip filter"]
    #[doc = "@param \tmax\t\tMaximum value for the clip filter"]
    #[doc = "@param \tusemin\tSets this value to 0 if the minimum clip value should <em>not</em> be used. Otherwise, set the value to non-zero."]
    #[doc = "@param \tusemax\tSets this value to 0 if the minimum clip value should <em>not</em> be used. Otherwise, set the value to non-zero."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn attr_addfilter_clip(
        x: *mut ::std::os::raw::c_void,
        min: f64,
        max: f64,
        usemin: ::std::os::raw::c_long,
        usemax: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Attaches a clip/scale filter to an attribute."]
    #[doc = "The filter will clip and scale any values sent to or retrieved from the attribute using the attribute's <tt>get</tt> and <tt>set</tt> functions."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tPointer to the attribute to receive the filter"]
    #[doc = "@param \tscale\tScale value. Data sent to the attribute will be scaled by this amount. Data retrieved from the attribute will be scaled by its reciprocal."]
    #[doc = "<em>Scaling occurs previous to clipping</em>."]
    #[doc = "@param \tmin\t\tMinimum value for the clip filter"]
    #[doc = "@param \tmax\t\tMaximum value for the clip filter"]
    #[doc = "@param \tusemin\tSets this value to 0 if the minimum clip value should <em>not</em> be used. Otherwise, set the value to non-zero."]
    #[doc = "@param \tusemax\tSets this value to 0 if the minimum clip value should <em>not</em> be used. Otherwise, set the value to non-zero."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn attr_addfilter_clip_scale(
        x: *mut ::std::os::raw::c_void,
        scale: f64,
        min: f64,
        max: f64,
        usemin: ::std::os::raw::c_long,
        usemax: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Attaches a custom filter method to an attribute."]
    #[doc = "The filter will <em>only</em> be called for values retrieved from the attribute using the attribute's <tt>set</tt> function."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tPointer to the attribute to receive the filter"]
    #[doc = "@param \tproc\tA filter method"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tThe filter method should be prototyped and implemented as follows:"]
    #[doc = "@code"]
    #[doc = "t_max_err myfiltermethod(void *parent, void *attr, long ac, t_atom *av);"]
    #[doc = ""]
    #[doc = "t_max_err myfiltermethod(void *parent, void *attr, long ac, t_atom *av)"]
    #[doc = "{"]
    #[doc = "long i;"]
    #[doc = "float temp,"]
    #[doc = ""]
    #[doc = "for (i = 0; i < ac; i++) {"]
    #[doc = "temp = atom_getfloat(av + i);"]
    #[doc = "temp = (float)((long)(temp + 0.5));"]
    #[doc = "atom_setfloat(av + i, temp);"]
    #[doc = "}"]
    #[doc = "return MAX_ERR_NONE;"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn attr_addfilterset_proc(x: *mut ::std::os::raw::c_void, proc_: method) -> t_max_err;
}
extern "C" {
    #[doc = "Attaches a custom filter method to an attribute. The filter will <em>only</em> be called for values retrieved from the attribute using the attribute's <tt>get</tt> function."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = ""]
    #[doc = "@param \tx\t\tPointer to the attribute to receive the filter"]
    #[doc = "@param \tproc\tA filter method"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    #[doc = ""]
    #[doc = "@remark \t\tThe filter method should be prototyped and implemented as described above for the attr_addfilterset_proc() function."]
    pub fn attr_addfilterget_proc(x: *mut ::std::os::raw::c_void, proc_: method) -> t_max_err;
}
extern "C" {
    #[doc = "Generates a unique #t_symbol *. The symbol will be formatted somewhat like \"u123456789\"."]
    #[doc = ""]
    #[doc = "@ingroup\tmisc"]
    #[doc = "@return \tThis function returns a unique #t_symbol *."]
    pub fn symbol_unique() -> *mut t_symbol;
}
extern "C" {
    #[doc = "Posts an error message to the Max window. This function is interrupt safe."]
    #[doc = ""]
    #[doc = "@ingroup misc"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe object's pointer"]
    #[doc = "@param \ts\t\tSymbol to be posted as an error in the Max window"]
    pub fn error_sym(x: *mut ::std::os::raw::c_void, s: *mut t_symbol);
}
extern "C" {
    #[doc = "Posts a message to the Max window. This function is interrupt safe."]
    #[doc = ""]
    #[doc = "@ingroup misc"]
    #[doc = "@param \tx\t\tThe object's pointer"]
    #[doc = "@param \ts\t\tSymbol to be posted in the Max window"]
    pub fn post_sym(x: *mut ::std::os::raw::c_void, s: *mut t_symbol);
}
extern "C" {
    #[doc = "Performs an ASCII sort on an array of #t_symbol *s."]
    #[doc = ""]
    #[doc = "@ingroup misc"]
    #[doc = ""]
    #[doc = "@param \tac\t\tThe count of #t_symbol *s in <tt>av</tt>"]
    #[doc = "@param \tav\t\tAn array of #t_symbol *s to be sorted"]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn symbolarray_sort(ac: ::std::os::raw::c_long, av: *mut *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "Developers do not need to directly use the object_obex_quickref() function."]
    #[doc = "It was used in Max 4 to add support for attributes to the quickref, but this is automatic in Max 5."]
    #[doc = ""]
    #[doc = "@ingroup misc"]
    pub fn object_obex_quickref(
        x: *mut ::std::os::raw::c_void,
        numitems: *mut ::std::os::raw::c_long,
        items: *mut *mut t_symbol,
    );
}
extern "C" {
    pub fn class_menufun_get(c: *mut t_class) -> method;
}
extern "C" {
    pub fn class_clonable(x: *mut t_class) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn object_clonable(x: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn class_buildprototype(x: *mut t_class) -> t_max_err;
}
extern "C" {
    pub fn class_cloneprototype(x: *mut t_class) -> *mut t_dictionary;
}
extern "C" {
    #[doc = "Create a dictionary of attribute-name, attribute-value pairs"]
    #[doc = "from an array of atoms containing an attribute definition list."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = "@param\tx\tA dictionary instance pointer."]
    #[doc = "@param\tac\tThe number of atoms to parse in av."]
    #[doc = "@param\tav\tA pointer to the first of the array of atoms containing the attribute values."]
    #[doc = ""]
    #[doc = "@remark\t\tThe code example below shows the creation of a list of atoms using atom_setparse(),"]
    #[doc = "and then uses that list of atoms to fill the dictionary with attr_args_dictionary()."]
    #[doc = "@code"]
    #[doc = "long ac = 0;"]
    #[doc = "t_atom *av = NULL;"]
    #[doc = "char parsebuf[4096];"]
    #[doc = "t_dictionary *d = dictionary_new();"]
    #[doc = "t_atom a;"]
    #[doc = ""]
    #[doc = "sprintf(parsebuf,\"@defrect %.6f %.6f %.6f %.6f @title Untitled @presentation 0 \", r->x, r->y, r->width, r->height);"]
    #[doc = "atom_setparse(&ac, &av, parsebuf);"]
    #[doc = "attr_args_dictionary(d, ac, av);"]
    #[doc = "atom_setobj(&a, d);"]
    #[doc = "@endcode"]
    pub fn attr_args_dictionary(x: *mut t_dictionary, ac: ::std::os::raw::c_short, av: *mut t_atom);
}
extern "C" {
    #[doc = "Set attributes for an object that are defined in a dictionary."]
    #[doc = "Objects with dictionary constructors, such as UI objects,"]
    #[doc = "should call this method to set their attributes when an object is created."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = "@param\tx\tThe object instance pointer."]
    #[doc = "@param\td\tThe dictionary containing the attributes."]
    #[doc = "@see\tattr_args_process()"]
    pub fn attr_dictionary_process(x: *mut ::std::os::raw::c_void, d: *mut t_dictionary);
}
extern "C" {
    #[doc = "Check that a dictionary only contains values for existing attributes"]
    #[doc = "of an object. If a key in the dictionary doesn't correspond an one of"]
    #[doc = "the object's attributes, an error will be posted to the Max window."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = "@param\tx\tThe object instance pointer."]
    #[doc = "@param\td\tThe dictionary containing the attributes."]
    #[doc = "@see\tattr_dictionary_process()"]
    pub fn attr_dictionary_check(x: *mut ::std::os::raw::c_void, d: *mut t_dictionary);
}
extern "C" {
    #[doc = "Retrieve a pointer to a dictionary passed in as an atom argument."]
    #[doc = "Use this function when working with classes that have dictionary constructors"]
    #[doc = "to fetch the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = "@param\tac\tThe number of atoms."]
    #[doc = "@param\tav\tA pointer to the first atom in the array."]
    #[doc = "@return\t\tThe dictionary retrieved from the atoms."]
    #[doc = "@see\t\tattr_dictionary_process()"]
    pub fn object_dictionaryarg(ac: ::std::os::raw::c_long, av: *mut t_atom) -> *mut t_dictionary;
}
extern "C" {
    pub fn class_sticky(
        x: *mut t_class,
        stickyname: *mut t_symbol,
        s: *mut t_symbol,
        o: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_sticky_clear(
        x: *mut t_class,
        stickyname: *mut t_symbol,
        s: *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_retain(x: *mut t_object) -> t_max_err;
}
extern "C" {
    pub fn object_release(x: *mut t_object) -> t_max_err;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _method_object {
    pub ob: t_object,
    pub messlist_entry: t_messlist,
}
#[test]
fn bindgen_test_layout__method_object() {
    assert_eq!(
        ::std::mem::size_of::<_method_object>(),
        56usize,
        concat!("Size of: ", stringify!(_method_object))
    );
    assert_eq!(
        ::std::mem::align_of::<_method_object>(),
        8usize,
        concat!("Alignment of ", stringify!(_method_object))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_method_object>())).ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_method_object),
            "::",
            stringify!(ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_method_object>())).messlist_entry as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_method_object),
            "::",
            stringify!(messlist_entry)
        )
    );
}
pub type t_method_object = _method_object;
extern "C" {
    pub fn method_object_new(
        m: method,
        name: *const ::std::os::raw::c_char,
        ...
    ) -> *mut t_method_object;
}
extern "C" {
    pub fn method_object_new_messlist(m: *mut t_messlist) -> *mut t_method_object;
}
extern "C" {
    pub fn method_object_free(x: *mut t_method_object);
}
extern "C" {
    pub fn method_object_getname(x: *mut t_method_object) -> *mut t_symbol;
}
extern "C" {
    pub fn method_object_setname(x: *mut t_method_object, s: *mut t_symbol);
}
extern "C" {
    pub fn method_object_getmethod(x: *mut t_method_object) -> method;
}
extern "C" {
    pub fn method_object_setmethod(x: *mut t_method_object, m: method);
}
extern "C" {
    pub fn method_object_getmesslist(x: *mut t_method_object) -> *mut t_messlist;
}
extern "C" {
    pub fn method_object_setmesslist(x: *mut t_method_object, m: *mut t_messlist);
}
extern "C" {
    pub fn class_getmethod_object(
        x: *mut t_class,
        methodname: *mut t_symbol,
    ) -> *mut t_method_object;
}
extern "C" {
    pub fn object_getmethod_object(
        x: *mut t_object,
        methodname: *mut t_symbol,
    ) -> *mut t_method_object;
}
extern "C" {
    pub fn object_attrhash_apply(x: *mut t_object, attrhash: *mut t_hashtab) -> t_max_err;
}
extern "C" {
    pub fn object_sticky(
        x: *mut t_object,
        stickyname: *mut t_symbol,
        s: *mut t_symbol,
        o: *mut t_object,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_sticky_clear(
        x: *mut t_object,
        stickyname: *mut t_symbol,
        s: *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_addmethod(
        x: *mut t_object,
        m: method,
        name: *const ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    pub fn object_deletemethod(x: *mut t_object, methodsym: *mut t_symbol) -> t_max_err;
}
extern "C" {
    pub fn object_chuckmethod(x: *mut t_object, methodsym: *mut t_symbol) -> t_max_err;
}
extern "C" {
    pub fn attr_typedfun_set(
        parent: *mut ::std::os::raw::c_void,
        x: *mut t_object,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_getnames(
        x: *mut ::std::os::raw::c_void,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Allocate a single atom."]
    #[doc = "If ac and av are both zero then memory is allocated."]
    #[doc = "Otherwise it is presumed that memory is already allocated and nothing will happen."]
    #[doc = ""]
    #[doc = "@ingroup\t\tatom"]
    #[doc = "@param\tac\t\tThe address of a variable that will contain the number of atoms allocated (1)."]
    #[doc = "@param\tav\t\tThe address of a pointer that will be set with the new allocated memory for the atom."]
    #[doc = "@param\talloc\tAddress of a variable that will be set true is memory is allocated, otherwise false."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn atom_alloc(
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
        alloc: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Allocate an array of atoms."]
    #[doc = "If ac and av are both zero then memory is allocated."]
    #[doc = "Otherwise it is presumed that memory is already allocated and nothing will happen."]
    #[doc = ""]
    #[doc = "@ingroup\t\tatom"]
    #[doc = "@param\tminsize\tThe minimum number of atoms that this array will need to contain."]
    #[doc = "This determines the amount of memory allocated."]
    #[doc = "@param\tac\t\tThe address of a variable that will contain the number of atoms allocated."]
    #[doc = "@param\tav\t\tThe address of a pointer that will be set with the new allocated memory for the atoms."]
    #[doc = "@param\talloc\tAddress of a variable that will be set true is memory is allocated, otherwise false."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn atom_alloc_array(
        minsize: ::std::os::raw::c_long,
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
        alloc: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_is_box(c: *mut t_class) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn object_dictionary_fromnewargs(
        patcher: *mut t_object,
        c: *mut t_class,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
        flags: ::std::os::raw::c_long,
        freedict: *mut ::std::os::raw::c_char,
    ) -> *mut t_dictionary;
}
extern "C" {
    #[doc = "Determine if a class is a user interface object."]
    #[doc = ""]
    #[doc = "@ingroup \tclass"]
    #[doc = "@param\tc\tThe class pointer."]
    #[doc = "@return\t\tTrue is the class defines a user interface object, otherwise false."]
    pub fn class_is_ui(c: *mut t_class) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Define a subclass of an existing class."]
    #[doc = "First call class_new on the subclass, then pass in to class_subclass."]
    #[doc = "If constructor or destructor are NULL will use the superclass constructor."]
    #[doc = ""]
    #[doc = "@ingroup\t\t\tclass"]
    #[doc = "@param\tsuperclass\tThe superclass pointer."]
    #[doc = "@param\tsubclass\tThe subclass pointer."]
    #[doc = "@return\t\t\tA Max error code"]
    pub fn class_subclass(superclass: *mut t_class, subclass: *mut t_class) -> t_max_err;
}
extern "C" {
    #[doc = "Call super class constructor."]
    #[doc = "Use this instead of object_alloc if you want to call the super class constructor,"]
    #[doc = "but allocating enough memory for subclass."]
    #[doc = ""]
    #[doc = "@ingroup\t\tclass"]
    #[doc = "@param\tc\t\tThe (sub)class pointer."]
    #[doc = "@param\t...\t\tArgs to super class constructor."]
    #[doc = "@return\t\t\tinitialized object instance"]
    pub fn class_super_construct(c: *mut t_class, ...) -> *mut t_object;
}
extern "C" {
    pub fn class_super_construct_imp(
        c: *mut ::std::os::raw::c_void,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut ::std::os::raw::c_void,
        p3: *mut ::std::os::raw::c_void,
        p4: *mut ::std::os::raw::c_void,
        p5: *mut ::std::os::raw::c_void,
        p6: *mut ::std::os::raw::c_void,
        p7: *mut ::std::os::raw::c_void,
        p8: *mut ::std::os::raw::c_void,
        p9: *mut ::std::os::raw::c_void,
    ) -> *mut t_object;
}
extern "C" {
    #[doc = "Sends an untyped message to an object using superclass methods."]
    #[doc = "Uses a thread specific stack to ensure traversal up the class hierarchy."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe object that will receive the message"]
    #[doc = "@param \ts\t\tThe message selector"]
    #[doc = "@param \t...\t\tAny arguments to the message"]
    #[doc = ""]
    #[doc = "@return \t\tIf the receiver object can respond to the message, object_method() returns the result. Otherwise, the function will return 0."]
    pub fn object_super_method(
        x: *mut t_object,
        s: *mut t_symbol,
        ...
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_super_method_imp(
        x: *mut ::std::os::raw::c_void,
        s: *mut ::std::os::raw::c_void,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut ::std::os::raw::c_void,
        p3: *mut ::std::os::raw::c_void,
        p4: *mut ::std::os::raw::c_void,
        p5: *mut ::std::os::raw::c_void,
        p6: *mut ::std::os::raw::c_void,
        p7: *mut ::std::os::raw::c_void,
        p8: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Sends an untyped message to an object, respects a thread specific class stack from object_super_method() calls"]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\tThe object that will receive the message"]
    #[doc = "@param \ts\t\tThe message selector"]
    #[doc = "@param \t...\t\tAny arguments to the message"]
    #[doc = ""]
    #[doc = "@return \t\tIf the receiver object can respond to the message, object_method() returns the result. Otherwise, the function will return 0."]
    pub fn object_this_method(
        x: *mut t_object,
        s: *mut t_symbol,
        ...
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_this_method_imp(
        x: *mut ::std::os::raw::c_void,
        s: *mut ::std::os::raw::c_void,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut ::std::os::raw::c_void,
        p3: *mut ::std::os::raw::c_void,
        p4: *mut ::std::os::raw::c_void,
        p5: *mut ::std::os::raw::c_void,
        p6: *mut ::std::os::raw::c_void,
        p7: *mut ::std::os::raw::c_void,
        p8: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Mark an attribute as being touched by some code not from the attribute setter."]
    #[doc = "This will notify clients that the attribute has changed."]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\t\tThe object whose attribute has been changed"]
    #[doc = "@param \tattrname\tThe attribute name"]
    #[doc = ""]
    #[doc = "@return\t\t\t\tA Max error code"]
    pub fn object_attr_touch(x: *mut t_object, attrname: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "Mark one or more attributes as being touched by some code not from the attribute setter."]
    #[doc = "This will notify clients that the attributes have changed. Utility to call object_attr_touch()"]
    #[doc = "for several attributes"]
    #[doc = ""]
    #[doc = "@ingroup obj"]
    #[doc = ""]
    #[doc = "@param \tx\t\t\tThe object whose attribute has been changed"]
    #[doc = "@param \tattrnames\tThe attribute names as a space separated string"]
    #[doc = ""]
    #[doc = "@return\t\t\t\tA Max error code"]
    pub fn object_attr_touch_parse(
        x: *mut t_object,
        attrnames: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_attr_getdirty(
        x: *mut t_object,
        attrname: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
#[doc = " An opaque thread instance pointer."]
#[doc = "@ingroup threading"]
pub type t_systhread = *mut ::std::os::raw::c_void;
#[doc = " An opaque mutex handle."]
#[doc = "@ingroup threading"]
pub type t_systhread_mutex = *mut ::std::os::raw::c_void;
#[doc = " An opaque cond handle."]
#[doc = "@ingroup threading"]
pub type t_systhread_cond = *mut ::std::os::raw::c_void;
pub type t_systhread_rwlock = *mut ::std::os::raw::c_void;
pub type t_systhread_key = *mut ::std::os::raw::c_void;
pub mod e_max_systhread_mutex_flags {
    #[doc = " systhread_mutex_new() flags"]
    #[doc = "@ingroup threading"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< Normal"]
    pub const SYSTHREAD_MUTEX_NORMAL: Type = 0;
    #[doc = "< Error-checking"]
    pub const SYSTHREAD_MUTEX_ERRORCHECK: Type = 1;
    #[doc = "< Recursive"]
    pub const SYSTHREAD_MUTEX_RECURSIVE: Type = 2;
}
pub mod e_max_systhread_priority {
    pub type Type = ::std::os::raw::c_int;
    pub const SYSTHREAD_PRIORITY_MIN: Type = -30;
    pub const SYSTHREAD_PRIORITY_DEFAULT: Type = 0;
    pub const SYSTHREAD_PRIORITY_MAX: Type = 30;
}
pub mod e_max_systhread_rwlock_flags {
    pub type Type = ::std::os::raw::c_uint;
    pub const SYSTHREAD_RWLOCK_NORMAL: Type = 0;
    pub const SYSTHREAD_RWLOCK_LITE: Type = 1;
}
extern "C" {
    #[doc = "Create a new thread."]
    #[doc = "@ingroup threading"]
    #[doc = ""]
    #[doc = "@param\tentryproc\tA method to call in the new thread when the thread is created."]
    #[doc = "@param\targ\t\t\tAn argument to pass to the method specified for entryproc."]
    #[doc = "Typically this might be a pointer to your object's struct."]
    #[doc = "@param\tstacksize\tNot used.  Pass 0 for this argument."]
    #[doc = "@param\tpriority\tPass 0 for default priority.  The priority can range from -32 to 32 where -32 is low, 0 is default and 32 is high."]
    #[doc = "@param\tflags\t\tNot used.  Pass 0 for this argument."]
    #[doc = "@param\tthread\t\tThe address of a #t_systhread where this thread's instance pointer will be stored."]
    #[doc = "@return\t\t\t\tA Max error code as defined in #e_max_errorcodes."]
    pub fn systhread_create(
        entryproc: method,
        arg: *mut ::std::os::raw::c_void,
        stacksize: ::std::os::raw::c_long,
        priority: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
        thread: *mut t_systhread,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Forcefully kill a thread -- not recommended."]
    #[doc = "@ingroup threading"]
    #[doc = ""]
    #[doc = "@param\tthread\tThe thread to kill."]
    #[doc = "@return\t\t\tA Max error code as defined in #e_max_errorcodes."]
    pub fn systhread_terminate(thread: t_systhread) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Suspend the execution of the calling thread."]
    #[doc = "@ingroup threading"]
    #[doc = ""]
    #[doc = "@param\tmilliseconds\tThe number of milliseconds to suspend the execution of the calling thread."]
    #[doc = "The actual amount of time may be longer depending on various factors."]
    pub fn systhread_sleep(milliseconds: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Exit the calling thread."]
    #[doc = "Call this from within a thread made using systhread_create() when the thread is no longer needed."]
    #[doc = ""]
    #[doc = "@ingroup threading"]
    #[doc = "@param\tstatus\t\tYou will typically pass 0 for status."]
    #[doc = "This value will be accessible by systhread_join(), if needed."]
    pub fn systhread_exit(status: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Wait for thread to quit and get return value from systhread_exit()."]
    #[doc = ""]
    #[doc = "@ingroup threading"]
    #[doc = "@param\tthread\t\tThe thread to join."]
    #[doc = "@param\tretval\t\tThe address of a long to hold the return value (status) from systhread_exit()."]
    #[doc = "@return\t\t\t\tA Max error code as defined in #e_max_errorcodes."]
    #[doc = ""]
    #[doc = "@remark\tIf your object is freed, and your thread function accesses memory from your object,"]
    #[doc = "then you will obviously have a memory violation."]
    #[doc = "A common use of systhread_join() is to prevent this situation by waiting (in your free method)"]
    #[doc = "for the thread to exit."]
    pub fn systhread_join(
        thread: t_systhread,
        retval: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Detach a thread. After detaching a thread you cannot call systhread_join() on it."]
    #[doc = ""]
    #[doc = "@ingroup threading"]
    #[doc = "@param\tthread\t\tThe thread to join."]
    #[doc = "@return\t\t\t\tA Max error code as defined in #e_max_errorcodes."]
    #[doc = ""]
    #[doc = "@remark\tYou should either call systhread_join() on a thread or systhread_detach()"]
    #[doc = "to allow the system to reclaim resources."]
    pub fn systhread_detach(thread: t_systhread) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Return the thread instance pointer for the calling thread."]
    #[doc = "@ingroup\tthreading"]
    #[doc = "@return\t\tThe thread instance pointer for the thread from which this function is called."]
    pub fn systhread_self() -> t_systhread;
}
extern "C" {
    #[doc = "Compare two threads to see if they reference the same thread."]
    #[doc = "The t_systhread type is opaque and two should not be compared directly."]
    #[doc = "@ingroup\tthreading"]
    #[doc = "@param\t\tthread1\t\tthe first thread to be compared"]
    #[doc = "@param\t\tthread2\t\tthe second thread to be compared"]
    #[doc = "@return\t\tnonzero if the two parameters reference the same thread"]
    pub fn systhread_equal(thread1: t_systhread, thread2: t_systhread) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Set the thread priority for the given thread."]
    #[doc = "@ingroup\tthreading"]
    #[doc = "@param\t\tthread \t\t\tThe thread for which to set the priority."]
    #[doc = "@param\t\tpriority\t\tA value in the range -32 to 32 where -32 is lowest, 0 is default, and 32 is highest."]
    pub fn systhread_setpriority(thread: t_systhread, priority: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = "Get the thread priority for the given thread."]
    #[doc = "@ingroup\tthreading"]
    #[doc = "@param\t\tthread \t\t\tThe thread for which to find the priority."]
    #[doc = "@return\t\t\t\t\t\tThe current priority value for the given thread."]
    pub fn systhread_getpriority(thread: t_systhread) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Check to see if the function currently being executed is in the main thread."]
    #[doc = "@ingroup\tthreading"]
    #[doc = "@return\t\tReturns true if the function is being executed in the main thread, otherwise false."]
    pub fn systhread_ismainthread() -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = " Check to see if the function currently being executed is in a scheduler thread."]
    #[doc = "@ingroup\tthreading"]
    #[doc = "@return\t\tReturns true if the function is being executed in a scheduler thread, otherwise false."]
    pub fn systhread_istimerthread() -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = " Check to see if the function currently being executed is in an audio thread."]
    #[doc = "@ingroup\tthreading"]
    #[doc = "@return\t\tReturns true if the function is being executed in an audio thread, otherwise false."]
    pub fn systhread_isaudiothread() -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = "Set the name of the current thread, for debugging purposes."]
    #[doc = "Recommended to call from the top of the entryproc passed to systhread_create"]
    #[doc = ""]
    #[doc = "@ingroup threading"]
    #[doc = "@param\tname\tThe name to be given."]
    pub fn systhread_set_name(name: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "Create a new mutex, which can be used to place thread locks around critical code."]
    #[doc = "The mutex should be freed with systhread_mutex_free()."]
    #[doc = "@ingroup mutex"]
    #[doc = ""]
    #[doc = "@param\tpmutex\tThe address of a variable to store the mutex pointer."]
    #[doc = "@param\tflags\tFlags to determine the behaviour of the mutex, as defined in #e_max_systhread_mutex_flags."]
    #[doc = "@return\t\t\tA Max error code as defined in #e_max_errorcodes."]
    #[doc = ""]
    #[doc = "@remark\t\t\tOne reason to use systhread_mutex_new() instead of @ref critical is to"]
    #[doc = "create non-recursive locks, which are lighter-weight than recursive locks."]
    pub fn systhread_mutex_new(
        pmutex: *mut t_systhread_mutex,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Free a mutex created with systhread_mutex_new()."]
    #[doc = "@ingroup mutex"]
    #[doc = "@param\tpmutex\tThe mutex instance pointer."]
    #[doc = "@return\t\t\tA Max error code as defined in #e_max_errorcodes."]
    pub fn systhread_mutex_free(pmutex: t_systhread_mutex) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Enter block of locked code code until a systhread_mutex_unlock() is reached."]
    #[doc = "It is important to keep the code in this block as small as possible."]
    #[doc = "@ingroup mutex"]
    #[doc = "@param\tpmutex\tThe mutex instance pointer."]
    #[doc = "@return\t\t\tA Max error code as defined in #e_max_errorcodes."]
    #[doc = "@see\t\t\tsysthread_mutex_trylock()"]
    pub fn systhread_mutex_lock(pmutex: t_systhread_mutex) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Exit a block of code locked with systhread_mutex_lock()."]
    #[doc = "@ingroup mutex"]
    #[doc = "@param\tpmutex\tThe mutex instance pointer."]
    #[doc = "@return\t\t\tA Max error code as defined in #e_max_errorcodes."]
    pub fn systhread_mutex_unlock(pmutex: t_systhread_mutex) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Try to enter block of locked code code until a systhread_mutex_unlock() is reached."]
    #[doc = "If the lock cannot be entered, this function will return non-zero."]
    #[doc = ""]
    #[doc = "@ingroup mutex"]
    #[doc = "@param\tpmutex\tThe mutex instance pointer."]
    #[doc = "@return\t\t\tReturns non-zero if there was a problem entering."]
    #[doc = "@see\t\t\tsysthread_mutex_lock()"]
    pub fn systhread_mutex_trylock(pmutex: t_systhread_mutex) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Convenience utility that combines systhread_mutex_new() and systhread_mutex_lock()."]
    #[doc = "@ingroup mutex"]
    #[doc = "@param\tpmutex\tThe address of a variable to store the mutex pointer."]
    #[doc = "@param\tflags\tFlags to determine the behaviour of the mutex, as defined in #e_max_systhread_mutex_flags."]
    #[doc = "@return\t\t\tA Max error code as defined in #e_max_errorcodes."]
    pub fn systhread_mutex_newlock(
        pmutex: *mut t_systhread_mutex,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn systhread_rwlock_new(
        rwlock: *mut t_systhread_rwlock,
        flags: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn systhread_rwlock_free(rwlock: t_systhread_rwlock) -> t_max_err;
}
extern "C" {
    pub fn systhread_rwlock_rdlock(rwlock: t_systhread_rwlock) -> t_max_err;
}
extern "C" {
    pub fn systhread_rwlock_tryrdlock(rwlock: t_systhread_rwlock) -> t_max_err;
}
extern "C" {
    pub fn systhread_rwlock_rdunlock(rwlock: t_systhread_rwlock) -> t_max_err;
}
extern "C" {
    pub fn systhread_rwlock_wrlock(rwlock: t_systhread_rwlock) -> t_max_err;
}
extern "C" {
    pub fn systhread_rwlock_trywrlock(rwlock: t_systhread_rwlock) -> t_max_err;
}
extern "C" {
    pub fn systhread_rwlock_wrunlock(rwlock: t_systhread_rwlock) -> t_max_err;
}
extern "C" {
    pub fn systhread_rwlock_setspintime(rwlock: t_systhread_rwlock, spintime_ms: f64) -> t_max_err;
}
extern "C" {
    pub fn systhread_rwlock_getspintime(
        rwlock: t_systhread_rwlock,
        spintime_ms: *mut f64,
    ) -> t_max_err;
}
extern "C" {
    pub fn systhread_cond_new(
        pcond: *mut t_systhread_cond,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn systhread_cond_free(pcond: t_systhread_cond) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn systhread_cond_wait(
        pcond: t_systhread_cond,
        pmutex: t_systhread_mutex,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn systhread_cond_signal(pcond: t_systhread_cond) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn systhread_cond_broadcast(pcond: t_systhread_cond) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn systhread_key_create(
        key: *mut t_systhread_key,
        destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn systhread_key_delete(key: t_systhread_key) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn systhread_getspecific(key: t_systhread_key) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn systhread_setspecific(
        key: t_systhread_key,
        value: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn systhread_eliminatedenormals();
}
extern "C" {
    pub fn jdrag_getitemstring(
        dg: *mut t_object,
        index: ::std::os::raw::c_long,
        quote: ::std::os::raw::c_long,
        backslash: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jdrag_getobject(dg: *mut t_object, index: ::std::os::raw::c_long) -> *mut t_object;
}
extern "C" {
    pub fn jdrag_getlocation(
        dg: *mut t_object,
        index: ::std::os::raw::c_long,
        xpos: *mut f64,
        ypos: *mut f64,
    );
}
extern "C" {
    pub fn jdrag_createobject(
        dg: *mut t_object,
        pv: *mut t_object,
        d: *mut ::std::os::raw::c_void,
        dragobjectindex: ::std::os::raw::c_long,
    ) -> *mut t_object;
}
extern "C" {
    pub fn jdrag_createnewobj(
        dg: *mut t_object,
        pv: *mut t_object,
        classname: *mut ::std::os::raw::c_char,
        str_: *mut ::std::os::raw::c_char,
        dragobjectindex: ::std::os::raw::c_long,
    ) -> *mut t_object;
}
extern "C" {
    pub fn jdrag_createmessage(
        dg: *mut t_object,
        pv: *mut t_object,
        msg: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        dragobjectindex: ::std::os::raw::c_long,
    ) -> *mut t_object;
}
extern "C" {
    pub fn jdrag_itemcount(dg: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jdrag_add(
        dg: *mut t_object,
        rcv: *mut t_object,
        msg: *mut t_symbol,
        desc: *const ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn jdrag_process_drop(
        dx: *mut t_object,
        receiver: *mut t_object,
        ref_: *mut ::std::os::raw::c_void,
        msg: *mut t_symbol,
        src: *mut ::std::os::raw::c_void,
        x: f64,
        y: f64,
    );
}
extern "C" {
    pub fn jdrag_matchdragrole(
        dx: *mut t_object,
        role: *mut t_symbol,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jdrag_setboxlocation(dg: *mut t_object, box_: *mut t_object);
}
extern "C" {
    pub fn jdrag_object_add(dg: *mut t_object, obj: *mut t_object, msg: *mut t_symbol);
}
extern "C" {
    pub fn jdrag_box_add(dg: *mut t_object, box_: *mut t_object, msg: *mut t_symbol);
}
pub mod _modifiers {
    #[doc = "\tBit mask values for various meta-key presses on the keyboard."]
    #[doc = "@ingroup\tjmouse"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< Command Key"]
    pub const eCommandKey: Type = 1;
    #[doc = "< Shift Key"]
    pub const eShiftKey: Type = 2;
    #[doc = "< Control Key"]
    pub const eControlKey: Type = 4;
    #[doc = "< Alt Key"]
    pub const eAltKey: Type = 8;
    #[doc = "< Left mouse button"]
    pub const eLeftButton: Type = 16;
    #[doc = "< Right mouse button"]
    pub const eRightButton: Type = 32;
    #[doc = "< Middle mouse button"]
    pub const eMiddleButton: Type = 64;
    #[doc = "< Popup Menu (contextual menu requested)"]
    pub const ePopupMenu: Type = 128;
    #[doc = "< Caps lock"]
    pub const eCapsLock: Type = 256;
    #[doc = "< Key is generated by key press auto-repeat"]
    pub const eAutoRepeat: Type = 512;
}
#[doc = "\tBit mask values for various meta-key presses on the keyboard."]
#[doc = "@ingroup\tjmouse"]
pub use self::_modifiers::Type as t_modifiers;
extern "C" {
    pub fn fontmap_getmapping(
        from: *mut t_symbol,
        mapped: *mut ::std::os::raw::c_char,
    ) -> *mut t_symbol;
}
extern "C" {
    pub fn fontinfo_getsize(oldsize: ::std::os::raw::c_short) -> f64;
}
extern "C" {
    pub fn fontinfo_getname(number: ::std::os::raw::c_short) -> *mut t_symbol;
}
extern "C" {
    pub fn fontinfo_getnumber(s: *mut t_symbol) -> ::std::os::raw::c_short;
}
#[doc = "Coordinates for specifying a rectangular region."]
#[doc = "@ingroup \tdatatypes"]
#[doc = "@see\t\tt_pt"]
#[doc = "@see\t\tt_size"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rect {
    #[doc = "< The horizontal origin"]
    pub x: f64,
    #[doc = "< The vertical origin"]
    pub y: f64,
    #[doc = "< The width"]
    pub width: f64,
    #[doc = "< The height"]
    pub height: f64,
}
#[test]
fn bindgen_test_layout__rect() {
    assert_eq!(
        ::std::mem::size_of::<_rect>(),
        32usize,
        concat!("Size of: ", stringify!(_rect))
    );
    assert_eq!(
        ::std::mem::align_of::<_rect>(),
        8usize,
        concat!("Alignment of ", stringify!(_rect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rect>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_rect), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rect>())).y as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_rect), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rect>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rect),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rect>())).height as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_rect),
            "::",
            stringify!(height)
        )
    );
}
#[doc = "Coordinates for specifying a rectangular region."]
#[doc = "@ingroup \tdatatypes"]
#[doc = "@see\t\tt_pt"]
#[doc = "@see\t\tt_size"]
pub type t_rect = _rect;
#[doc = "Coordinates for specifying a point."]
#[doc = "@ingroup \tdatatypes"]
#[doc = "@see\t\tt_rect"]
#[doc = "@see\t\tt_size"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pt {
    #[doc = "< The horizontal coordinate"]
    pub x: f64,
    #[doc = "< The vertical coordinate"]
    pub y: f64,
}
#[test]
fn bindgen_test_layout__pt() {
    assert_eq!(
        ::std::mem::size_of::<_pt>(),
        16usize,
        concat!("Size of: ", stringify!(_pt))
    );
    assert_eq!(
        ::std::mem::align_of::<_pt>(),
        8usize,
        concat!("Alignment of ", stringify!(_pt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pt>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_pt), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pt>())).y as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_pt), "::", stringify!(y))
    );
}
#[doc = "Coordinates for specifying a point."]
#[doc = "@ingroup \tdatatypes"]
#[doc = "@see\t\tt_rect"]
#[doc = "@see\t\tt_size"]
pub type t_pt = _pt;
#[doc = "Coordinates for specifying the size of a region."]
#[doc = "@ingroup \tdatatypes"]
#[doc = "@see\t\tt_rect"]
#[doc = "@see\t\tt_pt"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _size {
    #[doc = "< The width"]
    pub width: f64,
    #[doc = "< The height"]
    pub height: f64,
}
#[test]
fn bindgen_test_layout__size() {
    assert_eq!(
        ::std::mem::size_of::<_size>(),
        16usize,
        concat!("Size of: ", stringify!(_size))
    );
    assert_eq!(
        ::std::mem::align_of::<_size>(),
        8usize,
        concat!("Alignment of ", stringify!(_size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_size>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_size),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_size>())).height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_size),
            "::",
            stringify!(height)
        )
    );
}
#[doc = "Coordinates for specifying the size of a region."]
#[doc = "@ingroup \tdatatypes"]
#[doc = "@see\t\tt_rect"]
#[doc = "@see\t\tt_pt"]
pub type t_size = _size;
#[doc = "\tA color composed of red, green, blue, and alpha components."]
#[doc = "@ingroup color"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jrgba {
    #[doc = "< Red component in the range [0.0, 1.0]"]
    pub red: f64,
    #[doc = "< Green component in the range [0.0, 1.0]"]
    pub green: f64,
    pub blue: f64,
    #[doc = "< Alpha (transparency) component in the range [0.0, 1.0]"]
    pub alpha: f64,
}
#[test]
fn bindgen_test_layout__jrgba() {
    assert_eq!(
        ::std::mem::size_of::<_jrgba>(),
        32usize,
        concat!("Size of: ", stringify!(_jrgba))
    );
    assert_eq!(
        ::std::mem::align_of::<_jrgba>(),
        8usize,
        concat!("Alignment of ", stringify!(_jrgba))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jrgba>())).red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jrgba),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jrgba>())).green as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jrgba),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jrgba>())).blue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jrgba),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jrgba>())).alpha as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jrgba),
            "::",
            stringify!(alpha)
        )
    );
}
#[doc = "\tA color composed of red, green, blue, and alpha components."]
#[doc = "@ingroup color"]
pub type t_jrgba = _jrgba;
#[doc = " The t_jbox struct provides the header for a Max user-interface object."]
#[doc = "This struct should be considered opaque and is subject to change without notice."]
#[doc = "Do not access it's members directly any code."]
#[doc = ""]
#[doc = "@ingroup patcher"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jbox {
    pub b_ob: t_object,
    pub obex: *mut ::std::os::raw::c_void,
    pub b_patcher: *mut t_object,
    pub b_patching_rect: t_rect,
    pub b_presentation_rect: t_rect,
    pub b_name: *mut t_symbol,
    pub b_id: *mut t_symbol,
    pub b_firstin: *mut t_object,
    pub b_textfield: *mut t_object,
    pub b_fontname: *mut t_symbol,
    pub b_fontsize: f64,
    pub b_hint: *mut ::std::os::raw::c_char,
    pub b_color: t_jrgba,
    pub b_unused: f64,
    pub b_binbuf: *mut ::std::os::raw::c_void,
    pub b_temp: ::std::os::raw::c_long,
    pub b_spooled: ::std::os::raw::c_char,
    pub b_hidden: ::std::os::raw::c_char,
    pub b_hilitable: ::std::os::raw::c_char,
    pub b_background: ::std::os::raw::c_char,
    pub b_ignoreclick: ::std::os::raw::c_char,
    pub b_bogus: ::std::os::raw::c_char,
    pub b_drawfirstin: ::std::os::raw::c_char,
    pub b_outline: ::std::os::raw::c_char,
    pub b_growy: ::std::os::raw::c_char,
    pub b_growboth: ::std::os::raw::c_char,
    pub b_nogrow: ::std::os::raw::c_char,
    pub b_drawinlast: ::std::os::raw::c_char,
    pub b_paintoverchildren: ::std::os::raw::c_char,
    pub b_mousedragdelta: ::std::os::raw::c_char,
    pub b_presentation: ::std::os::raw::c_char,
    pub b_drawiolocked: ::std::os::raw::c_char,
    pub b_dragactive: ::std::os::raw::c_char,
    pub b_drawbackground: ::std::os::raw::c_char,
    pub b_unused2: ::std::os::raw::c_char,
    pub b_fontface: ::std::os::raw::c_char,
    pub b_annotation: *mut ::std::os::raw::c_char,
    pub b_opaque: ::std::os::raw::c_char,
    pub b_useimagebuffer: ::std::os::raw::c_char,
    pub b_noinspectfirstin: ::std::os::raw::c_char,
    pub b_editactive: ::std::os::raw::c_char,
    pub b_prototypename: *mut t_symbol,
    pub b_commasupport: ::std::os::raw::c_char,
    pub b_boxflags: ::std::os::raw::c_char,
    pub b_textjustification: ::std::os::raw::c_char,
    pub b_reserved3: ::std::os::raw::c_char,
    pub b_ptemp: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__jbox() {
    assert_eq!(
        ::std::mem::size_of::<_jbox>(),
        288usize,
        concat!("Size of: ", stringify!(_jbox))
    );
    assert_eq!(
        ::std::mem::align_of::<_jbox>(),
        8usize,
        concat!("Alignment of ", stringify!(_jbox))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).obex as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(obex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_patcher as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_patcher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_patching_rect as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_patching_rect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_presentation_rect as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_presentation_rect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_name as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_id as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_firstin as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_firstin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_textfield as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_textfield)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_fontname as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_fontname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_fontsize as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_fontsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_hint as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_hint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_color as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_unused as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_binbuf as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_binbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_temp as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_temp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_spooled as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_spooled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_hidden as *const _ as usize },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_hidden)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_hilitable as *const _ as usize },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_hilitable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_background as *const _ as usize },
        227usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_background)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_ignoreclick as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_ignoreclick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_bogus as *const _ as usize },
        229usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_bogus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_drawfirstin as *const _ as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_drawfirstin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_outline as *const _ as usize },
        231usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_outline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_growy as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_growy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_growboth as *const _ as usize },
        233usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_growboth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_nogrow as *const _ as usize },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_nogrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_drawinlast as *const _ as usize },
        235usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_drawinlast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_paintoverchildren as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_paintoverchildren)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_mousedragdelta as *const _ as usize },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_mousedragdelta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_presentation as *const _ as usize },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_presentation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_drawiolocked as *const _ as usize },
        239usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_drawiolocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_dragactive as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_dragactive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_drawbackground as *const _ as usize },
        241usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_drawbackground)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_unused2 as *const _ as usize },
        242usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_unused2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_fontface as *const _ as usize },
        243usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_fontface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_annotation as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_annotation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_opaque as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_opaque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_useimagebuffer as *const _ as usize },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_useimagebuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_noinspectfirstin as *const _ as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_noinspectfirstin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_editactive as *const _ as usize },
        259usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_editactive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_prototypename as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_prototypename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_commasupport as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_commasupport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_boxflags as *const _ as usize },
        273usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_boxflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_textjustification as *const _ as usize },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_textjustification)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_reserved3 as *const _ as usize },
        275usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_reserved3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jbox>())).b_ptemp as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_jbox),
            "::",
            stringify!(b_ptemp)
        )
    );
}
#[doc = " The t_jbox struct provides the header for a Max user-interface object."]
#[doc = "This struct should be considered opaque and is subject to change without notice."]
#[doc = "Do not access it's members directly any code."]
#[doc = ""]
#[doc = "@ingroup patcher"]
pub type t_jbox = _jbox;
extern "C" {
    #[doc = "\tGets the value of a #t_rect attribute, given its parent object and name."]
    #[doc = "Do not use this on a jbox object -- use jbox_get_rect_for_view() instead!"]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = "@param \to\t\tThe attribute's parent object"]
    #[doc = "@param \tname\tThe attribute's name"]
    #[doc = "@param \trect\tThe address of a valid #t_rect whose values will be filled-in from the attribute."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_get_rect(
        o: *mut t_object,
        name: *mut t_symbol,
        rect: *mut t_rect,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tSets the value of a #t_rect attribute, given its parent object and name."]
    #[doc = "Do not use this on a jbox object -- use jbox_get_rect_for_view() instead!"]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = "@param \to\t\tThe attribute's parent object"]
    #[doc = "@param \tname\tThe attribute's name"]
    #[doc = "@param \trect\tThe address of a valid #t_rect whose values will be used to set the attribute."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_set_rect(
        o: *mut t_object,
        name: *mut t_symbol,
        rect: *mut t_rect,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tGets the value of a #t_pt attribute, given its parent object and name."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = "@param \to\t\tThe attribute's parent object"]
    #[doc = "@param \tname\tThe attribute's name"]
    #[doc = "@param \tpt\t\tThe address of a valid #t_pt whose values will be filled-in from the attribute."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_getpt(o: *mut t_object, name: *mut t_symbol, pt: *mut t_pt) -> t_max_err;
}
extern "C" {
    #[doc = "\tSets the value of a #t_pt attribute, given its parent object and name."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = "@param \to\t\tThe attribute's parent object"]
    #[doc = "@param \tname\tThe attribute's name"]
    #[doc = "@param \tpt\t\tThe address of a valid #t_pt whose values will be used to set the attribute."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_setpt(o: *mut t_object, name: *mut t_symbol, pt: *mut t_pt) -> t_max_err;
}
extern "C" {
    #[doc = "\tGets the value of a #t_size attribute, given its parent object and name."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = "@param \to\t\tThe attribute's parent object"]
    #[doc = "@param \tname\tThe attribute's name"]
    #[doc = "@param \tsize\tThe address of a valid #t_size whose values will be filled-in from the attribute."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_getsize(
        o: *mut t_object,
        name: *mut t_symbol,
        size: *mut t_size,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tSets the value of a #t_size attribute, given its parent object and name."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = "@param \to\t\tThe attribute's parent object"]
    #[doc = "@param \tname\tThe attribute's name"]
    #[doc = "@param \tsize\tThe address of a valid #t_size whose values will be used to set the attribute."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_setsize(
        o: *mut t_object,
        name: *mut t_symbol,
        size: *mut t_size,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tGets the value of a #t_jrgba attribute, given its parent object and name."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = "@param \tb\t\t\tThe attribute's parent object"]
    #[doc = "@param \tattrname\tThe attribute's name"]
    #[doc = "@param \tprgba\t\tThe address of a valid #t_jrgba whose values will be filled-in from the attribute."]
    #[doc = ""]
    #[doc = "@return \t\t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_getcolor(
        b: *mut t_object,
        attrname: *mut t_symbol,
        prgba: *mut t_jrgba,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tSets the value of a #t_jrgba attribute, given its parent object and name."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = "@param \tb\t\t\tThe attribute's parent object"]
    #[doc = "@param \tattrname\tThe attribute's name"]
    #[doc = "@param \tprgba\t\tThe address of a valid #t_jrgba whose values will be used to set the attribute."]
    #[doc = ""]
    #[doc = "@return \t\t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_setcolor(
        b: *mut t_object,
        attrname: *mut t_symbol,
        prgba: *mut t_jrgba,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the value of a #t_jrgba struct, given an array of atoms with the values to use."]
    #[doc = ""]
    #[doc = "@ingroup color"]
    #[doc = "@param \tjrgba\tThe color struct whose color will be set."]
    #[doc = "@param \targc\tThe number of atoms in the array.  This must be 4."]
    #[doc = "@param \targv\tThe address of the first of the atoms in the array."]
    #[doc = "There must be 4 atoms, representing alpha, red, green, and blue components."]
    #[doc = ""]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn jrgba_attr_set(
        jrgba: *mut t_jrgba,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn set_jrgba_from_palette_index(index: ::std::os::raw::c_short, jrgba: *mut t_jrgba);
}
extern "C" {
    pub fn set_jrgba_from_boxcolor_index(index: ::std::os::raw::c_short, jrgba: *mut t_jrgba);
}
extern "C" {
    pub fn get_boxcolor_index_from_jrgba(jrgba: *mut t_jrgba) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn jgraphics_clip_rgba(rgba: *mut t_jrgba);
}
extern "C" {
    #[doc = "\tOpen the help patcher for a given object class name."]
    #[doc = "@ingroup\t\t\tobj"]
    #[doc = "@param\tclassname\tThe class name for which to open the help patcher."]
    pub fn classname_openhelp(classname: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "\tOpen the reference page for a given object class name."]
    #[doc = "@ingroup\t\t\tobj"]
    #[doc = "@param\tclassname\tThe class name for which to open the reference page."]
    pub fn classname_openrefpage(classname: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "\tOpen a search in the file browser for files with the name of the given class."]
    #[doc = "@ingroup\t\t\tobj"]
    #[doc = "@param\tclassname\tThe class name for which to query."]
    pub fn classname_openquery(classname: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "\tFind a patcherview at the given screen coords."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tx\tThe horizontal coordinate at which to find a patcherview."]
    #[doc = "@param\ty\tThe vertical coordinate at which to find a patcherview."]
    #[doc = "@return\t\tA pointer to the patcherview at the specified location,"]
    #[doc = "or NULL if no patcherview exists at that location."]
    pub fn patcherview_findpatcherview(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> *mut t_object;
}
extern "C" {
    #[doc = "\tDetermine of a #t_object* is a patcher object."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe object pointer to test."]
    #[doc = "@return\t\tReturns true if the object is a patcher, otherwise returns non-zero."]
    pub fn jpatcher_is_patcher(p: *mut t_object) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\tIf a patcher is inside a box, return its box."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tA pointer to the box containing the patcher, otherwise NULL."]
    pub fn jpatcher_get_box(p: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tDetermine the number of boxes in a patcher."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tThe number of boxes in the patcher."]
    pub fn jpatcher_get_count(p: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tLock or unlock a patcher."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher whose locked state will be changed."]
    #[doc = "@param\tc\tPass true to lock a patcher, otherwise pass false."]
    #[doc = "@return\t\tA Max error code."]
    pub fn jpatcher_set_locked(p: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tDetermine whether a patcher is currently in presentation mode."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tTrue if the patcher is in presentation mode, otherwise false."]
    pub fn jpatcher_get_presentation(p: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tGet the first box in a patcher."]
    #[doc = "All boxes in a patcher are maintained internally in a #t_linklist."]
    #[doc = "Use this function together with jbox_get_nextobject() to traverse a patcher."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tThe first box in a patcher."]
    #[doc = "@see\t\tjbox_get_prevobject()"]
    #[doc = "jbox_get_nextobject()"]
    #[doc = "jpatcher_get_lastobject()"]
    pub fn jpatcher_get_firstobject(p: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tGet the last box in a patcher."]
    #[doc = "All boxes in a patcher are maintained internally in a #t_linklist."]
    #[doc = "Use this function together with jbox_get_prevobject() to traverse a patcher."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tThe last box in a patcher."]
    #[doc = "@see\t\tjbox_get_prevobject()"]
    #[doc = "jbox_get_nextobject()"]
    #[doc = "jpatcher_get_firstobject()"]
    pub fn jpatcher_get_lastobject(p: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tGet the first line (patch-cord) in a patcher."]
    #[doc = "All lines in a patcher are maintained internally in a #t_linklist."]
    #[doc = "Use this function to begin traversing a patcher's lines."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tThe first jpatchline in a patcher."]
    pub fn jpatcher_get_firstline(p: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tGet the first view (jpatcherview) for a given patcher."]
    #[doc = "All views of a patcher are maintained internally as a #t_linklist."]
    #[doc = "Use this function to begin traversing a patcher's views."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tThe first view of a patcher."]
    pub fn jpatcher_get_firstview(p: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tRetrieve a patcher's title."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tThe patcher's title."]
    pub fn jpatcher_get_title(p: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    #[doc = "\tSet a patcher's title."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher whose locked state will be changed."]
    #[doc = "@param\tps\tThe new title for the patcher."]
    #[doc = "@return\t\tA Max error code."]
    pub fn jpatcher_set_title(p: *mut t_object, ps: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "\tRetrieve a patcher's name."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tThe patcher's name."]
    pub fn jpatcher_get_name(p: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    #[doc = "\tRetrieve a patcher's file path."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tThe patcher's file path."]
    pub fn jpatcher_get_filepath(p: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    #[doc = "\tRetrieve a patcher's file name."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tThe patcher's file name."]
    pub fn jpatcher_get_filename(p: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    #[doc = "\tDetermine whether a patcher's dirty bit has been set."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tTrue if the patcher is dirty, otherwise false."]
    pub fn jpatcher_get_dirty(p: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSet a patcher's dirty bit."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher whose dirty bit will be set."]
    #[doc = "@param\tc\tThe new value for the patcher's dirty bit (pass true or false)."]
    #[doc = "@return\t\tA Max error code."]
    pub fn jpatcher_set_dirty(p: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tDetermine whether a patcher's background layer is locked."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tTrue if the background layer is locked, otherwise false."]
    pub fn jpatcher_get_bglocked(p: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tRetrieve a patcher's unlocked background color."]
    #[doc = "@ingroup\t\tjpatcher"]
    #[doc = "@param\tp\t\tThe patcher to be queried."]
    #[doc = "@param\tprgba\tThe address of a valid #t_jrgba struct that will be filled-in with the current patcher color values."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jpatcher_get_bgcolor(p: *mut t_object, prgba: *mut t_jrgba) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet a patcher's unlocked background color."]
    #[doc = "@ingroup\t\tjpatcher"]
    #[doc = "@param\tp\t\tThe patcher to be queried."]
    #[doc = "@param\tprgba\tThe address of a #t_jrgba struct containing the new color to use."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jpatcher_set_bgcolor(p: *mut t_object, prgba: *mut t_jrgba) -> t_max_err;
}
extern "C" {
    #[doc = "\tRetrieve a patcher's grid size."]
    #[doc = "@ingroup\t\t\tjpatcher"]
    #[doc = "@param\tp\t\t\tThe patcher to be queried."]
    #[doc = "@param\tgridsizeX\tThe address of a double that will be set to the current horizontal grid spacing for the patcher."]
    #[doc = "@param\tgridsizeY\tThe address of a double that will be set to the current vertical grid spacing for the patcher."]
    #[doc = "@return\t\t\t\tA Max error code."]
    pub fn jpatcher_get_gridsize(
        p: *mut t_object,
        gridsizeX: *mut f64,
        gridsizeY: *mut f64,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet a patcher's grid size."]
    #[doc = "@ingroup\t\t\tjpatcher"]
    #[doc = "@param\tp\t\t\tThe patcher to be queried."]
    #[doc = "@param\tgridsizeX\tThe new horizontal grid spacing for the patcher."]
    #[doc = "@param\tgridsizeY\tThe new vertical grid spacing for the patcher."]
    #[doc = "@return\t\t\t\tA Max error code."]
    pub fn jpatcher_set_gridsize(p: *mut t_object, gridsizeX: f64, gridsizeY: f64) -> t_max_err;
}
extern "C" {
    pub fn jpatcher_get_controller(p: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tDelete an object that is in a patcher."]
    #[doc = "@ingroup\t\t\tjpatcher"]
    #[doc = "@param\tp\t\t\tThe patcher."]
    #[doc = "@param\tb\t\t\tThe object box to delete."]
    pub fn jpatcher_deleteobj(p: *mut t_object, b: *mut t_jbox);
}
extern "C" {
    #[doc = "\tGiven a patcher, return its parent patcher."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tThe patcher's parent patcher, if there is one."]
    #[doc = "If there is no parent patcher (this is a top-level patcher) then NULL is returned."]
    pub fn jpatcher_get_parentpatcher(p: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tGiven a patcher, return the top-level patcher for the tree in which it exists."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\t\tThe patcher's top-level parent patcher."]
    pub fn jpatcher_get_toppatcher(p: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tGiven a patcher, return the patcher that will be responsible for holding the parameter hub."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tThe patcher to be queried."]
    #[doc = "@return\tThe patcher's parameter hub holder."]
    pub fn jpatcher_get_hubholder(p: *mut t_object) -> *mut t_object;
}
extern "C" {
    pub fn jpatcher_get_maxclass(p: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    pub fn jpatcher_get_parentclass(p: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    #[doc = "\tQuery a patcher to determine its location and size."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tA pointer to a patcher instance."]
    #[doc = "@param\tpr\tThe address of valid #t_rect whose values will be filled-in upon return."]
    #[doc = "@return\t\tA Max error code."]
    pub fn jpatcher_get_rect(p: *mut t_object, pr: *mut t_rect) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet a patcher's location and size."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tA pointer to a patcher instance."]
    #[doc = "@param\tpr\tThe address of a #t_rect with the new position and size."]
    #[doc = "@return\t\tA Max error code."]
    pub fn jpatcher_set_rect(p: *mut t_object, pr: *mut t_rect) -> t_max_err;
}
extern "C" {
    pub fn jpatcher_get_noedit(p: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tGenerate a unique name for a box in patcher."]
    #[doc = "@ingroup\t\t\tjpatcher"]
    #[doc = "@param\tp\t\t\tA pointer to a patcher instance."]
    #[doc = "@param\tclassname\tThe name of an object's class."]
    #[doc = "@return\t\t\t\tThe newly-generated unique name."]
    #[doc = "@remark\t\t\t\tThis is the function used by pattr to assign names to objects in a patcher."]
    pub fn jpatcher_uniqueboxname(p: *mut t_object, classname: *mut t_symbol) -> *mut t_symbol;
}
extern "C" {
    pub fn jpatcher_getboxfont(
        p: *mut t_object,
        fnum: ::std::os::raw::c_short,
        fsize: *mut f64,
        fontname: *mut *mut t_symbol,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn jpatcher_addboxlistener(p: *mut t_object, listener: *mut t_object);
}
extern "C" {
    pub fn jpatcher_removeboxlistener(p: *mut t_object, listener: *mut t_object);
}
extern "C" {
    #[doc = "\tReturn the file version of the patcher."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@param\tp\tA pointer to the patcher whose version number is desired."]
    #[doc = "@return\t\tThe file version number."]
    pub fn jpatcher_get_fileversion(p: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tReturn the file version for any new patchers, e.g. the current version created by Max."]
    #[doc = "@ingroup\tjpatcher"]
    #[doc = "@return\t\tThe file version number."]
    pub fn jpatcher_get_currentfileversion() -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tFind the rect for a box in a given patcherview."]
    #[doc = "@ingroup\t\t\tjbox"]
    #[doc = "@param\tbox\t\t\tThe box whose rect will be fetched."]
    #[doc = "@param\tpatcherview\tA patcherview in which the box exists."]
    #[doc = "@param\trect\t\tThe address of a valid #t_rect whose members will be filled in by this function."]
    #[doc = "@return\t\t\t\tA Max error code."]
    pub fn jbox_get_rect_for_view(
        box_: *mut t_object,
        patcherview: *mut t_object,
        rect: *mut t_rect,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tChange the rect for a box in a given patcherview."]
    #[doc = "@ingroup\t\t\tjbox"]
    #[doc = "@param\tbox\t\t\tThe box whose rect will be changed."]
    #[doc = "@param\tpatcherview\tA patcherview in which the box exists."]
    #[doc = "@param\trect\t\tThe address of a valid #t_rect that will replace the current values used by the box in the given view."]
    #[doc = "@return\t\t\t\tA Max error code."]
    pub fn jbox_set_rect_for_view(
        box_: *mut t_object,
        patcherview: *mut t_object,
        rect: *mut t_rect,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tFind the rect for a box with a given attribute name."]
    #[doc = "@ingroup\t\t\tjbox"]
    #[doc = "@param\tbox\t\t\tThe box whose rect will be fetched."]
    #[doc = "@param\twhich\t\tThe name of the rect attribute to be fetched, for example <tt>_sym_presentation_rect</tt> or <tt>_sym_patching_rect</tt>."]
    #[doc = "@param\tpr\t\t\tThe address of a valid #t_rect whose members will be filled in by this function."]
    #[doc = "@return\t\t\t\tA Max error code."]
    pub fn jbox_get_rect_for_sym(
        box_: *mut t_object,
        which: *mut t_symbol,
        pr: *mut t_rect,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tChange the rect for a box with a given attribute name."]
    #[doc = "@ingroup\t\t\tjbox"]
    #[doc = "@param\tbox\t\t\tThe box whose rect will be changed."]
    #[doc = "@param\twhich\t\tThe name of the rect attribute to be changed, for example <tt>_sym_presentation_rect</tt> or <tt>_sym_patching_rect</tt>."]
    #[doc = "@param\tpr\t\t\tThe address of a valid #t_rect that will replace the current values used by the box."]
    #[doc = "@return\t\t\t\tA Max error code."]
    pub fn jbox_set_rect_for_sym(
        box_: *mut t_object,
        which: *mut t_symbol,
        pr: *mut t_rect,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet both the presentation rect and the patching rect."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose rect will be changed."]
    #[doc = "@param\tpr\t\tThe address of a #t_rect with the new rect values."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_set_rect(box_: *mut t_object, pr: *mut t_rect) -> t_max_err;
}
extern "C" {
    #[doc = "\tRetrieve the patching rect of a box."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose rect values will be retrieved."]
    #[doc = "@param\tpr\t\tThe address of a valid #t_rect whose values will be filled in."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_get_patching_rect(box_: *mut t_object, pr: *mut t_rect) -> t_max_err;
}
extern "C" {
    #[doc = "\tChange the patching rect of a box."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose rect will be changed."]
    #[doc = "@param\tpr\t\tThe address of a #t_rect with the new rect values."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_set_patching_rect(box_: *mut t_object, pr: *mut t_rect) -> t_max_err;
}
extern "C" {
    #[doc = "\tRetrieve the presentation rect of a box."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose rect values will be retrieved."]
    #[doc = "@param\tpr\t\tThe address of a valid #t_rect whose values will be filled in."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_get_presentation_rect(box_: *mut t_object, pr: *mut t_rect) -> t_max_err;
}
extern "C" {
    #[doc = "\tChange the presentation rect of a box."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose rect will be changed."]
    #[doc = "@param\tpr\t\tThe address of a #t_rect with the new rect values."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_set_presentation_rect(box_: *mut t_object, pr: *mut t_rect) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the position of a box for both the presentation and patching views."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose position will be changed."]
    #[doc = "@param\tpos\t\tThe address of a #t_pt with the new x and y values."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_set_position(box_: *mut t_object, pos: *mut t_pt) -> t_max_err;
}
extern "C" {
    #[doc = "\tFetch the position of a box for the patching view."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose position will be retrieved."]
    #[doc = "@param\tpos\t\tThe address of a valid #t_pt whose x and y values will be filled in."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_get_patching_position(box_: *mut t_object, pos: *mut t_pt) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the position of a box for the patching view."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose positon will be changed."]
    #[doc = "@param\tpos\t\tThe address of a #t_pt with the new x and y values."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_set_patching_position(box_: *mut t_object, pos: *mut t_pt) -> t_max_err;
}
extern "C" {
    #[doc = "\tFetch the position of a box for the presentation view."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose position will be retrieved."]
    #[doc = "@param\tpos\t\tThe address of a valid #t_pt whose x and y values will be filled in."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_get_presentation_position(box_: *mut t_object, pos: *mut t_pt) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the position of a box for the presentation view."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose rect will be changed."]
    #[doc = "@param\tpos\t\tThe address of a #t_pt with the new x and y values."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_set_presentation_position(box_: *mut t_object, pos: *mut t_pt) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the size of a box for both the presentation and patching views."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose size will be changed."]
    #[doc = "@param\tsize\tThe address of a #t_size with the new size values."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_set_size(box_: *mut t_object, size: *mut t_size) -> t_max_err;
}
extern "C" {
    #[doc = "\tFetch the size of a box for the patching view."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose size will be retrieved."]
    #[doc = "@param\tsize\tThe address of a valid #t_size whose width and height values will be filled in."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_get_patching_size(box_: *mut t_object, size: *mut t_size) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the size of a box for the patching view."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose size will be changed."]
    #[doc = "@param\tsize\tThe address of a #t_size with the new width and height values."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_set_patching_size(box_: *mut t_object, size: *mut t_size) -> t_max_err;
}
extern "C" {
    #[doc = "\tFetch the size of a box for the presentation view."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose size will be retrieved."]
    #[doc = "@param\tsize\tThe address of a valid #t_size whose width and height values will be filled in."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_get_presentation_size(box_: *mut t_object, size: *mut t_size) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the size of a box for the presentation view."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tbox\t\tThe box whose size will be changed."]
    #[doc = "@param\tsize\tThe address of a #t_size with the new width and height values."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_set_presentation_size(box_: *mut t_object, size: *mut t_size) -> t_max_err;
}
extern "C" {
    #[doc = " Retrieve the name of the class of the box's object."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe box to query."]
    #[doc = "@return\t\t\tThe name of the class of the box's object."]
    pub fn jbox_get_maxclass(b: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    #[doc = " Retrieve a pointer to the box's object."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe box to query."]
    #[doc = "@return\t\t\tA pointer to the box's object."]
    pub fn jbox_get_object(b: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = " Retrieve a box's patcher."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe box to query."]
    #[doc = "@return\t\t\tIf the box has a patcher, the patcher's pointer is returned."]
    #[doc = "Otherwise NULL is returned."]
    pub fn jbox_get_patcher(b: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = " Retrieve a box's 'hidden' attribute."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe box to query."]
    #[doc = "@return\t\t\tTrue if the box is hidden, otherwise false."]
    pub fn jbox_get_hidden(b: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Set a box's 'hidden' attribute."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe box to query."]
    #[doc = "@param\tc\t\tSet to true to hide the box, otherwise false."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_set_hidden(b: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = " Retrieve a box's 'fontname' attribute."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe box to query."]
    #[doc = "@return\t\t\tThe font name."]
    pub fn jbox_get_fontname(b: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    #[doc = " Set a box's 'fontname' attribute."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe box to query."]
    #[doc = "@param\tps\t\tThe font name.  Note that the font name may be case-sensitive."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_set_fontname(b: *mut t_object, ps: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = " Retrieve a box's 'fontsize' attribute."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe box to query."]
    #[doc = "@return\t\t\tThe font size in points."]
    pub fn jbox_get_fontsize(b: *mut t_object) -> f64;
}
extern "C" {
    #[doc = " Set a box's 'fontsize' attribute."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe box to query."]
    #[doc = "@param\td\t\tThe fontsize in points."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_set_fontsize(b: *mut t_object, d: f64) -> t_max_err;
}
extern "C" {
    #[doc = " Retrieve a box's 'color' attribute."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe box to query."]
    #[doc = "@param\tprgba\tThe address of a valid #t_rect whose values will be filled-in upon return."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_get_color(b: *mut t_object, prgba: *mut t_jrgba) -> t_max_err;
}
extern "C" {
    #[doc = " Set a box's 'color' attribute."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe box to query."]
    #[doc = "@param\tprgba\tThe address of a #t_rect containing the desired color for the box/object."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_set_color(b: *mut t_object, prgba: *mut t_jrgba) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet a box's hint text using a C-string."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tbb\tThe box to query."]
    #[doc = "@param\ts\tThe new text to use for the box's hint."]
    #[doc = "@return\t\tA Max error code."]
    pub fn jbox_set_hintstring(bb: *mut t_object, s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn jbox_get_hinttrack(b: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn jbox_set_hinttrack(b: *mut t_object, h: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = " The next box in the patcher's (linked) list of boxes."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tThe next box in the list."]
    pub fn jbox_get_nextobject(b: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = " The previous box in the patcher's (linked) list of boxes."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tThe next box in the list."]
    pub fn jbox_get_prevobject(b: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = " Retrieve a box's scripting name."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tThe box's scripting name."]
    pub fn jbox_get_varname(b: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    #[doc = " Set a box's scripting name."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@param\tps\tThe new scripting name for the box."]
    #[doc = "@return\t\tA Max error code."]
    pub fn jbox_set_varname(b: *mut t_object, ps: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = " Retrieve a boxes unique id."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tThe unique id of the object.  This is a symbol that is referenced, for example, by patchlines."]
    pub fn jbox_get_id(b: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    #[doc = " Retrieve a box flag value from a box."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tThe value of the canhilite bit in the box's flags."]
    pub fn jbox_get_canhilite(b: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Determine whether a box is located in the patcher's background layer."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tZero if the object is in the foreground, otherwise non-zero."]
    pub fn jbox_get_background(b: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Set whether a box should be in the background or foreground layer of a patcher."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@param\tc\tPass zero to tell the box to appear in the foreground, or non-zero to indicate that the box should be in the background layer."]
    #[doc = "@return\t\tA Max error code."]
    pub fn jbox_set_background(b: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = " Determine whether a box ignores clicks."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tZero if the object responds to clicks, otherwise non-zero."]
    pub fn jbox_get_ignoreclick(b: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Set whether a box ignores clicks."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@param\tc\tPass zero to tell the box to respond to clicks, or non-zero to indicate that the box should ignore clicks."]
    #[doc = "@return\t\tA Max error code."]
    pub fn jbox_set_ignoreclick(b: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = " Determine whether a box draws its first inlet."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tZero if the inlet is not drawn, otherwise non-zero."]
    pub fn jbox_get_drawfirstin(b: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Determine whether a box draws an outline."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tZero if the outline is not drawn, otherwise non-zero."]
    pub fn jbox_get_outline(b: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Set whether a box draws an outline."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@param\tc\tPass zero to hide the outline, or non-zero to indicate that the box should draw the outline."]
    #[doc = "@return\t\tA Max error code."]
    pub fn jbox_set_outline(b: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = " Retrieve a box flag value from a box."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tThe value of the growy bit in the box's flags."]
    pub fn jbox_get_growy(b: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Retrieve a box flag value from a box."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tThe value of the growboth bit in the box's flags."]
    pub fn jbox_get_growboth(b: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Retrieve a box flag value from a box."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tThe value of the nogrow bit in the box's flags."]
    pub fn jbox_get_nogrow(b: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tRetrieve a box flag value from a box."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tThe value of the drawinlast bit in the box's flags."]
    pub fn jbox_get_drawinlast(b: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn jbox_get_mousedragdelta(b: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn jbox_set_mousedragdelta(b: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tRetrieve a pointer to a box's textfield."]
    #[doc = "@ingroup\tjbox"]
    #[doc = "@param\tb\tThe box to query."]
    #[doc = "@return\t\tThe textfield for the box, assuming it has one."]
    #[doc = "If the box does not own a textfield then NULL is returned."]
    pub fn jbox_get_textfield(b: *mut t_object) -> *mut t_object;
}
extern "C" {
    pub fn jbox_validaterects(b: *mut t_jbox);
}
extern "C" {
    #[doc = "\tRetrieve a patchline's starting point."]
    #[doc = "@ingroup\tjpatchline"]
    #[doc = "@param\tl\tA pointer to the patchline's instance."]
    #[doc = "@param\tx\tThe address of a variable to hold the x-coordinate of the starting point's position upon return."]
    #[doc = "@param\ty\tThe address of a variable to hold the y-coordinate of the starting point's position upon return."]
    #[doc = "@return\t\tA Max error code."]
    pub fn jpatchline_get_startpoint(l: *mut t_object, x: *mut f64, y: *mut f64) -> t_max_err;
}
extern "C" {
    #[doc = "\tRetrieve a patchline's ending point."]
    #[doc = "@ingroup\tjpatchline"]
    #[doc = "@param\tl\tA pointer to the patchline's instance."]
    #[doc = "@param\tx\tThe address of a variable to hold the x-coordinate of the ending point's position upon return."]
    #[doc = "@param\ty\tThe address of a variable to hold the y-coordinate of the ending point's position upon return."]
    #[doc = "@return\t\tA Max error code."]
    pub fn jpatchline_get_endpoint(l: *mut t_object, x: *mut f64, y: *mut f64) -> t_max_err;
}
extern "C" {
    #[doc = "\tDetermine the number of midpoints (segments) in a patchline."]
    #[doc = "@ingroup\tjpatchline"]
    #[doc = "@param\tl\tA pointer to the patchline's instance."]
    #[doc = "@return\t\tThe number of midpoints in the patchline."]
    pub fn jpatchline_get_nummidpoints(l: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jpatchline_get_pending(l: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tReturn the object box from which a patchline originates."]
    #[doc = "@ingroup\tjpatchline"]
    #[doc = "@param\tl\tA pointer to the patchline's instance."]
    #[doc = "@return\t\tThe object box from which the patchline originates."]
    pub fn jpatchline_get_box1(l: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tReturn the outlet number of the originating object box from which a patchline begins."]
    #[doc = "@ingroup\tjpatchline"]
    #[doc = "@param\tl\tA pointer to the patchline's instance."]
    #[doc = "@return\t\tThe outlet number."]
    pub fn jpatchline_get_outletnum(l: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tReturn the destination object box for a patchline."]
    #[doc = "@ingroup\tjpatchline"]
    #[doc = "@param\tl\tA pointer to the patchline's instance."]
    #[doc = "@return\t\tThe destination object box for a patchline."]
    pub fn jpatchline_get_box2(l: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tReturn the inlet number of the destination object box to which a patchline is connected."]
    #[doc = "@ingroup\tjpatchline"]
    #[doc = "@param\tl\tA pointer to the patchline's instance."]
    #[doc = "@return\t\tThe inlet number."]
    pub fn jpatchline_get_inletnum(l: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jpatchline_get_straightthresh(l: *mut t_object) -> f64;
}
extern "C" {
    pub fn jpatchline_set_straightthresh(l: *mut t_object, d: f64) -> t_max_err;
}
extern "C" {
    pub fn jpatchline_get_straightstart(l: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn jpatchline_get_straightend(l: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn jpatchline_set_straightstart(l: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    pub fn jpatchline_set_straightend(l: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tGiven a patchline, traverse to the next patchline in the (linked) list."]
    #[doc = "@ingroup\t\tjpatchline"]
    #[doc = "@param\tb\t\tA patchline instance."]
    #[doc = "@return\t\t\tThe next patchline."]
    #[doc = "If the current patchline is at the end (tail) of the list, then NULL is returned."]
    pub fn jpatchline_get_nextline(b: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tDetermine if a patch line is hidden."]
    #[doc = "@ingroup\t\tjpatchline"]
    #[doc = "@param\tl\t\tA patchline instance."]
    #[doc = "@return\t\t\tZero if the patchline is visible, non-zero if it is hidden."]
    pub fn jpatchline_get_hidden(l: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSet a patchline's visibility."]
    #[doc = "@ingroup\t\tjpatchline"]
    #[doc = "@param\tl\t\tA patchline instance."]
    #[doc = "@param\tc\t\tPass 0 to make a patchline visible, or non-zero to hide it."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn jpatchline_set_hidden(l: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tGet the color of a patch line."]
    #[doc = "@ingroup\t\tjpatchline"]
    #[doc = "@param\tl\t\tA patchline instance."]
    #[doc = "@param\tprgba\tThe address of a valid #t_jrgba struct that will be filled with the color values of the patch line."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn jpatchline_get_color(l: *mut t_object, prgba: *mut t_jrgba) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the color of a patch line."]
    #[doc = "@ingroup\t\tjpatchline"]
    #[doc = "@param\tl\t\tA patchline instance."]
    #[doc = "@param\tprgba\tThe address of a valid #t_jrgba struct containing the color to use."]
    #[doc = "@return\t\t\tAn error code."]
    pub fn jpatchline_set_color(l: *mut t_object, prgba: *mut t_jrgba) -> t_max_err;
}
extern "C" {
    #[doc = "\tQuery a patcherview to determine whether it is visible."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tpv\tThe patcherview instance to query."]
    #[doc = "@return\t\tReturns zero if the patcherview is invisible, otherwise returns non-zero."]
    pub fn patcherview_get_visible(pv: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSet the 'visible' attribute of a patcherview."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tpv\tThe patcherview instance whose attribute will be set."]
    #[doc = "@param\tc\tWhether or not the patcherview should be made visible."]
    #[doc = "@return\t\tAn error code."]
    pub fn patcherview_set_visible(pv: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tGet the value of the rect attribute for a patcherview."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tpv\tThe patcherview instance whose attribute value will be fetched."]
    #[doc = "@param\tpr\tThe address of a valid #t_rect struct, whose contents will be filled upon return."]
    #[doc = "@return\t\tAn error code."]
    pub fn patcherview_get_rect(pv: *mut t_object, pr: *mut t_rect) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the value of the rect attribute for a patcherview."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tpv\tThe patcherview instance whose attribute value will be set."]
    #[doc = "@param\tpr\tThe address of a valid #t_rect struct."]
    #[doc = "@return\t\tAn error code."]
    pub fn patcherview_set_rect(pv: *mut t_object, pr: *mut t_rect) -> t_max_err;
}
extern "C" {
    #[doc = " Convert the point cx, cy in canvas coordinates to screen coordinates."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tpv  The patcherview instance the canvas coords are relative to."]
    #[doc = "@param\tcx\tThe x dimension of the canvas coordinate relative to the patcherview."]
    #[doc = "@param\tcy  The y dimension of the canvas coordinate relative to the patcherview."]
    #[doc = "@param\tsx\tA pointer to a long to receive the screen coordinate x dimension."]
    #[doc = "@param\tsy\tA pointer to a long to receive the screen coordinate y dimension."]
    pub fn patcherview_canvas_to_screen(
        pv: *mut t_object,
        cx: f64,
        cy: f64,
        sx: *mut ::std::os::raw::c_long,
        sy: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    #[doc = " Convert the point cx, cy in canvas coordinates to screen coordinates."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tpv  The patcherview instance the canvas coords are relative to."]
    #[doc = "@param\tsx\tThe screen position x coordinate."]
    #[doc = "@param\tsy\tThe screen position y coordinate"]
    #[doc = "@param\tcx\tA pointer to a double to receive the canvas coordinate for the given screen x position."]
    #[doc = "@param\tcy  A pointer to a double to receive the canvas coordinate for the given screen y position."]
    pub fn patcherview_screen_to_canvas(
        pv: *mut t_object,
        sx: ::std::os::raw::c_long,
        sy: ::std::os::raw::c_long,
        cx: *mut f64,
        cy: *mut f64,
    );
}
extern "C" {
    #[doc = "\tFind out if a patcherview is locked."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tp\tThe patcherview instance whose attribute value will be fetched."]
    #[doc = "@return\t\tReturns 0 if unlocked, otherwise returns non-zero."]
    pub fn patcherview_get_locked(p: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tLock or unlock a patcherview."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tp\tThe patcherview instance whose attribute value will be set."]
    #[doc = "@param\tc\tSet this value to zero to unlock the patcherview, otherwise pass a non-zero value."]
    #[doc = "@return\t\tAn error code."]
    pub fn patcherview_set_locked(p: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tFind out if a patcherview is a presentation view."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tpv\tThe patcherview instance whose attribute value will be fetched."]
    #[doc = "@return\t\tReturns 0 if the view is not a presentation view, otherwise returns non-zero."]
    pub fn patcherview_get_presentation(pv: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tFetch the zoom-factor of a patcherview."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tpv\tThe patcherview instance whose attribute value will be fetched."]
    #[doc = "@return\t\tThe factor by which the view is zoomed."]
    pub fn patcherview_get_zoomfactor(pv: *mut t_object) -> f64;
}
extern "C" {
    #[doc = "\tSet the zoom-factor of a patcherview."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tpv\tThe patcherview instance whose attribute value will be set."]
    #[doc = "@param\td\tThe zoom-factor at which the patcherview should display the patcher."]
    #[doc = "@return\t\tAn error code."]
    pub fn patcherview_set_zoomfactor(pv: *mut t_object, d: f64) -> t_max_err;
}
extern "C" {
    #[doc = "\tGiven a patcherview, find the next patcherview."]
    #[doc = "The views of a patcher are maintained internally as a #t_linklist,"]
    #[doc = "and so the views can be traversed should you need to perform operations on all of a patcher's patcherviews."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tpv\tThe patcherview instance from which to find the next patcherview."]
    #[doc = "@return\t\tThe next patcherview in the list, or NULL if the patcherview passed in pv is the tail."]
    pub fn patcherview_get_nextview(pv: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tGiven a patcherview, return the #t_jgraphics context for that view."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tpv\tThe patcherview instance."]
    #[doc = "@return\t\tThe #t_jgraphics context for the view."]
    pub fn patcherview_get_jgraphics(pv: *mut t_object) -> *mut t_object;
}
extern "C" {
    pub fn patcherview_set_jgraphics(pv: *mut t_object, po: *mut t_object) -> t_max_err;
}
extern "C" {
    #[doc = "\tGiven a patcherview, return its patcher."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param\tpv\tThe patcherview instance for which to fetch the patcher."]
    #[doc = "@return\t\tThe patcher."]
    pub fn patcherview_get_patcher(pv: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = " Given a patcherview, return the top patcherview (possibly itself)."]
    #[doc = "If the patcherview is inside a bpatcher which is in a patcher then"]
    #[doc = "this will give you the view the bpatcher view is inside of."]
    #[doc = "@ingroup\tjpatcherview"]
    #[doc = "@param  pv\tThe patcherview instance whose top view you want to get."]
    #[doc = "@return\t\tThe top patcherview."]
    pub fn patcherview_get_topview(pv: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tReturn the object that owns a particular textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@return\t\t\tA pointer to the owning object."]
    pub fn textfield_get_owner(tf: *mut t_object) -> *mut t_object;
}
extern "C" {
    #[doc = "\tRetrieve the color of the text in a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tprgba\tThe address of a valid #t_jrgba whose values will be filled-in upon return."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_get_textcolor(tf: *mut t_object, prgba: *mut t_jrgba) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the color of the text in a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tprgba\tThe address of a #t_jrgba containing the new color to use."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_textcolor(tf: *mut t_object, prgba: *mut t_jrgba) -> t_max_err;
}
extern "C" {
    #[doc = "\tRetrieve the background color of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tprgba\tThe address of a valid #t_jrgba whose values will be filled-in upon return."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_get_bgcolor(tf: *mut t_object, prgba: *mut t_jrgba) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the background color of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tprgba\tThe address of a #t_jrgba containing the new color to use."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_bgcolor(tf: *mut t_object, prgba: *mut t_jrgba) -> t_max_err;
}
extern "C" {
    #[doc = "\tRetrieve the margins from the edge of the textfield to the text itself in a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tpleft\tThe address of a variable to hold the value of the left margin upon return."]
    #[doc = "@param\tptop\tThe address of a variable to hold the value of the top margin upon return."]
    #[doc = "@param\tpright\tThe address of a variable to hold the value of the right margin upon return."]
    #[doc = "@param\tpbottom\tThe address of a variable to hold the value of the bottom margin upon return."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_get_textmargins(
        tf: *mut t_object,
        pleft: *mut f64,
        ptop: *mut f64,
        pright: *mut f64,
        pbottom: *mut f64,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the margins from the edge of the textfield to the text itself in a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tleft\tThe new value for the left margin."]
    #[doc = "@param\ttop\t\tThe new value for the top margin."]
    #[doc = "@param\tright\tThe new value for the right margin."]
    #[doc = "@param\tbottom\tThe new value for the bottom margin."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_textmargins(
        tf: *mut t_object,
        left: f64,
        top: f64,
        right: f64,
        bottom: f64,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tReturn the value of the 'editonclick' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@return\t\t\tA value of the attribute."]
    pub fn textfield_get_editonclick(tf: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSet the 'editonclick' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tc\t\tThe new value for the attribute."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_editonclick(tf: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tReturn the value of the 'selectallonedit' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@return\t\t\tA value of the attribute."]
    pub fn textfield_get_selectallonedit(tf: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSet the 'selectallonedit' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tc\t\tThe new value for the attribute."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_selectallonedit(tf: *mut t_object, c: ::std::os::raw::c_char)
        -> t_max_err;
}
extern "C" {
    #[doc = "\tReturn the value of the 'noactivate' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@return\t\t\tA value of the attribute."]
    pub fn textfield_get_noactivate(tf: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSet the 'noactivate' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tc\t\tThe new value for the attribute."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_noactivate(tf: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tReturn the value of the 'readonly' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@return\t\t\tA value of the attribute."]
    pub fn textfield_get_readonly(tf: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSet the 'readonly' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tc\t\tThe new value for the attribute."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_readonly(tf: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tReturn the value of the 'wordwrap' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@return\t\t\tA value of the attribute."]
    pub fn textfield_get_wordwrap(tf: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSet the 'wordwrap' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tc\t\tThe new value for the attribute."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_wordwrap(tf: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tReturn the value of the 'useellipsis' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@return\t\t\tA value of the attribute."]
    pub fn textfield_get_useellipsis(tf: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSet the 'useellipsis' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tc\t\tThe new value for the attribute."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_useellipsis(tf: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tReturn the value of the 'autoscroll' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@return\t\t\tA value of the attribute."]
    pub fn textfield_get_autoscroll(tf: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSet the 'autoscroll' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tc\t\tThe new value for the attribute."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_autoscroll(tf: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tReturn the value of the 'wantsreturn' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@return\t\t\tA value of the attribute."]
    pub fn textfield_get_wantsreturn(tf: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSet the 'wantsreturn' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tc\t\tThe new value for the attribute."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_wantsreturn(tf: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tReturn the value of the 'wantstab' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@return\t\t\tA value of the attribute."]
    pub fn textfield_get_wantstab(tf: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSet the 'wantstab' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tc\t\tThe new value for the attribute."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_wantstab(tf: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tReturn the value of the 'underline' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@return\t\t\tA value of the attribute."]
    pub fn textfield_get_underline(tf: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tSet the 'underline' attribute of a textfield."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\tc\t\tThe new value for the attribute."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_underline(tf: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    pub fn textfield_get_justification(tf: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn textfield_set_justification(tf: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    pub fn textfield_get_autofixwidth(tf: *mut t_object) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn textfield_set_autofixwidth(tf: *mut t_object, c: ::std::os::raw::c_char) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the 'empty' text of a textfield."]
    #[doc = "The empty text is the text that is displayed in the textfield when no text is present."]
    #[doc = "By default this is gensym(\"\")."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@param\ttxt\t\tA symbol containing the new text to display when the textfield has no content."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn textfield_set_emptytext(tf: *mut t_object, txt: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "\tRetrieve the 'empty' text of a textfield."]
    #[doc = "The empty text is the text that is displayed in the textfield when no text is present."]
    #[doc = "By default this is gensym(\"\")."]
    #[doc = "@ingroup\t\ttextfield"]
    #[doc = "@param\ttf\t\tThe textfield instance pointer."]
    #[doc = "@return\t\t\tThe current text used as the empty text."]
    pub fn textfield_get_emptytext(tf: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    pub fn jbox_initclass(c: *mut t_class, flags: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "\tSet up your UI object's #t_jbox member."]
    #[doc = "This should be called from your UI object's free method."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe address of your UI object's #t_jbox member (which should be the first member of the object's struct)."]
    #[doc = "@param\tflags\tFlags to set the box's behavior, such as #JBOX_NODRAWBOX."]
    #[doc = "@param\targc\tThe count of atoms in the argv parameter."]
    #[doc = "@param\targv\tThe address of the first in an array of atoms to be passed to the box constructor."]
    #[doc = "Typically these are simply the argument passed to your object when it is created."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_new(
        b: *mut t_jbox,
        flags: ::std::os::raw::c_long,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tTear down your UI object's #t_jbox member."]
    #[doc = "This should be called from your UI object's free method."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe address of your object's #t_jbox member (which should be the first member of the object's struct)."]
    pub fn jbox_free(b: *mut t_jbox);
}
extern "C" {
    #[doc = "\tMark the box ready to be accessed and drawn by Max."]
    #[doc = "This should typically be called at the end of your UI object's new method."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe address of your object's #t_jbox member."]
    pub fn jbox_ready(b: *mut t_jbox);
}
extern "C" {
    #[doc = "\tRequest that your object/box be re-drawn by Max."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe address of your object's #t_jbox member."]
    pub fn jbox_redraw(b: *mut t_jbox);
}
extern "C" {
    pub fn jbox_redrawcontents(b: *mut t_jbox);
}
extern "C" {
    pub fn jbox_getoutlet(
        x: *mut t_jbox,
        index: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jbox_getinlet(
        x: *mut t_jbox,
        index: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jbox_updatetextfield(b: *mut t_jbox);
}
extern "C" {
    pub fn jbox_processlegacydefaults(
        b: *mut t_jbox,
        d: *mut t_dictionary,
        flags: ::std::os::raw::c_long,
    );
}
extern "C" {
    #[doc = "\tSend a notification to a box.  This is the same as calling object_notify() for a box."]
    #[doc = "@ingroup\t\tjbox"]
    #[doc = "@param\tb\t\tThe address of your object's #t_jbox member."]
    #[doc = "@param\ts\t\tThe name of the send object."]
    #[doc = "@param\tmsg\t\tThe notification name."]
    #[doc = "@param\tsender\tThe sending object's address."]
    #[doc = "@param\tdata\tA pointer to some data passed to the box's notify method."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_notify(
        b: *mut t_jbox,
        s: *mut t_symbol,
        msg: *mut t_symbol,
        sender: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tGrab the keyboard focus for your box."]
    #[doc = "Calling this method should be considered exceptional, and its use is discouraged."]
    #[doc = "@param\tb\t\tThe address of your object's #t_jbox member."]
    pub fn jbox_grabfocus(b: *mut t_jbox);
}
extern "C" {
    pub fn jbox_show_caption(b: *mut t_jbox);
}
extern "C" {
    pub fn jbox_hide_caption(b: *mut t_jbox);
}
extern "C" {
    pub fn dictionary_appendjrgba(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        jc: *mut t_jrgba,
    ) -> t_max_err;
}
extern "C" {
    pub fn dictionary_getdefjrgba(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        jc: *mut t_jrgba,
        def: *mut t_jrgba,
    ) -> t_max_err;
}
extern "C" {
    pub fn dictionary_gettrect(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        rect: *mut t_rect,
    ) -> t_max_err;
}
extern "C" {
    pub fn dictionary_appendtrect(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        rect: *mut t_rect,
    ) -> t_max_err;
}
extern "C" {
    pub fn dictionary_gettpt(d: *mut t_dictionary, key: *mut t_symbol, pt: *mut t_pt) -> t_max_err;
}
extern "C" {
    pub fn dictionary_appendtpt(
        d: *mut t_dictionary,
        key: *mut t_symbol,
        pt: *mut t_pt,
    ) -> t_max_err;
}
extern "C" {
    pub fn atomstojrgba(argc: ::std::os::raw::c_long, argv: *mut t_atom, dest: *mut t_jrgba);
}
extern "C" {
    pub fn jrgbatoatoms(src: *mut t_jrgba, argv: *mut t_atom);
}
extern "C" {
    pub fn dictionary_prototypefromclass(c: *mut t_class) -> *mut t_dictionary;
}
extern "C" {
    #[doc = "Create a new object in a specified patcher with values using a combination of attribute and sprintf syntax."]
    #[doc = ""]
    #[doc = "@ingroup\t\tobj"]
    #[doc = "@param\tpatcher\tAn instance of a patcher object."]
    #[doc = "@param\tfmt\t\tAn sprintf-style format string specifying key-value pairs with attribute nomenclature."]
    #[doc = "@param\t...\t\tOne or more arguments which are to be substituted into the format string."]
    #[doc = "@return\t\t\tA pointer to the newly created object instance, or NULL if creation of the object fails."]
    #[doc = ""]
    #[doc = "@remark\t\t\tMax attribute syntax is used to define key-value pairs.  For example,"]
    #[doc = "@code"]
    #[doc = "\"@key1 value @key2 another_value\""]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark\t\t\tThe example below creates a new object that in a patcher whose"]
    #[doc = "object pointer is stored in a variable called \"aPatcher\"."]
    #[doc = "@code"]
    #[doc = "t_object *my_comment;"]
    #[doc = "char text[4];"]
    #[doc = ""]
    #[doc = "strncpy_zero(text, \"foo\", 4);"]
    #[doc = ""]
    #[doc = "my_comment = newobject_sprintf(aPatcher, \"@maxclass comment @varname _name \\"]
    #[doc = "@text \\\"%s\\\" @patching_rect %.2f %.2f %.2f %.2f \\"]
    #[doc = "@fontsize %f @textcolor %f %f %f 1.0 \\"]
    #[doc = "@fontname %s @bgcolor 0.001 0.001 0.001 0.\","]
    #[doc = "text, 20.0, 20.0, 200.0, 24.0,"]
    #[doc = "18, 0.9, 0.9, 0.9, \"Arial\");"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see\t\t\tdictionary_sprintf()"]
    #[doc = "@see\t\t\tnewobject_fromdictionary()"]
    #[doc = "@see\t\t\tatom_setparse()"]
    pub fn newobject_sprintf(
        patcher: *mut t_object,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut t_object;
}
extern "C" {
    #[doc = "Create an object from the passed in text."]
    #[doc = "The passed in text is in the same format as would be typed into an object box."]
    #[doc = "It can be used for UI objects or text objects so this is the simplest way to create objects from C."]
    #[doc = ""]
    #[doc = "@ingroup\t\tobj"]
    #[doc = "@param\tpatcher\tAn instance of a patcher object."]
    #[doc = "@param\ttext\tThe text as if typed into an object box."]
    #[doc = "@return\t\t\tA pointer to the newly created object instance, or NULL if creation of the object fails."]
    #[doc = ""]
    #[doc = "@see newobject_sprintf()"]
    pub fn newobject_fromboxtext(
        patcher: *mut t_object,
        text: *const ::std::os::raw::c_char,
    ) -> *mut t_object;
}
extern "C" {
    #[doc = "Place a new object into a patcher.  The new object will be created based on a specification"]
    #[doc = "contained in a @ref dictionary."]
    #[doc = ""]
    #[doc = "Create a new dictionary populated with values using a combination of attribute and sprintf syntax."]
    #[doc = ""]
    #[doc = "@ingroup\t\tobj"]
    #[doc = "@param\tpatcher\tAn instance of a patcher object."]
    #[doc = "@param\td\t\tA dictionary containing an object specification."]
    #[doc = "@return\t\t\tA pointer to the newly created object instance, or NULL if creation of the object fails."]
    #[doc = ""]
    #[doc = "@remark\t\t\tMax attribute syntax is used to define key-value pairs.  For example,"]
    #[doc = "@code"]
    #[doc = "\"@key1 value @key2 another_value\""]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark\t\t\tThe example below creates a new object that in a patcher whose"]
    #[doc = "object pointer is stored in a variable called \"aPatcher\"."]
    #[doc = "@code"]
    #[doc = "t_dictionary *d;"]
    #[doc = "t_object *o;"]
    #[doc = "char text[4];"]
    #[doc = ""]
    #[doc = "strncpy_zero(text, \"foo\", 4);"]
    #[doc = ""]
    #[doc = "d = dictionary_sprintf(\"@maxclass comment @varname _name \\"]
    #[doc = "@text \\\"%s\\\" @patching_rect %.2f %.2f %.2f %.2f \\"]
    #[doc = "@fontsize %f @textcolor %f %f %f 1.0 \\"]
    #[doc = "@fontname %s @bgcolor 0.001 0.001 0.001 0.\","]
    #[doc = "text, 20.0, 20.0, 200.0, 24.0,"]
    #[doc = "18, 0.9, 0.9, 0.9, \"Arial\");"]
    #[doc = ""]
    #[doc = "o = newobject_fromdictionary(aPatcher, d);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see\t\t\tnewobject_sprintf()"]
    #[doc = "@see\t\t\tnewobject_fromdictionary()"]
    #[doc = "@see\t\t\tatom_setparse()"]
    pub fn newobject_fromdictionary(patcher: *mut t_object, d: *mut t_dictionary) -> *mut t_object;
}
extern "C" {
    #[doc = "\tReturn the last known combination of modifier keys being held by the user."]
    #[doc = "@ingroup\tjmouse"]
    #[doc = "@return\t\tThe current modifier keys that are activated."]
    pub fn jkeyboard_getcurrentmodifiers() -> t_modifiers;
}
extern "C" {
    #[doc = "\tGet the position of the mouse cursor in screen coordinates."]
    #[doc = "@ingroup\t\t\tjmouse"]
    #[doc = "@param\tx\t\t\tThe address of a variable to hold the x-coordinate upon return."]
    #[doc = "@param\ty\t\t\tThe address of a variable to hold the y-coordinate upon return."]
    pub fn jmouse_getposition_global(x: *mut ::std::os::raw::c_int, y: *mut ::std::os::raw::c_int);
}
extern "C" {
    #[doc = "\tSet the position of the mouse cursor in screen coordinates."]
    #[doc = "@ingroup\t\t\tjmouse"]
    #[doc = "@param\tx\t\t\tThe new x-coordinate of the mouse cursor position."]
    #[doc = "@param\ty\t\t\tThe new y-coordinate of the mouse cursor position."]
    pub fn jmouse_setposition_global(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = "\tSet the position of the mouse cursor relative to the patcher canvas coordinates."]
    #[doc = "@ingroup\t\t\tjmouse"]
    #[doc = "@param\tpatcherview\tThe patcherview upon which the mouse coordinates are based."]
    #[doc = "@param\tcx\t\t\tThe new x-coordinate of the mouse cursor position."]
    #[doc = "@param\tcy\t\t\tThe new y-coordinate of the mouse cursor position."]
    pub fn jmouse_setposition_view(patcherview: *mut t_object, cx: f64, cy: f64);
}
extern "C" {
    #[doc = "\tSet the position of the mouse cursor relative to a box within the patcher canvas coordinates."]
    #[doc = "@ingroup\t\t\tjmouse"]
    #[doc = "@param\tpatcherview\tThe patcherview containing the box upon which the mouse coordinates are based."]
    #[doc = "@param\tbox\t\t\tThe box upon which the mouse coordinates are based."]
    #[doc = "@param\tbx\t\t\tThe new x-coordinate of the mouse cursor position."]
    #[doc = "@param\tby\t\t\tThe new y-coordinate of the mouse cursor position."]
    pub fn jmouse_setposition_box(
        patcherview: *mut t_object,
        box_: *mut t_object,
        bx: f64,
        by: f64,
    );
}
pub mod _jmouse_cursortype {
    #[doc = "\tMouse cursor types."]
    #[doc = "@ingroup jmouse"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< None"]
    pub const JMOUSE_CURSOR_NONE: Type = 0;
    #[doc = "< Arrow"]
    pub const JMOUSE_CURSOR_ARROW: Type = 1;
    #[doc = "< Wait"]
    pub const JMOUSE_CURSOR_WAIT: Type = 2;
    #[doc = "< I-Beam"]
    pub const JMOUSE_CURSOR_IBEAM: Type = 3;
    #[doc = "< Crosshair"]
    pub const JMOUSE_CURSOR_CROSSHAIR: Type = 4;
    #[doc = "< Copying"]
    pub const JMOUSE_CURSOR_COPYING: Type = 5;
    #[doc = "< Pointing Hand"]
    pub const JMOUSE_CURSOR_POINTINGHAND: Type = 6;
    #[doc = "< Dragging Hand"]
    pub const JMOUSE_CURSOR_DRAGGINGHAND: Type = 7;
    #[doc = "< Left-Right"]
    pub const JMOUSE_CURSOR_RESIZE_LEFTRIGHT: Type = 8;
    #[doc = "< Up-Down"]
    pub const JMOUSE_CURSOR_RESIZE_UPDOWN: Type = 9;
    #[doc = "< Four Way"]
    pub const JMOUSE_CURSOR_RESIZE_FOURWAY: Type = 10;
    #[doc = "< Top Edge"]
    pub const JMOUSE_CURSOR_RESIZE_TOPEDGE: Type = 11;
    #[doc = "< Bottom Edge"]
    pub const JMOUSE_CURSOR_RESIZE_BOTTOMEDGE: Type = 12;
    #[doc = "< Left Edge"]
    pub const JMOUSE_CURSOR_RESIZE_LEFTEDGE: Type = 13;
    #[doc = "< Right Edge"]
    pub const JMOUSE_CURSOR_RESIZE_RIGHTEDGE: Type = 14;
    #[doc = "< Top-Left Corner"]
    pub const JMOUSE_CURSOR_RESIZE_TOPLEFTCORNER: Type = 15;
    #[doc = "< Top-Right Corner"]
    pub const JMOUSE_CURSOR_RESIZE_TOPRIGHTCORNER: Type = 16;
    #[doc = "< Bottom-Left Corner"]
    pub const JMOUSE_CURSOR_RESIZE_BOTTOMLEFTCORNER: Type = 17;
    #[doc = "< Bottom-Right Corner"]
    pub const JMOUSE_CURSOR_RESIZE_BOTTOMRIGHTCORNER: Type = 18;
}
#[doc = "\tMouse cursor types."]
#[doc = "@ingroup jmouse"]
pub use self::_jmouse_cursortype::Type as t_jmouse_cursortype;
extern "C" {
    #[doc = "\tSet the mouse cursor."]
    #[doc = "@ingroup\t\t\tjmouse"]
    #[doc = "@param\tpatcherview\tThe patcherview for which the cursor should be applied."]
    #[doc = "@param\tbox\t\t\tThe box for which the cursor should be applied."]
    #[doc = "@param\ttype\t\tThe type of cursor for the mouse to use."]
    pub fn jmouse_setcursor(
        patcherview: *mut t_object,
        box_: *mut t_object,
        type_: t_jmouse_cursortype,
    );
}
extern "C" {
    #[doc = "\tGet the current window, if any."]
    #[doc = "@ingroup\tjwind"]
    #[doc = "@return\t\tA pointer to the current window, if there is one.  Otherwise returns NULL."]
    pub fn jwind_getactive() -> *mut t_object;
}
extern "C" {
    #[doc = "\tDetermine how many windows exist."]
    #[doc = "@ingroup\tjwind"]
    #[doc = "@return\t\tThe number of windows."]
    pub fn jwind_getcount() -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tReturn a pointer to the window with a given index."]
    #[doc = "@ingroup\t\tjwind"]
    #[doc = "@param\tindex\tGet window at index (0 to count-1)."]
    #[doc = "@return\t\t\tA pointer to a window object."]
    pub fn jwind_getat(index: ::std::os::raw::c_long) -> *mut t_object;
}
extern "C" {
    #[doc = "\tReturn the number of monitors on which can be displayed."]
    #[doc = "@ingroup\tjmonitor"]
    #[doc = "@return\t\tThe number of monitors."]
    pub fn jmonitor_getnumdisplays() -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tReturn the #t_rect for a given display."]
    #[doc = "@ingroup\t\t\t\tjmonitor"]
    #[doc = "@param\tworkarea\t\tSet workarea non-zero to clip out things like dock / task bar."]
    #[doc = "@param\tdisplayindex\tThe index number for a monitor.  The primary monitor has an index of 0."]
    #[doc = "@param\trect\t\t\tThe address of a valid #t_rect whose values will be filled-in upon return."]
    pub fn jmonitor_getdisplayrect(
        workarea: ::std::os::raw::c_long,
        displayindex: ::std::os::raw::c_long,
        rect: *mut t_rect,
    );
}
extern "C" {
    #[doc = "\tReturn a union of all display rects."]
    #[doc = "@ingroup\t\t\t\tjmonitor"]
    #[doc = "@param\tworkarea\t\tSet workarea non-zero to clip out things like dock / task bar."]
    #[doc = "@param\trect\t\t\tThe address of a valid #t_rect whose values will be filled-in upon return."]
    pub fn jmonitor_getdisplayrect_foralldisplays(
        workarea: ::std::os::raw::c_long,
        rect: *mut t_rect,
    );
}
extern "C" {
    #[doc = "\tReturn the #t_rect for the display on which a point exists."]
    #[doc = "@ingroup\t\t\t\tjmonitor"]
    #[doc = "@param\tworkarea\t\tSet workarea non-zero to clip out things like dock / task bar."]
    #[doc = "@param\tpt\t\t\t\tA point, for which the monitor will be determined and the rect recturned."]
    #[doc = "@param\trect\t\t\tThe address of a valid #t_rect whose values will be filled-in upon return."]
    pub fn jmonitor_getdisplayrect_forpoint(
        workarea: ::std::os::raw::c_long,
        pt: t_pt,
        rect: *mut t_rect,
    );
}
extern "C" {
    #[doc = "\tReturn the scale factor for the display on which a point exists."]
    #[doc = "@ingroup\t\t\t\tjmonitor"]
    #[doc = "@param\tdisplayindex\tIndex of the monitor whose scale factor will be returned."]
    pub fn jmonitor_getdisplayscalefactor(displayindex: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    #[doc = "\tReturn the scale factor for the display on which a point exists."]
    #[doc = "@ingroup\t\t\t\tjmonitor"]
    #[doc = "@param\tpt\t\t\t\tA point, for which the monitor will be determined and the scale factor recturned."]
    pub fn jmonitor_getdisplayscalefactor_forpoint(pt: t_pt) -> f64;
}
extern "C" {
    #[doc = " take an unscaled point and convert it to a scaled point"]
    #[doc = "note --  most APIs take scaled coordinates so drawing doesn't need to consider scale factor for each monitor"]
    #[doc = "@ingroup\t\t\t\tjmonitor"]
    #[doc = "@param unscaled_pt\t\tthe point to be scaled, should be in pixels on the global \"virtual\" screen consisting of all monitors"]
    #[doc = "@return\t\t\t\t\tpointer to receive the scaled point, scaled to normalize based on various scale factors and monitor arrangement"]
    pub fn jmonitor_scale_pt(unscaled_pt: t_pt) -> t_pt;
}
extern "C" {
    #[doc = " take an unscaled point and convert it to a scaled point"]
    #[doc = "note --  most APIs take scaled coordinates so drawing doesn't need to consider scale factor for each monitor"]
    #[doc = "@ingroup\t\t\t\tjmonitor"]
    #[doc = "@param scaled_pt\t\tthe point to be unscaled, should be in normalized coordinates, scaled based on scale factors and monitor arrangement"]
    #[doc = "@return\t\t\t\t\tpointer to receive the unscaled point, which will be pixel-based coordinates relative to the main monitor origin"]
    pub fn jmonitor_unscale_pt(scaled_pt: t_pt) -> t_pt;
}
extern "C" {
    pub fn jpatcher_bulk_load_begin();
}
extern "C" {
    pub fn jpatcher_bulk_load_end();
}
extern "C" {
    pub fn jpatcher_load(
        name: *const ::std::os::raw::c_char,
        volume: ::std::os::raw::c_short,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jpatcher_load_frombuffer(
        name: *mut ::std::os::raw::c_char,
        vol: ::std::os::raw::c_short,
        json: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jpatcher_load_fromdictionary(
        name: *const ::std::os::raw::c_char,
        vol: ::std::os::raw::c_short,
        rd: *mut t_object,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jpatcher_load_namespace(
        name: *const ::std::os::raw::c_char,
        volume: ::std::os::raw::c_short,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
        classnamespace: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jpatcher_load_frombuffer_namespace(
        name: *const ::std::os::raw::c_char,
        vol: ::std::os::raw::c_short,
        json: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
        classnamespace: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jpatcher_load_fromdictionary_namespace(
        name: *const ::std::os::raw::c_char,
        vol: ::std::os::raw::c_short,
        rd: *mut t_object,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
        classnamespace: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jpatcher_inc_maxsendcontext() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jbox_get_boxpath(b: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    pub fn jpatcher_dictionary_modernui(d: *mut t_dictionary) -> t_atom_long;
}
extern "C" {
    pub fn jpatcher_dictionary_version() -> t_atom_long;
}
extern "C" {
    pub fn jbox_isdefaultattribute(
        x: *mut t_jbox,
        attrname: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jwind_canfullscreen() -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tRetrieve the name of Max's system font."]
    #[doc = "@ingroup\tjfont"]
    #[doc = "@return\t\tThe name of Max's system font."]
    pub fn systemfontname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tRetrieve the name of Max's system font as a symbol."]
    #[doc = "@ingroup\tjfont"]
    #[doc = "@return\t\tThe name of Max's system font."]
    pub fn systemfontsym() -> *mut t_symbol;
}
extern "C" {
    #[doc = "\tA convenience function that simplifies usage by wrapping the other charset functions."]
    #[doc = "@ingroup unicode"]
    #[doc = ""]
    #[doc = "@param\tsrc_encoding\tThe name encoding of the input."]
    #[doc = "@param\tin\t\t\t\tThe input string."]
    #[doc = "@param\tinbytes\t\t\tThe number of bytes in the input string."]
    #[doc = "@param\tdest_encoding\tThe name of the encoding to use for the output."]
    #[doc = "@param\tout\t\t\t\tThe address of a char*, which will be allocated and filled with the string in the new encoding."]
    #[doc = "@param\toutbytes\t\tThe address of a value that will hold the number of bytes long the output is upon return."]
    #[doc = "@return\t\t\t\t\tA Max error code."]
    #[doc = "@remark\t\t\t\t\tRemember to call sysmem_freeptr(*out) to free any allocated memory."]
    pub fn charset_convert(
        src_encoding: *mut t_symbol,
        in_: *const ::std::os::raw::c_char,
        inbytes: ::std::os::raw::c_long,
        dest_encoding: *mut t_symbol,
        out: *mut *mut ::std::os::raw::c_char,
        outbytes: *mut ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tConvert a UTF8 C-String into a 16-bit-wide-character array."]
    #[doc = "@ingroup unicode"]
    #[doc = "@param\ts\t\tThe string to be converted to unicode."]
    #[doc = "@param\toutlen\tThe address of a variable to hold the size of the number of chars"]
    #[doc = "but does not include the NULL terminator in the count."]
    #[doc = "@return\t\t\tA pointer to the buffer of unicode (wide) characters."]
    pub fn charset_utf8tounicode(
        s: *mut ::std::os::raw::c_char,
        outlen: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    #[doc = " Convert a 16-bit-wide-character array into a UTF C-string."]
    #[doc = "Accepts either null termination, or not (len is zero in the latter case)."]
    #[doc = "@ingroup unicode"]
    #[doc = "@param\ts\t\tAn array of wide (16-bit) unicode characters."]
    #[doc = "@param\tlen\t\tThe length of s."]
    #[doc = "@param\toutlen\tThe address of a variable to hold the size of the number of chars"]
    #[doc = "but does not include the NULL terminator in the count."]
    #[doc = "@return\t\t\tA UTF8-encoded C-string."]
    pub fn charset_unicodetoutf8(
        s: *mut ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_long,
        outlen: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tReturns utf8 character count, and optionally bytecount."]
    #[doc = "@ingroup unicode"]
    #[doc = "@param\tutf8\t\tThe UTF-8 encoded string whose characters are to be counted."]
    #[doc = "@param\tbytecount\tThe address of a variable to hold the byte count on return."]
    #[doc = "Pass NULL if you don't require the byte count."]
    #[doc = "@return\t\t\t\tThe number of characters in the UTF8 string."]
    pub fn charset_utf8_count(
        utf8: *mut ::std::os::raw::c_char,
        bytecount: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tReturns utf8 character offset (positive or negative), and optionally byte offset."]
    #[doc = "@ingroup unicode"]
    #[doc = "@param\tutf8\t\tA UTF-8 encoded string."]
    #[doc = "@param\tcharoffset\tThe char offset into the string at which to find the byte offset."]
    #[doc = "@param\tbyteoffset\tThe address of a variable to hold the byte offset on return."]
    #[doc = "Pass NULL if you don't require the byte offset."]
    #[doc = "@return\t\t\t\tThe character offset."]
    pub fn charset_utf8_offset(
        utf8: *mut ::std::os::raw::c_char,
        charoffset: ::std::os::raw::c_long,
        byteoffset: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn typelist_make(
        types: *mut t_fourcc,
        include: ::std::os::raw::c_long,
        numtypes: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    #[doc = "Print text to the Max window."]
    #[doc = "Max 5 introduced object_post(), which provides several enhancements to post()"]
    #[doc = "where a valid #t_object pointer is available."]
    #[doc = ""]
    #[doc = "post() is a printf() for the Max window. It even works from non-main threads,"]
    #[doc = "queuing up multiple lines of text to be printed when the main thread processing resumes."]
    #[doc = "post() can be quite useful in debugging your external object."]
    #[doc = ""]
    #[doc = "@ingroup console"]
    #[doc = "@param\tfmt\t\tA C-string containing text and printf-like codes"]
    #[doc = "specifying the sizes and formatting of the additional arguments."]
    #[doc = "@param\t...\t\tArguments of any type that correspond to the format codes in fmtString."]
    #[doc = ""]
    #[doc = "@remark\t\tNote that post only passes 16 bytes of arguments to sprintf, so if"]
    #[doc = "you want additional formatted items on a single line, use postatom()."]
    #[doc = ""]
    #[doc = "Example:"]
    #[doc = "@code"]
    #[doc = "short whatIsIt;"]
    #[doc = ""]
    #[doc = "whatIsIt = 999;"]
    #[doc = "post (\"the variable is %ld\",(long)whatIsIt);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@remark\t\tThe Max Window output when this code is executed."]
    #[doc = "@code"]
    #[doc = "the variable is 999"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see object_post()"]
    #[doc = "@see error()"]
    #[doc = "@see cpost()"]
    pub fn post(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = "Print text to the system console."]
    #[doc = "On the Mac this post will be visible by launching Console.app in the /Applications/Utilities folder."]
    #[doc = "On Windows this post will be visible by launching the dbgView.exe program, which is a free download"]
    #[doc = "as a part of Microsoft's SysInternals."]
    #[doc = ""]
    #[doc = "@ingroup console"]
    #[doc = "@param\tfmt\t\tA C-string containing text and printf-like codes"]
    #[doc = "specifying the sizes and formatting of the additional arguments."]
    #[doc = "@param\t...\t\tArguments of any type that correspond to the format codes in fmtString."]
    #[doc = ""]
    #[doc = "@remark\t\t\tParticularly on MacOS 10.5, posting to Console.app can be a computationally expensive operation."]
    #[doc = "Use with care."]
    #[doc = ""]
    #[doc = "@see post()"]
    #[doc = "@see object_post()"]
    pub fn cpost(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = "Print an error to the Max window."]
    #[doc = "Max 5 introduced object_error(), which provides several enhancements to error()"]
    #[doc = "where a valid #t_object pointer is available."]
    #[doc = ""]
    #[doc = "error() is very similar to post(), thought it offers two additional features:"]
    #[doc = "- the post to the Max window is highlighted (with a red background)."]
    #[doc = "- the post can be trapped with the error object in a patcher."]
    #[doc = ""]
    #[doc = "@ingroup console"]
    #[doc = "@param\tfmt\t\tA C-string containing text and printf-like codes"]
    #[doc = "specifying the sizes and formatting of the additional arguments."]
    #[doc = "@param\t...\t\tArguments of any type that correspond to the format codes in fmtString."]
    #[doc = ""]
    #[doc = "@see object_post()"]
    #[doc = "@see post()"]
    #[doc = "@see cpost()"]
    pub fn error(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = "Put up an error or advisory alert box on the screen."]
    #[doc = ""]
    #[doc = "Don't use this function.  Instead use error(), object_error(), or object_error_obtrusive()."]
    #[doc = ""]
    #[doc = "This function performs an sprintf() on fmtstring and items, then"]
    #[doc = "puts up an alert box. ouchstring() will queue the message to a lower"]
    #[doc = "priority level if it's called in an interrupt and there is no alert box"]
    #[doc = "request already pending."]
    #[doc = ""]
    #[doc = "@ingroup console"]
    #[doc = "@param\ts\t\tA C-string containing text and printf-like codes"]
    #[doc = "specifying the sizes and formatting of the additional arguments."]
    #[doc = "@param\t...\t\tArguments of any type that correspond to the format codes in fmtString."]
    #[doc = ""]
    #[doc = "@see\terror()"]
    #[doc = "@see\tobject_error()"]
    #[doc = "@see\tobject_error_obtrusive()"]
    pub fn ouchstring(s: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = "Print multiple items in the same line of text in the Max window."]
    #[doc = "This function prints a single #t_atom on a line in the Max window"]
    #[doc = "without a carriage return afterwards, as post() does. Each #t_atom printed"]
    #[doc = "is followed by a space character."]
    #[doc = ""]
    #[doc = "@ingroup console"]
    #[doc = "@param\tap\t\tThe address of a #t_atom to print."]
    #[doc = ""]
    #[doc = "@see object_post()"]
    #[doc = "@see post()"]
    #[doc = "@see cpost()"]
    pub fn postatom(ap: *mut t_atom);
}
extern "C" {
    pub fn debug_printf(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = "\tReceive messages from the error handler."]
    #[doc = "@ingroup misc"]
    #[doc = "@param\tx\tThe object to be subscribed to the error handler."]
    #[doc = ""]
    #[doc = "@remark\t\terror_subscribe() enables your object to receive a message (error),"]
    #[doc = "followed by the list of atoms in the error message posted to the Max"]
    #[doc = "window."]
    #[doc = ""]
    #[doc = "Prior to calling error_subscribe(), you should bind the error"]
    #[doc = "message to an internal error handling routine:"]
    #[doc = "@code"]
    #[doc = "addmess((method)myobject_error, \"error\", A_GIMME, 0);"]
    #[doc = "@endcode"]
    #[doc = "Your error handling routine should be declared as follows:"]
    #[doc = "@code"]
    #[doc = "void myobject_error(t_myobject *x, t_symbol *s, short argc, t_atom *argv);"]
    #[doc = "@endcode"]
    pub fn error_subscribe(x: *mut t_object);
}
extern "C" {
    #[doc = " Remove an object as an error message recipient."]
    #[doc = "@ingroup misc"]
    #[doc = "@param\tx\tThe object to unsubscribe."]
    pub fn error_unsubscribe(x: *mut t_object);
}
extern "C" {
    pub fn xsetpost();
}
extern "C" {
    pub fn poststring(s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "Print text to the Max window, linked to an instance of your object."]
    #[doc = ""]
    #[doc = "Max window rows which are generated using object_post() or object_error() can be"]
    #[doc = "double-clicked by the user to have Max assist with locating the object in a patcher."]
    #[doc = "Rows created with object_post() and object_error() will also automatically provide"]
    #[doc = "the name of the object's class in the correct column in the Max window."]
    #[doc = ""]
    #[doc = "@ingroup console"]
    #[doc = "@param\tx\t\tA pointer to your object."]
    #[doc = "@param\ts\t\tA C-string containing text and printf-like codes"]
    #[doc = "specifying the sizes and formatting of the additional arguments."]
    #[doc = "@param\t...\t\tArguments of any type that correspond to the format codes in fmtString."]
    #[doc = ""]
    #[doc = "@remark\t\t\tExample:"]
    #[doc = "@code"]
    #[doc = "void myMethod(myObject *x, long someArgument)"]
    #[doc = "{"]
    #[doc = "object_post((t_object*)x, \"This is my argument: %ld\", someArgument);"]
    #[doc = "}"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@see object_error()"]
    pub fn object_post(x: *mut t_object, s: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = "Print text to the Max window, linked to an instance of your object,"]
    #[doc = "and flagged as an error (highlighted with a red background)."]
    #[doc = ""]
    #[doc = "Max window rows which are generated using object_post() or object_error() can be"]
    #[doc = "double-clicked by the user to have Max assist with locating the object in a patcher."]
    #[doc = "Rows created with object_post() and object_error() will also automatically provide"]
    #[doc = "the name of the object's class in the correct column in the Max window."]
    #[doc = ""]
    #[doc = "@ingroup console"]
    #[doc = "@param\tx\t\tA pointer to your object."]
    #[doc = "@param\ts\t\tA C-string containing text and printf-like codes"]
    #[doc = "specifying the sizes and formatting of the additional arguments."]
    #[doc = "@param\t...\t\tArguments of any type that correspond to the format codes in fmtString."]
    #[doc = ""]
    #[doc = "@see object_post()"]
    #[doc = "@see object_warn()"]
    pub fn object_error(x: *mut t_object, s: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = "Print text to the Max window, linked to an instance of your object,"]
    #[doc = "and flagged as a warning (highlighted with a yellow background)."]
    #[doc = ""]
    #[doc = "Max window rows which are generated using object_post(), object_error(), or object_warn can be"]
    #[doc = "double-clicked by the user to have Max assist with locating the object in a patcher."]
    #[doc = "Rows created with object_post(), object_error(), or object_warn() will also automatically provide"]
    #[doc = "the name of the object's class in the correct column in the Max window."]
    #[doc = ""]
    #[doc = "@ingroup console"]
    #[doc = "@param\tx\t\tA pointer to your object."]
    #[doc = "@param\ts\t\tA C-string containing text and printf-like codes"]
    #[doc = "specifying the sizes and formatting of the additional arguments."]
    #[doc = "@param\t...\t\tArguments of any type that correspond to the format codes in fmtString."]
    #[doc = ""]
    #[doc = "@see object_post()"]
    #[doc = "@see object_error()"]
    pub fn object_warn(x: *mut t_object, s: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn object_bug(x: *mut t_object, s: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn object_poststring(
        ob: *mut t_object,
        kind: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
        text: *mut ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jgraphics {
    _unused: [u8; 0],
}
pub type t_jgraphics = _jgraphics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jpath {
    _unused: [u8; 0],
}
pub type t_jpath = _jpath;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jpattern {
    _unused: [u8; 0],
}
pub type t_jpattern = _jpattern;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jfont {
    _unused: [u8; 0],
}
pub type t_jfont = _jfont;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jtextlayout {
    _unused: [u8; 0],
}
pub type t_jtextlayout = _jtextlayout;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jsurface {
    _unused: [u8; 0],
}
pub type t_jsurface = _jsurface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jdesktopui {
    _unused: [u8; 0],
}
pub type t_jdesktopui = _jdesktopui;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jpopupmenu {
    _unused: [u8; 0],
}
pub type t_jpopupmenu = _jpopupmenu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jsvg {
    _unused: [u8; 0],
}
pub type t_jsvg = _jsvg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jsvg_remap {
    _unused: [u8; 0],
}
pub type t_jsvg_remap = _jsvg_remap;
pub mod _jgraphics_line_join {
    pub type Type = ::std::os::raw::c_uint;
    pub const JGRAPHICS_LINE_JOIN_MITER: Type = 0;
    pub const JGRAPHICS_LINE_JOIN_ROUND: Type = 1;
    pub const JGRAPHICS_LINE_JOIN_BEVEL: Type = 2;
}
pub use self::_jgraphics_line_join::Type as t_jgraphics_line_join;
pub mod _jgraphics_line_cap {
    pub type Type = ::std::os::raw::c_uint;
    pub const JGRAPHICS_LINE_CAP_BUTT: Type = 0;
    pub const JGRAPHICS_LINE_CAP_ROUND: Type = 1;
    pub const JGRAPHICS_LINE_CAP_SQUARE: Type = 2;
}
pub use self::_jgraphics_line_cap::Type as t_jgraphics_line_cap;
pub mod _jgraphics_bubble_side {
    pub type Type = ::std::os::raw::c_uint;
    pub const JGRAPHICS_BUBBLE_SIDE_TOP: Type = 0;
    pub const JGRAPHICS_BUBBLE_SIDE_LEFT: Type = 1;
    pub const JGRAPHICS_BUBBLE_SIDE_BOTTOM: Type = 2;
    pub const JGRAPHICS_BUBBLE_SIDE_RIGHT: Type = 3;
}
pub use self::_jgraphics_bubble_side::Type as t_jgraphics_bubble_side;
pub mod _jgraphics_path_elemtype {
    pub type Type = ::std::os::raw::c_uint;
    pub const JGRAPHICS_PATH_STARTNEWSUBPATH: Type = 0;
    pub const JGRAPHICS_PATH_LINETO: Type = 1;
    pub const JGRAPHICS_PATH_QUADRATICTO: Type = 2;
    pub const JGRAPHICS_PATH_CUBICTO: Type = 3;
    pub const JGRAPHICS_PATH_CLOSEPATH: Type = 4;
}
pub use self::_jgraphics_path_elemtype::Type as t_jgraphics_path_type;
extern "C" {
    #[doc = " Utility for rounding a double to an int."]
    #[doc = "@ingroup jgraphics"]
    #[doc = "@param\td\tfloating-point input."]
    #[doc = "@return\t\trounded int output."]
    pub fn jgraphics_round(d: f64) -> ::std::os::raw::c_int;
}
pub mod _jgraphics_format {
    #[doc = "\tEnumeration of color formats used by jgraphics surfaces."]
    #[doc = "@ingroup\tjgraphics"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< Color is represented using 32 bits, 8 bits each for the components, and including an alpha component."]
    pub const JGRAPHICS_FORMAT_ARGB32: Type = 0;
    #[doc = "< Color is represented using 32 bits, 8 bits each for the components.  There is no alpha component."]
    pub const JGRAPHICS_FORMAT_RGB24: Type = 1;
    #[doc = "< The color is represented only as an 8-bit alpha mask."]
    pub const JGRAPHICS_FORMAT_A8: Type = 2;
}
#[doc = "\tEnumeration of color formats used by jgraphics surfaces."]
#[doc = "@ingroup\tjgraphics"]
pub use self::_jgraphics_format::Type as t_jgraphics_format;
pub mod _jgraphics_fileformat {
    #[doc = "\tEnumeration of file formats usable for jgraphics surfaces."]
    #[doc = "@ingroup\tjgraphics"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< Portable Network Graphics (PNG) format"]
    pub const JGRAPHICS_FILEFORMAT_PNG: Type = 0;
    #[doc = "< JPEG format"]
    pub const JGRAPHICS_FILEFORMAT_JPEG: Type = 1;
}
extern "C" {
    #[doc = "\tCreate an image surface."]
    #[doc = "Use jgraphics_surface_destroy() to free it when you are done."]
    #[doc = "@ingroup\t\tjsurface"]
    #[doc = "@param\tformat\tDefines the color format for the new surface."]
    #[doc = "@param\twidth\tDefines the width of the new surface."]
    #[doc = "@param\theight\tDefines the height of the new surface."]
    #[doc = "@return\t\t\tA pointer to the new surface."]
    pub fn jgraphics_image_surface_create(
        format: t_jgraphics_format,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut t_jsurface;
}
extern "C" {
    #[doc = "\tCreate an image surface, filling it with the contents of a file, and get a reference to the surface."]
    #[doc = "Use jgraphics_surface_destroy() to release your reference to the surface when you are done."]
    #[doc = "@ingroup\t\t\tjsurface"]
    #[doc = "@param\tfilename\tThe name of the file."]
    #[doc = "@param\tpath\t\tThe path id of the file."]
    #[doc = "@return\t\t\t\tA pointer to the new surface."]
    pub fn jgraphics_image_surface_create_referenced(
        filename: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
    ) -> *mut t_jsurface;
}
extern "C" {
    #[doc = "\tCreate an image surface, filling it with the contents of a file."]
    #[doc = "Use jgraphics_surface_destroy() to free it when you are done."]
    #[doc = "@ingroup\t\t\tjsurface"]
    #[doc = "@param\tfilename\tThe name of the file."]
    #[doc = "@param\tpath\t\tThe path id of the file."]
    #[doc = "@return\t\t\t\tA pointer to the new surface."]
    pub fn jgraphics_image_surface_create_from_file(
        filename: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
    ) -> *mut t_jsurface;
}
extern "C" {
    #[doc = "\tCreate an image surface from given pixel data."]
    #[doc = "Data should point to start of top line of bitmap, stride tells how to get to next line."]
    #[doc = "For upside down windows bitmaps, data = (pBits-(height-1)*stride) and stride is a negative number."]
    #[doc = "@ingroup\t\t\tjsurface"]
    #[doc = "@param\tdata\t\tThe data.  For example, an RGBA image loaded in memory."]
    #[doc = "@param\tformat\t\tThe format of the data."]
    #[doc = "@param\twidth\t\tThe width of the new surface."]
    #[doc = "@param\theight\t\tThe height of the new surface."]
    #[doc = "@param\tstride\t\tThe number of bytes between the start of rows in the dat buffer."]
    #[doc = "@param\tfreefun\t\tIf not NULL, freefun will be called when the surface is destroyed"]
    #[doc = "@param\tfreearg\t\tThis will be passed to freefun if/when freefun is called."]
    #[doc = "@return\t\t\t\tA pointer to the new surface."]
    pub fn jgraphics_image_surface_create_for_data(
        data: *mut ::std::os::raw::c_uchar,
        format: t_jgraphics_format,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        freefun: method,
        freearg: *mut ::std::os::raw::c_void,
    ) -> *mut t_jsurface;
}
extern "C" {
    pub fn jgraphics_image_surface_create_for_data_premult(
        data: *mut ::std::os::raw::c_uchar,
        format: t_jgraphics_format,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        freefun: method,
        freearg: *mut ::std::os::raw::c_void,
    ) -> *mut t_jsurface;
}
extern "C" {
    #[doc = "\tCreate a new surface from file data."]
    #[doc = "@ingroup\t\tjsurface"]
    #[doc = "@param\tdata\tA pointer to the raw PNG or JPG bits."]
    #[doc = "@param\tdatalen\tThe number of bytes in data."]
    #[doc = "@return\t\t\tThe new surface."]
    #[doc = "@see\t\t\tjgraphics_write_image_surface_to_filedata()"]
    pub fn jgraphics_image_surface_create_from_filedata(
        data: *const ::std::os::raw::c_void,
        datalen: ::std::os::raw::c_ulong,
    ) -> *mut t_jsurface;
}
extern "C" {
    #[doc = "\tCreate a new surface from a resource in your external."]
    #[doc = "@ingroup\t\t\tjsurface"]
    #[doc = "@param\tmoduleRef\tA pointer to your external's module,"]
    #[doc = "which is passed to your external's main() function when the class is loaded."]
    #[doc = "@param\tresname\t\tThe name of the resource in the external."]
    #[doc = "@remark\t\t\t\tThe following example shows an example of how this might be used in an external."]
    #[doc = "@code"]
    #[doc = "static s_my_surface = NULL;"]
    #[doc = ""]
    #[doc = "int main(void *moduleRef)"]
    #[doc = "{"]
    #[doc = ""]
    #[doc = "s_my_surface = jgraphics_image_surface_create_from_resource(moduleRef, \"myCoolImage\");"]
    #[doc = ""]
    #[doc = "return 0;"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn jgraphics_image_surface_create_from_resource(
        moduleRef: *const ::std::os::raw::c_void,
        resname: *const ::std::os::raw::c_char,
    ) -> *mut t_jsurface;
}
extern "C" {
    #[doc = "\tLow-level routine to access an object's resource data."]
    #[doc = "@ingroup\tjsurface"]
    #[doc = "@param\tmoduleRef\tA pointer to your external's module, which is passed to your external's main() function when the class is loaded."]
    #[doc = "@param\tresname\t\tBase name of the resource data (without an extension)"]
    #[doc = "@param\textcount\tCount of possible extensions (ignored on Windows)"]
    #[doc = "@param\texts\t\tArray of symbol atoms containing possible filename extensions (ignored on Windows)"]
    #[doc = "@param\tdata\t\tReturned resource data assigned to a pointer you supply"]
    #[doc = "@param\tdatasize\tSize of the data returned"]
    #[doc = "@remark\t\t\t\tYou are responsible for freeing any data returned in the data pointer"]
    #[doc = "@return\t\tA Max error code."]
    pub fn jgraphics_get_resource_data(
        moduleRef: *const ::std::os::raw::c_void,
        resname: *const ::std::os::raw::c_char,
        extcount: ::std::os::raw::c_long,
        exts: *mut t_atom,
        data: *mut *mut ::std::os::raw::c_void,
        datasize: *mut ::std::os::raw::c_ulong,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tCreate a reference to an existing surface."]
    #[doc = "Use jgraphics_surface_destroy() to release your reference to the surface when you are done."]
    #[doc = "@ingroup\tjsurface"]
    #[doc = "@param\ts\tThe surface to reference."]
    #[doc = "@return\t\tThe new reference to the surface."]
    pub fn jgraphics_surface_reference(s: *mut t_jsurface) -> *mut t_jsurface;
}
extern "C" {
    #[doc = "\tRelease or free a surface."]
    #[doc = "@ingroup\tjsurface"]
    #[doc = "@param\ts\tThe surface to release."]
    pub fn jgraphics_surface_destroy(s: *mut t_jsurface);
}
extern "C" {
    #[doc = "\tExport a PNG file of the contents of a surface."]
    #[doc = "@ingroup\t\t\tjsurface"]
    #[doc = "@param\tsurface\t\tThe surface to export."]
    #[doc = "@param\tfilename\tSpecify the name of the file to create."]
    #[doc = "@param\tpath\t\tSpecify the path id for where to create the file."]
    #[doc = "@param\tdpi\t\t\tDefine the resolution of the image (e.g. 72)."]
    #[doc = "@return\t\t\t\tA Max error code."]
    pub fn jgraphics_image_surface_writepng(
        surface: *mut t_jsurface,
        filename: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
        dpi: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tExport a JPEG file of the contents of a surface."]
    #[doc = "@ingroup\t\t\tjsurface"]
    #[doc = "@param\tsurface\t\tThe surface to export."]
    #[doc = "@param\tfilename\tSpecify the name of the file to create."]
    #[doc = "@param\tpath\t\tSpecify the path id for where to create the file."]
    #[doc = "@return\t\t\t\tA Max error code."]
    pub fn jgraphics_image_surface_writejpeg(
        surface: *mut t_jsurface,
        filename: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
    ) -> t_max_err;
}
extern "C" {
    pub fn jgraphics_surface_set_device_offset(s: *mut t_jsurface, x_offset: f64, y_offset: f64);
}
extern "C" {
    pub fn jgraphics_surface_get_device_offset(
        s: *mut t_jsurface,
        x_offset: *mut f64,
        y_offset: *mut f64,
    );
}
extern "C" {
    #[doc = "\tRetrieve the width of a surface."]
    #[doc = "@ingroup\t\tjsurface"]
    #[doc = "@param\ts\t\tThe surface to query."]
    #[doc = "@return\t\t\tThe width of the surface."]
    pub fn jgraphics_image_surface_get_width(s: *mut t_jsurface) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\tRetrieve the height of a surface."]
    #[doc = "@ingroup\t\tjsurface"]
    #[doc = "@param\ts\t\tThe surface to query."]
    #[doc = "@return\t\t\tThe height of the surface."]
    pub fn jgraphics_image_surface_get_height(s: *mut t_jsurface) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\tSet the color of an individual pixel in a surface."]
    #[doc = "@ingroup\t\tjsurface"]
    #[doc = "@param\ts\t\tThe surface."]
    #[doc = "@param\tx\t\tThe horizontal coordinate of the pixel."]
    #[doc = "@param\ty\t\tThe vertical coordinate of the pixel."]
    #[doc = "@param\tcolor\tThe color of the pixel."]
    pub fn jgraphics_image_surface_set_pixel(
        s: *mut t_jsurface,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        color: t_jrgba,
    );
}
extern "C" {
    #[doc = "\tRetrieve the color of an individual pixel in a surface."]
    #[doc = "@ingroup\t\tjsurface"]
    #[doc = "@param\ts\t\tThe surface."]
    #[doc = "@param\tx\t\tThe horizontal coordinate of the pixel."]
    #[doc = "@param\ty\t\tThe vertical coordinate of the pixel."]
    #[doc = "@param\tcolor\tThe address of a valid #t_jrgba struct"]
    #[doc = "whose values will be filled in with the color of the pixel upon return."]
    pub fn jgraphics_image_surface_get_pixel(
        s: *mut t_jsurface,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        color: *mut t_jrgba,
    );
}
extern "C" {
    #[doc = "@ingroup\t\tjsurface"]
    #[doc = "@param\ts\t\tThe surface to scroll."]
    #[doc = "@param\tx\t\tThe origin of the rect to scroll."]
    #[doc = "@param\ty\t\tThe origin of the rect to scroll."]
    #[doc = "@param\twidth\tThe width of the rect to scroll."]
    #[doc = "@param\theight\tThe height of the rect to scroll."]
    #[doc = "@param\tdx\t\tThe amount to scroll the surface horizontally."]
    #[doc = "@param\tdy\t\tThe amount to scroll the surface vertically."]
    #[doc = "@param\tpath\tCan pass NULL if you are not interested in this info."]
    #[doc = "Otherwise pass a pointer and it will be returned with a path containing the invalid region."]
    pub fn jgraphics_image_surface_scroll(
        s: *mut t_jsurface,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
        path: *mut *mut t_jpath,
    );
}
extern "C" {
    pub fn jgraphics_image_surface_lockpixels_readonly(
        s: *mut t_jsurface,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        linestride: *mut ::std::os::raw::c_int,
        pixelstride: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn jgraphics_image_surface_unlockpixels_readonly(
        s: *mut t_jsurface,
        data: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn jgraphics_image_surface_lockpixels(
        s: *mut t_jsurface,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        linestride: *mut ::std::os::raw::c_int,
        pixelstride: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn jgraphics_image_surface_unlockpixels(
        s: *mut t_jsurface,
        data: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[doc = "\tDraw an image surface."]
    #[doc = "This not in cairo, but, it seems silly to have to make a brush to just draw an image."]
    #[doc = "This doesn't support rotations, however."]
    #[doc = "@ingroup\t\t\tjsurface"]
    #[doc = "@param\tg\t\t\tThe graphics context in which to draw the surface."]
    #[doc = "@param\ts\t\t\tThe surface to draw."]
    #[doc = "@param\tsrcRect\t\tThe rect within the surface that should be drawn."]
    #[doc = "@param\tdestRect\tThe rect in the context to which to draw the srcRect."]
    #[doc = "@see\t\t\t\tjgraphics_image_surface_draw_fast()"]
    pub fn jgraphics_image_surface_draw(
        g: *mut t_jgraphics,
        s: *mut t_jsurface,
        srcRect: t_rect,
        destRect: t_rect,
    );
}
extern "C" {
    #[doc = "\tDraw an image surface quickly."]
    #[doc = "The draw_fast version won't scale based on zoom factor or user transforms so make sure that this is what you want!"]
    #[doc = "Draws entire image, origin *can* be shifted via zoom and user transforms"]
    #[doc = "(even though image is not scaled based on those same transforms)"]
    #[doc = "@ingroup\t\t\tjsurface"]
    #[doc = "@param\tg\t\t\tThe graphics context in which to draw the surface."]
    #[doc = "@param\ts\t\t\tThe surface to draw."]
    #[doc = "@see\tjgraphics_image_surface_draw"]
    pub fn jgraphics_image_surface_draw_fast(g: *mut t_jgraphics, s: *mut t_jsurface);
}
extern "C" {
    #[doc = "\tGet surface data ready for manually writing to a file."]
    #[doc = "@ingroup\t\tjsurface"]
    #[doc = "@param\tsurf\tThe surface whose data will be retrieved."]
    #[doc = "@param\tfmt\t\tThe format for the data.  This should be a selection from #t_jgraphics_fileformat."]
    #[doc = "@param\tdata\tThe address of a pointer that will be allocated and filled."]
    #[doc = "When you are done with this data you should free it using sysmem_freeptr()."]
    #[doc = "@param\tsize\tThe address of a variable to hold the size of the data upon return."]
    #[doc = ""]
    #[doc = "@remark\t\t\tA good example of this is to embed the surface as a PNG in a patcher file."]
    #[doc = "@code"]
    #[doc = "long size = 0;"]
    #[doc = "void *data = NULL;"]
    #[doc = ""]
    #[doc = "jgraphics_write_image_surface_to_filedata(x->j_surface, JGRAPHICS_FILEFORMAT_PNG, &data, &size);"]
    #[doc = "if (size) {"]
    #[doc = "x->j_format = gensym(\"png\");"]
    #[doc = "binarydata_appendtodictionary(data, size, gensym(\"data\"), x->j_format, d);"]
    #[doc = "x->j_imagedata = data;"]
    #[doc = "x->j_imagedatasize = size;"]
    #[doc = "}"]
    #[doc = "@endcode"]
    #[doc = "@see\t\t\tjgraphics_image_surface_create_from_filedata()"]
    pub fn jgraphics_write_image_surface_to_filedata(
        surf: *mut t_jsurface,
        fmt: ::std::os::raw::c_long,
        data: *mut *mut ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    #[doc = " Set all pixels in rect to 0."]
    #[doc = "@ingroup\t\tjsurface"]
    #[doc = "@param\ts\t\tThe surface to clear."]
    #[doc = "@param\tx\t\tThe horizontal origin of the rect to clear."]
    #[doc = "@param\ty\t\tThe vertical origin of the rect to clear."]
    #[doc = "@param\twidth\tThe width of the rect to clear."]
    #[doc = "@param\theight\tThe height of the rect to clear."]
    pub fn jgraphics_image_surface_clear(
        s: *mut t_jsurface,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = "\tRead an SVG file, return a #t_jsvg object."]
    #[doc = "@ingroup\t\t\tjsvg"]
    #[doc = "@param\tfilename\tThe name of the file to read."]
    #[doc = "@param\tpath\t\tThe path id of the file to read."]
    #[doc = "@return\t\t\t\tA new SVG object."]
    pub fn jsvg_create_from_file(
        filename: *const ::std::os::raw::c_char,
        path: ::std::os::raw::c_short,
    ) -> *mut t_jsvg;
}
extern "C" {
    #[doc = "\tRead an SVG file from a resource."]
    #[doc = "@ingroup\t\t\tjsvg"]
    #[doc = "@param\tmoduleRef\tThe external's moduleRef."]
    #[doc = "@param\tresname\t\tThe name of the SVG resource."]
    #[doc = "@return\t\t\t\tA new SVG object."]
    #[doc = "@see\t\t\t\tjgraphics_image_surface_create_from_resource()"]
    pub fn jsvg_create_from_resource(
        moduleRef: *const ::std::os::raw::c_void,
        resname: *const ::std::os::raw::c_char,
    ) -> *mut t_jsvg;
}
extern "C" {
    #[doc = "\tCreate an SVG object from a string containing the SVG's XML."]
    #[doc = "@ingroup\t\tjsvg"]
    #[doc = "@param\tsvgXML\tThe SVG source."]
    #[doc = "@return\t\t\tA new SVG object."]
    pub fn jsvg_create_from_xmlstring(svgXML: *const ::std::os::raw::c_char) -> *mut t_jsvg;
}
extern "C" {
    #[doc = "\tRetrieve the size of an SVG object."]
    #[doc = "@ingroup\t\tjsvg"]
    #[doc = "@param\tsvg\t\tAn SVG object."]
    #[doc = "@param\twidth\tThe address of a variable that will be set to the width upon return."]
    #[doc = "@param\theight\tThe address of a variable that will be set to the width upon return."]
    pub fn jsvg_get_size(svg: *mut t_jsvg, width: *mut f64, height: *mut f64);
}
extern "C" {
    #[doc = "\tFree a #t_jsvg object."]
    #[doc = "@ingroup\t\tjsvg"]
    #[doc = "@param\tsvg\t\tThe object to free."]
    pub fn jsvg_destroy(svg: *mut t_jsvg);
}
extern "C" {
    #[doc = "\tRender an SVG into a graphics context."]
    #[doc = "@ingroup\t\tjsvg"]
    #[doc = "@param\tsvg\t\tThe SVG object to render."]
    #[doc = "@param\tg\t\tThe graphics context in which to render."]
    pub fn jsvg_render(svg: *mut t_jsvg, g: *mut t_jgraphics);
}
extern "C" {
    pub fn jsvg_load_cached(name: *mut t_symbol, psvg: *mut *mut t_jsvg);
}
extern "C" {
    pub fn jsvg_remap_create(svg: *mut t_jsvg) -> *mut t_jsvg_remap;
}
extern "C" {
    pub fn jsvg_remap_addcolor(r: *mut t_jsvg_remap, src: *mut t_jrgba, dst: *mut t_jrgba);
}
extern "C" {
    pub fn jsvg_remap_perform(r: *mut t_jsvg_remap, remapped: *mut *mut t_jsvg);
}
extern "C" {
    pub fn jsvg_remap_destroy(r: *mut t_jsvg_remap);
}
extern "C" {
    pub fn jsvg_remap_addsinglecolor(r: *mut t_jsvg_remap, dst: *mut t_jrgba);
}
extern "C" {
    pub fn jgraphics_draw_jsvg(
        g: *mut t_jgraphics,
        svg: *mut t_jsvg,
        r: *mut t_rect,
        flags: ::std::os::raw::c_int,
        opacity: f64,
    );
}
extern "C" {
    #[doc = "\tCreate a context to draw on a particular surface."]
    #[doc = "When you are done, call jgraphics_destroy()."]
    #[doc = "@ingroup\t\tjsurface"]
    #[doc = "@param\ttarget\tThe surface to which to draw."]
    #[doc = "@return\t\t\tThe new graphics context."]
    pub fn jgraphics_create(target: *mut t_jsurface) -> *mut t_jgraphics;
}
extern "C" {
    #[doc = "\tGet a reference to a graphics context."]
    #[doc = "When you are done you should release your reference with jgraphics_destroy()."]
    #[doc = "@ingroup\tjgraphics"]
    #[doc = "@param\tg\tThe context you wish to reference."]
    #[doc = "@return\t\tA new reference to the context."]
    pub fn jgraphics_reference(g: *mut t_jgraphics) -> *mut t_jgraphics;
}
extern "C" {
    #[doc = "\tRelease or free a graphics context."]
    #[doc = "@ingroup\tjgraphics"]
    #[doc = "@param\tg\tThe context to release."]
    pub fn jgraphics_destroy(g: *mut t_jgraphics);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jgraphics_path_elem {
    pub x1: f32,
    pub y1: f32,
    pub x2: f32,
    pub y2: f32,
    pub x3: f32,
    pub y3: f32,
    pub type_: t_jgraphics_path_type,
}
#[test]
fn bindgen_test_layout__jgraphics_path_elem() {
    assert_eq!(
        ::std::mem::size_of::<_jgraphics_path_elem>(),
        28usize,
        concat!("Size of: ", stringify!(_jgraphics_path_elem))
    );
    assert_eq!(
        ::std::mem::align_of::<_jgraphics_path_elem>(),
        4usize,
        concat!("Alignment of ", stringify!(_jgraphics_path_elem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jgraphics_path_elem>())).x1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jgraphics_path_elem),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jgraphics_path_elem>())).y1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_jgraphics_path_elem),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jgraphics_path_elem>())).x2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jgraphics_path_elem),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jgraphics_path_elem>())).y2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_jgraphics_path_elem),
            "::",
            stringify!(y2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jgraphics_path_elem>())).x3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jgraphics_path_elem),
            "::",
            stringify!(x3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jgraphics_path_elem>())).y3 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_jgraphics_path_elem),
            "::",
            stringify!(y3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jgraphics_path_elem>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jgraphics_path_elem),
            "::",
            stringify!(type_)
        )
    );
}
pub type t_jgraphics_path_elem = _jgraphics_path_elem;
extern "C" {
    #[doc = "\tBegin a new path."]
    #[doc = "This action clears any current path in the context."]
    #[doc = "@ingroup\tjgraphics"]
    #[doc = "@param\tg\tThe graphics context."]
    pub fn jgraphics_new_path(g: *mut t_jgraphics);
}
extern "C" {
    #[doc = "\tGet a copy of the current path from a context."]
    #[doc = "@ingroup\tjgraphics"]
    #[doc = "@param g\tthe graphics context containing the current path"]
    #[doc = "@return\t\tA copy of the current path."]
    pub fn jgraphics_copy_path(g: *mut t_jgraphics) -> *mut t_jpath;
}
extern "C" {
    #[doc = "\tRelease/free a path."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tpath\tThe path to release."]
    pub fn jgraphics_path_destroy(path: *mut t_jpath);
}
extern "C" {
    #[doc = " Add a path to a graphics context."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tpath\tThe path to add."]
    pub fn jgraphics_append_path(g: *mut t_jgraphics, path: *mut t_jpath);
}
extern "C" {
    #[doc = "\tClose the current path in a context."]
    #[doc = "This will add a line segment to close current subpath."]
    #[doc = "@ingroup\tjgraphics"]
    #[doc = "@param\tg\tThe graphics context."]
    pub fn jgraphics_close_path(g: *mut t_jgraphics);
}
extern "C" {
    #[doc = "\tRound out any corners in a path."]
    #[doc = "This action clears any current path in the context."]
    #[doc = "@ingroup\t\t\t\tjgraphics"]
    #[doc = "@param\tg\t\t\t\tThe graphics context."]
    #[doc = "@param\tcornerRadius\tThe amount by which to round corners."]
    pub fn jgraphics_path_roundcorners(g: *mut t_jgraphics, cornerRadius: f64);
}
extern "C" {
    #[doc = " Return a point that lies a given distance from the start of the path"]
    #[doc = "@ingroup\t\t\t\t\tjgraphics"]
    #[doc = "@param path\t\t\t\t\tthe path"]
    #[doc = "@param distancefromstart\tdistance from the start point"]
    #[doc = "@param x\t\t\t\t\tpointer to double to receive the x position of the point"]
    #[doc = "@param y\t\t\t\t\tpointer to double to receive the y position of the point"]
    pub fn jgraphics_path_getpointalongpath(
        path: *mut t_jpath,
        distancefromstart: f64,
        x: *mut f64,
        y: *mut f64,
    );
}
extern "C" {
    #[doc = " Get the path elements and return number of path elements"]
    #[doc = "@ingroup\t\t\t\tjgraphics"]
    #[doc = "@param path\t\t\t\tthe path"]
    #[doc = "@param elems\t\t\tpointer to array of path elements"]
    #[doc = "@return\t\t\t\t\tthe number of path elements"]
    pub fn jgraphics_path_getpathelems(
        path: *mut t_jpath,
        elems: *mut *mut t_jgraphics_path_elem,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tGet the current location of the cursor in a graphics context."]
    #[doc = "@ingroup\tjgraphics"]
    #[doc = "@param\tg\tThe graphics context."]
    #[doc = "@param\tx\tThe address of a variable that will be set to the horizontal cursor location upon return."]
    #[doc = "@param\ty\tThe address of a variable that will be set to the vertical cursor location upon return."]
    pub fn jgraphics_get_current_point(g: *mut t_jgraphics, x: *mut f64, y: *mut f64);
}
extern "C" {
    #[doc = "\tAdd a circular, clockwise, arc to the current path."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\txc\t\tThe horizontal coordinate of the arc's center."]
    #[doc = "@param\tyc\t\tThe vertical coordinate of the arc's center."]
    #[doc = "@param\tradius\tThe radius of the arc."]
    #[doc = "@param\tangle1\tThe starting angle of the arc in radians."]
    #[doc = "Zero radians is center right (positive x axis)."]
    #[doc = "@param\tangle2\tThe terminal angle of the arc in radians."]
    #[doc = "Zero radians is center right (positive x axis)."]
    pub fn jgraphics_arc(
        g: *mut t_jgraphics,
        xc: f64,
        yc: f64,
        radius: f64,
        angle1: f64,
        angle2: f64,
    );
}
extern "C" {
    pub fn jgraphics_piesegment(
        g: *mut t_jgraphics,
        xc: f64,
        yc: f64,
        radius: f64,
        angle1: f64,
        angle2: f64,
        innercircleproportionalsize: f64,
    );
}
extern "C" {
    #[doc = "\tAdd a non-circular arc to the current path."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\txc\t\tThe horizontal coordinate of the arc's center."]
    #[doc = "@param\tyc\t\tThe vertical coordinate of the arc's center."]
    #[doc = "@param\tradiusx\tThe horizontal radius of the arc."]
    #[doc = "@param\tradiusy\tThe vertical radius of the arc."]
    #[doc = "@param\tangle1\tThe starting angle of the arc in radians."]
    #[doc = "Zero radians is center right (positive x axis)."]
    #[doc = "@param\tangle2\tThe terminal angle of the arc in radians."]
    #[doc = "Zero radians is center right (positive x axis)."]
    pub fn jgraphics_ovalarc(
        g: *mut t_jgraphics,
        xc: f64,
        yc: f64,
        radiusx: f64,
        radiusy: f64,
        angle1: f64,
        angle2: f64,
    );
}
extern "C" {
    #[doc = "\tAdd a circular, counter-clockwise, arc to the current path."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\txc\t\tThe horizontal coordinate of the arc's center."]
    #[doc = "@param\tyc\t\tThe vertical coordinate of the arc's center."]
    #[doc = "@param\tradius\tThe radius of the arc."]
    #[doc = "@param\tangle1\tThe starting angle of the arc in radians."]
    #[doc = "Zero radians is center right (positive x axis)."]
    #[doc = "@param\tangle2\tThe terminal angle of the arc in radians."]
    #[doc = "Zero radians is center right (positive x axis)."]
    pub fn jgraphics_arc_negative(
        g: *mut t_jgraphics,
        xc: f64,
        yc: f64,
        radius: f64,
        angle1: f64,
        angle2: f64,
    );
}
extern "C" {
    #[doc = "\tAdd a cubic Bezier spline to the current path."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tx1\t\tThe first control point."]
    #[doc = "@param\ty1\t\tThe first control point."]
    #[doc = "@param\tx2\t\tThe second control point."]
    #[doc = "@param\ty2\t\tThe second control point."]
    #[doc = "@param\tx3\t\tThe destination point."]
    #[doc = "@param\ty3\t\tThe destination point."]
    pub fn jgraphics_curve_to(
        g: *mut t_jgraphics,
        x1: f64,
        y1: f64,
        x2: f64,
        y2: f64,
        x3: f64,
        y3: f64,
    );
}
extern "C" {
    #[doc = "\tAdd a cubic Bezier spline to the current path, using coordinates relative to the current point."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tx1\t\tThe first control point."]
    #[doc = "@param\ty1\t\tThe first control point."]
    #[doc = "@param\tx2\t\tThe second control point."]
    #[doc = "@param\ty2\t\tThe second control point."]
    #[doc = "@param\tx3\t\tThe destination point."]
    #[doc = "@param\ty3\t\tThe destination point."]
    pub fn jgraphics_rel_curve_to(
        g: *mut t_jgraphics,
        x1: f64,
        y1: f64,
        x2: f64,
        y2: f64,
        x3: f64,
        y3: f64,
    );
}
extern "C" {
    #[doc = "\tAdd a line segment to the current path."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tx\t\tThe destination point."]
    #[doc = "@param\ty\t\tThe destination point."]
    pub fn jgraphics_line_to(g: *mut t_jgraphics, x: f64, y: f64);
}
extern "C" {
    #[doc = "\tAdd a line segment to the current path, using coordinates relative to the current point."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tx\t\tThe destination point."]
    #[doc = "@param\ty\t\tThe destination point."]
    pub fn jgraphics_rel_line_to(g: *mut t_jgraphics, x: f64, y: f64);
}
extern "C" {
    #[doc = " Move the cursor to a new point and begin a new subpath."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tx\t\tThe new location."]
    #[doc = "@param\ty\t\tThe new location."]
    pub fn jgraphics_move_to(g: *mut t_jgraphics, x: f64, y: f64);
}
extern "C" {
    #[doc = " Move the cursor to a new point and begin a new subpath, using coordinates relative to the current point."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tx\t\tThe new location."]
    #[doc = "@param\ty\t\tThe new location."]
    pub fn jgraphics_rel_move_to(g: *mut t_jgraphics, x: f64, y: f64);
}
extern "C" {
    #[doc = " Add a closed rectangle path in the context."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tx\t\tThe horizontal origin."]
    #[doc = "@param\ty\t\tThe vertical origin."]
    #[doc = "@param\twidth\tThe width of the rect."]
    #[doc = "@param\theight\tThe height of the rect."]
    pub fn jgraphics_rectangle(g: *mut t_jgraphics, x: f64, y: f64, width: f64, height: f64);
}
extern "C" {
    #[doc = " Deprecated -- do not use.  Adds a closed oval path in the context, however, it does not scale appropriately."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tx\t\tThe horizontal origin."]
    #[doc = "@param\ty\t\tThe vertical origin."]
    #[doc = "@param\twidth\tThe width of the oval."]
    #[doc = "@param\theight\tThe height of the oval."]
    pub fn jgraphics_oval(g: *mut t_jgraphics, x: f64, y: f64, width: f64, height: f64);
}
extern "C" {
    #[doc = " Add a closed rounded-rectangle path in the context."]
    #[doc = "@ingroup\t\t\tjgraphics"]
    #[doc = "@param\tg\t\t\tThe graphics context."]
    #[doc = "@param\tx\t\t\tThe horizontal origin."]
    #[doc = "@param\ty\t\t\tThe vertical origin."]
    #[doc = "@param\twidth\t\tThe width of the rect."]
    #[doc = "@param\theight\t\tThe height of the rect."]
    #[doc = "@param\tovalwidth\tThe width of the oval used for the round corners."]
    #[doc = "@param\tovalheight\tThe height of the oval used for the round corners."]
    pub fn jgraphics_rectangle_rounded(
        g: *mut t_jgraphics,
        x: f64,
        y: f64,
        width: f64,
        height: f64,
        ovalwidth: f64,
        ovalheight: f64,
    );
}
extern "C" {
    #[doc = " Add a closed elliptical path in the context."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tx\t\tThe horizontal origin."]
    #[doc = "@param\ty\t\tThe vertical origin."]
    #[doc = "@param\twidth\tThe width of the rect."]
    #[doc = "@param\theight\tThe height of the rect."]
    pub fn jgraphics_ellipse(g: *mut t_jgraphics, x: f64, y: f64, width: f64, height: f64);
}
extern "C" {
    #[doc = " Add a closed bubble path in the context."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tbodyx\tHorizontal body origin."]
    #[doc = "@param\tbodyy\tThe vertical origin."]
    #[doc = "@param\tbodywidth\tThe width of the rect."]
    #[doc = "@param\tbodyheight\tThe height of the rect."]
    #[doc = "@param cornersize\tBody rounded corners"]
    #[doc = "@param arrowtipx\tX position of arrow tip"]
    #[doc = "@param arrowtipy\tY position of arrow tip"]
    #[doc = "@param whichside\tside to connect arrow, see above definition of t_jgraphics_bubble_side enum,"]
    #[doc = "@param arrowedgeprop\tArrow proportion along edge (0-1)"]
    #[doc = "@param arrowwidth\tArrow base width"]
    pub fn jgraphics_bubble(
        g: *mut t_jgraphics,
        bodyx: f64,
        bodyy: f64,
        bodywidth: f64,
        bodyheight: f64,
        cornersize: f64,
        arrowtipx: f64,
        arrowtipy: f64,
        whichside: t_jgraphics_bubble_side,
        arrowedgeprop: f64,
        arrowwidth: f64,
    );
}
extern "C" {
    #[doc = " Add a closed triangular path in the context."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tx1\t\tCoordinate for the first point."]
    #[doc = "@param\ty1\t\tCoordinate for the first point."]
    #[doc = "@param\tx2\t\tCoordinate for the second point."]
    #[doc = "@param\ty2\t\tCoordinate for the second point."]
    #[doc = "@param\tx3\t\tCoordinate for the third point."]
    #[doc = "@param\ty3\t\tCoordinate for the third point."]
    pub fn jgraphics_triangle(
        g: *mut t_jgraphics,
        x1: f64,
        y1: f64,
        x2: f64,
        y2: f64,
        x3: f64,
        y3: f64,
    );
}
extern "C" {
    pub fn jgraphics_diagonal_line_fill(
        g: *mut t_jgraphics,
        pixels: f64,
        x: f64,
        y: f64,
        width: f64,
        height: f64,
    );
}
pub mod _jgraphics_font_slant {
    #[doc = "\tEnumeration of slanting options for font display."]
    #[doc = "@ingroup\tjfont"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< Normal slanting (typically this means no slanting)"]
    pub const JGRAPHICS_FONT_SLANT_NORMAL: Type = 0;
    #[doc = "< Italic slanting"]
    pub const JGRAPHICS_FONT_SLANT_ITALIC: Type = 1;
}
#[doc = "\tEnumeration of slanting options for font display."]
#[doc = "@ingroup\tjfont"]
pub use self::_jgraphics_font_slant::Type as t_jgraphics_font_slant;
pub mod _jgraphics_font_weight {
    #[doc = "\tEnumeration of font weight options for font display."]
    #[doc = "@ingroup\tjfont"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< Normal font weight"]
    pub const JGRAPHICS_FONT_WEIGHT_NORMAL: Type = 0;
    #[doc = "< Bold font weight"]
    pub const JGRAPHICS_FONT_WEIGHT_BOLD: Type = 1;
}
#[doc = "\tEnumeration of font weight options for font display."]
#[doc = "@ingroup\tjfont"]
pub use self::_jgraphics_font_weight::Type as t_jgraphics_font_weight;
extern "C" {
    #[doc = "\tSpecify a font for a graphics context."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tfamily\tThe name of the font family (e.g. \"Arial\")."]
    #[doc = "@param\tslant\tDefine the slant to use for the font."]
    #[doc = "@param\tweight\tDefine the weight to use for the font."]
    pub fn jgraphics_select_font_face(
        g: *mut t_jgraphics,
        family: *const ::std::os::raw::c_char,
        slant: t_jgraphics_font_slant,
        weight: t_jgraphics_font_weight,
    );
}
extern "C" {
    #[doc = "\tSpecify a font for a graphics context by passing a #t_jfont object."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tjfont\tA jfont object whose attributes will be copied to the context."]
    pub fn jgraphics_select_jfont(g: *mut t_jgraphics, jfont: *mut t_jfont);
}
extern "C" {
    #[doc = "\tSpecify the font size for a context."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tg\t\tThe graphics context."]
    #[doc = "@param\tsize\tThe font size."]
    pub fn jgraphics_set_font_size(g: *mut t_jgraphics, size: f64);
}
extern "C" {
    #[doc = "\tTurn underlining on/off for text in a context."]
    #[doc = "@ingroup\t\t\tjgraphics"]
    #[doc = "@param\tg\t\t\tThe graphics context."]
    #[doc = "@param\tunderline\tPass true or false to set the appropriate behavior."]
    pub fn jgraphics_set_underline(g: *mut t_jgraphics, underline: ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "\tDisplay text at the current position in a context."]
    #[doc = "@ingroup\t\t\tjgraphics"]
    #[doc = "@param\tg\t\t\tThe graphics context."]
    #[doc = "@param\tutf8\t\tThe text to display."]
    pub fn jgraphics_show_text(g: *mut t_jgraphics, utf8: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "\tAdd a path of text to the current path."]
    #[doc = "@ingroup\t\t\tjgraphics"]
    #[doc = "@param\tg\t\t\tThe graphics context."]
    #[doc = "@param\tutf8\t\tThe text to generate path for."]
    pub fn jgraphics_text_path(g: *mut t_jgraphics, utf8: *const ::std::os::raw::c_char);
}
#[doc = "\tA structure for holding information related to how much space the rendering of a given font will use."]
#[doc = "The units for these measurements is in pixels."]
#[doc = "@ingroup\tjgraphics"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jgraphics_font_extents {
    #[doc = "< The ascent."]
    pub ascent: f64,
    #[doc = "< The descent."]
    pub descent: f64,
    #[doc = "< The hieght."]
    pub height: f64,
    #[doc = "< Unused / Not valid."]
    pub max_x_advance: f64,
    #[doc = "< Unused / Not valid."]
    pub max_y_advance: f64,
}
#[test]
fn bindgen_test_layout__jgraphics_font_extents() {
    assert_eq!(
        ::std::mem::size_of::<_jgraphics_font_extents>(),
        40usize,
        concat!("Size of: ", stringify!(_jgraphics_font_extents))
    );
    assert_eq!(
        ::std::mem::align_of::<_jgraphics_font_extents>(),
        8usize,
        concat!("Alignment of ", stringify!(_jgraphics_font_extents))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jgraphics_font_extents>())).ascent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jgraphics_font_extents),
            "::",
            stringify!(ascent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jgraphics_font_extents>())).descent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jgraphics_font_extents),
            "::",
            stringify!(descent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jgraphics_font_extents>())).height as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jgraphics_font_extents),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jgraphics_font_extents>())).max_x_advance as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jgraphics_font_extents),
            "::",
            stringify!(max_x_advance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jgraphics_font_extents>())).max_y_advance as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jgraphics_font_extents),
            "::",
            stringify!(max_y_advance)
        )
    );
}
#[doc = "\tA structure for holding information related to how much space the rendering of a given font will use."]
#[doc = "The units for these measurements is in pixels."]
#[doc = "@ingroup\tjgraphics"]
pub type t_jgraphics_font_extents = _jgraphics_font_extents;
extern "C" {
    #[doc = "\tReturn the extents of the currently selected font for a given graphics context."]
    #[doc = "@ingroup\t\t\tjgraphics"]
    #[doc = "@param\tg\t\t\tPointer to a jgraphics context."]
    #[doc = "@param\textents\t\tThe address of a #t_jgraphics_font_extents structure to be filled with the results."]
    pub fn jgraphics_font_extents(g: *mut t_jgraphics, extents: *mut t_jgraphics_font_extents);
}
extern "C" {
    #[doc = "\tReturn the height and width of a string given current graphics settings in a context."]
    #[doc = "@ingroup\t\t\tjgraphics"]
    #[doc = "@param\tg\t\t\tPointer to a jgraphics context."]
    #[doc = "@param\tutf8\t\tA string containing the text whose dimensions we wish to find."]
    #[doc = "@param\twidth\t\tThe address of a variable to be filled with the width of the rendered text."]
    #[doc = "@param\theight\t\tThe address of a variable to be filled with the height of the rendered text."]
    pub fn jgraphics_text_measure(
        g: *mut t_jgraphics,
        utf8: *const ::std::os::raw::c_char,
        width: *mut f64,
        height: *mut f64,
    );
}
extern "C" {
    #[doc = "\tReturn the height, width, and number of lines that will be used to render a given string."]
    #[doc = "@ingroup\t\t\t\t\tjgraphics"]
    #[doc = "@param\tg\t\t\t\t\tPointer to a jgraphics context."]
    #[doc = "@param\tutf8\t\t\t\tA string containing the text whose dimensions we wish to find."]
    #[doc = "@param\twrapwidth\t\t\tThe number of pixels in width at which the text should be wrapped if it is too long."]
    #[doc = "@param\tincludewhitespace\tSet zero to not include white space in the calculation, otherwise set this parameter to 1."]
    #[doc = "@param\twidth\t\t\t\tThe address of a variable to be filled with the width of the rendered text."]
    #[doc = "@param\theight\t\t\t\tThe address of a variable to be filled with the height of the rendered text."]
    #[doc = "@param\tnumlines\t\t\tThe address of a variable to be filled with the number of lines required to render the text."]
    pub fn jgraphics_text_measuretext_wrapped(
        g: *mut t_jgraphics,
        utf8: *const ::std::os::raw::c_char,
        wrapwidth: f64,
        includewhitespace: ::std::os::raw::c_long,
        width: *mut f64,
        height: *mut f64,
        numlines: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jgraphics_getfontscale() -> f64;
}
extern "C" {
    pub fn jfont_create_from_maxfont(
        number: ::std::os::raw::c_short,
        size: ::std::os::raw::c_short,
    ) -> *mut t_jfont;
}
extern "C" {
    #[doc = "\tCreate a new font object."]
    #[doc = "@ingroup jfont"]
    #[doc = "@param\tfamily\tThe name of the font family (e.g. Arial)."]
    #[doc = "@param\tslant\tThe type of slant for the font."]
    #[doc = "@param\tweight\tThe type of weight for the font."]
    #[doc = "@param\tsize\tThe size of the font."]
    #[doc = "@return\t\t\tThe new font object. Needs to be freed via jfont_destroy() when done."]
    pub fn jfont_create(
        family: *const ::std::os::raw::c_char,
        slant: t_jgraphics_font_slant,
        weight: t_jgraphics_font_weight,
        size: f64,
    ) -> *mut t_jfont;
}
extern "C" {
    #[doc = "\tCreate new reference to an existing font object."]
    #[doc = "@ingroup jfont"]
    #[doc = "@param\tfont\tThe font object for which to obtain a reference."]
    #[doc = "@return\t\t\tThe new font object reference."]
    pub fn jfont_reference(font: *mut t_jfont) -> *mut t_jfont;
}
extern "C" {
    #[doc = "\tRelease or free a font object."]
    #[doc = "@ingroup jfont"]
    #[doc = "@param\tfont\tThe font object to release."]
    pub fn jfont_destroy(font: *mut t_jfont);
}
extern "C" {
    #[doc = " Compare two fonts to see if they are equivalent."]
    #[doc = "@ingroup jfont"]
    #[doc = "@param font\t\tThe first font object that is being compared."]
    #[doc = "@param other\tThe second font object that is being compared."]
    #[doc = "@return\t\t\tNonzero value if the two fonts are equivalent."]
    pub fn jfont_isequalto(font: *mut t_jfont, other: *mut t_jfont) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = " Set the name of the font family (e.g. Arial)."]
    #[doc = "@ingroup    jfont"]
    #[doc = "@param      font    The font object."]
    #[doc = "@param      family  A t_symbol containing the name of the desired font family."]
    pub fn jfont_set_family(font: *mut t_jfont, family: *mut t_symbol);
}
extern "C" {
    #[doc = " Get the name of the font family (e.g. Arial)."]
    #[doc = "@ingroup    jfont"]
    #[doc = "@param      font    The font object."]
    #[doc = "@return             A t_symbol representing the name of the font family."]
    pub fn jfont_get_family(font: *mut t_jfont) -> *mut t_symbol;
}
extern "C" {
    #[doc = " Set the slant of the font."]
    #[doc = "@ingroup    jfont"]
    #[doc = "@param      font    The font object"]
    #[doc = "@param      slant   The desired slant."]
    pub fn jfont_set_slant(font: *mut t_jfont, slant: t_jgraphics_font_slant);
}
extern "C" {
    #[doc = " Get the slant of the font."]
    #[doc = "@ingroup    jfont"]
    #[doc = "@param      font    The font object."]
    #[doc = "@return             The current slant setting for the font."]
    pub fn jfont_get_slant(font: *mut t_jfont) -> t_jgraphics_font_slant;
}
extern "C" {
    #[doc = " Set the weight of the font."]
    #[doc = "@ingroup    jfont"]
    #[doc = "@param      font    The font object"]
    #[doc = "@param      weight   The desired weight (e.g. bold)."]
    pub fn jfont_set_weight(font: *mut t_jfont, weight: t_jgraphics_font_weight);
}
extern "C" {
    #[doc = " Get the weight of the font."]
    #[doc = "@ingroup    jfont"]
    #[doc = "@param      font    The font object."]
    #[doc = "@return             The current weight setting for the font."]
    pub fn jfont_get_weight(font: *mut t_jfont) -> t_jgraphics_font_weight;
}
extern "C" {
    #[doc = " Set the size of a font object."]
    #[doc = "@ingroup\t\tjfont"]
    #[doc = "@param\tfont\tThe font object."]
    #[doc = "@param\tsize\tThe new size for the font object."]
    pub fn jfont_set_font_size(font: *mut t_jfont, size: f64);
}
extern "C" {
    #[doc = " Get the size of a font object."]
    #[doc = "@ingroup        jfont"]
    #[doc = "@param  font    The font object."]
    #[doc = "@return         The size of the font."]
    pub fn jfont_get_font_size(font: *mut t_jfont) -> f64;
}
extern "C" {
    #[doc = " Set the underlining of a font object."]
    #[doc = "@ingroup\t\tjfont"]
    #[doc = "@param\tfont\tThe font object."]
    #[doc = "@param\tul\t\tPass true to underline, or false for no underlining."]
    pub fn jfont_set_underline(font: *mut t_jfont, ul: ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " Get the underline state of a font object."]
    #[doc = "@ingroup        jfont"]
    #[doc = "@param\tfont\tThe font object."]
    #[doc = "@return         Nonzero value if the font will be underlined."]
    pub fn jfont_get_underline(font: *mut t_jfont) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn jfont_get_heighttocharheightratio(font: *mut t_jfont) -> f64;
}
extern "C" {
    #[doc = "\tGet extents of this font"]
    #[doc = "@ingroup\t\tjfont"]
    #[doc = "@param\tfont\tThe font object."]
    #[doc = "@param\textents\tThe font extents upon return/"]
    pub fn jfont_extents(font: *mut t_jfont, extents: *mut t_jgraphics_font_extents);
}
extern "C" {
    #[doc = "\tGiven a font, find out how much area is required to render a string of text."]
    #[doc = "@ingroup\t\tjfont"]
    #[doc = "@param\tfont\tThe font object."]
    #[doc = "@param\tutf8\tThe text whose rendering will be measured."]
    #[doc = "@param\twidth\tThe address of a variable to hold the width upon return."]
    #[doc = "@param\theight\tThe address of a variable to hold the height upon return."]
    pub fn jfont_text_measure(
        font: *mut t_jfont,
        utf8: *const ::std::os::raw::c_char,
        width: *mut f64,
        height: *mut f64,
    );
}
extern "C" {
    #[doc = "\tGiven a font, find out how much area is required to render a string of text,"]
    #[doc = "provided a horizontal maximum limit at which the text is wrapped."]
    #[doc = "@ingroup\t\t\t\t\tjfont"]
    #[doc = "@param\tfont\t\t\t\tThe font object."]
    #[doc = "@param\tutf8\t\t\t\tThe text whose rendering will be measured."]
    #[doc = "@param\twrapwidth\t\t\tThe maximum width, above which text should wrap onto a new line."]
    #[doc = "@param\tincludewhitespace\tIf non-zero, include whitespace in the measurement."]
    #[doc = "@param\twidth\t\t\t\tThe address of a variable to hold the width upon return."]
    #[doc = "@param\theight\t\t\t\tThe address of a variable to hold the height upon return."]
    #[doc = "@param\tnumlines\t\t\tThe address of a variable to hold the number of lines of text after wrapping upon return."]
    pub fn jfont_text_measuretext_wrapped(
        font: *mut t_jfont,
        utf8: *const ::std::os::raw::c_char,
        wrapwidth: f64,
        includewhitespace: ::std::os::raw::c_long,
        width: *mut f64,
        height: *mut f64,
        numlines: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    #[doc = " Given a font, find out the width and height of the 'M' character."]
    #[doc = "This is equivalent to jfont_text_measure(font, \"M\", width, height) but is faster."]
    #[doc = "@ingroup\t\t\t\t\tjfont"]
    #[doc = "@param\tfont\t\t\t\tThe font object."]
    #[doc = "@param\twidth\tThe address of a variable to hold the width upon return."]
    #[doc = "@param\theight\tThe address of a variable to hold the height upon return."]
    pub fn jfont_get_em_dimensions(font: *mut t_jfont, width: *mut f64, height: *mut f64);
}
extern "C" {
    #[doc = "\tGet a list of font names. Note, this includes each font style in each font family."]
    #[doc = "@ingroup\t\tjfont"]
    #[doc = "@param\tcount\tThe address of a variable to hold the count of font names in list upon return."]
    #[doc = "@param\tlist\tThe address of a #t_symbol** initialized to NULL."]
    #[doc = "Upon return this will be set to an array of count #t_symbol pointers."]
    #[doc = "This array should be freed using sysmem_freeptr() when you are done with it."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jfont_getfontlist(
        count: *mut ::std::os::raw::c_long,
        list: *mut *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn jfont_ellipsifytext(
        font: *mut t_jfont,
        text: *mut ::std::os::raw::c_char,
        maxcharbuflen: ::std::os::raw::c_long,
        maxwidth: f64,
    );
}
extern "C" {
    #[doc = "\tDetermine if you can anti-alias text to a transparent background."]
    #[doc = "You might want to call this and then disable \"useimagebuffer\" if false *and*"]
    #[doc = "you are rendering text on a transparent background."]
    #[doc = "@ingroup\tjgraphics"]
    #[doc = "@return\t\tNon-zero if you can anti-alias text to a transparent background."]
    pub fn jgraphics_system_canantialiastexttotransparentbg() -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tCreate a new textlayout object."]
    #[doc = "@ingroup\ttextlayout"]
    #[doc = "@return\t\tThe new textlayout object."]
    pub fn jtextlayout_create() -> *mut t_jtextlayout;
}
extern "C" {
    #[doc = "\tCreate a new textlayout object."]
    #[doc = "This gives a hint to the textlayout as to what the text bgcolor will be."]
    #[doc = "It won't actually paint the bg for you."]
    #[doc = "But, it does let it do a better job."]
    #[doc = "@ingroup\t\ttextlayout"]
    #[doc = "@param\tg\t\tThe graphics context for the textlayout."]
    #[doc = "@param\tbgcolor\tThe background color for the textlayout."]
    #[doc = "@return\t\t\tThe new textlayout object."]
    pub fn jtextlayout_withbgcolor(
        g: *mut t_jgraphics,
        bgcolor: *mut t_jrgba,
    ) -> *mut t_jtextlayout;
}
extern "C" {
    #[doc = "\tRelease/free a textlayout object."]
    #[doc = "@ingroup\t\t\ttextlayout"]
    #[doc = "@param\ttextlayout\tThe textlayout object to release."]
    pub fn jtextlayout_destroy(textlayout: *mut t_jtextlayout);
}
pub mod _jgraphics_text_justification {
    #[doc = "\tEnumeration of text justification options, which are specified as a bitmask."]
    #[doc = "@ingroup\tjgraphics"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< Justify left"]
    pub const JGRAPHICS_TEXT_JUSTIFICATION_LEFT: Type = 1;
    #[doc = "< Justify right"]
    pub const JGRAPHICS_TEXT_JUSTIFICATION_RIGHT: Type = 2;
    #[doc = "< Centered horizontally"]
    pub const JGRAPHICS_TEXT_JUSTIFICATION_HCENTERED: Type = 4;
    #[doc = "< Justified to the top"]
    pub const JGRAPHICS_TEXT_JUSTIFICATION_TOP: Type = 8;
    #[doc = "< Justified to the bottom"]
    pub const JGRAPHICS_TEXT_JUSTIFICATION_BOTTOM: Type = 16;
    #[doc = "< Centered vertically"]
    pub const JGRAPHICS_TEXT_JUSTIFICATION_VCENTERED: Type = 32;
    #[doc = "< Horizontally justified"]
    pub const JGRAPHICS_TEXT_JUSTIFICATION_HJUSTIFIED: Type = 64;
    #[doc = "< Shortcut for Centering both vertically and horizontally"]
    pub const JGRAPHICS_TEXT_JUSTIFICATION_CENTERED: Type = 36;
}
#[doc = "\tEnumeration of text justification options, which are specified as a bitmask."]
#[doc = "@ingroup\tjgraphics"]
pub use self::_jgraphics_text_justification::Type as t_jgraphics_text_justification;
pub mod _jgraphics_textlayout_flags {
    #[doc = "\tFlags for setting text layout options."]
    #[doc = "@ingroup\ttextlayout"]
    pub type Type = ::std::os::raw::c_uint;
    #[doc = "< disable word wrapping"]
    pub const JGRAPHICS_TEXTLAYOUT_NOWRAP: Type = 1;
    #[doc = "< show ... if a line doesn't fit (implies NOWRAP too)"]
    pub const JGRAPHICS_TEXTLAYOUT_USEELLIPSIS: Type = 3;
}
#[doc = "\tFlags for setting text layout options."]
#[doc = "@ingroup\ttextlayout"]
pub use self::_jgraphics_textlayout_flags::Type as t_jgraphics_textlayout_flags;
extern "C" {
    #[doc = "\tSet the text and attributes of a textlayout object."]
    #[doc = "@ingroup\t\t\t\ttextlayout"]
    #[doc = "@param\ttextlayout\t\tThe textlayout object."]
    #[doc = "@param\tutf8\t\t\tThe text to render."]
    #[doc = "@param\tjfont\t\t\tThe font with which to render the text."]
    #[doc = "@param\tx\t\t\t\tThe text is placed within rect specified by x, y, width, height."]
    #[doc = "@param\ty\t\t\t\tThe text is placed within rect specified by x, y, width, height."]
    #[doc = "@param\twidth\t\t\tThe text is placed within rect specified by x, y, width, height."]
    #[doc = "@param\theight\t\t\tThe text is placed within rect specified by x, y, width, height."]
    #[doc = "@param\tjustification\tHow to justify the text within the rect."]
    #[doc = "@param\tflags\t\t\tAdditional flags to control behaviour."]
    pub fn jtextlayout_set(
        textlayout: *mut t_jtextlayout,
        utf8: *const ::std::os::raw::c_char,
        jfont: *mut t_jfont,
        x: f64,
        y: f64,
        width: f64,
        height: f64,
        justification: t_jgraphics_text_justification,
        flags: t_jgraphics_textlayout_flags,
    );
}
extern "C" {
    #[doc = "\tSet the text of a textlayout object."]
    #[doc = "@ingroup\t\t\t\ttextlayout"]
    #[doc = "@param\ttextlayout\t\tThe textlayout object."]
    #[doc = "@param\tutf8\t\t\tThe text to render."]
    #[doc = "@param\tjfont\t\t\tThe font with which to render the text."]
    pub fn jtextlayout_settext(
        textlayout: *mut t_jtextlayout,
        utf8: *const ::std::os::raw::c_char,
        jfont: *mut t_jfont,
    );
}
extern "C" {
    #[doc = "\tSet the color to render text in a textlayout object."]
    #[doc = "@ingroup\t\t\ttextlayout"]
    #[doc = "@param\ttextlayout\tThe textlayout object for which to set the color."]
    #[doc = "@param\ttextcolor\tThe color for the text."]
    pub fn jtextlayout_settextcolor(textlayout: *mut t_jtextlayout, textcolor: *mut t_jrgba);
}
extern "C" {
    #[doc = "\tReturn a measurement of how much space will be required to draw the text of a textlayout."]
    #[doc = "@ingroup\t\t\t\t\ttextlayout"]
    #[doc = "@param\ttextlayout\t\t\tThe textlayout object to query."]
    #[doc = "@param\tstartindex\t\t\tYou can measure a subset of the characters."]
    #[doc = "This defines the character from which to start."]
    #[doc = "@param\tnumchars\t\t\tPass -1 for all characters from startindex to end"]
    #[doc = "@param\tincludewhitespace\tDefine whether to measure with or without whitespace truncated from edges."]
    #[doc = "@param\twidth\t\t\t\tReturns the width of text not including any margins."]
    #[doc = "@param\theight\t\t\t\tReturns the height of text not including any margins."]
    #[doc = "@param\tnumlines\t\t\tReturns the number of lines of text."]
    pub fn jtextlayout_measuretext(
        textlayout: *mut t_jtextlayout,
        startindex: ::std::os::raw::c_long,
        numchars: ::std::os::raw::c_long,
        includewhitespace: ::std::os::raw::c_long,
        width: *mut f64,
        height: *mut f64,
        numlines: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    #[doc = "\tDraw a textlayout in a given graphics context."]
    #[doc = "@ingroup\t\ttextlayout"]
    #[doc = "@param\ttl\t\tThe textlayout object to query."]
    #[doc = "@param\tg\t\tThe graphics context in which to draw the text."]
    pub fn jtextlayout_draw(tl: *mut t_jtextlayout, g: *mut t_jgraphics);
}
extern "C" {
    #[doc = " Retrieve a count of the number of characters in a textlayout object."]
    #[doc = "@ingroup\t\ttextlayout"]
    #[doc = "@param\ttl\t\tThe textlayout object to query."]
    #[doc = "@return\t\t\tThe number of characters."]
    pub fn jtextlayout_getnumchars(tl: *mut t_jtextlayout) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tRetrieve the #t_rect containing a character at a given index."]
    #[doc = "@ingroup\t\ttextlayout"]
    #[doc = "@param\ttl\t\tThe textlayout object to query."]
    #[doc = "@param\tindex\tThe index from which to fetch the unicode character."]
    #[doc = "@param\trect\tThe address of a valid #t_rect which will be filled in upon return."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jtextlayout_getcharbox(
        tl: *mut t_jtextlayout,
        index: ::std::os::raw::c_long,
        rect: *mut t_rect,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tRetrieve the unicode character at a given index."]
    #[doc = "@ingroup\t\ttextlayout"]
    #[doc = "@param\ttl\t\tThe textlayout object to query."]
    #[doc = "@param\tindex\tThe index from which to fetch the unicode character."]
    #[doc = "@param\tpch\t\tThe address of a variable to hold the unicode character value upon return."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jtextlayout_getchar(
        tl: *mut t_jtextlayout,
        index: ::std::os::raw::c_long,
        pch: *mut ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = " Create a t_jpath object representing the text layout."]
    #[doc = "@ingroup        textlayout"]
    #[doc = "@param  tl      The textlayout object to retrieve a path for."]
    #[doc = "@return         A t_jpath. When finished with the path free it with jgraphics_path_destroy."]
    pub fn jtextlayout_createpath(tl: *mut t_jtextlayout) -> *mut t_jpath;
}
#[doc = " An affine transformation (such as scale, shear, etc)."]
#[doc = "@ingroup jmatrix"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_jmatrix {
    #[doc = "< xx component"]
    pub xx: f64,
    #[doc = "< yx component"]
    pub yx: f64,
    #[doc = "< xy component"]
    pub xy: f64,
    #[doc = "< yy component"]
    pub yy: f64,
    #[doc = "< x translation"]
    pub x0: f64,
    #[doc = "< y translation"]
    pub y0: f64,
}
#[test]
fn bindgen_test_layout_t_jmatrix() {
    assert_eq!(
        ::std::mem::size_of::<t_jmatrix>(),
        48usize,
        concat!("Size of: ", stringify!(t_jmatrix))
    );
    assert_eq!(
        ::std::mem::align_of::<t_jmatrix>(),
        8usize,
        concat!("Alignment of ", stringify!(t_jmatrix))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jmatrix>())).xx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jmatrix),
            "::",
            stringify!(xx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jmatrix>())).yx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jmatrix),
            "::",
            stringify!(yx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jmatrix>())).xy as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jmatrix),
            "::",
            stringify!(xy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jmatrix>())).yy as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jmatrix),
            "::",
            stringify!(yy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jmatrix>())).x0 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jmatrix),
            "::",
            stringify!(x0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jmatrix>())).y0 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jmatrix),
            "::",
            stringify!(y0)
        )
    );
}
extern "C" {
    #[doc = "\tSet a #t_jmatrix to an affine transformation."]
    #[doc = "@ingroup\tjmatrix"]
    #[doc = "@param\tx"]
    #[doc = "@param\txx"]
    #[doc = "@param\tyx"]
    #[doc = "@param\txy"]
    #[doc = "@param\tyy"]
    #[doc = "@param\tx0"]
    #[doc = "@param\ty0"]
    #[doc = "@remark\t\tgiven x,y the matrix specifies the following transformation:"]
    #[doc = "@code"]
    #[doc = "xnew = xx * x + xy * y + x0;"]
    #[doc = "ynew = yx * x + yy * y + y0;"]
    #[doc = "@endcode"]
    pub fn jgraphics_matrix_init(
        x: *mut t_jmatrix,
        xx: f64,
        yx: f64,
        xy: f64,
        yy: f64,
        x0: f64,
        y0: f64,
    );
}
extern "C" {
    #[doc = " Modify a matrix to be an identity transform."]
    #[doc = "@ingroup\tjmatrix"]
    #[doc = "@param\tx\tThe #t_jmatrix."]
    pub fn jgraphics_matrix_init_identity(x: *mut t_jmatrix);
}
extern "C" {
    #[doc = "\tInitialize a #t_jmatrix to translate (offset) a point."]
    #[doc = "@ingroup\tjmatrix"]
    #[doc = "@param\tx\tThe #t_jmatrix."]
    #[doc = "@param\ttx\tThe amount of x-axis translation."]
    #[doc = "@param\tty\tThe amount of y-axis translation."]
    pub fn jgraphics_matrix_init_translate(x: *mut t_jmatrix, tx: f64, ty: f64);
}
extern "C" {
    #[doc = "\tInitialize a #t_jmatrix to scale (offset) a point."]
    #[doc = "@ingroup\tjmatrix"]
    #[doc = "@param\tx\tThe #t_jmatrix."]
    #[doc = "@param\tsx\tThe horizontal scale factor."]
    #[doc = "@param\tsy\tThe vertical scale factor."]
    pub fn jgraphics_matrix_init_scale(x: *mut t_jmatrix, sx: f64, sy: f64);
}
extern "C" {
    #[doc = "Initialize a #t_jmatrix to rotate (offset) a point."]
    #[doc = "@ingroup\t\tjmatrix"]
    #[doc = "@param\tx\t\tThe #t_jmatrix."]
    #[doc = "@param\tradians\tThe angle or rotation in radians."]
    pub fn jgraphics_matrix_init_rotate(x: *mut t_jmatrix, radians: f64);
}
extern "C" {
    #[doc = "\tApply a translation to an existing matrix."]
    #[doc = "@ingroup\tjmatrix"]
    #[doc = "@param\tx\tThe #t_jmatrix."]
    #[doc = "@param\ttx\tThe amount of x-axis translation."]
    #[doc = "@param\tty\tThe amount of y-axis translation."]
    pub fn jgraphics_matrix_translate(x: *mut t_jmatrix, tx: f64, ty: f64);
}
extern "C" {
    #[doc = " Apply a scaling to an existing matrix."]
    #[doc = "@ingroup\tjmatrix"]
    #[doc = "@param\tx\tThe #t_jmatrix."]
    #[doc = "@param\tsx\tThe horizontal scale factor."]
    #[doc = "@param\tsy\tThe vertical scale factor."]
    pub fn jgraphics_matrix_scale(x: *mut t_jmatrix, sx: f64, sy: f64);
}
extern "C" {
    #[doc = " Apply a rotation to an existing matrix."]
    #[doc = "@ingroup\tjmatrix"]
    #[doc = "@param\tx\tThe #t_jmatrix."]
    #[doc = "@param\tradians\tThe angle or rotation in radians."]
    pub fn jgraphics_matrix_rotate(x: *mut t_jmatrix, radians: f64);
}
extern "C" {
    #[doc = "\tInvert an existing matrix."]
    #[doc = "@ingroup\tjmatrix"]
    #[doc = "@param\tx\tThe #t_jmatrix."]
    pub fn jgraphics_matrix_invert(x: *mut t_jmatrix);
}
extern "C" {
    #[doc = " Multiply two matrices: resulting matrix has effect of first applying a and then applying b."]
    #[doc = "@ingroup\t\tjmatrix"]
    #[doc = "@param\tresult\tThe resulting product #t_jmatrix."]
    #[doc = "@param\ta\t\tThe first operand."]
    #[doc = "@param\tb\t\tThe second operand."]
    pub fn jgraphics_matrix_multiply(
        result: *mut t_jmatrix,
        a: *const t_jmatrix,
        b: *const t_jmatrix,
    );
}
extern "C" {
    #[doc = " Transform a point using a #t_jmatrix transormation."]
    #[doc = "@ingroup\t\tjmatrix"]
    #[doc = "@param\tmatrix\tThe #t_jmatrix."]
    #[doc = "@param\tx\t\tThe address of the variable holding the x coordinate."]
    #[doc = "@param\ty\t\tThe address of the variable holding the y coordinate."]
    pub fn jgraphics_matrix_transform_point(matrix: *const t_jmatrix, x: *mut f64, y: *mut f64);
}
extern "C" {
    pub fn jgraphics_pattern_create_rgba(
        red: f64,
        green: f64,
        blue: f64,
        alpha: f64,
    ) -> *mut t_jpattern;
}
extern "C" {
    pub fn jgraphics_pattern_create_for_surface(surface: *mut t_jsurface) -> *mut t_jpattern;
}
extern "C" {
    pub fn jgraphics_pattern_create_linear(x0: f64, y0: f64, x1: f64, y1: f64) -> *mut t_jpattern;
}
extern "C" {
    pub fn jgraphics_pattern_create_radial(
        cx0: f64,
        cy0: f64,
        radius0: f64,
        cx1: f64,
        cy1: f64,
        radius1: f64,
    ) -> *mut t_jpattern;
}
extern "C" {
    pub fn jgraphics_pattern_add_color_stop_rgba(
        pattern: *mut t_jpattern,
        offset: f64,
        red: f64,
        green: f64,
        blue: f64,
        alpha: f64,
    );
}
extern "C" {
    pub fn jgraphics_pattern_reference(pattern: *mut t_jpattern) -> *mut t_jpattern;
}
extern "C" {
    pub fn jgraphics_pattern_destroy(pattern: *mut t_jpattern);
}
pub mod _jgraphics_pattern_type {
    pub type Type = ::std::os::raw::c_uint;
    pub const JGRAPHICS_PATTERN_TYPE_SOLID: Type = 0;
    pub const JGRAPHICS_PATTERN_TYPE_SURFACE: Type = 1;
    pub const JGRAPHICS_PATTERN_TYPE_LINEAR: Type = 2;
    pub const JGRAPHICS_PATTERN_TYPE_RADIAL: Type = 3;
}
pub use self::_jgraphics_pattern_type::Type as t_jgraphics_pattern_type;
extern "C" {
    pub fn jgraphics_pattern_get_type(pattern: *mut t_jpattern) -> t_jgraphics_pattern_type;
}
pub mod _jgraphics_extend {
    pub type Type = ::std::os::raw::c_uint;
    pub const JGRAPHICS_EXTEND_NONE: Type = 0;
    pub const JGRAPHICS_EXTEND_REPEAT: Type = 1;
    pub const JGRAPHICS_EXTEND_REFLECT: Type = 2;
    pub const JGRAPHICS_EXTEND_PAD: Type = 3;
}
pub use self::_jgraphics_extend::Type as t_jgraphics_extend;
extern "C" {
    pub fn jgraphics_pattern_set_extend(pattern: *mut t_jpattern, extend: t_jgraphics_extend);
}
extern "C" {
    pub fn jgraphics_pattern_get_extend(pattern: *mut t_jpattern) -> t_jgraphics_extend;
}
extern "C" {
    pub fn jgraphics_pattern_set_matrix(pattern: *mut t_jpattern, matrix: *const t_jmatrix);
}
extern "C" {
    pub fn jgraphics_pattern_get_matrix(pattern: *mut t_jpattern, matrix: *mut t_jmatrix);
}
extern "C" {
    pub fn jgraphics_pattern_translate(pattern: *mut t_jpattern, tx: f64, ty: f64);
}
extern "C" {
    pub fn jgraphics_pattern_scale(pattern: *mut t_jpattern, sx: f64, sy: f64);
}
extern "C" {
    pub fn jgraphics_pattern_rotate(pattern: *mut t_jpattern, angle: f64);
}
extern "C" {
    pub fn jgraphics_pattern_get_surface(pattern: *mut t_jpattern) -> *mut t_jsurface;
}
extern "C" {
    pub fn jgraphics_translate(g: *mut t_jgraphics, tx: f64, ty: f64);
}
extern "C" {
    pub fn jgraphics_scale(g: *mut t_jgraphics, sx: f64, sy: f64);
}
extern "C" {
    pub fn jgraphics_rotate(g: *mut t_jgraphics, angle: f64);
}
extern "C" {
    pub fn jgraphics_transform(g: *mut t_jgraphics, matrix: *const t_jmatrix);
}
extern "C" {
    pub fn jgraphics_set_matrix(g: *mut t_jgraphics, matrix: *const t_jmatrix);
}
extern "C" {
    pub fn jgraphics_get_matrix(g: *mut t_jgraphics, matrix: *mut t_jmatrix);
}
extern "C" {
    pub fn jgraphics_identity_matrix(g: *mut t_jgraphics);
}
extern "C" {
    #[doc = "\tUser coordinates are those passed to drawing functions in a given #t_jgraphics context."]
    #[doc = "Device coordinates refer to patcher canvas coordinates, before any zooming."]
    #[doc = "@ingroup jgraphics"]
    pub fn jgraphics_user_to_device(g: *mut t_jgraphics, x: *mut f64, y: *mut f64);
}
extern "C" {
    #[doc = "\tUser coordinates are those passed to drawing functions in a given #t_jgraphics context."]
    #[doc = "Device coordinates refer to patcher canvas coordinates, before any zooming."]
    #[doc = "@ingroup jgraphics"]
    pub fn jgraphics_device_to_user(g: *mut t_jgraphics, x: *mut f64, y: *mut f64);
}
extern "C" {
    pub fn jgraphics_save(g: *mut t_jgraphics);
}
extern "C" {
    pub fn jgraphics_restore(g: *mut t_jgraphics);
}
extern "C" {
    pub fn jgraphics_get_target(g: *mut t_jgraphics) -> *mut t_jsurface;
}
extern "C" {
    pub fn jgraphics_pop_group(g: *mut t_jgraphics) -> *mut t_jpattern;
}
extern "C" {
    pub fn jgraphics_get_group_target(g: *mut t_jgraphics) -> *mut t_jsurface;
}
extern "C" {
    pub fn jgraphics_pop_group_surface(g: *mut t_jgraphics) -> *mut t_jsurface;
}
extern "C" {
    pub fn jgraphics_set_source_rgba(
        g: *mut t_jgraphics,
        red: f64,
        green: f64,
        blue: f64,
        alpha: f64,
    );
}
extern "C" {
    pub fn jgraphics_set_source_jrgba(g: *mut t_jgraphics, rgba: *mut t_jrgba);
}
extern "C" {
    pub fn jgraphics_set_source_rgb(g: *mut t_jgraphics, red: f64, green: f64, blue: f64);
}
extern "C" {
    pub fn jgraphics_set_source(g: *mut t_jgraphics, source: *mut t_jpattern);
}
extern "C" {
    pub fn jgraphics_set_source_surface(
        g: *mut t_jgraphics,
        surface: *mut t_jsurface,
        x: f64,
        y: f64,
    );
}
pub mod _jgraphics_pattern_shared {
    pub type Type = ::std::os::raw::c_uint;
    pub const JGRAPHICS_PATTERN_GRAY: Type = 0;
    pub const JGRAPHICS_NUM_SHARED_PATTERNS: Type = 1;
}
pub use self::_jgraphics_pattern_shared::Type as t_jgraphics_pattern_shared;
extern "C" {
    pub fn jgraphics_set_source_shared(g: *mut t_jgraphics, patindex: t_jgraphics_pattern_shared);
}
extern "C" {
    pub fn jgraphics_scale_source_rgba(
        g: *mut t_jgraphics,
        redscale: f64,
        greenscale: f64,
        bluescale: f64,
        alphascale: f64,
    );
}
extern "C" {
    pub fn jgraphics_translate_source_rgba(
        g: *mut t_jgraphics,
        redoffset: f64,
        greenoffset: f64,
        blueoffset: f64,
        alphaoffset: f64,
    );
}
extern "C" {
    pub fn jgraphics_set_dash(
        g: *mut t_jgraphics,
        dashes: *mut f64,
        numdashes: ::std::os::raw::c_int,
        offset: f64,
    );
}
pub mod _jgraphics_fill_rule {
    pub type Type = ::std::os::raw::c_uint;
    pub const JGRAPHICS_FILL_RULE_WINDING: Type = 0;
    pub const JGRAPHICS_FILL_RULE_EVEN_ODD: Type = 1;
}
pub use self::_jgraphics_fill_rule::Type as t_jgraphics_fill_rule;
extern "C" {
    pub fn jgraphics_set_fill_rule(g: *mut t_jgraphics, fill_rule: t_jgraphics_fill_rule);
}
extern "C" {
    pub fn jgraphics_get_fill_rule(g: *mut t_jgraphics) -> t_jgraphics_fill_rule;
}
extern "C" {
    pub fn jgraphics_set_line_cap(g: *mut t_jgraphics, line_cap: t_jgraphics_line_cap);
}
extern "C" {
    pub fn jgraphics_get_line_cap(g: *mut t_jgraphics) -> t_jgraphics_line_cap;
}
extern "C" {
    pub fn jgraphics_set_line_join(g: *mut t_jgraphics, line_join: t_jgraphics_line_join);
}
extern "C" {
    pub fn jgraphics_get_line_join(g: *mut t_jgraphics) -> t_jgraphics_line_join;
}
extern "C" {
    pub fn jgraphics_set_line_width(g: *mut t_jgraphics, width: f64);
}
extern "C" {
    pub fn jgraphics_get_line_width(g: *mut t_jgraphics) -> f64;
}
extern "C" {
    pub fn jgraphics_fill(g: *mut t_jgraphics);
}
extern "C" {
    pub fn jgraphics_fill_preserve(g: *mut t_jgraphics);
}
extern "C" {
    pub fn jgraphics_fill_with_alpha(g: *mut t_jgraphics, alpha: f64);
}
extern "C" {
    pub fn jgraphics_fill_preserve_with_alpha(g: *mut t_jgraphics, alpha: f64);
}
extern "C" {
    pub fn jgraphics_in_fill(g: *mut t_jgraphics, x: f64, y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jgraphics_path_intersects_line(
        g: *mut t_jgraphics,
        x1: f64,
        y1: f64,
        x2: f64,
        y2: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jgraphics_ptinrect(pt: t_pt, rect: t_rect) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jgraphics_line_intersects_rect(
        linex1: f64,
        liney1: f64,
        linex2: f64,
        liney2: f64,
        r: t_rect,
        ix: *mut f64,
        iy: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jgraphics_ptinroundedrect(
        pt: t_pt,
        rect: t_rect,
        ovalwidth: f64,
        ovalheight: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jgraphics_fill_extents(
        g: *mut t_jgraphics,
        x1: *mut f64,
        y1: *mut f64,
        x2: *mut f64,
        y2: *mut f64,
    );
}
extern "C" {
    pub fn jgraphics_paint(g: *mut t_jgraphics);
}
extern "C" {
    pub fn jgraphics_paint_with_alpha(g: *mut t_jgraphics, alpha: f64);
}
extern "C" {
    pub fn jgraphics_stroke(g: *mut t_jgraphics);
}
extern "C" {
    pub fn jgraphics_stroke_preserve(g: *mut t_jgraphics);
}
extern "C" {
    pub fn jgraphics_stroke_with_alpha(g: *mut t_jgraphics, alpha: f64);
}
extern "C" {
    pub fn jgraphics_stroke_preserve_with_alpha(g: *mut t_jgraphics, alpha: f64);
}
extern "C" {
    pub fn jgraphics_rectangle_fill_fast(
        g: *mut t_jgraphics,
        x: f64,
        y: f64,
        width: f64,
        height: f64,
    );
}
extern "C" {
    pub fn jgraphics_rectangle_draw_fast(
        g: *mut t_jgraphics,
        x: f64,
        y: f64,
        width: f64,
        height: f64,
        border: f64,
    );
}
extern "C" {
    pub fn jgraphics_line_draw_fast(
        g: *mut t_jgraphics,
        x1: f64,
        y1: f64,
        x2: f64,
        y2: f64,
        linewidth: f64,
    );
}
pub mod _jdesktopui_flags {
    pub type Type = ::std::os::raw::c_uint;
    pub const JDESKTOPUI_FLAGS_FIRSTFLAG: Type = 1;
}
pub use self::_jdesktopui_flags::Type as t_jdesktopui_flags;
extern "C" {
    pub fn jdesktopui_new(
        owner: *mut t_object,
        flags: t_jdesktopui_flags,
        rect: t_rect,
    ) -> *mut t_jdesktopui;
}
extern "C" {
    pub fn jdesktopui_destroy(x: *mut t_jdesktopui);
}
extern "C" {
    pub fn jdesktopui_setvisible(x: *mut t_jdesktopui, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdesktopui_setalwaysontop(x: *mut t_jdesktopui, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdesktopui_setrect(x: *mut t_jdesktopui, rect: t_rect);
}
extern "C" {
    pub fn jdesktopui_getrect(x: *mut t_jdesktopui, rect: *mut t_rect);
}
extern "C" {
    pub fn jdesktopui_setposition(x: *mut t_jdesktopui, pt: t_pt);
}
extern "C" {
    pub fn jdesktopui_setfadetimes(
        x: *mut t_jdesktopui,
        fade_in_ms: ::std::os::raw::c_int,
        fade_out_ms: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jdesktopui_get_jgraphics(x: *mut t_jdesktopui) -> *mut t_jgraphics;
}
extern "C" {
    pub fn jdesktopui_redraw(x: *mut t_jdesktopui);
}
extern "C" {
    pub fn jdesktopui_redrawrect(x: *mut t_jdesktopui, rect: t_rect);
}
extern "C" {
    pub fn jgraphics_jrgba_contrasting(c: *mut t_jrgba, amount: f64) -> t_jrgba;
}
extern "C" {
    pub fn jgraphics_jrgba_contrastwith(c1: *mut t_jrgba, c2: *mut t_jrgba) -> t_jrgba;
}
extern "C" {
    pub fn jgraphics_jrgba_darker(c: *mut t_jrgba, amount: f64) -> t_jrgba;
}
extern "C" {
    pub fn jgraphics_jrgba_brighter(c: *mut t_jrgba, amount: f64) -> t_jrgba;
}
extern "C" {
    pub fn jgraphics_jrgba_overlay(c1: *mut t_jrgba, c2: *mut t_jrgba) -> t_jrgba;
}
extern "C" {
    pub fn jgraphics_jrgba_interpolate(
        c1: *mut t_jrgba,
        c2: *mut t_jrgba,
        proportion: f64,
    ) -> t_jrgba;
}
extern "C" {
    pub fn jgraphics_jrgba_gethsb(c: *mut t_jrgba, h: *mut f64, s: *mut f64, b: *mut f64);
}
extern "C" {
    pub fn jgraphics_jrgba_fromhsb(h: f64, s: f64, b: f64, a: f64) -> t_jrgba;
}
extern "C" {
    pub fn jcolor_getcolor(
        name: *mut t_symbol,
        on: *mut t_jrgba,
        off: *mut t_jrgba,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jcolor_linkcolor(x: *mut t_object, colorname: *mut t_symbol, attrname: *mut t_symbol);
}
extern "C" {
    #[doc = "\tCreate a pop-up menu."]
    #[doc = "Free this pop-up menu using jpopupmenu_destroy()."]
    #[doc = "@ingroup\tjpopupmenu"]
    #[doc = "@return\t\tA pointer to the newly created jpopupmenu object."]
    pub fn jpopupmenu_create() -> *mut t_jpopupmenu;
}
extern "C" {
    #[doc = "\tFree a pop-up menu created with jpopupmenu_create()."]
    #[doc = "@ingroup\t\tjpopupmenu"]
    #[doc = "@param\tmenu\tThe pop-up menu to be freed."]
    pub fn jpopupmenu_destroy(menu: *mut t_jpopupmenu);
}
extern "C" {
    #[doc = "\tClear the conents of a pop-up menu."]
    #[doc = "@ingroup\t\tjpopupmenu"]
    #[doc = "@param\tmenu\tThe pop-up menu whose contents will be cleared."]
    pub fn jpopupmenu_clear(menu: *mut t_jpopupmenu);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jpopupmenu_options {
    pub zoomwithview: bool,
    pub defitemid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__jpopupmenu_options() {
    assert_eq!(
        ::std::mem::size_of::<_jpopupmenu_options>(),
        8usize,
        concat!("Size of: ", stringify!(_jpopupmenu_options))
    );
    assert_eq!(
        ::std::mem::align_of::<_jpopupmenu_options>(),
        4usize,
        concat!("Alignment of ", stringify!(_jpopupmenu_options))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jpopupmenu_options>())).zoomwithview as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jpopupmenu_options),
            "::",
            stringify!(zoomwithview)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jpopupmenu_options>())).defitemid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_jpopupmenu_options),
            "::",
            stringify!(defitemid)
        )
    );
}
pub type t_jpopupmenu_options = _jpopupmenu_options;
extern "C" {
    pub fn jpopupmenu_default_options() -> t_jpopupmenu_options;
}
extern "C" {
    #[doc = "\tSet the colors used by a pop-up menu."]
    #[doc = "@ingroup\t\t\t\tjpopupmenu"]
    #[doc = "@param\tmenu\t\t\tThe pop-up menu to which the colors will be applied."]
    #[doc = "@param\ttext\t\t\tThe text color for menu items."]
    #[doc = "@param\tbg\t\t\t\tThe background color for menu items."]
    #[doc = "@param\thighlightedtext\tThe text color for the highlighted menu item."]
    #[doc = "@param\thighlightedbg\tThe background color the highlighted menu item."]
    pub fn jpopupmenu_setcolors(
        menu: *mut t_jpopupmenu,
        text: t_jrgba,
        bg: t_jrgba,
        highlightedtext: t_jrgba,
        highlightedbg: t_jrgba,
    );
}
extern "C" {
    #[doc = "\tSet the font used by a pop-up menu."]
    #[doc = "@ingroup\t\t\t\tjpopupmenu"]
    #[doc = "@param\tmenu\t\t\tThe pop-up menu whose font will be set."]
    #[doc = "@param\tfont\t\t\tA pointer to a font object, whose font info will be copied to the pop-up menu."]
    pub fn jpopupmenu_setfont(menu: *mut t_jpopupmenu, font: *mut t_jfont);
}
extern "C" {
    #[doc = "\tAdd an item to a pop-up menu."]
    #[doc = "@ingroup\t\t\tjpopupmenu"]
    #[doc = "@param\tmenu\t\tThe pop-up menu to which the item will be added."]
    #[doc = "@param\titemid\t\tEach menu item should be assigned a unique integer id using this parameter."]
    #[doc = "@param\tutf8Text\tThe text to display in for the menu item."]
    #[doc = "@param\ttextColor\tThe color to use for the menu item, or NULL to use the default color."]
    #[doc = "@param\tchecked\t\tA non-zero value indicates that the item should have a check-mark next to it."]
    #[doc = "@param\tdisabled\tA non-zero value indicates that the item should be disabled."]
    #[doc = "@param\ticon\t\tA #t_jsurface will be used as an icon for the menu item if provided here."]
    #[doc = "Pass NULL for no icon."]
    pub fn jpopupmenu_additem(
        menu: *mut t_jpopupmenu,
        itemid: ::std::os::raw::c_int,
        utf8Text: *const ::std::os::raw::c_char,
        textColor: *mut t_jrgba,
        checked: ::std::os::raw::c_int,
        disabled: ::std::os::raw::c_int,
        icon: *mut t_jsurface,
    );
}
extern "C" {
    #[doc = "\tAdd a pop-menu to another pop-menu as a submenu."]
    #[doc = "Note that the submenu contents are copied at the time of this call."]
    #[doc = "So, any changes to the submenu after this returns won't have an effect."]
    #[doc = "Also, it is safe to destroy the submenu after this function returns."]
    #[doc = "@ingroup\t\t\tjpopupmenu"]
    #[doc = "@param\tmenu\t\tThe pop-up menu to which a menu will be added as a submenu."]
    #[doc = "@param\tutf8Name\tThe name of the menu item."]
    #[doc = "@param\tsubmenu\t\tThe pop-up menu which will be used as the submenu."]
    #[doc = "@param\tdisabled\tPass a non-zero value to disable the menu item."]
    pub fn jpopupmenu_addsubmenu(
        menu: *mut t_jpopupmenu,
        utf8Name: *const ::std::os::raw::c_char,
        submenu: *mut t_jpopupmenu,
        disabled: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = "\tAdd a separator to a pop-menu."]
    #[doc = "@ingroup\t\t\tjpopupmenu"]
    #[doc = "@param\tmenu\t\tThe pop-up menu to which the separator will be added."]
    pub fn jpopupmenu_addseparator(menu: *mut t_jpopupmenu);
}
extern "C" {
    pub fn jpopupmenu_addseperator(menu: *mut t_jpopupmenu);
}
extern "C" {
    pub fn jpopupmenu_addownerdrawitem(
        menu: *mut t_jpopupmenu,
        itemid: ::std::os::raw::c_int,
        owner: *mut t_object,
    );
}
extern "C" {
    #[doc = "\tTell a menu to display at a specified location."]
    #[doc = "@ingroup\t\t\tjpopupmenu"]
    #[doc = "@param\tmenu\t\tThe pop-up menu to display."]
    #[doc = "@param\tscreen\t\tThe point at which to display in screen coordinates."]
    #[doc = "@param\tdefitemid\tThe initially choosen item id."]
    #[doc = "@return\t\t\t\tThe item id for the item in the menu choosen by the user."]
    pub fn jpopupmenu_popup(
        menu: *mut t_jpopupmenu,
        screen: t_pt,
        defitemid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\tTell a menu to display above a given box in a patcher."]
    #[doc = "@ingroup\t\t\tjpopupmenu"]
    #[doc = "@param\tmenu\t\tThe pop-up menu to display."]
    #[doc = "@param\tbox\t\t\tThe box above which to display the menu."]
    #[doc = "@param\tview\t\tThe patcherview for the box in which to display the menu."]
    #[doc = "@param\toffset\t\tAn offset from the box position at which to display the menu."]
    #[doc = "@param\tdefitemid\tThe initially choosen item id."]
    #[doc = "@return\t\t\t\tThe item id for the item in the menu choosen by the user."]
    pub fn jpopupmenu_popup_abovebox(
        menu: *mut t_jpopupmenu,
        box_: *mut t_object,
        view: *mut t_object,
        offset: ::std::os::raw::c_int,
        defitemid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\tTell a menu to display near a given box in a patcher."]
    #[doc = "@ingroup\t\t\tjpopupmenu"]
    #[doc = "@param\tmenu\t\tThe pop-up menu to display."]
    #[doc = "@param\tbox\t\t\tThe box above which to display the menu."]
    #[doc = "@param\tview\t\tThe patcherview for the box in which to display the menu."]
    #[doc = "@param\tdefitemid\tThe initially choosen item id."]
    #[doc = "@return\t\t\t\tThe item id for the item in the menu choosen by the user."]
    pub fn jpopupmenu_popup_nearbox(
        menu: *mut t_jpopupmenu,
        box_: *mut t_object,
        view: *mut t_object,
        defitemid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\tTell a menu to display near a given box in a patcher with options."]
    #[doc = "@ingroup\t\t\tjpopupmenu"]
    #[doc = "@param\tmenu\t\tThe pop-up menu to display."]
    #[doc = "@param\tbox\t\t\tThe box above which to display the menu."]
    #[doc = "@param\tview\t\tThe patcherview for the box in which to display the menu."]
    #[doc = "@param\topts\t\tThe jpopupmenu options"]
    #[doc = "@return\t\t\t\tThe item id for the item in the menu choosen by the user."]
    pub fn jpopupmenu_popup_nearbox_with_options(
        menu: *mut t_jpopupmenu,
        box_: *mut t_object,
        view: *mut t_object,
        opts: t_jpopupmenu_options,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\tTell a menu to display below a given rectangle in a patcher."]
    #[doc = "@ingroup\t\t\tjpopupmenu"]
    #[doc = "@param\tmenu\t\tThe pop-up menu to display."]
    #[doc = "@param\trect\t\tThe rectangle below which to display the menu."]
    #[doc = "@param\tdefitemid\tThe initially choosen item id."]
    #[doc = "@return\t\t\t\tThe item id for the item in the menu choosen by the user."]
    pub fn jpopupmenu_popup_belowrect(
        menu: *mut t_jpopupmenu,
        rect: t_rect,
        defitemid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jpopupmenu_popup_leftofpt(
        menu: *mut t_jpopupmenu,
        pt: t_pt,
        defitemid: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jpopupmenu_setfixedwidth(menu: *mut t_jpopupmenu, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jpopupmenu_additemwithshortcut(
        menu: *mut t_jpopupmenu,
        itemid: ::std::os::raw::c_int,
        utf8Text: *const ::std::os::raw::c_char,
        textColor: *mut t_jrgba,
        checked: ::std::os::raw::c_int,
        disabled: ::std::os::raw::c_int,
        icon: *mut t_jsurface,
        svg: *mut t_jsvg,
        shortcut: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn jpopupmenu_setstandardstyle(
        menu: *mut t_jpopupmenu,
        styleindex: ::std::os::raw::c_long,
        fontsize: f64,
        margin: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Tell any open popup menus to go away."]
    pub fn jpopupmenu_closeall();
}
extern "C" {
    pub fn jmouse_setcursor_surface(
        patcherview: *mut t_object,
        box_: *mut t_object,
        surface: *mut t_jsurface,
        xHotSpot: ::std::os::raw::c_int,
        yHotSpot: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jbox_fontface_to_weight_slant(
        b: *mut t_object,
        weight: *mut ::std::os::raw::c_long,
        slant: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    #[doc = "\tGet the slant box's font."]
    #[doc = "@ingroup\tjfont"]
    #[doc = "@param\tb\tAn object's box."]
    #[doc = "@return\t\tA value from the #t_jgraphics_font_weight enum."]
    pub fn jbox_get_font_weight(b: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tGet the slant box's font."]
    #[doc = "@ingroup\tjfont"]
    #[doc = "@param\tb\tAn object's box."]
    #[doc = "@return\t\tA value from the #t_jgraphics_font_slant enum."]
    pub fn jbox_get_font_slant(b: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jbox_createfont(b: *mut t_object) -> *mut t_jfont;
}
extern "C" {
    pub fn jgraphics_jrgba_set_brightness(c: *mut t_jrgba, amt: f64);
}
extern "C" {
    pub fn jgraphics_attr_setrgba(
        x: *mut t_object,
        attr: *mut t_object,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn jgraphics_attr_setrgb_alias(
        x: *mut t_object,
        attr: *mut t_object,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Retrieves the value of a color attribute, given its parent object and name."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = "@param \tob\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param\tc\t\tThe address of a #t_jrgba struct that will be filled with the attribute's color component values."]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_getjrgba(
        ob: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        c: *mut t_jrgba,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "Sets the value of a color attribute, given its parent object and name."]
    #[doc = "The function will call the attribute's <tt>set</tt> method, using the data provided."]
    #[doc = ""]
    #[doc = "@ingroup attr"]
    #[doc = "@param \tob\t\tThe attribute's parent object"]
    #[doc = "@param \ts\t\tThe attribute's name"]
    #[doc = "@param\tc\t\tThe address of a #t_jrgba struct that contains the new color."]
    #[doc = "@return \t\tThis function returns the error code #MAX_ERR_NONE if successful,"]
    #[doc = "or one of the other error codes defined in #e_max_errorcodes if unsuccessful."]
    pub fn object_attr_setjrgba(
        ob: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        c: *mut t_jrgba,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tGet the components of a color in an array of pre-allocated atoms."]
    #[doc = ""]
    #[doc = "@ingroup color"]
    #[doc = "@param\targv\tThe address to the first of an array of atoms that will hold the result."]
    #[doc = "At least 4 atoms must be allocated, as 4 atoms will be set by this function"]
    #[doc = "for the red, green, blue, and alpha components."]
    #[doc = "@param\tc\t\tThe address of a #t_jrgba struct from which the color components will be fetched."]
    pub fn jrgba_to_atoms(c: *mut t_jrgba, argv: *mut t_atom);
}
extern "C" {
    #[doc = "\tSet the components of a color by providing an array of atoms."]
    #[doc = "If it is an array of 3 atoms, then the atoms provided should define the"]
    #[doc = "red, green, and blue components (in this order) in a range of [0.0, 1.0]."]
    #[doc = "If a 4th atom is provided, it will define the alpha channel."]
    #[doc = "If the alpha channel is not defined then it is assumed to be 1.0."]
    #[doc = ""]
    #[doc = "@ingroup color"]
    #[doc = "@param\targc\tThe number of atoms in the array provided in argv."]
    #[doc = "This should be 3 or 4 depending on whether or not the alpha channel is being provided."]
    #[doc = "@param\targv\tThe address to the first of an array of atoms that define the color."]
    #[doc = "@param\tc\t\tThe address of a #t_jrgba struct for which the color will be defined."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn atoms_to_jrgba(
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
        c: *mut t_jrgba,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the components of a color."]
    #[doc = "@ingroup color"]
    #[doc = "@param\tprgba\tThe address of a #t_jrgba struct for which the color will be defined."]
    #[doc = "@param\tr\t\tThe value of the red component in a range of [0.0, 1.0]."]
    #[doc = "@param\tg\t\tThe value of the green component in a range of [0.0, 1.0]."]
    #[doc = "@param\tb\t\tThe value of the blue component in a range of [0.0, 1.0]."]
    #[doc = "@param\ta\t\tThe value of the alpha component in a range of [0.0, 1.0]."]
    pub fn jrgba_set(prgba: *mut t_jrgba, r: f64, g: f64, b: f64, a: f64);
}
extern "C" {
    #[doc = "\tCopy a color."]
    #[doc = "@ingroup color"]
    #[doc = "@param\tdest\tThe address of a #t_jrgba struct to which the color will be copied."]
    #[doc = "@param\tsrc\t\tThe address of a #t_jrgba struct from which the color will be copied."]
    pub fn jrgba_copy(dest: *mut t_jrgba, src: *mut t_jrgba);
}
extern "C" {
    #[doc = "\tCompare two colors for equality."]
    #[doc = "@ingroup color"]
    #[doc = "@param\trgba1\tThe address of a #t_jrgba struct to compare."]
    #[doc = "@param\trgba2\tThe address of another #t_jrgba struct to compare."]
    #[doc = "@return \t\treturns 1 if rgba1 == rgba2."]
    pub fn jrgba_compare(rgba1: *mut t_jrgba, rgba2: *mut t_jrgba) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tGet a list of of filetypes appropriate for use with jgraphics surfaces."]
    #[doc = "@ingroup\t\t\tjgraphics"]
    #[doc = "@param\tdummy\t\tUnused."]
    #[doc = "@param\tcount\t\tThe address of a variable to be set with the number of types in filetypes upon return."]
    #[doc = "@param\tfiletypes\tThe address of a variable that will represent the array of file types upon return."]
    #[doc = "@param\talloc\t\tThe address of a char that will be flagged with a 1 or a 0 depending on whether or not"]
    #[doc = "memory was allocated for the filetypes member."]
    #[doc = ""]
    #[doc = "@remark This example shows a common usage of jgraphics_getfiletypes()."]
    #[doc = "@code"]
    #[doc = "char       filename[MAX_PATH_CHARS];"]
    #[doc = "t_fourcc   *type = NULL;"]
    #[doc = "long       ntype;"]
    #[doc = "long       outtype;"]
    #[doc = "t_max_err  err;"]
    #[doc = "char       alloc;"]
    #[doc = "short      path;"]
    #[doc = "t_jsurface *surface;"]
    #[doc = ""]
    #[doc = "if (want_to_show_dialog) {"]
    #[doc = "jgraphics_getfiletypes(x, &ntype, &type, &alloc);"]
    #[doc = "err = open_dialog(filename, &path,(void *)&outtype, (void *)type, ntype);"]
    #[doc = "if (err)"]
    #[doc = "goto out;"]
    #[doc = "}"]
    #[doc = "else {"]
    #[doc = "strncpy_zero(filename, s->s_name, MAX_PATH_CHARS);"]
    #[doc = "err = locatefile_extended(filename, &path, &outtype, type, ntype);"]
    #[doc = "if (err)"]
    #[doc = "goto out;"]
    #[doc = "}"]
    #[doc = "surface = jgraphics_image_surface_create_referenced(filename, path);"]
    #[doc = "out:"]
    #[doc = "if (alloc)"]
    #[doc = "sysmem_freeptr((char *)type);"]
    #[doc = "@endcode"]
    pub fn jgraphics_getfiletypes(
        dummy: *mut ::std::os::raw::c_void,
        count: *mut ::std::os::raw::c_long,
        filetypes: *mut *mut t_fourcc,
        alloc: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = "\tInvalidate a layer, indicating that it needs to be re-drawn."]
    #[doc = "@ingroup\t\tboxlayer"]
    #[doc = "@param\tb\t\tThe object/box to invalidate."]
    #[doc = "@param\tview\tThe patcherview for the object which should be invalidated, or NULL for all patcherviews."]
    #[doc = "@param\tname\tThe name of the layer to invalidate."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_invalidate_layer(
        b: *mut t_object,
        view: *mut t_object,
        name: *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn jbox_remove_layer(
        b: *mut t_object,
        view: *mut t_object,
        name: *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tCreate a layer, and ready it for drawing commands."]
    #[doc = "The layer drawing commands must be wrapped with a matching call to jbox_end_layer()"]
    #[doc = "prior to calling jbox_paint_layer()."]
    #[doc = ""]
    #[doc = "@ingroup\t\tboxlayer"]
    #[doc = "@param\tb\t\tThe object/box to which the layer is attached."]
    #[doc = "@param\tview\tThe patcherview for the object to which the layer is attached."]
    #[doc = "@param\tname\tA name for this layer."]
    #[doc = "@param\twidth\tThe width of the layer."]
    #[doc = "@param\theight\tThe height of the layer."]
    #[doc = "@return\t\t\tA #t_jgraphics context for drawing into the layer."]
    pub fn jbox_start_layer(
        b: *mut t_object,
        view: *mut t_object,
        name: *mut t_symbol,
        width: f64,
        height: f64,
    ) -> *mut t_jgraphics;
}
extern "C" {
    #[doc = "\tConclude a layer, indicating that it is complete and ready for painting."]
    #[doc = "@ingroup\t\tboxlayer"]
    #[doc = "@param\tb\t\tThe object/box for the layer opened by jbox_start_layer()."]
    #[doc = "@param\tview\tThe patcherview for the object opened by jbox_start_layer()."]
    #[doc = "@param\tname\tThe name of the layer."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_end_layer(b: *mut t_object, view: *mut t_object, name: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "\tPaint a layer at a given position."]
    #[doc = "Note that the current color alpha value is used when painting layers to allow you to blend layers."]
    #[doc = "The same is also true for jgraphics_image_surface_draw() and jgraphics_image_surface_draw_fast()."]
    #[doc = ""]
    #[doc = "@ingroup\t\tboxlayer"]
    #[doc = "@param\tb\t\tThe object/box to be painted."]
    #[doc = "@param\tview\tThe patcherview for the object which should be painted, or NULL for all patcherviews."]
    #[doc = "@param\tname\tThe name of the layer to paint."]
    #[doc = "@param\tx\t\tThe x-coordinate for the position at which to paint the layer."]
    #[doc = "@param\ty\t\tThe y-coordinate for the position at which to paint the layer."]
    #[doc = "@return\t\t\tA Max error code."]
    pub fn jbox_paint_layer(
        b: *mut t_object,
        view: *mut t_object,
        name: *mut t_symbol,
        x: f64,
        y: f64,
    ) -> t_max_err;
}
extern "C" {
    #[doc = " Simple utility to test for rectangle intersection."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\tr1\t\tThe address of the first rect for the test."]
    #[doc = "@param\tr2\t\tThe address of the second rect for the test."]
    #[doc = "@return\t\t\tReturns true if the rects intersect, otherwise false."]
    pub fn jgraphics_rectintersectsrect(r1: *mut t_rect, r2: *mut t_rect)
        -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = " Simple utility to test for rectangle containment."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = "@param\touter\tThe address of the first rect for the test."]
    #[doc = "@param\tinner\tThe address of the second rect for the test."]
    #[doc = "@return\t\t\tReturns true if the inner rect is completely inside the outer rect,"]
    #[doc = "otherwise false."]
    pub fn jgraphics_rectcontainsrect(
        outer: *mut t_rect,
        inner: *mut t_rect,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = " Clip to a subset of the graphics context; once done, cannot be undone, only further reduced."]
    #[doc = "@ingroup\t\tjgraphics"]
    #[doc = ""]
    #[doc = "@param\t\tg\t\tThe #t_jgraphics context to be clipped."]
    #[doc = "@param\t\tx\t\tx origin of clip region."]
    #[doc = "@param\t\ty\t\ty origin of clip region."]
    #[doc = "@param\t\twidth\twidth of clip region."]
    #[doc = "@param\t\theight\theight of clip region."]
    pub fn jgraphics_clip(g: *mut t_jgraphics, x: f64, y: f64, width: f64, height: f64);
}
pub mod _jgraphics_dpi_awareness {
    pub type Type = ::std::os::raw::c_uint;
    pub const JGRAPHICS_DPI_AWARENESS_DEFAULT: Type = 0;
    pub const JGRAPHICS_DPI_AWARENESS_UNAWARE: Type = 1;
    pub const JGRAPHICS_DPI_AWARENESS_SYSTEM_AWARE: Type = 2;
    pub const JGRAPHICS_DPI_AWARENESS_PER_MONITOR_AWARE: Type = 3;
    pub const JGRAPHICS_DPI_AWARENESS_PER_MONITOR_AWARE_V2: Type = 4;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _backgroundtask {
    pub opaque: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__backgroundtask() {
    assert_eq!(
        ::std::mem::size_of::<_backgroundtask>(),
        8usize,
        concat!("Size of: ", stringify!(_backgroundtask))
    );
    assert_eq!(
        ::std::mem::align_of::<_backgroundtask>(),
        8usize,
        concat!("Alignment of ", stringify!(_backgroundtask))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_backgroundtask>())).opaque as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_backgroundtask),
            "::",
            stringify!(opaque)
        )
    );
}
pub type t_backgroundtask = _backgroundtask;
extern "C" {
    pub fn backgroundtask_execute(
        owner: *mut t_object,
        args: *mut ::std::os::raw::c_void,
        cbtask: method,
        cbcomplete: method,
        task: *mut *mut t_backgroundtask,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn backgroundtask_execute_method(
        obtask: *mut t_object,
        mtask: *mut t_symbol,
        actask: ::std::os::raw::c_long,
        avtask: *mut t_atom,
        obcomp: *mut t_object,
        mcomp: *mut t_symbol,
        accomp: ::std::os::raw::c_long,
        avcomp: *mut t_atom,
        task: *mut *mut t_backgroundtask,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn backgroundtask_purge_object(owner: *mut t_object);
}
extern "C" {
    pub fn backgroundtask_join_object(owner: *mut t_object);
}
extern "C" {
    pub fn backgroundtask_cancel(task: *mut t_backgroundtask) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn backgroundtask_join(task: *mut t_backgroundtask) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tAdd an attribute to the current style."]
    #[doc = "@ingroup styles"]
    #[doc = ""]
    #[doc = "@param\tc\tThe class whose attribute will be added to the style."]
    #[doc = "@param\ts\tThe name of the attribute to be added to the style."]
    #[doc = "@see The 'uitextfield' example project in the SDK."]
    pub fn class_attr_setstyle(c: *mut t_class, s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "\tAdd an alias to the current style."]
    #[doc = "This is used for backward compatibility where an attribute using an old name will want a style applied to it from a different name."]
    #[doc = "Typically you will use one of the macros such as #CLASS_ATTR_STYLE_ALIAS_NOSAVE rather than using this function directly."]
    #[doc = "@ingroup styles"]
    #[doc = ""]
    #[doc = "@param\tc\t\t\tThe class for whom the alias will be created."]
    #[doc = "@param\tname\t\tThe name of the attribute of the style."]
    #[doc = "@param\taliasname\tThe name of the alias."]
    #[doc = "@param\tlegacy\t\tAlways pass 0 for this argument."]
    #[doc = "@see\t#CLASS_ATTR_STYLE_ALIAS_NOSAVE"]
    #[doc = "@see \tThe 'jslider' project in the SDK."]
    pub fn class_attr_style_alias(
        c: *mut t_class,
        name: *const ::std::os::raw::c_char,
        aliasname: *const ::std::os::raw::c_char,
        legacy: ::std::os::raw::c_long,
    );
}
extern "C" {
    #[doc = "\tSpecify that an attr requires a fill."]
    #[doc = "@ingroup styles"]
    #[doc = ""]
    #[doc = "@param\tc\t\tThe class whose attribute is a fill."]
    #[doc = "@param\tname\tThe name of the attribute."]
    #[doc = "@param\tflags\t0 for none, or #FILL_ATTR_SAVE."]
    #[doc = "@see The 'uitextfield' example project in the SDK."]
    pub fn class_attr_setfill(
        c: *mut t_class,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_long,
    );
}
extern "C" {
    #[doc = "\tFill using the current value of a named style color that exists either in the object or the defined style."]
    #[doc = "Abdridged example from the 'attrui' object:"]
    #[doc = "@code"]
    #[doc = "long is_fill = object_attr_getfill(destination, x->j_attr);"]
    #[doc = ""]
    #[doc = "if (is_fill) {"]
    #[doc = "jgraphics_attr_fillrect((t_object *)destination, g, x->j_attr, rect);"]
    #[doc = "jgraphics_rectangle(g, rect->x, rect->y, rect->width, rect->height);\t// ready to be stroked"]
    #[doc = "}"]
    #[doc = "else {"]
    #[doc = "object_attr_getjrgba(destination, x->j_attr, &color);"]
    #[doc = "jgraphics_set_source_jrgba(g, &color);"]
    #[doc = "jgraphics_rectangle(g, rect->x, rect->y, rect->width, rect->height);"]
    #[doc = "jgraphics_fill_preserve(g);"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "jgraphics_set_source_jrgba(g, &bordercolor);"]
    #[doc = "jgraphics_stroke(g);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@ingroup styles"]
    #[doc = ""]
    #[doc = "@param\tb\t\t\tThe instance of your object."]
    #[doc = "@param\tg\t\t\tThe jgraphics context."]
    #[doc = "@param\tattrname\tThe name of the attribute whose fill style you want."]
    #[doc = "@param\tarea\t\tThe rect area to be filled."]
    pub fn jgraphics_attr_fillrect(
        b: *mut t_object,
        g: *mut t_jgraphics,
        attrname: *mut t_symbol,
        area: *mut t_rect,
    );
}
extern "C" {
    #[doc = "\tFill using the current value of a named style color that exists either in the object or the defined style."]
    #[doc = "Example from the 'panel' object:"]
    #[doc = "@code"]
    #[doc = "t_rect r;"]
    #[doc = ""]
    #[doc = "r.x = r.y = thick * 0.5;"]
    #[doc = "r.width = rect->width - thick;"]
    #[doc = "r.height = rect->height - thick;"]
    #[doc = ""]
    #[doc = "pat = jgraphics_attr_setfill((t_object *)x, g, ps_bgfillcolor, &r);"]
    #[doc = "jgraphics_rectangle_rounded(g, r.x, r.y, r.width, r.height, round, round);"]
    #[doc = "jgraphics_fill_preserve(g);"]
    #[doc = "jgraphics_pattern_destroy(pat);"]
    #[doc = ""]
    #[doc = "object_attr_getjrgba(x, ps_bordercolor, &color);"]
    #[doc = "jgraphics_set_source_jrgba(g, &color);"]
    #[doc = "jgraphics_set_line_width(g, thick);"]
    #[doc = "jgraphics_stroke(g);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@ingroup styles"]
    #[doc = ""]
    #[doc = "@param\tb\t\t\tThe instance of your object."]
    #[doc = "@param\tg\t\t\tThe jgraphics context."]
    #[doc = "@param\tattrname\tThe name of the attribute whose fill style you want."]
    #[doc = "@param\tarea\t\tThe rect area to be filled."]
    #[doc = "@return\t\t\t\tThe pattern."]
    pub fn jgraphics_attr_setfill(
        b: *mut t_object,
        g: *mut t_jgraphics,
        attrname: *mut t_symbol,
        area: *mut t_rect,
    ) -> *mut t_jpattern;
}
extern "C" {
    #[doc = "\tDetermine the color at a given position in a fill."]
    #[doc = "@ingroup\tstyles"]
    #[doc = "@param\t\tb\t\t\tThe instance of your object."]
    #[doc = "@param\t\tattrname\tThe name of the attribute to query."]
    #[doc = "@param\t\tpos\t\t\tThe position in a range of [0.0, 1.0]."]
    #[doc = "@param\t\tc\t\t\tA valid #t_jrgba whose members will be filled-in upon return."]
    #[doc = "@return \t\t\t\ttrue if the object is a fill, otherwise false."]
    pub fn object_attr_getfillcolor_atposition(
        b: *mut t_object,
        attrname: *const ::std::os::raw::c_char,
        pos: f64,
        c: *mut t_jrgba,
    );
}
extern "C" {
    #[doc = "\tDetermine if an attribute is a fill."]
    #[doc = "@ingroup\tstyles"]
    #[doc = "@param\t\tobj\t\t\tThe instance of your object."]
    #[doc = "@param\t\tattrname\tThe name of the attribute to query."]
    #[doc = "@return \t\t\t\ttrue if the object is a fill, otherwise false."]
    pub fn object_attr_getfill(
        obj: *mut t_object,
        attrname: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn object_style_setfillattribute(
        x: *mut t_object,
        fillattr: *mut t_symbol,
        entry: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    );
}
extern "C" {
    #[doc = "\tAssociate the name of an attribute of your class with the name of an attribute of a style."]
    #[doc = "@ingroup\tstyles"]
    #[doc = "@param\t\tc\t\t\tThe class whose attribute will be added to the style."]
    #[doc = "@param\t\tattrname\tThe name of the attribute of your class."]
    #[doc = "@param\t\tmapname\t\tThe name of the attribute from the style."]
    #[doc = "@see\t\t'jslider' example project in the SDK."]
    pub fn class_attr_stylemap(
        c: *mut t_class,
        attrname: *const ::std::os::raw::c_char,
        mapname: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn object_attr_attrname_forstylemap(
        x: *mut t_object,
        mapname: *mut t_symbol,
    ) -> *mut t_symbol;
}
extern "C" {
    pub fn object_attr_stylemapname(x: *mut t_object, attrname: *mut t_symbol) -> *mut t_symbol;
}
extern "C" {
    pub fn style_getmenu(
        context: *mut t_object,
        current: *mut t_symbol,
        mask: ::std::os::raw::c_long,
        selecteditem: *mut ::std::os::raw::c_long,
        headercount: *mut ::std::os::raw::c_long,
    ) -> *mut t_jpopupmenu;
}
extern "C" {
    pub fn style_handlemenu(
        context: *mut t_object,
        itemindex: ::std::os::raw::c_long,
        current: *mut *mut t_symbol,
    );
}
pub type t_critical = *mut pthread_mutex_t;
extern "C" {
    #[doc = "Create a new critical region."]
    #[doc = "Normally, you do not need to create your own critical region, because"]
    #[doc = "you can use Max’s global critical region. Only use this function (in"]
    #[doc = "your object’s instance creation method) if you are certain you are not"]
    #[doc = "able to use the global critical region."]
    #[doc = ""]
    #[doc = "@ingroup\tcritical"]
    #[doc = "@param\tx\tA #t_critical struct will be returned to you via this pointer."]
    pub fn critical_new(x: *mut t_critical);
}
extern "C" {
    #[doc = "Enter a critical region."]
    #[doc = "Typically you will want the argument to be zero to enter the global"]
    #[doc = "critical region, although you could pass your own critical created with"]
    #[doc = "critical_new(). It is important to try to keep the amount of code in"]
    #[doc = "the critical region to a minimum."]
    #[doc = "Exit the critical region with critical_exit()."]
    #[doc = ""]
    #[doc = "@ingroup\tcritical"]
    #[doc = "@param\tx\tA pointer to a #t_critical struct, or zero to uses Max’s global critical region."]
    #[doc = "@see\t\tcritical_exit()"]
    pub fn critical_enter(x: t_critical);
}
extern "C" {
    #[doc = "Leave a critical region."]
    #[doc = "Typically you will want the argument to be zero to exit the global"]
    #[doc = "critical region, although, you if you are using your own critical regions"]
    #[doc = "you will want to pass the same one that you previously passed to"]
    #[doc = "critical_enter()."]
    #[doc = ""]
    #[doc = "@ingroup\tcritical"]
    #[doc = "@param\tx\tA pointer to a #t_critical struct, or zero to uses Max’s global critical region."]
    pub fn critical_exit(x: t_critical);
}
extern "C" {
    #[doc = "Free a critical region created with critical_new()."]
    #[doc = "If you created your own critical region, you will need to free it in your object’s free method."]
    #[doc = ""]
    #[doc = "@ingroup\tcritical"]
    #[doc = "@param\tx\tThe #t_critical struct that will be freed."]
    pub fn critical_free(x: t_critical);
}
extern "C" {
    #[doc = "\tTry to enter a critical region if it is not locked."]
    #[doc = "@ingroup\tcritical"]
    #[doc = "@param\tx\tA pointer to a #t_critical struct, or zero to uses Max’s global critical region."]
    #[doc = "@return\t\treturns non-zero if there was a problem entering"]
    #[doc = "@see\t\tcritical_enter()"]
    pub fn critical_tryenter(x: t_critical) -> ::std::os::raw::c_short;
}
#[doc = "\tA database object."]
#[doc = "Use db_open() and db_close() to create and free database objects."]
#[doc = "@ingroup\tdatabase"]
pub type t_database = t_object;
#[doc = "\tA database result object."]
#[doc = "This is what the database object returns when a query is executed."]
#[doc = "@ingroup\tdatabase"]
pub type t_db_result = t_object;
#[doc = "\tA database view object."]
#[doc = "A database view wraps a query and a result for a given database, and is always updated and in-sync with the database."]
#[doc = "@ingroup\tdatabase"]
pub type t_db_view = t_object;
extern "C" {
    #[doc = "\tCreate an instance of a database."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdbname\t\tThe name of the database."]
    #[doc = "@param\t\tfullpath\tIf a database with this dbname is not already open,"]
    #[doc = "this will specify a full path to the location where the database is stored on disk."]
    #[doc = "If NULL is passed for this argument, the database will reside in memory only."]
    #[doc = "The path should be formatted as a Max style path."]
    #[doc = "@param\t\tdb\t\t\tThe address of a #t_database pointer that will be set to point to the new database instance."]
    #[doc = "If the pointer is not NULL, then it will be treated as a pre-existing database instance"]
    #[doc = "and thus will be freed."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_open(
        dbname: *mut t_symbol,
        fullpath: *const ::std::os::raw::c_char,
        db: *mut *mut t_database,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tClose an open database."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdb\t\t\tThe address of the #t_database pointer for your database instance."]
    #[doc = "The pointer will be freed and set NULL upon return."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_close(db: *mut *mut t_database) -> t_max_err;
}
extern "C" {
    #[doc = "\tExecute a SQL query on the database."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdb\t\t\tThe #t_database pointer for your database instance."]
    #[doc = "@param\t\tdbresult\tThe address of a #t_db_result pointer."]
    #[doc = "If the pointer is passed-in set to NULL then a new dbresult will be created."]
    #[doc = "If the pointer is not NULL then it is assumed to be a valid dbresult, which will be filled in with the query results."]
    #[doc = "When you are done with the dbresult you should free it with object_free()."]
    #[doc = "@param\t\tsql\t\t\tA C-string containing a valid SQL query, possibly with sprintf() formatting codes."]
    #[doc = "@param\t\t...\t\t\tIf an sprintf() formatting codes are used in the sql string, these values will be interpolated into the sql string."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_query(
        db: *mut t_database,
        dbresult: *mut *mut t_db_result,
        sql: *const ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tExecute a SQL query on the database."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdb\t\t\tThe #t_database pointer for your database instance."]
    #[doc = "@param\t\tdbresult\tThe address of a #t_db_result pointer."]
    #[doc = "If the pointer is passed-in set to NULL then a new dbresult will be created."]
    #[doc = "If the pointer is not NULL then it is assumed to be a valid dbresult, which will be filled in with the query results."]
    #[doc = "When you are done with the dbresult you should free it with object_free()."]
    #[doc = "@param\t\tsql\t\t\tA C-string containing a valid SQL query."]
    #[doc = "@return\t\t\t\tAn error code."]
    pub fn db_query_direct(
        db: *mut t_database,
        dbresult: *mut *mut t_db_result,
        sql: *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tExecute a SQL query on the database, temporarily overriding the database's error logging attribute."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdb\t\t\tThe #t_database pointer for your database instance."]
    #[doc = "@param\t\tdbresult\tThe address of a #t_db_result pointer."]
    #[doc = "If the pointer is passed-in set to NULL then a new dbresult will be created."]
    #[doc = "If the pointer is not NULL then it is assumed to be a valid dbresult, which will be filled in with the query results."]
    #[doc = "When you are done with the dbresult you should free it with object_free()."]
    #[doc = "@param\t\tsql\t\t\tA C-string containing a valid SQL query, possibly with sprintf() formatting codes."]
    #[doc = "@param\t\t...\t\t\tIf an sprintf() formatting codes are used in the sql string, these values will be interpolated into the sql string."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_query_silent(
        db: *mut t_database,
        dbresult: *mut *mut t_db_result,
        sql: *const ::std::os::raw::c_char,
        ...
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tDetermine the id (key) number for the most recent INSERT query executed on the database."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdb\t\t\tThe #t_database pointer for your database instance."]
    #[doc = "@param\t\tid\t\t\tThe address of a variable to hold the result on return."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_query_getlastinsertid(
        db: *mut t_database,
        id: *mut ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tCreate a new table in a database."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdb\t\t\tThe #t_database pointer for your database instance."]
    #[doc = "@param\t\ttablename\tThe name to use for the new table."]
    #[doc = "The new table will be created with one column, which holds the primary key for the table,"]
    #[doc = "and is named according the form {tablename}_id."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_query_table_new(
        db: *mut t_database,
        tablename: *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tAdd a new column to an existing table in a database."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdb\t\t\tThe #t_database pointer for your database instance."]
    #[doc = "@param\t\ttablename\tThe name of the table to which the column should be added."]
    #[doc = "@param\t\tcolumnname\tThe name to use for the new column."]
    #[doc = "@param\t\tcolumntype\tThe SQL type for the data that will be stored in the column."]
    #[doc = "For example: \"INTEGER\" or \"VARCHAR\""]
    #[doc = "@param\t\tflags\t\tIf you wish to specify any additional information for the column, then pass that here."]
    #[doc = "Otherwise pass NULL."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_query_table_addcolumn(
        db: *mut t_database,
        tablename: *const ::std::os::raw::c_char,
        columnname: *const ::std::os::raw::c_char,
        columntype: *const ::std::os::raw::c_char,
        flags: *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tBegin a database transaction."]
    #[doc = "When you are working with a file-based database, then the database will not be flushed to disk until db_transacation_end() is called."]
    #[doc = "This means that you can _much_ more efficiently execute a sequence of queries in one transaction rather than independently."]
    #[doc = ""]
    #[doc = "That database object reference counts transactions, so it is possible nest calls to db_transacation_start() and db_transacation_end()."]
    #[doc = "It is important to balance all calls with db_transacation_end() or the database contents will never be flushed to disk."]
    #[doc = ""]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdb\t\t\tThe #t_database pointer for your database instance."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_transaction_start(db: *mut t_database) -> t_max_err;
}
extern "C" {
    #[doc = "\tFinalize a database transaction."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdb\t\t\tThe #t_database pointer for your database instance."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_transaction_end(db: *mut t_database) -> t_max_err;
}
extern "C" {
    #[doc = "\tForce any open transactions to close."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdb\t\t\tThe #t_database pointer for your database instance."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_transaction_flush(db: *mut t_database) -> t_max_err;
}
extern "C" {
    #[doc = "\tA database view is a way of looking at a particular set of records in the database."]
    #[doc = "This particular set of records is defined with a standard SQL query,"]
    #[doc = "and the view maintains a copy of the results of the query internally."]
    #[doc = "Any time the database is modified the internal result set is updated,"]
    #[doc = "and any objects listening to the view are notified via object_notify()."]
    #[doc = ""]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdb\t\t\tThe #t_database pointer for your database instance."]
    #[doc = "@param\t\tsql\t\t\tA SQL query that defines the set of results provided by the view."]
    #[doc = "@param\t\tdbview\t\tThe address of a NULL #t_db_view pointer which will be set with the new view upon return."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_view_create(
        db: *mut t_database,
        sql: *const ::std::os::raw::c_char,
        dbview: *mut *mut t_db_view,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tRemove a database view created using db_view_create()."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdb\t\t\tThe #t_database pointer for your database instance for which this view was created."]
    #[doc = "@param\t\tdbview\t\tThe address of the #t_db_view pointer for the view."]
    #[doc = "This pointer will be freed and set NULL upon return."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_view_remove(db: *mut t_database, dbview: *mut *mut t_db_view) -> t_max_err;
}
extern "C" {
    #[doc = "\tFetch the pointer for a #t_db_view's query result."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdbview\t\tThe #t_db_view pointer for your database view instance."]
    #[doc = "@param\t\tresult\t\tThe address of a pointer to a #t_db_result object."]
    #[doc = "This pointer will be overwritten with the view's result pointer upon return."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_view_getresult(dbview: *mut t_db_view, result: *mut *mut t_db_result) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the query used by the view."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdbview\t\tThe #t_db_view pointer for your database view instance."]
    #[doc = "@param\t\tnewquery\tThe SQL string to define a new query for the view, replacing the old query."]
    #[doc = "@return\t\t\t\t\tAn error code."]
    pub fn db_view_setquery(
        dbview: *mut t_db_view,
        newquery: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tReturn the next record from a set of results that you are walking."]
    #[doc = "When you are returned a result from a query of the database,"]
    #[doc = "the result is prepared for walking the results from the beginning."]
    #[doc = "You can also reset the result manually to the beginning of the record list"]
    #[doc = "by calling db_result_reset()."]
    #[doc = ""]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tresult\t\tThe #t_db_result pointer for your query results."]
    #[doc = "@return\t\t\t\t\tAn array of C-Strings with the values for every requested column (field) of a database record."]
    #[doc = "To find out how many columns are represented in the array, use db_result_numfields()."]
    pub fn db_result_nextrecord(result: *mut t_db_result) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tReset the interface for walking a result's record list to the first record."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tresult\t\tThe #t_db_result pointer for your query results."]
    pub fn db_result_reset(result: *mut t_db_result);
}
extern "C" {
    #[doc = "\tZero-out a database result."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tresult\t\tThe #t_db_result pointer for your query results."]
    pub fn db_result_clear(result: *mut t_db_result);
}
extern "C" {
    #[doc = "\tReturn a count of all records in the query result."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tresult\t\tThe #t_db_result pointer for your query results."]
    #[doc = "@return\t\t\t\t\tThe count of records in the query result."]
    pub fn db_result_numrecords(result: *mut t_db_result) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tReturn a count of all fields (columns) in the query result."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tresult\t\tThe #t_db_result pointer for your query results."]
    #[doc = "@return\t\t\t\t\tThe count of fields in the query result."]
    pub fn db_result_numfields(result: *mut t_db_result) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tReturn the name of a field specified by its index number."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tresult\t\tThe #t_db_result pointer for your query results."]
    #[doc = "@param\t\tfieldindex\tThe zero-based index number of the field (column) in the result."]
    #[doc = "@return\t\t\t\t\tA C-String with the name of the field."]
    pub fn db_result_fieldname(
        result: *mut t_db_result,
        fieldindex: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tReturn a single value from a result according to its index and field coordinates."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tresult\t\t\tThe #t_db_result pointer for your query results."]
    #[doc = "@param\t\trecordindex\t\tThe zero-based index number of the record (row) in the result."]
    #[doc = "@param\t\tfieldindex\t\tThe zero-based index number of the field (column) in the result."]
    #[doc = "@return\t\t\t\t\t\tA C-String with the content of the specified cell in the result."]
    pub fn db_result_string(
        result: *mut t_db_result,
        recordindex: ::std::os::raw::c_long,
        fieldindex: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "\tReturn a single value from a result according to its index and field coordinates."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tresult\t\t\tThe #t_db_result pointer for your query results."]
    #[doc = "@param\t\trecordindex\t\tThe zero-based index number of the record (row) in the result."]
    #[doc = "@param\t\tfieldindex\t\tThe zero-based index number of the field (column) in the result."]
    #[doc = "@return\t\t\t\t\t\tThe content of the specified cell from the result scanned out to a long int."]
    pub fn db_result_long(
        result: *mut t_db_result,
        recordindex: ::std::os::raw::c_long,
        fieldindex: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tReturn a single value from a result according to its index and field coordinates."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tresult\t\t\tThe #t_db_result pointer for your query results."]
    #[doc = "@param\t\trecordindex\t\tThe zero-based index number of the record (row) in the result."]
    #[doc = "@param\t\tfieldindex\t\tThe zero-based index number of the field (column) in the result."]
    #[doc = "@return\t\t\t\t\t\tThe content of the specified cell from the result scanned out to a float."]
    pub fn db_result_float(
        result: *mut t_db_result,
        recordindex: ::std::os::raw::c_long,
        fieldindex: ::std::os::raw::c_long,
    ) -> f32;
}
extern "C" {
    #[doc = "\tReturn a single value from a result according to its index and field coordinates."]
    #[doc = "The value will be coerced from an expected datetime field into seconds."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tresult\t\t\tThe #t_db_result pointer for your query results."]
    #[doc = "@param\t\trecordindex\t\tThe zero-based index number of the record (row) in the result."]
    #[doc = "@param\t\tfieldindex\t\tThe zero-based index number of the field (column) in the result."]
    #[doc = "@return\t\t\t\t\t\tThe datetime represented in seconds."]
    pub fn db_result_datetimeinseconds(
        result: *mut t_db_result,
        recordindex: ::std::os::raw::c_long,
        fieldindex: ::std::os::raw::c_long,
    ) -> t_ptr_uint;
}
extern "C" {
    #[doc = "\tA utility to convert from a sql datetime string into seconds."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tstring\t\t\tA C-string containing a date and time in SQL format."]
    #[doc = "@param\t\tdate\t\t\tThe datetime represented in seconds upon return."]
    pub fn db_util_stringtodate(string: *const ::std::os::raw::c_char, date: *mut t_ptr_uint);
}
extern "C" {
    #[doc = "\tA utility to convert from seconds into a sql-ready datetime string."]
    #[doc = "@ingroup\tdatabase"]
    #[doc = "@param\t\tdate\t\t\tThe datetime represented in seconds."]
    #[doc = "@param\t\tstring\t\t\tThe address of a valid C-string"]
    #[doc = "whose contents will be set to a SQL-ready string format upon return."]
    pub fn db_util_datetostring(date: t_ptr_uint, string: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn patcher_setdefault(
        patcher: *mut t_object,
        key: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn patcher_getdefault(
        patcher: *mut t_object,
        key: *mut t_symbol,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn patcher_removedefault(patcher: *mut t_object, key: *mut t_symbol) -> t_max_err;
}
extern "C" {
    #[doc = "\tRegister a #t_dictionary with the dictionary passing system and map it to a unique name."]
    #[doc = ""]
    #[doc = "@ingroup dictobj"]
    #[doc = "@param\t\td\t\tA valid dictionary object."]
    #[doc = "@param\t\tname\tThe address of a #t_symbol pointer to the name you would like mapped to this dictionary."]
    #[doc = "If the t_symbol pointer has a NULL value then a unique name will be generated and filled-in"]
    #[doc = "upon return."]
    #[doc = "@return\t\t\t\tThe dictionary mapped to the specified name."]
    pub fn dictobj_register(d: *mut t_dictionary, name: *mut *mut t_symbol) -> *mut t_dictionary;
}
extern "C" {
    #[doc = "\tUnregister a #t_dictionary with the dictionary passing system."]
    #[doc = "Generally speaking you should not need to call this method."]
    #[doc = "Calling object_free() on the #t_dictionary automatically unregisters it."]
    #[doc = ""]
    #[doc = "@ingroup dictobj"]
    #[doc = "@param\t\td\t\tA valid dictionary object."]
    #[doc = "@return\t\t\t\tA Max error code."]
    pub fn dictobj_unregister(d: *mut t_dictionary) -> t_max_err;
}
extern "C" {
    #[doc = "\tFind the #t_dictionary for a given name, and return a <i>copy</i> of that dictionary"]
    #[doc = "When you are done, do <i>not</i> call dictobj_release() on the dictionary,"]
    #[doc = "because you are working on a copy rather than on a retained pointer."]
    #[doc = ""]
    #[doc = "@ingroup dictobj"]
    #[doc = "@param\t\tname\tThe name associated with the dictionary for which you wish to obtain a copy."]
    #[doc = "@return\t\t\t\tThe dictionary cloned from the existing dictionary."]
    #[doc = "Returns NULL if no dictionary is associated with name."]
    #[doc = "@see\t\t\t\t#dictobj_findregistered_retain()"]
    pub fn dictobj_findregistered_clone(name: *mut t_symbol) -> *mut t_dictionary;
}
extern "C" {
    #[doc = "\tFind the #t_dictionary for a given name, return a pointer to that #t_dictionary, and increment its reference count."]
    #[doc = "When you are done you should call dictobj_release() on the dictionary."]
    #[doc = ""]
    #[doc = "@ingroup dictobj"]
    #[doc = "@param\t\tname\tThe name associated with the dictionary for which you wish to obtain a pointer."]
    #[doc = "@return\t\t\t\tA pointer to the dictionary associated with name."]
    #[doc = "Returns NULL if no dictionary is associated with name."]
    #[doc = "@see\t\t\t\t#dictobj_release()"]
    #[doc = "@see\t\t\t\t#dictobj_findregistered_clone()"]
    pub fn dictobj_findregistered_retain(name: *mut t_symbol) -> *mut t_dictionary;
}
extern "C" {
    #[doc = "\tFor a #t_dictionary/name that was previously retained with dictobj_findregistered_retain(),"]
    #[doc = "release it (decrement its reference count)."]
    #[doc = ""]
    #[doc = "@ingroup dictobj"]
    #[doc = "@param\t\td\t\tA valid dictionary object retained by dictobj_findregistered_retain()."]
    #[doc = "@return\t\t\t\tA Max error code."]
    #[doc = "@see\t\t\t\t#dictobj_findregistered_retain()"]
    pub fn dictobj_release(d: *mut t_dictionary) -> t_max_err;
}
extern "C" {
    #[doc = "\tFind the name associated with a given #t_dictionary."]
    #[doc = ""]
    #[doc = "@ingroup\tdictobj"]
    #[doc = "@param\t\td\t\tA dictionary, whose name you wish to determine."]
    #[doc = "@return\t\t\t\tThe symbol associated with the dictionary, or NULL if the dictionary is not registered."]
    #[doc = "@see\t\t\t\t#dictobj_register()"]
    pub fn dictobj_namefromptr(d: *mut t_dictionary) -> *mut t_symbol;
}
extern "C" {
    #[doc = "\tSend atoms to an outlet in your Max object, handling complex datatypes that may be present in those atoms."]
    #[doc = "This is particularly when sending the contents of a dictionary entry out of an outlet as in the following example code."]
    #[doc = ""]
    #[doc = "@code"]
    #[doc = "long\t\tac = 0;"]
    #[doc = "t_atom\t\t*av = NULL;"]
    #[doc = "t_max_err\terr;"]
    #[doc = ""]
    #[doc = "err = dictionary_copyatoms(d, key, &ac, &av);"]
    #[doc = "if (!err && ac && av) {"]
    #[doc = "dictobj_outlet_atoms(x->outlets[i],ac,av);"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "if (av)"]
    #[doc = "sysmem_freeptr(av);"]
    #[doc = "@endcode"]
    #[doc = ""]
    #[doc = "@ingroup\tdictobj"]
    #[doc = "@param\t\tout\t\tThe outlet through which the atoms should be sent."]
    #[doc = "@param\t\targc\tThe count of atoms in argv."]
    #[doc = "@param\t\targv\tPointer to the first of an array of atoms to send to the outlet."]
    pub fn dictobj_outlet_atoms(
        out: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    );
}
extern "C" {
    #[doc = "\tEnsure that an atom is safe for passing."]
    #[doc = "Atoms are allowed to be #A_LONG, #A_FLOAT, or #A_SYM, but not #A_OBJ."]
    #[doc = "If the atom is an #A_OBJ, it will be converted into something that will be safe to pass."]
    #[doc = ""]
    #[doc = "@ingroup dictobj"]
    #[doc = "@param\t\ta\tAn atom to check, and potentially modify, to ensure safety in the dictionary-passing system."]
    #[doc = "@return\t\t\tIf the atom was changed then 1 is returned.  Otherwise 0 is returned."]
    pub fn dictobj_atom_safety(a: *mut t_atom) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tEnsure that an atom is safe for passing."]
    #[doc = "Atoms are allowed to be #A_LONG, #A_FLOAT, or #A_SYM, but not #A_OBJ."]
    #[doc = "If the atom is an #A_OBJ, it will be converted into something that will be safe to pass."]
    #[doc = ""]
    #[doc = "@ingroup dictobj"]
    #[doc = "@param\t\ta\t\tAn atom to check, and potentially modify, to ensure safety in the dictionary-passing system."]
    #[doc = "@param\t\tflags\tPass DICTOBJ_ATOM_FLAGS_REGISTER to have dictionary atoms registered/retained."]
    #[doc = "@return\t\t\t\tIf the atom was changed then 1 is returned.  Otherwise 0 is returned."]
    pub fn dictobj_atom_safety_flags(
        a: *mut t_atom,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dictobj_atom_release(a: *mut t_atom);
}
extern "C" {
    #[doc = "\tValidate the contents of a #t_dictionary against a second #t_dictionary containing a schema."]
    #[doc = ""]
    #[doc = "The schema dictionary contains keys and values, like any dictionary."]
    #[doc = "dictobj_validate() checks to make sure that all keys in the schema dictionary are present in the candidate dictionary."]
    #[doc = "If the keys are all present then the candidate passes and the function returns true."]
    #[doc = "Otherwise the the candidate fails the validation and the function returns false."]
    #[doc = ""]
    #[doc = "Generally speaking, the schema dictionary with contain values with the symbol \"*\", indicating a wildcard,"]
    #[doc = "and thus only the key is used to validate the dictionary (all values match the wildcard)."]
    #[doc = "However, if the schema dictionary contains non-wildcard values for any of its keys, those keys in the"]
    #[doc = "candidate dictionary must also contain matching values in order for the candidate to successfully validate."]
    #[doc = ""]
    #[doc = "An example of this in action is the dict.route object in Max, which simply wraps this function."]
    #[doc = ""]
    #[doc = "@ingroup dictobj"]
    #[doc = "@param\t\tschema\t\tThe dictionary against which to validate candidate."]
    #[doc = "@param\t\tcandidate\tA dictionary to test against the schema."]
    #[doc = "@return\t\t\t\t\tReturns true if the candidate validates against the schema, otherwise returns false."]
    #[doc = "@see\t\t\t\t\t#dictobj_dictionarytoatoms()"]
    pub fn dictobj_validate(
        schema: *const t_dictionary,
        candidate: *const t_dictionary,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tConvert a C-string of @ref using_dictobj_syntax into a C-string of JSON."]
    #[doc = ""]
    #[doc = "@ingroup dictobj"]
    #[doc = "@param\t\tjsonsize\tThe address of a variable to be filled-in with the number of chars in json upon return."]
    #[doc = "@param\t\tjson\t\tThe address of a char pointer to point to the JSON C-string upon return."]
    #[doc = "Should be initialized to NULL."]
    #[doc = "You are responsible for freeing the string with sysmem_freeptr() when you are done with it."]
    #[doc = "@param\t\tstr\t\t\tA NULL-terminated C-string containing @ref using_dictobj_syntax ."]
    #[doc = "@return\t\t\t\t\tA Max error code."]
    #[doc = "@see\t\t\t\t\t#dictobj_dictionarytoatoms()"]
    pub fn dictobj_jsonfromstring(
        jsonsize: *mut ::std::os::raw::c_long,
        json: *mut *mut ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tCreate a new #t_dictionary from @ref using_dictobj_syntax which is passed in as a C-string."]
    #[doc = ""]
    #[doc = "@ingroup dictobj"]
    #[doc = "@param\t\td\t\tThe address of a dictionary variable, which will hold a pointer to"]
    #[doc = "the new dictionary upon return.  Should be initialized to NULL."]
    #[doc = "@param\t\tstr\t\tA NULL-terminated C-string containing @ref using_dictobj_syntax ."]
    #[doc = "@param\t\tstr_is_already_json"]
    #[doc = "@param\t\terrorstring"]
    #[doc = "@return\t\t\t\tA Max error code."]
    #[doc = "@see\t\t\t\t#dictobj_dictionarytoatoms()"]
    pub fn dictobj_dictionaryfromstring(
        d: *mut *mut t_dictionary,
        str_: *const ::std::os::raw::c_char,
        str_is_already_json: ::std::os::raw::c_int,
        errorstring: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tCreate a new #t_dictionary from @ref using_dictobj_syntax which is passed in as an array of atoms."]
    #[doc = "Unlike many #t_dictionary calls to create dictionaries, this function does not take over ownership of the atoms you pass in."]
    #[doc = ""]
    #[doc = "@ingroup dictobj"]
    #[doc = "@param\t\td\t\tThe address of a dictionary variable, which will hold a pointer to"]
    #[doc = "the new dictionary upon return.  Should be initialized to NULL."]
    #[doc = "@param\t\targc\tThe number of atoms in argv."]
    #[doc = "@param\t\targv\tPointer to the first of an array of atoms to be interpreted as"]
    #[doc = "@ref using_dictobj_syntax ."]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\t#dictobj_dictionaryfromatoms_extended() #dictobj_dictionarytoatoms()"]
    pub fn dictobj_dictionaryfromatoms(
        d: *mut *mut t_dictionary,
        argc: ::std::os::raw::c_long,
        argv: *const t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tCreate a new #t_dictionary from from an array of atoms that use Max dictionary syntax, JSON, or compressed JSON."]
    #[doc = "This function is the C analog to the dict.deserialize object in Max."]
    #[doc = "Unlike many #t_dictionary calls to create dictionaries, this function does not take over ownership of the atoms you pass in."]
    #[doc = ""]
    #[doc = "@ingroup dictobj"]
    #[doc = "@param\t\td\t\tThe address of a dictionary variable, which will hold a pointer to"]
    #[doc = "the new dictionary upon return.  Should be initialized to NULL."]
    #[doc = "@param\t\tmsg\t\tIgnored."]
    #[doc = "@param\t\targc\tThe number of atoms in argv."]
    #[doc = "@param\t\targv\tPointer to the first of an array of atoms to be interpreted as @ref using_dictobj_syntax , JSON, or compressed JSON."]
    #[doc = "@return\tA Max error code."]
    #[doc = "@see\t\t#dictobj_dictionaryfromatoms() #dictobj_dictionaryfromstring()"]
    pub fn dictobj_dictionaryfromatoms_extended(
        d: *mut *mut t_dictionary,
        msg: *const t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *const t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tSerialize the contents of a #t_dictionary into @ref using_dictobj_syntax ."]
    #[doc = ""]
    #[doc = "@ingroup dictobj"]
    #[doc = "@param\t\td\t\tThe dictionary to serialize."]
    #[doc = "@param\t\targc\tThe address of a variable to hold the number of atoms allocated upon return."]
    #[doc = "@param\t\targv\tThe address of a t_atom pointer which will point to the first atom"]
    #[doc = "(of an array of argc atoms) upon return. You are responsible for freeing the pointer"]
    #[doc = "returned with sysmem_freeptr() when you are done with it. If you pass in existing memory,"]
    #[doc = "it must be memory allocated using sysmem_newptr() and the pointer may be resized."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    #[doc = "@see\t\t#dictobj_dictionaryfromatoms()"]
    pub fn dictobj_dictionarytoatoms(
        d: *const t_dictionary,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tGiven a complex key (one that includes potential heirarchy or array-member access),"]
    #[doc = "return the actual key and the dictionary in which the key should be referenced."]
    #[doc = ""]
    #[doc = "@ingroup\tdictobj"]
    #[doc = "@param\t\tx\t\t\tYour calling object.  If there is an error this will be used by the internal call to object_error()."]
    #[doc = "@param\t\td\t\t\tThe dictionary you are querying."]
    #[doc = "@param\t\takey\t\tThe complex key specifying the query."]
    #[doc = "@param\t\tcreate\t\tIf true, create the intermediate dictionaries in the hierarchy specified in akey."]
    #[doc = "@param\t\ttargetdict\tReturns the t_dictionary that for the (sub)dictionary specified by akey."]
    #[doc = "@param\t\ttargetkey\tReturns the name of the key in targetdict that to which akey is referencing."]
    #[doc = "@param\t\tindex\t\tReturns the index requested if array-member access is specified.  Pass NULL if you are not interested in this."]
    #[doc = ""]
    #[doc = "@return\t\tA Max error code."]
    pub fn dictobj_key_parse(
        x: *mut t_object,
        d: *mut t_dictionary,
        akey: *mut t_atom,
        create: t_bool,
        targetdict: *mut *mut t_dictionary,
        targetkey: *mut *mut t_symbol,
        index: *mut t_int32,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tGet a reference to an object that is bound to a #t_symbol."]
    #[doc = "@ingroup misc"]
    #[doc = "@param\tx\t\t\tThe object that is getting the reference to the symbol."]
    #[doc = "@param\tname\t\tThe name of the symbol to reference."]
    #[doc = "@param\tclassname\tThe name of the class of which the object we are referencing should be an instance."]
    #[doc = "@return\t\t\t\tThe s_thing of the #t_symbol."]
    #[doc = ""]
    #[doc = "@remark\t\t\t\tAn example of real-world use is to get the buffer~ object associated with a symbol."]
    #[doc = "@code"]
    #[doc = "typedef struct _myobject {"]
    #[doc = "t_object\tobj;"]
    #[doc = "t_symbol\t*buffer_name;"]
    #[doc = "t_buffer\t*buffer_object;"]
    #[doc = "} t_myobject;"]
    #[doc = ""]
    #[doc = "void myobject_setbuffer(t_myobject *x, t_symbol *s, long argc, t_atom *argv)"]
    #[doc = "{"]
    #[doc = "if(s != x->buffer_name){"]
    #[doc = "x->buffer_object = (t_buffer *)globalsymbol_reference((t_object *)x, s->s_name, \"buffer~\");"]
    #[doc = ""]
    #[doc = "globalsymbol_dereference((t_object *)x, x->buffer_name->s_name, \"buffer~\");"]
    #[doc = ""]
    #[doc = "x->buffer_name = s;"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn globalsymbol_reference(
        x: *mut t_object,
        name: *const ::std::os::raw::c_char,
        classname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "\tStop referencing an object that is bound to a #t_symbol, previously referenced using globalsymbol_reference()."]
    #[doc = "@ingroup misc"]
    #[doc = "@param\tx\t\t\tThe object that is getting the reference to the symbol."]
    #[doc = "@param\tname\t\tThe name of the symbol to reference."]
    #[doc = "@param\tclassname\tThe name of the class of which the object we are referencing should be an instance."]
    #[doc = "@see\tglobalsymbol_reference()"]
    pub fn globalsymbol_dereference(
        x: *mut t_object,
        name: *const ::std::os::raw::c_char,
        classname: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = "\tBind an object to a #t_symbol."]
    #[doc = "@ingroup misc"]
    #[doc = "@param\tx\t\tThe object to bind to the #t_symbol."]
    #[doc = "@param\tname\tThe name of the #t_symbol to which the object will be bound."]
    #[doc = "@param\tflags\tPass 0."]
    #[doc = "@return\t\tA Max error code."]
    pub fn globalsymbol_bind(
        x: *mut t_object,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = " Remove an object from being bound to a #t_symbol."]
    #[doc = "@ingroup misc"]
    #[doc = "@param\tx\t\tThe object from which to unbind the #t_symbol."]
    #[doc = "@param\tname\tThe name of the #t_symbol from which the object will be unbound."]
    #[doc = "@param\tflags\tPass 0."]
    pub fn globalsymbol_unbind(
        x: *mut t_object,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn globalsymbol_notify(
        x: *mut t_object,
        name: *const ::std::os::raw::c_char,
        msg: *mut t_symbol,
        data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _itm {
    _unused: [u8; 0],
}
#[doc = "\tA low-level object for tempo-based scheduling."]
#[doc = "@ingroup\ttime"]
#[doc = "@see\t\t#t_timeobject"]
#[doc = "@see\t\t@ref chapter_itm"]
pub type t_itm = _itm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _itmclock {
    _unused: [u8; 0],
}
pub type t_itmclock = _itmclock;
extern "C" {
    #[doc = "\tReturn the global (default / unnamed) itm object."]
    #[doc = "@ingroup\ttime"]
    #[doc = "@return\t\tThe global #t_itm object."]
    pub fn itm_getglobal() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "\tReturn a named itm object."]
    #[doc = "@ingroup\t\ttime"]
    #[doc = "@param\ts\t\tThe name of the itm to return."]
    #[doc = "@param\tscheduler"]
    #[doc = "@param\tdefaultclocksourcename"]
    #[doc = "@param\tcreate\tIf non-zero, then create this named itm should it not already exist."]
    #[doc = "@return\t\t\tThe global #t_itm object."]
    pub fn itm_getnamed(
        s: *mut t_symbol,
        scheduler: *mut ::std::os::raw::c_void,
        defaultclocksourcename: *mut t_symbol,
        create: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn itm_getfromarg(o: *mut t_object, s: *mut t_symbol) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "\tReference an itm object."]
    #[doc = "When you are using an itm object, you must call this function to increment its reference count."]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\tx\tThe itm object."]
    pub fn itm_reference(x: *mut t_itm);
}
extern "C" {
    #[doc = "\tStop referencing an itm object."]
    #[doc = "When you are done using an itm object, you must call this function to decrement its reference count."]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\tx\tThe itm object."]
    pub fn itm_dereference(x: *mut t_itm);
}
extern "C" {
    pub fn itm_deleteeventlist(x: *mut t_itm, eventlist: *mut t_symbol);
}
extern "C" {
    pub fn itm_eventlistseek(x: *mut t_itm);
}
extern "C" {
    pub fn itm_geteventlistnames(
        x: *mut t_itm,
        count: *mut ::std::os::raw::c_long,
        names: *mut *mut *mut t_symbol,
    );
}
extern "C" {
    pub fn itm_switcheventlist(x: *mut t_itm, eventlist: *mut t_symbol, offset: f64);
}
extern "C" {
    #[doc = "\tReport the current internal time."]
    #[doc = "This is the same as calling clock_getftime();"]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\tx\tThe itm object."]
    #[doc = "@return\t\tThe current internal time."]
    pub fn itm_gettime(x: *mut t_itm) -> f64;
}
extern "C" {
    #[doc = "\tReport the current time of the itm in ticks."]
    #[doc = "You can use functions such as itm_tickstobarbeatunits() or itm_tickstoms() to convert to a different representation of the time."]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\tx\tThe itm object."]
    #[doc = "@return\t\tThe current time in ticks."]
    pub fn itm_getticks(x: *mut t_itm) -> f64;
}
extern "C" {
    #[doc = "\tPrint diagnostic information about an itm object to the Max window."]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\tx\tThe itm object."]
    pub fn itm_dump(x: *mut t_itm);
}
extern "C" {
    pub fn itm_sync(x: *mut t_itm);
}
extern "C" {
    #[doc = "\tSet an itm object's current time signature."]
    #[doc = "@ingroup\t\ttime"]
    #[doc = "@param\tx\t\tThe itm object."]
    #[doc = "@param\tnum\t\tThe top number of the time signature."]
    #[doc = "@param\tdenom\tThe bottom number of the time signature."]
    #[doc = "@param\tflags\tCurrently unused -- pass zero."]
    pub fn itm_settimesignature(
        x: *mut t_itm,
        num: ::std::os::raw::c_long,
        denom: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
    );
}
extern "C" {
    #[doc = "\tQuery an itm object for its current time signature."]
    #[doc = "@ingroup\t\ttime"]
    #[doc = "@param\tx\t\tThe itm object."]
    #[doc = "@param\tnum\t\tThe address of a variable to hold the top number of the time signature upon return."]
    #[doc = "@param\tdenom\tThe address of a variable to hold the bottom number of the time signature upon return."]
    pub fn itm_gettimesignature(
        x: *mut t_itm,
        num: *mut ::std::os::raw::c_long,
        denom: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn itm_seek(x: *mut t_itm, oldticks: f64, newticks: f64, chase: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "\tPause the passage of time for an itm object."]
    #[doc = "This is the equivalent to setting the state of a transport object to 0 with a toggle."]
    #[doc = "@ingroup\t\ttime"]
    #[doc = "@param\tx\t\tThe itm object."]
    pub fn itm_pause(x: *mut t_itm);
}
extern "C" {
    #[doc = "\tStart the passage of time for an itm object, from it's current location."]
    #[doc = "This is the equivalent to setting the state of a transport object to 0 with a toggle."]
    #[doc = "@ingroup\t\ttime"]
    #[doc = "@param\tx\t\tThe itm object."]
    pub fn itm_resume(x: *mut t_itm);
}
extern "C" {
    #[doc = "\tFind out if time is currently progressing for a given itm object."]
    #[doc = "@ingroup\t\ttime"]
    #[doc = "@param\tx\t\tThe itm object."]
    #[doc = "@return\t\t\tReturns non-zero if the time is running, or zero if it is paused."]
    #[doc = "@see\t\t\titm_pause()"]
    #[doc = "@see\t\t\titm_resume()"]
    pub fn itm_getstate(x: *mut t_itm) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "\tSet the number of ticks-per-quarter-note globally for the itm system."]
    #[doc = "The default is 480."]
    #[doc = "@ingroup\t\ttime"]
    #[doc = "@param\tres\t\tThe number of ticks-per-quarter-note."]
    #[doc = "@see\t\t\titm_getresolution()"]
    pub fn itm_setresolution(res: f64);
}
extern "C" {
    #[doc = "\tGet the number of ticks-per-quarter-note globally from the itm system."]
    #[doc = "@ingroup\t\ttime"]
    #[doc = "@return\t\t\tThe number of ticks-per-quarter-note."]
    #[doc = "@see\t\t\titm_setresolution()"]
    pub fn itm_getresolution() -> f64;
}
extern "C" {
    #[doc = "\tGiven an itm object, return its name."]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\tx\tThe itm object."]
    #[doc = "@return\t\tThe name of the itm."]
    pub fn itm_getname(x: *mut t_itm) -> *mut t_symbol;
}
extern "C" {
    pub fn itm_parse(
        x: *mut t_itm,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
        flags: ::std::os::raw::c_long,
        ticks: *mut f64,
        fixed: *mut f64,
        unit: *mut *mut t_symbol,
        bbu: *mut ::std::os::raw::c_long,
        bbusource: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tConvert a time value in ticks to the equivalent value in milliseconds, given the context of a specified itm object."]
    #[doc = "@ingroup\t\ttime"]
    #[doc = "@param\tx\t\tAn itm object."]
    #[doc = "@param\tticks\tA time specified in ticks."]
    #[doc = "@return\t\t\tThe time specified in ms."]
    pub fn itm_tickstoms(x: *mut t_itm, ticks: f64) -> f64;
}
extern "C" {
    #[doc = "\tConvert a time value in milliseconds to the equivalent value in ticks, given the context of a specified itm object."]
    #[doc = "@ingroup\t\ttime"]
    #[doc = "@param\tx\t\tAn itm object."]
    #[doc = "@param\tms\t\tA time specified in ms."]
    #[doc = "@return\t\t\tThe time specified in ticks."]
    pub fn itm_mstoticks(x: *mut t_itm, ms: f64) -> f64;
}
extern "C" {
    #[doc = "\tConvert a time value in milliseconds to the equivalent value in samples, given the context of a specified itm object."]
    #[doc = "@ingroup\t\ttime"]
    #[doc = "@param\tx\t\tAn itm object."]
    #[doc = "@param\tms\t\tA time specified in ms."]
    #[doc = "@return\t\t\tThe time specified in samples."]
    pub fn itm_mstosamps(x: *mut t_itm, ms: f64) -> f64;
}
extern "C" {
    #[doc = "\tConvert a time value in samples to the equivalent value in milliseconds, given the context of a specified itm object."]
    #[doc = "@ingroup\t\ttime"]
    #[doc = "@param\tx\t\tAn itm object."]
    #[doc = "@param\tsamps\tA time specified in samples."]
    #[doc = "@return\t\t\tThe time specified in ms."]
    pub fn itm_sampstoms(x: *mut t_itm, samps: f64) -> f64;
}
extern "C" {
    #[doc = "\tConvert a time value in bbu to the equivalent value in ticks, given the context of a specified itm object."]
    #[doc = "@ingroup\t\t\ttime"]
    #[doc = "@param\tx\t\t\tAn itm object."]
    #[doc = "@param\tbars\t\tThe measure number of the location/position."]
    #[doc = "@param\tbeats\t\tThe beat number of the location/position."]
    #[doc = "@param\tunits\t\tThe number of ticks past the beat of the location/position."]
    #[doc = "@param\tticks\t\tThe address of a variable to hold the number of ticks upon return."]
    #[doc = "@param\tposition\tSet this parameter to #TIME_FLAGS_LOCATION or to zero (for position mode)."]
    pub fn itm_barbeatunitstoticks(
        x: *mut t_itm,
        bars: ::std::os::raw::c_long,
        beats: ::std::os::raw::c_long,
        units: f64,
        ticks: *mut f64,
        position: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = "\tConvert a time value in bbu to the equivalent value in ticks, given the context of a specified itm object."]
    #[doc = "@ingroup\t\t\ttime"]
    #[doc = "@param\tx\t\t\tAn itm object."]
    #[doc = "@param\tticks\t\tThe number of ticks to translate into a time represented as bars, beats, and ticks."]
    #[doc = "@param\tbars\t\tThe address of a variable to hold the measure number of the location/position upon return."]
    #[doc = "@param\tbeats\t\tThe address of a variable to hold the beat number of the location/position upon return."]
    #[doc = "@param\tunits\t\tThe address of a variable to hold the number of ticks past the beat of the location/position upon return."]
    #[doc = "@param\tposition\tSet this parameter to #TIME_FLAGS_LOCATION or to zero (for position mode)."]
    pub fn itm_tickstobarbeatunits(
        x: *mut t_itm,
        ticks: f64,
        bars: *mut ::std::os::raw::c_long,
        beats: *mut ::std::os::raw::c_long,
        units: *mut f64,
        position: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn itm_format(
        x: *mut t_itm,
        ms: f64,
        ticks: f64,
        flags: ::std::os::raw::c_long,
        unit: *mut t_symbol,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    );
}
extern "C" {
    #[doc = "\tGiven the name of a time unit (e.g. 'ms', 'ticks', 'bbu', 'samples', etc.), determine whether the unit is fixed"]
    #[doc = "(doesn't change with tempo, time-signature, etc.) or whether it is flexible."]
    #[doc = "@ingroup\t\ttime"]
    #[doc = "@param\tu\t\tThe name of the time unit."]
    #[doc = "@return\t\t\tZero if the unit is fixed (milliseconds, for example) or non-zero if it is flexible (ticks, for example)."]
    pub fn itm_isunitfixed(u: *mut t_symbol) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn itmclock_delay(
        x: *mut t_itmclock,
        m: *mut t_itm,
        eventlist: *mut t_symbol,
        delay: f64,
        quantization: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn itmclock_new(
        owner: *mut t_object,
        timeobj: *mut t_object,
        task: method,
        killer: method,
        permanent: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn itmclock_set(x: *mut t_itmclock, m: *mut t_itm, eventlist: *mut t_symbol, time: f64);
}
extern "C" {
    pub fn itmclock_unset(x: *mut t_itmclock);
}
extern "C" {
    pub fn itm_clocksource_getnamed(
        name: *mut t_symbol,
        create: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn itm_getclocksources(
        count: *mut ::std::os::raw::c_long,
        sources: *mut *mut *mut t_symbol,
    );
}
extern "C" {
    pub fn itm_getsr(x: *mut t_itm) -> f64;
}
extern "C" {
    pub fn itm_gettempo(x: *mut t_itm) -> f64;
}
extern "C" {
    #[doc = " return the max path for a named package's folder"]
    #[doc = ""]
    #[doc = "@ingroup\tpackages"]
    #[doc = "@param\t\tpackagename\t\tthe name of the package"]
    #[doc = "@return\t\t\t\t\t\tthe max path id for the package's folder"]
    pub fn packages_getpackagepath(
        packagename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    #[doc = " return linklist of max path ids for a given subpath of a package"]
    #[doc = ""]
    #[doc = "@ingroup\tpackages"]
    #[doc = "@param\t\tsubfoldername\t\tthe name of the folder (e.g. templates, prototypes, extensions, etc)"]
    #[doc = "@param\t\tincludesysfolder\t1 if you want it to include the default max copy (e.g. stuff in the C74 folder),"]
    #[doc = "a negative number will use the specified folder as the system folder"]
    #[doc = "0 will ignore the default location"]
    #[doc = "@return\t\t\t\t\t\t\tlinklist of max path ids -- you are responsible for freeing this linklist."]
    pub fn packages_createsubpathlist(
        subfoldername: *const ::std::os::raw::c_char,
        includesysfolder: ::std::os::raw::c_short,
    ) -> *mut t_linklist;
}
extern "C" {
    #[doc = "\treturn a linklist of max path ids for a given subpath of a package"]
    #[doc = "and optionally a dictionary with all of the files contained therein."]
    #[doc = ""]
    #[doc = "@ingroup\tpackages"]
    #[doc = "@param\t\tsubfoldername\t\t\tthe name of the folder (e.g. templates, prototypes, extensions, etc)"]
    #[doc = "@param\t\tsuffix_selector\t\t\ta file suffix used to filter only the specified files in the path (e.g., \".maxpat\")"]
    #[doc = "@param\t\tincludesysfolder\t\t1 if you want it to include the default max copy (e.g. stuff in the C74 folder),"]
    #[doc = "a negative number will use the specified folder as the system folder"]
    #[doc = "0 will ignore the default location"]
    #[doc = "@param\t\tsubpathlist\t\t\t\tif not NULL, a linklist is alloc'd and returned here with all of the max path ids"]
    #[doc = "@param\t\tnames_to_packagefiles\tif not NULL, a dictionary is alloc'd and returned, keys are the names (suffix stripped) and the values are t_package_file instances"]
    #[doc = "the linklist in the dictionary will have its keys sorted alphabetically"]
    #[doc = "@return\t\t\t\t\t\t\t\tthe usual max error code"]
    pub fn packages_getsubpathcontents(
        subfoldername: *const ::std::os::raw::c_char,
        suffix_selector: *const ::std::os::raw::c_char,
        includesysfolder: ::std::os::raw::c_short,
        subpathlist: *mut *mut t_linklist,
        names_to_packagefiles: *mut *mut t_dictionary,
    ) -> t_max_err;
}
pub mod PARAM_TYPE {
    pub type Type = ::std::os::raw::c_int;
    pub const PARAM_TYPE_INVALID: Type = -1;
    pub const PARAM_TYPE_FLOAT: Type = 0;
    pub const PARAM_TYPE_INT: Type = 1;
    pub const PARAM_TYPE_ENUM: Type = 2;
    #[doc = ""]
    pub const PARAM_TYPE_BLOB: Type = 3;
    #[doc = ""]
    pub const PARAM_TYPE_FILE: Type = 4;
}
pub mod PARAM_FLAGS {
    pub type Type = ::std::os::raw::c_uint;
    pub const PARAM_FLAGS_NONE: Type = 0;
    pub const PARAM_FLAGS_FORCE_TYPE: Type = 1;
}
pub mod PARAM_TYPE_ENABLE {
    pub type Type = ::std::os::raw::c_uint;
    pub const PARAM_TYPE_ENABLE_OFF: Type = 0;
    pub const PARAM_TYPE_ENABLE_ON: Type = 1;
    pub const PARAM_TYPE_ENABLE_BLOB: Type = 2;
    pub const PARAM_TYPE_ENABLE_BLOB_ONLY: Type = 3;
}
pub mod PARAM_UNITSTYLE {
    pub type Type = ::std::os::raw::c_int;
    pub const PARAM_UNITSTYLE_INVALID: Type = -1;
    pub const PARAM_UNITSTYLE_INT: Type = 0;
    pub const PARAM_UNITSTYLE_FLOAT: Type = 1;
    pub const PARAM_UNITSTYLE_MS: Type = 2;
    pub const PARAM_UNITSTYLE_HZ: Type = 3;
    pub const PARAM_UNITSTYLE_DB: Type = 4;
    pub const PARAM_UNITSTYLE_PERCENT: Type = 5;
    pub const PARAM_UNITSTYLE_PAN: Type = 6;
    pub const PARAM_UNITSTYLE_SEMITONE: Type = 7;
    pub const PARAM_UNITSTYLE_MIDINOTE: Type = 8;
    pub const PARAM_UNITSTYLE_CUSTOM: Type = 9;
    pub const PARAM_UNITSTYLE_NATIVE: Type = 10;
}
pub mod PARAM_MOD {
    pub type Type = ::std::os::raw::c_int;
    pub const PARAM_MOD_INVALID: Type = -1;
    pub const PARAM_MOD_NONE: Type = 0;
    pub const PARAM_MOD_UNI: Type = 1;
    pub const PARAM_MOD_BI: Type = 2;
    pub const PARAM_MOD_ADD: Type = 3;
    pub const PARAM_MOD_ABS: Type = 4;
}
pub mod PARAM_DATA_TYPE {
    pub type Type = ::std::os::raw::c_int;
    pub const PARAM_DATA_TYPE_INVALID: Type = -1;
    pub const PARAM_DATA_TYPE_VALUE: Type = 0;
    pub const PARAM_DATA_TYPE_TYPE: Type = 1;
    pub const PARAM_DATA_TYPE_TYPE_ENABLE: Type = 2;
    pub const PARAM_DATA_TYPE_ORDER: Type = 3;
    pub const PARAM_DATA_TYPE_LONGNAME: Type = 4;
    pub const PARAM_DATA_TYPE_SHORTNAME: Type = 5;
    pub const PARAM_DATA_TYPE_MIN: Type = 6;
    pub const PARAM_DATA_TYPE_MAX: Type = 7;
    pub const PARAM_DATA_TYPE_ENUM: Type = 8;
    pub const PARAM_DATA_TYPE_MODMODE: Type = 9;
    pub const PARAM_DATA_TYPE_MODMIN: Type = 10;
    pub const PARAM_DATA_TYPE_MODMAX: Type = 11;
    pub const PARAM_DATA_TYPE_INITIAL_ENABLE: Type = 12;
    pub const PARAM_DATA_TYPE_INITIAL: Type = 13;
    pub const PARAM_DATA_TYPE_INITIAL_EDITABLE: Type = 14;
    pub const PARAM_DATA_TYPE_UNITSTYLE: Type = 15;
    pub const PARAM_DATA_TYPE_EXPONENT: Type = 16;
    pub const PARAM_DATA_TYPE_STEPS: Type = 17;
    pub const PARAM_DATA_TYPE_SPEEDLIM: Type = 18;
    pub const PARAM_DATA_TYPE_SMOOTHING: Type = 19;
    pub const PARAM_DATA_TYPE_UNITS: Type = 20;
    pub const PARAM_DATA_TYPE_INFO: Type = 21;
    pub const PARAM_DATA_TYPE_FOCUS: Type = 22;
    pub const PARAM_DATA_TYPE_INVISIBLE: Type = 23;
    pub const PARAM_DATA_TYPE_AUTOMATION_VALUE: Type = 24;
    pub const PARAM_DATA_TYPE_AUTOMATION_STATE: Type = 25;
    pub const PARAM_DATA_TYPE_MODULATION_VALUE: Type = 26;
    pub const PARAM_DATA_TYPE_DIRTY: Type = 27;
    pub const PARAM_DATA_TYPE_ASSIGNMENT_TEXT_MIDI: Type = 28;
    pub const PARAM_DATA_TYPE_ASSIGNMENT_TEXT_KEY: Type = 29;
    pub const PARAM_DATA_TYPE_ASSIGNMENT_TEXT_MACRO: Type = 30;
    pub const PARAM_DATA_TYPE_LEARNING_MODE: Type = 31;
    pub const PARAM_DATA_TYPE_FILEREF_PATH: Type = 32;
    pub const PARAM_DATA_TYPE_FILEREF_DISPLAYPATH: Type = 33;
    pub const PARAM_DATA_TYPE_FILEREF_DISPLAYNAME: Type = 34;
    pub const PARAM_DATA_TYPE_DEVICESTATE: Type = 35;
    pub const PARAM_DATA_TYPE_DEFER: Type = 36;
    pub const PARAM_DATA_TYPE_MAPPING_INDEX: Type = 37;
    pub const PARAM_DATA_TYPE_NOBLOBCACHE: Type = 38;
    pub const PARAM_DATA_TYPE_RANGE: Type = 39;
    pub const PARAM_DATA_TYPE_REALVAL: Type = 40;
    pub const PARAM_DATA_TYPE_DISTANCEVAL: Type = 41;
    pub const PARAM_DATA_TYPE_LINEARVAL: Type = 42;
}
pub mod PARAM_VALUE_SET_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const PARAM_VALUE_SET_DISTANCE: Type = 0;
    pub const PARAM_VALUE_SET_REAL: Type = 1;
    pub const PARAM_VALUE_SET_GETONLY: Type = 2;
    pub const PARAM_VALUE_SET_DISTANCE_NONOTIFY: Type = 3;
    pub const PARAM_VALUE_SET_REAL_NONOTIFY: Type = 4;
}
pub mod PARAM_VALUE_GET_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const PARAM_VALUE_GET_OUTPUT: Type = 0;
    pub const PARAM_VALUE_GET_AUTOMATION: Type = 1;
    pub const PARAM_VALUE_GET_MODULATION: Type = 2;
}
pub mod PARAM_VALUE_FORMAT {
    pub type Type = ::std::os::raw::c_uint;
    pub const PARAM_VALUE_DISTANCE: Type = 0;
    pub const PARAM_VALUE_LINEAR: Type = 1;
    pub const PARAM_VALUE_REAL: Type = 2;
}
pub mod PARAM_AUTOMATION_STATE {
    pub type Type = ::std::os::raw::c_uint;
    pub const PARAM_AUTOMATION_STATE_NONE: Type = 0;
    pub const PARAM_AUTOMATION_STATE_AUTOMATED: Type = 1;
    pub const PARAM_AUTOMATION_STATE_AUTOENABLED: Type = 2;
    pub const PARAM_AUTOMATION_STATE_IRRELEVANT: Type = 4;
    pub const PARAM_AUTOMATION_STATE_DISABLED: Type = 8;
    pub const PARAM_AUTOMATION_STATE_MACRO: Type = 16;
}
pub mod PARAM_DEVICESTATE {
    pub type Type = ::std::os::raw::c_uint;
    pub const PARAM_DEVICESTATE_ACTIVE: Type = 0;
    pub const PARAM_DEVICESTATE_INACTIVE: Type = 1;
}
pub mod PARAM_LEARNING_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const PARAM_LEARNING_TYPE_NONE: Type = 0;
    pub const PARAM_LEARNING_TYPE_MIDI: Type = 1;
    pub const PARAM_LEARNING_TYPE_KEY: Type = 2;
    pub const PARAM_LEARNING_TYPE_MACRO: Type = 3;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _parameter_notify_data {
    pub type_: PARAM_DATA_TYPE::Type,
    pub ac: ::std::os::raw::c_long,
    pub av: *mut t_atom,
}
#[test]
fn bindgen_test_layout__parameter_notify_data() {
    assert_eq!(
        ::std::mem::size_of::<_parameter_notify_data>(),
        24usize,
        concat!("Size of: ", stringify!(_parameter_notify_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_parameter_notify_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_parameter_notify_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_parameter_notify_data>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_notify_data),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_parameter_notify_data>())).ac as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_notify_data),
            "::",
            stringify!(ac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_parameter_notify_data>())).av as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_notify_data),
            "::",
            stringify!(av)
        )
    );
}
pub type t_parameter_notify_data = _parameter_notify_data;
extern "C" {
    pub fn class_parameter_init(c: *mut t_class) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_init(x: *mut t_object, type_: PARAM_TYPE::Type) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_init_flags(
        x: *mut t_object,
        type_: PARAM_TYPE::Type,
        flags: PARAM_FLAGS::Type,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_dictionary_process(x: *mut t_object, d: *mut t_dictionary)
        -> t_max_err;
}
extern "C" {
    pub fn object_parameter_free(x: *mut t_object) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_notify(
        x: *mut t_object,
        s: *mut t_symbol,
        msg: *mut t_symbol,
        sender: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
        pnd: *mut t_parameter_notify_data,
    ) -> t_bool;
}
extern "C" {
    pub fn object_parameter_getinfo(
        x: *mut t_object,
        type_: PARAM_DATA_TYPE::Type,
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_setinfo(
        x: *mut t_object,
        type_: PARAM_DATA_TYPE::Type,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_string_get(
        x: *mut t_object,
        val: f64,
        outstr: *mut *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_stringtovalue(
        x: *mut t_object,
        value: *mut f64,
        str_: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_value_set(
        x: *mut t_object,
        how: PARAM_VALUE_SET_TYPE::Type,
        linear: *mut f64,
        real: *mut f64,
        blobnotify: ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_value_get(
        x: *mut t_object,
        how: PARAM_VALUE_GET_TYPE::Type,
        what: PARAM_VALUE_FORMAT::Type,
        value: *mut f64,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_current_to_initial(x: *mut t_object) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_color_get(
        x: *mut t_object,
        s: *mut t_symbol,
        jrgba: *mut t_jrgba,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_value_setvalueof(
        x: *mut t_object,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        blobnotify: ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_value_setvalueof_nonotify(
        x: *mut t_object,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        blobnotify: ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_value_getvalueof(
        x: *mut t_object,
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_value_changed(
        x: *mut t_object,
        blobnotify: ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_value_changed_nonotify(
        x: *mut t_object,
        blobnotify: ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_parameter_addmethod(
        c: *mut t_class,
        m: method,
        name: *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_long,
        ...
    ) -> t_max_err;
}
extern "C" {
    pub fn parameter_default_int(x: *mut t_object, n: ::std::os::raw::c_long) -> t_max_err;
}
extern "C" {
    pub fn parameter_default_float(x: *mut t_object, d: f64) -> t_max_err;
}
extern "C" {
    pub fn parameter_default_anything(
        x: *mut t_object,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_parameter_register_default_color(
        c: *mut t_class,
        attrname: *mut t_symbol,
        colorname: *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_parameter_register_default_color_flags(
        c: *mut t_class,
        attrname: *mut t_symbol,
        colorname: *mut t_symbol,
        flags: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_is_initialized(x: *mut t_object) -> t_bool;
}
extern "C" {
    pub fn object_parameter_is_in_Live(x: *mut t_object) -> t_bool;
}
extern "C" {
    pub fn object_parameter_is_in_maxtilde(x: *mut t_object) -> t_bool;
}
extern "C" {
    pub fn object_parameter_is_automated(x: *mut t_object) -> t_bool;
}
extern "C" {
    pub fn object_parameter_wants_focus(x: *mut t_object) -> t_max_err;
}
extern "C" {
    pub fn object_parameter_is_parameter(x: *mut t_object) -> t_bool;
}
extern "C" {
    pub fn object_parameter_get_order(x: *mut t_object) -> t_atom_long;
}
pub mod PARAMETER_ENABLE_SAVESTATE {
    pub type Type = ::std::os::raw::c_int;
    pub const PARAMETER_ENABLE_SAVESTATE_UNSAVED: Type = -1;
    pub const PARAMETER_ENABLE_SAVESTATE_OFF: Type = 0;
    pub const PARAMETER_ENABLE_SAVESTATE_ON: Type = 1;
}
extern "C" {
    pub fn object_parameter_getenable_savestate(
        x: *mut t_object,
    ) -> PARAMETER_ENABLE_SAVESTATE::Type;
}
pub type t_hasminmax_getmethod =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> t_bool>;
pub type t_hasminmax_setmethod = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: t_bool) -> t_max_err,
>;
pub type t_minmax_getmethod = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut f64,
        arg3: *mut f64,
    ) -> t_max_err,
>;
pub type t_minmax_setmethod = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: f64, arg3: f64) -> t_max_err,
>;
pub type t_enum_getmethod = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut *mut t_atom,
    ) -> t_max_err,
>;
pub type t_enum_setmethod = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_long,
        arg3: *mut t_atom,
    ) -> t_max_err,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _parameter_mappable_override_minmax {
    pub minimum: *mut t_symbol,
    pub maximum: *mut t_symbol,
    pub readonly: t_bool,
}
#[test]
fn bindgen_test_layout__parameter_mappable_override_minmax() {
    assert_eq!(
        ::std::mem::size_of::<_parameter_mappable_override_minmax>(),
        24usize,
        concat!("Size of: ", stringify!(_parameter_mappable_override_minmax))
    );
    assert_eq!(
        ::std::mem::align_of::<_parameter_mappable_override_minmax>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_parameter_mappable_override_minmax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_override_minmax>())).minimum as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_override_minmax),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_override_minmax>())).maximum as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_override_minmax),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_override_minmax>())).readonly as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_override_minmax),
            "::",
            stringify!(readonly)
        )
    );
}
pub type t_parameter_mappable_override_minmax = _parameter_mappable_override_minmax;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _parameter_mappable_override_size {
    pub size: *mut t_symbol,
    pub readonly: t_bool,
}
#[test]
fn bindgen_test_layout__parameter_mappable_override_size() {
    assert_eq!(
        ::std::mem::size_of::<_parameter_mappable_override_size>(),
        16usize,
        concat!("Size of: ", stringify!(_parameter_mappable_override_size))
    );
    assert_eq!(
        ::std::mem::align_of::<_parameter_mappable_override_size>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_parameter_mappable_override_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_override_size>())).size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_override_size),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_override_size>())).readonly as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_override_size),
            "::",
            stringify!(readonly)
        )
    );
}
pub type t_parameter_mappable_override_size = _parameter_mappable_override_size;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _parameter_mappable_override_obj {
    pub getmethod: t_minmax_getmethod,
    pub setmethod: t_minmax_setmethod,
    pub watchattr: *mut t_symbol,
}
#[test]
fn bindgen_test_layout__parameter_mappable_override_obj() {
    assert_eq!(
        ::std::mem::size_of::<_parameter_mappable_override_obj>(),
        24usize,
        concat!("Size of: ", stringify!(_parameter_mappable_override_obj))
    );
    assert_eq!(
        ::std::mem::align_of::<_parameter_mappable_override_obj>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_parameter_mappable_override_obj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_override_obj>())).getmethod as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_override_obj),
            "::",
            stringify!(getmethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_override_obj>())).setmethod as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_override_obj),
            "::",
            stringify!(setmethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_override_obj>())).watchattr as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_override_obj),
            "::",
            stringify!(watchattr)
        )
    );
}
pub type t_parameter_mappable_override_obj = _parameter_mappable_override_obj;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _parameter_mappable_override {
    pub minmax: t_parameter_mappable_override_minmax,
    pub size: t_parameter_mappable_override_size,
    pub obj: t_parameter_mappable_override_obj,
    _bindgen_union_align: [u64; 3usize],
}
#[test]
fn bindgen_test_layout__parameter_mappable_override() {
    assert_eq!(
        ::std::mem::size_of::<_parameter_mappable_override>(),
        24usize,
        concat!("Size of: ", stringify!(_parameter_mappable_override))
    );
    assert_eq!(
        ::std::mem::align_of::<_parameter_mappable_override>(),
        8usize,
        concat!("Alignment of ", stringify!(_parameter_mappable_override))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_override>())).minmax as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_override),
            "::",
            stringify!(minmax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_override>())).size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_override),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_override>())).obj as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_override),
            "::",
            stringify!(obj)
        )
    );
}
pub type t_parameter_mappable_override = _parameter_mappable_override;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _parameter_mappable_hasminmax {
    pub getmethod: t_hasminmax_getmethod,
    pub setmethod: t_hasminmax_setmethod,
}
#[test]
fn bindgen_test_layout__parameter_mappable_hasminmax() {
    assert_eq!(
        ::std::mem::size_of::<_parameter_mappable_hasminmax>(),
        16usize,
        concat!("Size of: ", stringify!(_parameter_mappable_hasminmax))
    );
    assert_eq!(
        ::std::mem::align_of::<_parameter_mappable_hasminmax>(),
        8usize,
        concat!("Alignment of ", stringify!(_parameter_mappable_hasminmax))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_hasminmax>())).getmethod as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_hasminmax),
            "::",
            stringify!(getmethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_hasminmax>())).setmethod as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_hasminmax),
            "::",
            stringify!(setmethod)
        )
    );
}
pub type t_parameter_mappable_hasminmax = _parameter_mappable_hasminmax;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _parameter_mappable_enum {
    pub getmethod: t_enum_getmethod,
    pub setmethod: t_enum_setmethod,
}
#[test]
fn bindgen_test_layout__parameter_mappable_enum() {
    assert_eq!(
        ::std::mem::size_of::<_parameter_mappable_enum>(),
        16usize,
        concat!("Size of: ", stringify!(_parameter_mappable_enum))
    );
    assert_eq!(
        ::std::mem::align_of::<_parameter_mappable_enum>(),
        8usize,
        concat!("Alignment of ", stringify!(_parameter_mappable_enum))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_enum>())).getmethod as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_enum),
            "::",
            stringify!(getmethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_enum>())).setmethod as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_enum),
            "::",
            stringify!(setmethod)
        )
    );
}
pub type t_parameter_mappable_enum = _parameter_mappable_enum;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _parameter_mappable_config {
    pub flags: ::std::os::raw::c_long,
    pub override_type: ::std::os::raw::c_long,
    pub override_value: t_parameter_mappable_override,
    pub hasminmax: t_parameter_mappable_hasminmax,
    pub enuminfo: t_parameter_mappable_enum,
}
#[test]
fn bindgen_test_layout__parameter_mappable_config() {
    assert_eq!(
        ::std::mem::size_of::<_parameter_mappable_config>(),
        72usize,
        concat!("Size of: ", stringify!(_parameter_mappable_config))
    );
    assert_eq!(
        ::std::mem::align_of::<_parameter_mappable_config>(),
        8usize,
        concat!("Alignment of ", stringify!(_parameter_mappable_config))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_config>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_config),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_config>())).override_type as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_config),
            "::",
            stringify!(override_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_config>())).override_value as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_config),
            "::",
            stringify!(override_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_config>())).hasminmax as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_config),
            "::",
            stringify!(hasminmax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_parameter_mappable_config>())).enuminfo as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_parameter_mappable_config),
            "::",
            stringify!(enuminfo)
        )
    );
}
pub type t_parameter_mappable_config = _parameter_mappable_config;
extern "C" {
    pub fn object_parameter_hasminmax_false(x: *mut ::std::os::raw::c_void) -> t_bool;
}
extern "C" {
    pub fn object_parameter_hasminmax_true(x: *mut ::std::os::raw::c_void) -> t_bool;
}
extern "C" {
    pub fn class_parameter_mappable(c: *mut t_class, config: *mut t_parameter_mappable_config);
}
extern "C" {
    pub fn class_parameter_setinfo(
        c: *mut t_class,
        type_: PARAM_DATA_TYPE::Type,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn class_parameter_getinfo(
        c: *mut t_class,
        type_: PARAM_DATA_TYPE::Type,
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn preferences_getatomforkey(key: *mut t_symbol, value: *mut t_atom) -> t_max_err;
}
extern "C" {
    pub fn preferences_getsym(name: *const ::std::os::raw::c_char) -> *mut t_symbol;
}
extern "C" {
    pub fn preferences_setsym(name: *const ::std::os::raw::c_char, value: *mut t_symbol);
}
extern "C" {
    pub fn preferences_getlong(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn preferences_setlong(name: *const ::std::os::raw::c_char, value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn preferences_getchar(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn preferences_setchar(name: *const ::std::os::raw::c_char, value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn preferences_getatoms(
        name: *const ::std::os::raw::c_char,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn preferences_setatoms(
        name: *const ::std::os::raw::c_char,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn preferences_define(
        name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        label: *const ::std::os::raw::c_char,
        style: *const ::std::os::raw::c_char,
        category: *const ::std::os::raw::c_char,
        attrflags: ::std::os::raw::c_long,
        get: method,
        set: method,
        flags: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn preferences_class_define(
        c: *mut t_class,
        name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        label: *const ::std::os::raw::c_char,
        style: *const ::std::os::raw::c_char,
        category: *const ::std::os::raw::c_char,
        attrflags: ::std::os::raw::c_long,
        get: method,
        set: method,
        flags: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn preferences_defineoption(
        name: *const ::std::os::raw::c_char,
        label: *const ::std::os::raw::c_char,
        category: *const ::std::os::raw::c_char,
        ptr: *mut ::std::os::raw::c_char,
        notify: method,
        flags: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn preferences_class_defineoption(
        c: *mut t_class,
        name: *const ::std::os::raw::c_char,
        label: *const ::std::os::raw::c_char,
        category: *const ::std::os::raw::c_char,
        ptr: *mut ::std::os::raw::c_char,
        notify: method,
        flags: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn preferences_writedictionary(
        d: *const t_dictionary,
        filename: *const ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn preferences_readdictionary(
        filename: *const ::std::os::raw::c_char,
        d: *mut *mut t_dictionary,
    ) -> t_max_err;
}
extern "C" {
    pub fn simpleprefs_dictionary() -> *mut t_dictionary;
}
#[doc = " The quickmap object. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup quickmap"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _quickmap {
    pub m_obj: t_object,
    pub m_p1key: *mut t_hashtab,
    pub m_p2key: *mut t_hashtab,
}
#[test]
fn bindgen_test_layout__quickmap() {
    assert_eq!(
        ::std::mem::size_of::<_quickmap>(),
        48usize,
        concat!("Size of: ", stringify!(_quickmap))
    );
    assert_eq!(
        ::std::mem::align_of::<_quickmap>(),
        8usize,
        concat!("Alignment of ", stringify!(_quickmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quickmap>())).m_obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_quickmap),
            "::",
            stringify!(m_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quickmap>())).m_p1key as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_quickmap),
            "::",
            stringify!(m_p1key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quickmap>())).m_p2key as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_quickmap),
            "::",
            stringify!(m_p2key)
        )
    );
}
#[doc = " The quickmap object. This struct is provided for debugging convenience,"]
#[doc = "but should be considered opaque and is subject to change without notice."]
#[doc = ""]
#[doc = "@ingroup quickmap"]
pub type t_quickmap = _quickmap;
extern "C" {
    #[doc = "Create a new quickmap object."]
    #[doc = ""]
    #[doc = "@ingroup\tquickmap"]
    #[doc = "@return\t\tPointer to the new quickmap object."]
    pub fn quickmap_new() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Add a pair of keys mapped to each other to the quickmap."]
    #[doc = "Note that these are considered to be a #t_symbol internally."]
    #[doc = "This means that if you are mapping a #t_symbol to a #t_object, for example, the #t_object will not automatically be"]
    #[doc = "freed when you free the quickmap (unlike what happens when you typically free a #t_hashtab)."]
    #[doc = ""]
    #[doc = "@ingroup\tquickmap"]
    #[doc = ""]
    #[doc = "@param\tx\tThe quickmap instance."]
    #[doc = "@param\tp1\tThe (first) key."]
    #[doc = "@param\tp2\tThe value (or the second key)."]
    #[doc = "@return\t\tA Max error code."]
    pub fn quickmap_add(
        x: *mut t_quickmap,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = "Drop a pair of keys mapped to each other in the quickmap."]
    #[doc = ""]
    #[doc = "@ingroup\tquickmap"]
    #[doc = ""]
    #[doc = "@param\tx\tThe quickmap instance."]
    #[doc = "@param\tp1\tThe first key."]
    #[doc = "@param\tp2\tThe second key."]
    #[doc = "@return\t\tA Max error code."]
    pub fn quickmap_drop(
        x: *mut t_quickmap,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = "Given a (first) key, lookup the value (the second key)."]
    #[doc = ""]
    #[doc = "@ingroup\tquickmap"]
    #[doc = ""]
    #[doc = "@param\tx\tThe quickmap instance."]
    #[doc = "@param\tp1\tThe (first) key."]
    #[doc = "@param\tp2\tThe address of a pointer which will hold the resulting key upon return."]
    #[doc = "@return\t\tA Max error code."]
    pub fn quickmap_lookup_key1(
        x: *mut t_quickmap,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Given a (second) key, lookup the value (the first key)."]
    #[doc = ""]
    #[doc = "@ingroup\tquickmap"]
    #[doc = ""]
    #[doc = "@param\tx\tThe quickmap instance."]
    #[doc = "@param\tp1\tThe (second) key."]
    #[doc = "@param\tp2\tThe address of a pointer which will hold the resulting key upon return."]
    #[doc = "@return\t\tA Max error code."]
    pub fn quickmap_lookup_key2(
        x: *mut t_quickmap,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Set the readonly flag of the quickmap's hash tables."]
    #[doc = "See hashtab_readonly() for more information about this."]
    #[doc = ""]
    #[doc = "@ingroup\tquickmap"]
    #[doc = ""]
    #[doc = "@param\tx\tThe quickmap instance."]
    #[doc = "@param\tway\tSet to true to make the quickmap readonly (disable thread protection)"]
    #[doc = "or false (the default) to enable thread protection."]
    pub fn quickmap_readonly(x: *mut t_quickmap, way: ::std::os::raw::c_long);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _sndfileinfo {
    pub sr: t_int32,
    pub length: t_ptr_size,
    pub sampsize: t_ptr_size,
    pub filetype: t_fourcc,
    pub comptype: t_uint32,
    pub format: t_uint32,
    pub name: [::std::os::raw::c_char; 128usize],
    pub byteswap: t_int32,
    pub nchans: t_int32,
    pub frames: t_ptr_size,
    pub inst: *mut ::std::os::raw::c_void,
    pub markers: *mut ::std::os::raw::c_void,
    pub framesize: t_ptr_size,
    pub offset: t_ptr_size,
}
#[test]
fn bindgen_test_layout__sndfileinfo() {
    assert_eq!(
        ::std::mem::size_of::<_sndfileinfo>(),
        216usize,
        concat!("Size of: ", stringify!(_sndfileinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_sndfileinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_sndfileinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).sr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).sampsize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(sampsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).filetype as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(filetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).comptype as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(comptype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).format as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).name as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).byteswap as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(byteswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).nchans as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(nchans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).frames as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).inst as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(inst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).markers as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).framesize as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(framesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sndfileinfo>())).offset as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_sndfileinfo),
            "::",
            stringify!(offset)
        )
    );
}
pub type t_sndfileinfo = _sndfileinfo;
extern "C" {
    pub fn sndfile_info(
        filename: *mut ::std::os::raw::c_char,
        vol: ::std::os::raw::c_short,
        type_: t_fourcc,
        info: *mut t_sndfileinfo,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn sndfile_writeheader(
        fh: t_filehandle,
        type_: t_fourcc,
        size: ::std::os::raw::c_long,
        nchans: ::std::os::raw::c_long,
        ssize: ::std::os::raw::c_long,
        srate: ::std::os::raw::c_long,
        samptype: t_fourcc,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = " The symobject data structure."]
    #[doc = ""]
    #[doc = "@ingroup\t\tsymobject"]
    #[doc = "@param\tsym\t\tA symbol with which to initialize the new symobject."]
    #[doc = "@return\t\t\tPointer to the new symobject instance."]
    pub fn symobject_new(sym: *mut t_symbol) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Utility for searching a linklist containing symobjects."]
    #[doc = ""]
    #[doc = "@ingroup\t\tsymobject"]
    #[doc = "@param\ta\t\t(opaque)"]
    #[doc = "@param\tb\t\t(opaque)"]
    #[doc = "@return\t\t\tReturns true if a match is found, otherwise returns false."]
    #[doc = ""]
    #[doc = "@remark\t\t\tThe following example shows one common use of the this method."]
    #[doc = "@code"]
    #[doc = "t_symobject\t*item = NULL;"]
    #[doc = "long\t\tindex;"]
    #[doc = "t_symbol\t*textsym;"]
    #[doc = ""]
    #[doc = "textsym = gensym(\"something to look for\");"]
    #[doc = ""]
    #[doc = "index = linklist_findfirst(s_ll_history, (void **)&item, symobject_linklist_match, textsym);"]
    #[doc = "if(index == -1){"]
    #[doc = "}"]
    #[doc = "else{"]
    #[doc = "do something with the symobject, or with the index of the symbobject in the linklist"]
    #[doc = "}"]
    #[doc = "@endcode"]
    pub fn symobject_linklist_match(
        a: *mut ::std::os::raw::c_void,
        b: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct midistate {
    pub midicmd: ::std::os::raw::c_long,
    pub chan: ::std::os::raw::c_long,
    pub sysex: ::std::os::raw::c_long,
    pub argc: ::std::os::raw::c_long,
    pub data: *mut t_uint8,
}
#[test]
fn bindgen_test_layout_midistate() {
    assert_eq!(
        ::std::mem::size_of::<midistate>(),
        40usize,
        concat!("Size of: ", stringify!(midistate))
    );
    assert_eq!(
        ::std::mem::align_of::<midistate>(),
        8usize,
        concat!("Alignment of ", stringify!(midistate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<midistate>())).midicmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(midistate),
            "::",
            stringify!(midicmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<midistate>())).chan as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(midistate),
            "::",
            stringify!(chan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<midistate>())).sysex as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(midistate),
            "::",
            stringify!(sysex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<midistate>())).argc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(midistate),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<midistate>())).data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(midistate),
            "::",
            stringify!(data)
        )
    );
}
pub type t_midistate = midistate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _midiportinfo {
    pub p_name: *mut t_symbol,
    pub p_driver: *mut _sysmididriver,
    pub p_refnum: ::std::os::raw::c_long,
    pub p_id: ::std::os::raw::c_long,
    pub p_abbrev: ::std::os::raw::c_short,
    pub p_chanoffset: ::std::os::raw::c_short,
    pub p_enabled: ::std::os::raw::c_char,
    pub p_dynamic: ::std::os::raw::c_char,
    pub p_permanent: ::std::os::raw::c_char,
    pub p_delete: ::std::os::raw::c_char,
    pub p_data1: *mut ::std::os::raw::c_void,
    pub p_data2: ::std::os::raw::c_long,
    pub p_wait: *mut ::std::os::raw::c_void,
    pub p_state: t_midistate,
    pub p_mappingenabled: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__midiportinfo() {
    assert_eq!(
        ::std::mem::size_of::<_midiportinfo>(),
        112usize,
        concat!("Size of: ", stringify!(_midiportinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_midiportinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_midiportinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_driver as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_driver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_refnum as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_refnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_abbrev as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_abbrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_chanoffset as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_chanoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_enabled as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_dynamic as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_dynamic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_permanent as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_permanent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_delete as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_delete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_data1 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_data2 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_data2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_wait as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_wait)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_state as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_midiportinfo>())).p_mappingenabled as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_midiportinfo),
            "::",
            stringify!(p_mappingenabled)
        )
    );
}
pub type t_midiportinfo = _midiportinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sysmididriver {
    pub d_ob: t_object,
    pub d_name: *mut t_symbol,
    pub d_available: ::std::os::raw::c_char,
    pub d_hastimer: ::std::os::raw::c_char,
    pub d_sendmethod: method,
    pub d_bytesreceivedmethod: method,
}
#[test]
fn bindgen_test_layout__sysmididriver() {
    assert_eq!(
        ::std::mem::size_of::<_sysmididriver>(),
        64usize,
        concat!("Size of: ", stringify!(_sysmididriver))
    );
    assert_eq!(
        ::std::mem::align_of::<_sysmididriver>(),
        8usize,
        concat!("Alignment of ", stringify!(_sysmididriver))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysmididriver>())).d_ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysmididriver),
            "::",
            stringify!(d_ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysmididriver>())).d_name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysmididriver),
            "::",
            stringify!(d_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysmididriver>())).d_available as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysmididriver),
            "::",
            stringify!(d_available)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysmididriver>())).d_hastimer as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysmididriver),
            "::",
            stringify!(d_hastimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysmididriver>())).d_sendmethod as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysmididriver),
            "::",
            stringify!(d_sendmethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sysmididriver>())).d_bytesreceivedmethod as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysmididriver),
            "::",
            stringify!(d_bytesreceivedmethod)
        )
    );
}
pub type t_sysmididriver = _sysmididriver;
extern "C" {
    pub fn sysmidi_enqbigpacket(
        port: *mut t_midiportinfo,
        data: *mut t_uint8,
        ts: f64,
        len: ::std::os::raw::c_long,
        contFlags: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn sysmidi_numinports() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysmidi_numoutports() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysmidi_indextoname(
        index: ::std::os::raw::c_long,
        io: ::std::os::raw::c_long,
    ) -> *mut t_symbol;
}
extern "C" {
    pub fn sysmidi_iterate(
        meth: method,
        arg: *mut ::std::os::raw::c_void,
        io: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn sysmidi_createport(
        id: ::std::os::raw::c_long,
        refnum: ::std::os::raw::c_long,
        name: *mut t_symbol,
        dx: *mut t_sysmididriver,
        io: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
    ) -> *mut t_midiportinfo;
}
extern "C" {
    pub fn sysmidi_deletemarked(io: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sysmidi_idtoport(
        id: ::std::os::raw::c_long,
        io: ::std::os::raw::c_long,
    ) -> *mut t_midiportinfo;
}
extern "C" {
    pub fn sysmidi_uniqueid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysmidi_data1toport(
        data: *mut ::std::os::raw::c_void,
        io: ::std::os::raw::c_long,
    ) -> *mut t_midiportinfo;
}
extern "C" {
    pub fn sysmidi_nametoport(
        name: *mut t_symbol,
        io: ::std::os::raw::c_long,
    ) -> *mut t_midiportinfo;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sysparallel_task {
    pub ob: t_object,
    pub obex: *mut ::std::os::raw::c_void,
    pub data: *mut ::std::os::raw::c_void,
    pub workerproc: method,
    pub workercount: ::std::os::raw::c_long,
    pub workers: *mut *mut _sysparallel_worker,
    pub priority: ::std::os::raw::c_uchar,
    pub benchmark: ::std::os::raw::c_char,
    pub iteration: ::std::os::raw::c_long,
    pub begintime: f64,
    pub endtime: f64,
    pub cancel: ::std::os::raw::c_long,
    pub pool: *mut _sysparallel_thread_pool,
    pub maxworkercount: ::std::os::raw::c_long,
    pub flags: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__sysparallel_task() {
    assert_eq!(
        ::std::mem::size_of::<_sysparallel_task>(),
        136usize,
        concat!("Size of: ", stringify!(_sysparallel_task))
    );
    assert_eq!(
        ::std::mem::align_of::<_sysparallel_task>(),
        8usize,
        concat!("Alignment of ", stringify!(_sysparallel_task))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).obex as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(obex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).workerproc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(workerproc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).workercount as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(workercount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).workers as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(workers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).priority as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).benchmark as *const _ as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(benchmark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).iteration as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(iteration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).begintime as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(begintime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).endtime as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(endtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).cancel as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(cancel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).pool as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sysparallel_task>())).maxworkercount as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(maxworkercount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_task>())).flags as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_task),
            "::",
            stringify!(flags)
        )
    );
}
pub type t_sysparallel_task = _sysparallel_task;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sysparallel_worker {
    pub ob: t_object,
    pub obex: *mut ::std::os::raw::c_void,
    pub data: *mut ::std::os::raw::c_void,
    pub workerproc: method,
    pub task: *mut t_sysparallel_task,
    pub id: ::std::os::raw::c_long,
    pub begintime: f64,
    pub endtime: f64,
}
#[test]
fn bindgen_test_layout__sysparallel_worker() {
    assert_eq!(
        ::std::mem::size_of::<_sysparallel_worker>(),
        88usize,
        concat!("Size of: ", stringify!(_sysparallel_worker))
    );
    assert_eq!(
        ::std::mem::align_of::<_sysparallel_worker>(),
        8usize,
        concat!("Alignment of ", stringify!(_sysparallel_worker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_worker>())).ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_worker),
            "::",
            stringify!(ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_worker>())).obex as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_worker),
            "::",
            stringify!(obex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_worker>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_worker),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_worker>())).workerproc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_worker),
            "::",
            stringify!(workerproc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_worker>())).task as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_worker),
            "::",
            stringify!(task)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_worker>())).id as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_worker),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_worker>())).begintime as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_worker),
            "::",
            stringify!(begintime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sysparallel_worker>())).endtime as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_sysparallel_worker),
            "::",
            stringify!(endtime)
        )
    );
}
pub type t_sysparallel_worker = _sysparallel_worker;
extern "C" {
    pub fn sysparallel_processorcount() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysparallel_physical_processorcount() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysparallel_task_new(
        data: *mut ::std::os::raw::c_void,
        workerproc: method,
        maxworkercount: ::std::os::raw::c_long,
    ) -> *mut t_sysparallel_task;
}
extern "C" {
    pub fn sysparallel_task_workercount(
        x: *mut t_sysparallel_task,
        workercount: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn sysparallel_task_execute(x: *mut t_sysparallel_task) -> t_max_err;
}
extern "C" {
    pub fn sysparallel_task_cancel(x: *mut t_sysparallel_task) -> t_max_err;
}
extern "C" {
    pub fn sysparallel_task_free(x: *mut t_sysparallel_task);
}
extern "C" {
    pub fn sysparallel_task_benchprint(x: *mut t_sysparallel_task);
}
extern "C" {
    pub fn sysparallel_task_data(x: *mut t_sysparallel_task, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn sysparallel_task_workerproc(x: *mut t_sysparallel_task, workerproc: method);
}
extern "C" {
    pub fn sysparallel_worker_new(
        data: *mut ::std::os::raw::c_void,
        workerproc: method,
        task: *mut t_sysparallel_task,
    ) -> *mut t_sysparallel_worker;
}
extern "C" {
    pub fn sysparallel_worker_execute(x: *mut t_sysparallel_worker) -> t_max_err;
}
extern "C" {
    pub fn sysparallel_worker_free(x: *mut t_sysparallel_worker);
}
extern "C" {
    pub fn sysprocess_launch(
        utf8path: *const ::std::os::raw::c_char,
        utf8commandline: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysprocess_launch_withflags(
        utf8path: *const ::std::os::raw::c_char,
        utf8commandline: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysprocess_isrunning(id: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysprocess_isrunning_with_returnvalue(
        id: ::std::os::raw::c_long,
        retval: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysprocess_kill(id: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysprocess_activate(id: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysprocess_getid(utf8path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysprocess_getcurrentid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysprocess_getpath(
        id: ::std::os::raw::c_long,
        utf8path: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysprocesswatcher_new(
        id: ::std::os::raw::c_long,
        m: method,
        arg: *mut ::std::os::raw::c_void,
    ) -> *mut t_object;
}
extern "C" {
    pub fn sysprocess_fitsarch(id: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
pub type t_syssem = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn syssem_create(
        x: *mut t_syssem,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_long,
        value: ::std::os::raw::c_uint,
    ) -> t_max_err;
}
extern "C" {
    pub fn syssem_open(
        x: *mut t_syssem,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn syssem_close(x: t_syssem) -> t_max_err;
}
extern "C" {
    pub fn syssem_wait(x: t_syssem) -> t_max_err;
}
extern "C" {
    pub fn syssem_trywait(x: t_syssem) -> t_max_err;
}
extern "C" {
    pub fn syssem_post(x: t_syssem) -> t_max_err;
}
pub type t_sysshmem = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn sysshmem_alloc(
        x: *mut t_sysshmem,
        name: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn sysshmem_open(
        x: *mut t_sysshmem,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn sysshmem_close(x: t_sysshmem) -> t_max_err;
}
extern "C" {
    pub fn sysshmem_getsize(x: t_sysshmem) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn sysshmem_getptr(x: t_sysshmem) -> *mut ::std::os::raw::c_void;
}
#[doc = "A high-level time object for tempo-based scheduling."]
#[doc = ""]
#[doc = "@ingroup\ttime"]
#[doc = "@see\t\t#t_itm"]
#[doc = "@see\t\t@ref chapter_itm"]
pub type t_timeobject = t_object;
extern "C" {
    #[doc = "Stop a currently scheduled time object."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\tx\t\t\t\tThe time object."]
    pub fn time_stop(x: *mut t_timeobject);
}
extern "C" {
    #[doc = "Execute a time object's task, then if it was already set to execute, reschedule for the current interval value of the object."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\tx\t\t\t\tThe time object."]
    pub fn time_tick(x: *mut t_timeobject);
}
extern "C" {
    #[doc = "Convert the value of a time object to milliseconds."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\tx\t\t\t\tThe time object."]
    #[doc = "@return\t\t\t\t\tThe time object's value, converted to milliseconds."]
    pub fn time_getms(x: *mut t_timeobject) -> f64;
}
extern "C" {
    #[doc = "Convert the value of a time object to ticks."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\tx\t\t\t\tThe time object."]
    #[doc = "@return\t\t\t\t\tThe time object's value, converted to ticks."]
    pub fn time_getticks(x: *mut t_timeobject) -> f64;
}
extern "C" {
    #[doc = "Return the phase of the ITM object (transport) associated with a time object."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\ttx\t\t\t\tThe time object."]
    #[doc = "@param\t\tphase\t\t\tPointer to a double to receive the progress within the specified time value of the associated ITM object."]
    #[doc = "@param\t\tslope\t\t\tPointer to a double to receive the slope (phase difference) within the specified time value of the associated ITM object."]
    #[doc = "@param\t\tticks"]
    pub fn time_getphase(tx: *mut t_timeobject, phase: *mut f64, slope: *mut f64, ticks: *mut f64);
}
extern "C" {
    #[doc = "Specify that a millisecond-based attribute to be updated automatically when the converted milliseconds of the time object's value changes."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\tx\t\t\t\tThe time object."]
    #[doc = "@param\t\tattr\t\t\tName of the millisecond based attribute in the owning object that will be updated"]
    #[doc = "@param\t\tflags\t\t\tIf TIME_FLAGS_LISTENTICKS is passed here, updating will not happen if the time value is fixed (ms) based"]
    pub fn time_listen(x: *mut t_timeobject, attr: *mut t_symbol, flags: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "Set the current value of a time object (either an interval or a position) using a Max message."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\ttx\t\t\t\tThe time object."]
    #[doc = "@param\t\ts\t\t\t\tMessage selector."]
    #[doc = "@param\t\targc\t\t\tCount of arguments."]
    #[doc = "@param\t\targv\t\t\tMessage arguments."]
    pub fn time_setvalue(
        tx: *mut t_timeobject,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    );
}
extern "C" {
    #[doc = "Create an attribute permitting a time object to be changed in a user-friendly way."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\tc\t\t\t\tClass being initialized."]
    #[doc = "@param\t\tattrname\t\tName of the attribute associated with the time object."]
    #[doc = "@param\t\tattrlabel\t\tDescriptive label for the attribute (appears in the inspector)"]
    #[doc = "@param\t\tflags\t\t\tOptions, see \"Flags that determine time object behavior\" above"]
    pub fn class_time_addattr(
        c: *mut t_class,
        attrname: *const ::std::os::raw::c_char,
        attrlabel: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_long,
    );
}
extern "C" {
    #[doc = "Create a new time object."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\towner\t\t\tObject that will own this time object (task routine, if any, will pass owner as argument)."]
    #[doc = "@param\t\tattrname\t\tName of the attribute associated with the time object."]
    #[doc = "@param\t\ttick\t\t\tTask routine that will be executed (can be NULL)"]
    #[doc = "@param\t\tflags\t\t\tOptions, see \"Flags that determine time object behavior\" above"]
    #[doc = "@return\t\t\t\t\tThe newly created #t_timeobject."]
    pub fn time_new(
        owner: *mut t_object,
        attrname: *mut t_symbol,
        tick: method,
        flags: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Return a time object associated with an attribute of an owning object."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\towner\t\t\tObject that owns this time object (task routine, if any, will pass owner as argument)."]
    #[doc = "@param\t\tattrname\t\tName of the attribute associated with the time object."]
    #[doc = "@return\t\t\t\t\tThe #t_timeobject associated with the named attribute."]
    pub fn time_getnamed(owner: *mut t_object, attrname: *mut t_symbol) -> *mut t_object;
}
extern "C" {
    pub fn time_enable_attributes(x: *mut t_object);
}
extern "C" {
    #[doc = "Return whether this time object currently holds a fixed (millisecond-based) value."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\tx\t\t\t\tTime object."]
    #[doc = "@return\t\t\t\t\tTrue if time object's current value is fixed, false if it is tempo-relative."]
    pub fn time_isfixedunit(x: *mut t_timeobject) -> ::std::os::raw::c_long;
}
extern "C" {
    #[doc = "Schedule a task, with optional quantization."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\tx\t\t\t\tThe time object that schedules temporary events (must have been created with TIME_FLAGS_USECLOCK but not TIME_FLAGS_PERMANENT)"]
    #[doc = "@param\t\tquantize\t\tA time object that holds a quantization interval, can be NULL for no quantization."]
    pub fn time_schedule(x: *mut t_timeobject, quantize: *mut t_timeobject);
}
extern "C" {
    #[doc = "Schedule a task, with optional minimum interval,"]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\tx\t\t\t\tThe time object that schedules temporary events (must have been created with TIME_FLAGS_USECLOCK but not TIME_FLAGS_PERMANENT)"]
    #[doc = "@param\t\tquantize\t\tThe minimum interval into the future when the event can occur, can be NULL if there is no minimum interval."]
    pub fn time_schedule_limit(x: *mut t_timeobject, quantize: *mut t_timeobject);
}
extern "C" {
    #[doc = "Schedule a task for right now, with optional quantization."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\tx\t\t\t\tThe time object that schedules temporary events. The time interval is ignored and 0 ticks is used instead."]
    #[doc = "@param\t\tquantize\t\tA time object that holds a quantization interval, can be NULL for no quantization."]
    pub fn time_now(x: *mut t_timeobject, quantize: *mut t_timeobject);
}
extern "C" {
    #[doc = "Return the ITM object associated with this time object."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\tox\t\t\t\tTime object."]
    #[doc = "@return\t\t\t\t\tThe associated #t_itm object."]
    pub fn time_getitm(ox: *mut t_timeobject) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "Calculate the quantized interval (in ticks) if this time object were to be scheduled at the current time."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\tox\t\t\t\tTime object."]
    #[doc = "@param\t\tvitm\t\t\tThe associated ITM object (use time_getitm() to determine it)."]
    #[doc = "@param\t\toq\t\t\t\tA time object that holds a quantization interval, can be NULL."]
    #[doc = "@return\t\t\t\t\tInterval (in ticks) for scheduling this object."]
    pub fn time_calcquantize(ox: *mut t_timeobject, vitm: *mut t_itm, oq: *mut t_timeobject)
        -> f64;
}
extern "C" {
    #[doc = "Associate a named setclock object with a time object (unsupported)."]
    #[doc = ""]
    #[doc = "@ingroup\ttime"]
    #[doc = "@param\t\ttx\t\t\t\tTime object."]
    #[doc = "@param\t\tsc\t\t\t\tName of an associated setclock object."]
    pub fn time_setclock(tx: *mut t_timeobject, sc: *mut t_symbol);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmltree_node {
    _unused: [u8; 0],
}
pub type t_xmltree_node = _xmltree_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmltree_charnode {
    _unused: [u8; 0],
}
pub type t_xmltree_charnode = _xmltree_charnode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmltree_text {
    _unused: [u8; 0],
}
pub type t_xmltree_text = _xmltree_text;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmltree_comment {
    _unused: [u8; 0],
}
pub type t_xmltree_comment = _xmltree_comment;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmltree_cdata {
    _unused: [u8; 0],
}
pub type t_xmltree_cdata = _xmltree_cdata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmltree_attribute {
    _unused: [u8; 0],
}
pub type t_xmltree_attribute = _xmltree_attribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmltree_element {
    _unused: [u8; 0],
}
pub type t_xmltree_element = _xmltree_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmltree_document {
    _unused: [u8; 0],
}
pub type t_xmltree_document = _xmltree_document;
extern "C" {
    pub fn xmltree_node_addinterface(c: *mut t_class) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_insertbefore(
        x: *mut t_xmltree_node,
        newchild: *mut t_xmltree_node,
        refchild: *mut t_xmltree_node,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_replacechild(
        x: *mut t_xmltree_node,
        newchild: *mut t_xmltree_node,
        refchild: *mut t_xmltree_node,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_removechild(
        x: *mut t_xmltree_node,
        refchild: *mut t_xmltree_node,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_appendchild(
        x: *mut t_xmltree_node,
        newchild: *mut t_xmltree_node,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_haschildnodes(x: *mut t_xmltree_node) -> t_atom_long;
}
extern "C" {
    pub fn xmltree_node_clonenode(
        x: *mut t_xmltree_node,
        deep: ::std::os::raw::c_long,
    ) -> *mut t_xmltree_node;
}
extern "C" {
    pub fn xmltree_node_removeallchildren(x: *mut t_xmltree_node) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_nodevalue(
        x: *mut t_xmltree_node,
        attr: *mut ::std::os::raw::c_void,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_getnodevalue(
        x: *mut t_xmltree_node,
        attr: *mut ::std::os::raw::c_void,
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_setnodevalasstring(
        x: *mut t_xmltree_node,
        s: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_getnodevalasstring(
        x: *mut t_xmltree_node,
        len: *mut ::std::os::raw::c_long,
        s: *mut *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_new(x: *mut t_xmltree_node, nodetype: *mut t_symbol) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_free(x: *mut t_xmltree_node) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_getnodevalue_sym(x: *mut t_xmltree_node) -> *mut t_symbol;
}
extern "C" {
    pub fn xmltree_node_nodevalue_sym(x: *mut t_xmltree_node, s: *mut t_symbol) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_getnodevalue_long(x: *mut t_xmltree_node) -> t_atom_long;
}
extern "C" {
    pub fn xmltree_node_nodevalue_long(
        x: *mut t_xmltree_node,
        c: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_getnodevalue_float(x: *mut t_xmltree_node) -> f32;
}
extern "C" {
    pub fn xmltree_node_nodevalue_float(x: *mut t_xmltree_node, f: f32) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_getnodevalue_sym_array(
        x: *mut t_xmltree_node,
        max: ::std::os::raw::c_long,
        vals: *mut *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xmltree_node_nodevalue_sym_array(
        x: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        vals: *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_getnodevalue_long_array(
        x: *mut t_xmltree_node,
        max: ::std::os::raw::c_long,
        vals: *mut t_atom_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xmltree_node_nodevalue_long_array(
        x: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        vals: *mut ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_getnodevalue_float_array(
        x: *mut t_xmltree_node,
        max: ::std::os::raw::c_long,
        vals: *mut f32,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xmltree_node_nodevalue_float_array(
        x: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        vals: *mut f32,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_charnode_addinterface(c: *mut t_class) -> t_max_err;
}
extern "C" {
    pub fn xmltree_charnode_substringdata(
        x: *mut t_xmltree_charnode,
        offset: ::std::os::raw::c_long,
        count: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmltree_charnode_appenddata(
        x: *mut t_xmltree_charnode,
        data: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_charnode_insertdata(
        x: *mut t_xmltree_charnode,
        offset: ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_charnode_deletedata(
        x: *mut t_xmltree_charnode,
        offset: ::std::os::raw::c_long,
        count: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_charnode_replacedata(
        x: *mut t_xmltree_charnode,
        offset: ::std::os::raw::c_long,
        count: ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_char,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_charnode_new(x: *mut t_xmltree_charnode, nodetype: *mut t_symbol) -> t_max_err;
}
extern "C" {
    pub fn xmltree_charnode_free(x: *mut t_xmltree_charnode) -> t_max_err;
}
extern "C" {
    pub fn xmltree_document_filename(
        x: *mut t_xmltree_document,
        attr: *mut t_object,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    );
}
extern "C" {
    pub fn xmltree_document_read(
        x: *mut t_xmltree_document,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_document_write(
        x: *mut t_xmltree_document,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_node_write(
        x: *mut t_xmltree_node,
        fh: t_filehandle,
        depth: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn xmltree_document_print(x: *mut t_xmltree_document);
}
extern "C" {
    pub fn xmltree_document_createelement(
        x: *mut t_xmltree_document,
        tagname: *mut t_symbol,
    ) -> *mut t_xmltree_element;
}
extern "C" {
    pub fn xmltree_document_createtextnode(
        x: *mut t_xmltree_document,
        data: *mut ::std::os::raw::c_char,
    ) -> *mut t_xmltree_text;
}
extern "C" {
    pub fn xmltree_document_createcomment(
        x: *mut t_xmltree_document,
        data: *mut ::std::os::raw::c_char,
    ) -> *mut t_xmltree_comment;
}
extern "C" {
    pub fn xmltree_document_createcdatasection(
        x: *mut t_xmltree_document,
        data: *mut ::std::os::raw::c_char,
    ) -> *mut t_xmltree_cdata;
}
extern "C" {
    pub fn xmltree_document_createattribute(
        x: *mut t_xmltree_document,
        name: *mut t_symbol,
    ) -> *mut t_xmltree_attribute;
}
extern "C" {
    pub fn xmltree_document_getelementsbytagname(
        x: *mut t_xmltree_document,
        tagname: *mut t_symbol,
    ) -> *mut t_linklist;
}
extern "C" {
    pub fn xmltree_document_xmlparse_element_start(
        x: *mut t_xmltree_document,
        el: *const ::std::os::raw::c_char,
        attr: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn xmltree_document_xmlparse_element_end(
        x: *mut t_xmltree_document,
        el: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn xmltree_document_xmlparse_default(
        x: *mut t_xmltree_document,
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xmltree_document_xmlparse_characterdata(
        x: *mut t_xmltree_document,
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xmltree_document_xmlparse_cdata_start(x: *mut t_xmltree_document);
}
extern "C" {
    pub fn xmltree_document_xmlparse_cdata_end(x: *mut t_xmltree_document);
}
extern "C" {
    pub fn xmltree_document_xmlparse_comment(
        x: *mut t_xmltree_document,
        s: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn xmltree_document_xmlparse_doctype_start(
        x: *mut t_xmltree_document,
        s: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn xmltree_document_xmlparse_doctype_end(x: *mut t_xmltree_document);
}
extern "C" {
    pub fn xmltree_document_createheader(x: *mut t_xmltree_document, encoding: *mut t_symbol);
}
extern "C" {
    pub fn xmltree_document_new(
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xmltree_document_free(x: *mut t_xmltree_document);
}
extern "C" {
    pub fn xmltree_element_getattribute(
        x: *mut t_xmltree_element,
        attrname: *mut t_symbol,
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_element_setattribute(
        x: *mut t_xmltree_element,
        attrname: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_element_removeattribute(
        x: *mut t_xmltree_element,
        attrname: *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_element_getattributenode(
        x: *mut t_xmltree_element,
        attrname: *mut t_symbol,
    ) -> *mut t_xmltree_attribute;
}
extern "C" {
    pub fn xmltree_element_setattributenode(
        x: *mut t_xmltree_element,
        attr: *mut t_xmltree_attribute,
    ) -> *mut t_xmltree_attribute;
}
extern "C" {
    pub fn xmltree_element_removeattributenode(
        x: *mut t_xmltree_element,
        attr: *mut t_xmltree_attribute,
    ) -> *mut t_xmltree_attribute;
}
extern "C" {
    pub fn xmltree_element_getelementsbytagname(
        x: *mut t_xmltree_element,
        tagname: *mut t_symbol,
    ) -> *mut t_linklist;
}
extern "C" {
    pub fn xmltree_element_symcompare(
        x: *mut t_xmltree_attribute,
        name: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xmltree_element_new(
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xmltree_element_free(x: *mut t_xmltree_element);
}
extern "C" {
    pub fn xmltree_element_getattribute_sym(
        x: *mut t_xmltree_element,
        attrname: *mut t_symbol,
    ) -> *mut t_symbol;
}
extern "C" {
    pub fn xmltree_element_setattribute_sym(
        x: *mut t_xmltree_element,
        attrname: *mut t_symbol,
        s: *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_element_getattribute_long(
        x: *mut t_xmltree_element,
        attrname: *mut t_symbol,
    ) -> t_atom_long;
}
extern "C" {
    pub fn xmltree_element_setattribute_long(
        x: *mut t_xmltree_element,
        attrname: *mut t_symbol,
        c: t_atom_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_element_getattribute_float(
        x: *mut t_xmltree_element,
        attrname: *mut t_symbol,
    ) -> f32;
}
extern "C" {
    pub fn xmltree_element_setattribute_float(
        x: *mut t_xmltree_element,
        attrname: *mut t_symbol,
        f: f32,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_element_getattribute_sym_array(
        x: *mut t_xmltree_element,
        attrname: *mut t_symbol,
        max: ::std::os::raw::c_long,
        vals: *mut *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xmltree_element_setattribute_sym_array(
        x: *mut ::std::os::raw::c_void,
        attrname: *mut t_symbol,
        count: ::std::os::raw::c_long,
        vals: *mut *mut t_symbol,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_element_getattribute_long_array(
        x: *mut t_xmltree_element,
        attrname: *mut t_symbol,
        max: ::std::os::raw::c_long,
        vals: *mut t_atom_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xmltree_element_setattribute_long_array(
        x: *mut ::std::os::raw::c_void,
        attrname: *mut t_symbol,
        count: ::std::os::raw::c_long,
        vals: *mut ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_element_getattribute_float_array(
        x: *mut t_xmltree_element,
        attrname: *mut t_symbol,
        max: ::std::os::raw::c_long,
        vals: *mut f32,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xmltree_element_setattribute_float_array(
        x: *mut ::std::os::raw::c_void,
        attrname: *mut t_symbol,
        count: ::std::os::raw::c_long,
        vals: *mut f32,
    ) -> t_max_err;
}
extern "C" {
    pub fn xmltree_attr_symcompare(
        x: *mut t_xmltree_attribute,
        name: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xmltree_attribute_new(
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xmltree_attribute_free(x: *mut t_xmltree_attribute);
}
extern "C" {
    pub fn xmltree_text_new(
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xmltree_text_splittext(
        x: *mut t_xmltree_text,
        offset: ::std::os::raw::c_long,
    ) -> *mut t_xmltree_text;
}
extern "C" {
    pub fn xmltree_text_free(x: *mut t_xmltree_text);
}
extern "C" {
    pub fn xmltree_comment_new(
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xmltree_comment_free(x: *mut t_xmltree_comment);
}
extern "C" {
    pub fn xmltree_cdata_new(
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xmltree_cdata_splittext(
        x: *mut t_xmltree_cdata,
        offset: ::std::os::raw::c_long,
    ) -> *mut t_xmltree_cdata;
}
extern "C" {
    pub fn xmltree_cdata_free(x: *mut t_xmltree_cdata);
}
extern "C" {
    #[doc = " Create a dataview."]
    #[doc = "You should free it with object_free()."]
    #[doc = "@ingroup\tjdataview"]
    #[doc = "@return\t\tA pointer to the new instance."]
    pub fn jdataview_new() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Set a dataview's client."]
    #[doc = "The client is the object to which the dataview will send messages to get data,"]
    #[doc = "notify of changes to cells, etc."]
    #[doc = "Typically this is the object in which you are creating the dataview."]
    #[doc = "@ingroup\t\tjdataview"]
    #[doc = "@param\tdv\t\tThe dataview instance."]
    #[doc = "@param\tclient\tThe object to be assigned as the dataview's client."]
    pub fn jdataview_setclient(dv: *mut t_object, client: *mut t_object);
}
extern "C" {
    pub fn jdataview_newsection(
        dv: *mut t_object,
        name: *mut ::std::os::raw::c_char,
        assoc: *mut ::std::os::raw::c_void,
        icon: *mut t_jsurface,
        initiallyopen: ::std::os::raw::c_char,
        headervisible: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jdataview_numsections(dv: *mut t_object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jdataview_getnthsection(
        dv: *mut t_object,
        index: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jdataview_section_getnumrows(
        dv: *mut t_object,
        section: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jdataview_section_isopen(
        dv: *mut t_object,
        section: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jdataview_section_setopen(
        dv: *mut t_object,
        section: *mut ::std::os::raw::c_void,
        way: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jdataview_getsectionopenness(dv: *mut t_object, state: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn jdataview_setsectionopenness(dv: *mut t_object, state: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn jdataview_section_headervisible(
        dv: *mut t_object,
        section: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jdataview_section_setheadervisible(
        dv: *mut t_object,
        section: *mut ::std::os::raw::c_void,
        way: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jdataview_section_getname(
        dv: *mut t_object,
        section: *mut ::std::os::raw::c_void,
    ) -> *mut t_symbol;
}
extern "C" {
    pub fn jdataview_section_geticon(
        dv: *mut t_object,
        section: *mut ::std::os::raw::c_void,
    ) -> *mut t_jsurface;
}
extern "C" {
    pub fn jdataview_patchervis(dv: *mut t_object, pv: *mut t_object, box_: *mut t_object);
}
extern "C" {
    pub fn jdataview_patcherinvis(dv: *mut t_object, pv: *mut t_object);
}
extern "C" {
    pub fn jdataview_obscuring(dv: *mut t_object, pv: *mut t_object);
}
extern "C" {
    pub fn jdataview_repaintforview(dv: *mut t_object, patcherview: *mut t_object);
}
extern "C" {
    pub fn jdataview_setheight(dv: *mut t_object, height: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdataview_setcolumnheaderheight(dv: *mut t_object, height: f64);
}
extern "C" {
    pub fn jdataview_setrowcolor1(dv: *mut t_object, c: *mut t_jrgba);
}
extern "C" {
    pub fn jdataview_setrowcolor2(dv: *mut t_object, c: *mut t_jrgba);
}
extern "C" {
    pub fn jdataview_setselectcolor(dv: *mut t_object, c: *mut t_jrgba);
}
extern "C" {
    pub fn jdataview_setusegradient(dv: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdataview_setcancopy(dv: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdataview_getcancopy(dv: *mut t_object) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn jdataview_setcanpaste(dv: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdataview_getcanpaste(dv: *mut t_object) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn jdataview_setautosizeright(dv: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdataview_setautosizebottom(dv: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdataview_setautosizerightcolumn(dv: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdataview_setusecharheightfont(dv: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdataview_containersizechange(
        x: *mut t_object,
        cw: f64,
        ch: f64,
        width: *mut f64,
        height: *mut f64,
        asr: ::std::os::raw::c_int,
        asb: ::std::os::raw::c_int,
    ) -> t_atom_long;
}
extern "C" {
    pub fn jdataview_gethorizscrollvalues(
        x: *mut t_object,
        min: *mut f64,
        max: *mut f64,
        start: *mut f64,
        size: *mut f64,
    ) -> t_max_err;
}
extern "C" {
    pub fn jdataview_sethorizscrollvalues(x: *mut t_object, start: f64, size: f64);
}
extern "C" {
    pub fn jdataview_getvertscrollvalues(
        x: *mut t_object,
        min: *mut f64,
        max: *mut f64,
        start: *mut f64,
        size: *mut f64,
    ) -> t_max_err;
}
extern "C" {
    pub fn jdataview_setvertscrollvalues(x: *mut t_object, start: f64, size: f64);
}
extern "C" {
    pub fn jdataview_setscrollvisible(
        x: *mut t_object,
        vbar: ::std::os::raw::c_long,
        hbar: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn jdataview_setborderthickness(dv: *mut t_object, val: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdataview_setkeyfocusable(x: *mut t_object, val: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdataview_setfontname(dv: *mut t_object, fontname: *mut t_symbol);
}
extern "C" {
    pub fn jdataview_getfontname(dv: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    pub fn jdataview_setfontsize(dv: *mut t_object, fsize: f64);
}
extern "C" {
    pub fn jdataview_getfontsize(dv: *mut t_object) -> f64;
}
extern "C" {
    pub fn jdataview_setdragenabled(dv: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdataview_setcolumnheadercluemsg(dv: *mut t_object, msg: *mut t_symbol);
}
extern "C" {
    pub fn jdataview_setdrawgrid(dv: *mut t_object, way: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jdataview_addcolumn(
        dv: *mut t_object,
        name: *mut t_symbol,
        before: *mut t_symbol,
        unused: ::std::os::raw::c_short,
    ) -> *mut t_object;
}
extern "C" {
    pub fn jdataview_addcolumn_hidden(
        dv: *mut t_object,
        name: *mut t_symbol,
        before: *mut t_symbol,
        unused: ::std::os::raw::c_short,
    ) -> *mut t_object;
}
extern "C" {
    pub fn jdataview_colname_delete(dv: *mut t_object, name: *mut t_symbol);
}
extern "C" {
    pub fn jdataview_deletecolumn(dv: *mut t_object, col: *mut t_object);
}
extern "C" {
    pub fn jdataview_getnamedcolumn(dv: *mut t_object, name: *mut t_symbol) -> *mut t_object;
}
extern "C" {
    pub fn jdataview_getnthcolumn(
        dv: *mut t_object,
        index: ::std::os::raw::c_long,
    ) -> *mut t_object;
}
extern "C" {
    pub fn jdataview_colname_setvisible(
        dv: *mut t_object,
        name: *mut t_symbol,
        way: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jdataview_colname_getvisible(
        dv: *mut t_object,
        name: *mut t_symbol,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn jdataview_getnumcolumns(dv: *mut t_object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jcolumn_setwidth(col: *mut t_object, width: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jcolumn_setmaxwidth(col: *mut t_object, width: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jcolumn_setminwidth(col: *mut t_object, width: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jcolumn_getid(col: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jcolumn_getname(col: *mut t_object) -> *mut t_symbol;
}
extern "C" {
    pub fn jcolumn_setlabel(col: *mut t_object, label: *mut t_symbol);
}
extern "C" {
    pub fn jcolumn_setnumeric(col: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jcolumn_setcustomsort(col: *mut t_object, msg: *mut t_symbol);
}
extern "C" {
    pub fn jcolumn_setoverridesort(col: *mut t_object, val: ::std::os::raw::c_char);
}
extern "C" {
    pub fn jcolumn_setcustompaint(col: *mut t_object, msg: *mut t_symbol);
}
extern "C" {
    pub fn jcolumn_setsortable(col: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jcolumn_setdraggable(col: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jcolumn_setinitiallysorted(col: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jcolumn_sethideable(col: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jcolumn_setvisible(col: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jcolumn_getvisible(col: *mut t_object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jcolumn_setreference(col: *mut t_object, ref_: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn jcolumn_getreference(col: *mut t_object) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jcolumn_setcheckbox(col: *mut t_object, msg: *mut t_symbol);
}
extern "C" {
    pub fn jcolumn_setvaluemsg(
        col: *mut t_object,
        msg: *mut t_symbol,
        beginmsg: *mut t_symbol,
        endmsg: *mut t_symbol,
    );
}
extern "C" {
    pub fn jcolumn_setrowcomponentmsg(col: *mut t_object, msg: *mut t_symbol);
}
extern "C" {
    pub fn jcolumn_setindentspacing(col: *mut t_object, spacing: f64);
}
extern "C" {
    pub fn jcolumn_setcellcluemsg(col: *mut t_object, msg: *mut t_symbol);
}
extern "C" {
    pub fn jcolumn_setcelltextcolormsg(col: *mut t_object, msg: *mut t_symbol);
}
extern "C" {
    pub fn jcolumn_setcelltextstylemsg(col: *mut t_object, msg: *mut t_symbol);
}
extern "C" {
    pub fn jcolumn_update(col: *mut t_object, msg: *mut t_symbol);
}
pub type t_rowref = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn jdataview_addrowtosection(
        dv: *mut t_object,
        section: *mut ::std::os::raw::c_void,
        rr: t_rowref,
    );
}
extern "C" {
    pub fn jdataview_addrow(dv: *mut t_object, rr: t_rowref);
}
extern "C" {
    pub fn jdataview_addrowstosection(
        dv: *mut t_object,
        section: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        rrs: *mut t_rowref,
    );
}
extern "C" {
    pub fn jdataview_addrows(dv: *mut t_object, count: ::std::os::raw::c_long, rrs: *mut t_rowref);
}
extern "C" {
    pub fn jdataview_deleterowfromsection(
        dv: *mut t_object,
        section: *mut ::std::os::raw::c_void,
        rr: t_rowref,
    );
}
extern "C" {
    pub fn jdataview_deleterow(dv: *mut t_object, rr: t_rowref);
}
extern "C" {
    pub fn jdataview_deleterowsfromsection(
        dv: *mut t_object,
        section: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        rrs: *mut t_rowref,
    );
}
extern "C" {
    pub fn jdataview_deleterows(
        dv: *mut t_object,
        count: ::std::os::raw::c_long,
        rrs: *mut t_rowref,
    );
}
extern "C" {
    pub fn jdataview_deleteselectedrows(dv: *mut t_object);
}
extern "C" {
    pub fn jdataview_deleteselectedrowsforview(dv: *mut t_object, patcherview: *mut t_object);
}
extern "C" {
    pub fn jdataview_clear(dv: *mut t_object);
}
extern "C" {
    pub fn jdataview_getnumrows(dv: *mut t_object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jdataview_gettextinrows(
        dv: *mut t_object,
        rows: *mut t_rowref,
        cellsep: *mut ::std::os::raw::c_char,
        text: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn jdataview_selectedrowcountforview(
        dv: *mut t_object,
        patcherview: *mut t_object,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jdataview_selectedrowcount(dv: *mut t_object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jdataview_section_getallrows(
        dv: *mut t_object,
        section: *mut ::std::os::raw::c_void,
        count: *mut ::std::os::raw::c_long,
    ) -> *mut t_rowref;
}
extern "C" {
    pub fn jdataview_getselectedrowsforview(
        dv: *mut t_object,
        patcherview: *mut t_object,
    ) -> *mut t_rowref;
}
extern "C" {
    pub fn jdataview_applytoselectedrows(
        dv: *mut t_object,
        msg: *mut t_symbol,
        bycell: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jdataview_applytorows(
        dv: *mut t_object,
        msg: *mut t_symbol,
        bycell: ::std::os::raw::c_long,
        srs: *mut t_rowref,
    );
}
extern "C" {
    pub fn jdataview_enablerow(dv: *mut t_object, rr: t_rowref, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdataview_id2colname(dv: *mut t_object, id: ::std::os::raw::c_int) -> *mut t_symbol;
}
extern "C" {
    pub fn jdataview_colname2id(dv: *mut t_object, name: *mut t_symbol) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jdataview_row2id(
        dv: *mut t_object,
        rr: t_rowref,
        section: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jdataview_showrow(dv: *mut t_object, rr: t_rowref);
}
extern "C" {
    pub fn jdataview_selectcellinview(
        dv: *mut t_object,
        pv: *mut t_object,
        colname: *mut t_symbol,
        rr: t_rowref,
    );
}
extern "C" {
    pub fn jdataview_selectcell(dv: *mut t_object, colname: *mut t_symbol, rr: t_rowref);
}
extern "C" {
    pub fn jdataview_editcell(dv: *mut t_object, colname: *mut t_symbol, rr: t_rowref);
}
extern "C" {
    pub fn jdataview_iscelltextselected(
        dv: *mut t_object,
        justfocused: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jdataview_cellcut(dv: *mut t_object);
}
extern "C" {
    pub fn jdataview_cellcopy(dv: *mut t_object);
}
extern "C" {
    pub fn jdataview_cellpaste(dv: *mut t_object);
}
extern "C" {
    pub fn jdataview_redrawcell(dv: *mut t_object, colname: *mut t_symbol, rr: t_rowref);
}
extern "C" {
    pub fn jdataview_redrawcolumn(dv: *mut t_object, colname: *mut t_symbol);
}
extern "C" {
    pub fn jdataview_setcustomselectcolor(dv: *mut t_object, way: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jdataview_setbordercolor(dv: *mut t_object, c: *mut t_jrgba);
}
extern "C" {
    pub fn jdataview_setusesystemfont(dv: *mut t_object, way: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jdataview_enablecell(
        dv: *mut t_object,
        colname: *mut t_symbol,
        rr: t_rowref,
        way: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jdataview_forcecellvisible(x: *mut t_object, colname: *mut t_symbol, rr: t_rowref);
}
extern "C" {
    pub fn jdataview_scrolltosection(dv: *mut t_object, section: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn jdataview_scrolltotop(dv: *mut t_object);
}
extern "C" {
    pub fn jdataview_sortcolumn(
        x: *mut t_object,
        colname: *mut t_symbol,
        fwd: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jdataview_sort(x: *mut t_object, colname: *mut t_symbol, fwd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jdataview_resort(x: *mut t_object);
}
extern "C" {
    pub fn jdataview_getsortcolumn(x: *mut t_object) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jdataview_savecolumnwidths(dv: *mut t_object, d: *mut *mut t_dictionary);
}
extern "C" {
    pub fn jdataview_restorecolumnwidths(dv: *mut t_object, d: *mut t_dictionary);
}
extern "C" {
    pub fn jdataview_redrawrow(dv: *mut t_object, rr: t_rowref);
}
extern "C" {
    #[doc = "\tPrint the contents of a dictionary to the Max window."]
    #[doc = "@ingroup\t\tdictionary"]
    #[doc = "@param\td\t\tA pointer to a dictionary object."]
    pub fn postdictionary(d: *mut t_object);
}
pub type t_sample = f64;
#[doc = "\tHeader for any non-ui signal processing object."]
#[doc = "For ui objects use #t_pxjbox."]
#[doc = "@ingroup\tmsp"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_pxobject {
    #[doc = "< The standard #t_object struct."]
    pub z_ob: object,
    pub z_in: ::std::os::raw::c_long,
    pub z_proxy: *mut ::std::os::raw::c_void,
    #[doc = "< set to non-zero if this object is muted (using the pcontrol or mute~ objects)"]
    pub z_disabled: ::std::os::raw::c_long,
    #[doc = "< the number of signal inlets"]
    pub z_count: ::std::os::raw::c_short,
    #[doc = "< flags (bitmask) determining object behaviour, such as #Z_NO_INPLACE, #Z_PUT_FIRST, or #Z_PUT_LAST"]
    pub z_misc: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_t_pxobject() {
    assert_eq!(
        ::std::mem::size_of::<t_pxobject>(),
        64usize,
        concat!("Size of: ", stringify!(t_pxobject))
    );
    assert_eq!(
        ::std::mem::align_of::<t_pxobject>(),
        8usize,
        concat!("Alignment of ", stringify!(t_pxobject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_pxobject>())).z_ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_pxobject),
            "::",
            stringify!(z_ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_pxobject>())).z_in as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(t_pxobject),
            "::",
            stringify!(z_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_pxobject>())).z_proxy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(t_pxobject),
            "::",
            stringify!(z_proxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_pxobject>())).z_disabled as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(t_pxobject),
            "::",
            stringify!(z_disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_pxobject>())).z_count as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(t_pxobject),
            "::",
            stringify!(z_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_pxobject>())).z_misc as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(t_pxobject),
            "::",
            stringify!(z_misc)
        )
    );
}
#[doc = " The signal data structure."]
#[doc = "@ingroup\tmsp"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _signal {
    #[doc = "< The vector size of the signal."]
    pub s_n: ::std::os::raw::c_long,
    #[doc = "< A buffer holding the vector of audio samples."]
    pub s_vec: *mut t_sample,
    #[doc = "< The sample rate of the signal."]
    pub s_sr: f32,
    pub s_next: *mut _signal,
    pub s_nextused: *mut _signal,
    pub s_refcount: ::std::os::raw::c_short,
    pub s_size: ::std::os::raw::c_short,
    pub s_ptr: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__signal() {
    assert_eq!(
        ::std::mem::size_of::<_signal>(),
        56usize,
        concat!("Size of: ", stringify!(_signal))
    );
    assert_eq!(
        ::std::mem::align_of::<_signal>(),
        8usize,
        concat!("Alignment of ", stringify!(_signal))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_signal>())).s_n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_signal),
            "::",
            stringify!(s_n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_signal>())).s_vec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_signal),
            "::",
            stringify!(s_vec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_signal>())).s_sr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_signal),
            "::",
            stringify!(s_sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_signal>())).s_next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_signal),
            "::",
            stringify!(s_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_signal>())).s_nextused as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_signal),
            "::",
            stringify!(s_nextused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_signal>())).s_refcount as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_signal),
            "::",
            stringify!(s_refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_signal>())).s_size as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_signal),
            "::",
            stringify!(s_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_signal>())).s_ptr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_signal),
            "::",
            stringify!(s_ptr)
        )
    );
}
#[doc = " The signal data structure."]
#[doc = "@ingroup\tmsp"]
pub type t_signal = _signal;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _chain64item {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _chain64item_extra {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dspchain {
    pub c_ob: t_object,
    pub c_chain: *mut t_int,
    pub c_chainsize: ::std::os::raw::c_long,
    pub c_callcount: ::std::os::raw::c_long,
    pub c_usedcount: ::std::os::raw::c_long,
    pub c_reusedcount: ::std::os::raw::c_long,
    pub c_freedcount: ::std::os::raw::c_long,
    pub c_sr: ::std::os::raw::c_long,
    pub c_bs: ::std::os::raw::c_long,
    pub c_usedlist: *mut t_signal,
    pub c_freelist: *mut t_signal,
    pub c_zero: *mut t_signal,
    pub c_ugenlist: *mut _ugenbox,
    pub c_prev: *mut _dspchain,
    pub c_patcher: *mut ::std::os::raw::c_void,
    pub c_inlets: *mut ::std::os::raw::c_void,
    pub c_outlets: *mut ::std::os::raw::c_void,
    pub c_inputs: *mut ::std::os::raw::c_void,
    pub c_outputs: *mut ::std::os::raw::c_void,
    pub c_broken: ::std::os::raw::c_long,
    pub c_intype: ::std::os::raw::c_long,
    pub c_outtype: ::std::os::raw::c_long,
    pub c_dontbreak: t_int32_atomic,
    pub c_wantsbreak: t_int32_atomic,
    pub c_patchers: *mut ::std::os::raw::c_void,
    pub c_posttickobjects: *mut ::std::os::raw::c_void,
    pub c_mixerlisteners: *mut ::std::os::raw::c_void,
    pub unused: *mut ::std::os::raw::c_void,
    pub c_curugen: *mut _ugenbox,
    pub c_implicitugens: *mut t_object,
    pub c_32bitchain: ::std::os::raw::c_long,
    pub c_benchmark: ::std::os::raw::c_long,
    pub c_benchtime_used: f64,
    pub c_benchtime_available: f64,
    pub c_chain64_alloclen: ::std::os::raw::c_long,
    pub c_chain64_len: ::std::os::raw::c_long,
    pub c_chain64_array: *mut _chain64item,
    pub c_chain64_extra_array: *mut _chain64item_extra,
}
#[test]
fn bindgen_test_layout__dspchain() {
    assert_eq!(
        ::std::mem::size_of::<_dspchain>(),
        320usize,
        concat!("Size of: ", stringify!(_dspchain))
    );
    assert_eq!(
        ::std::mem::align_of::<_dspchain>(),
        8usize,
        concat!("Alignment of ", stringify!(_dspchain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_chain as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_chainsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_chainsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_callcount as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_callcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_usedcount as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_usedcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_reusedcount as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_reusedcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_freedcount as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_freedcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_sr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_bs as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_bs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_usedlist as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_usedlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_freelist as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_freelist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_zero as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_zero)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_ugenlist as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_ugenlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_prev as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_patcher as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_patcher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_inlets as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_inlets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_outlets as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_outlets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_inputs as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_inputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_outputs as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_outputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_broken as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_broken)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_intype as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_intype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_outtype as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_outtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_dontbreak as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_dontbreak)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_wantsbreak as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_wantsbreak)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_patchers as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_patchers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_posttickobjects as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_posttickobjects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_mixerlisteners as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_mixerlisteners)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).unused as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_curugen as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_curugen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_implicitugens as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_implicitugens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_32bitchain as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_32bitchain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_benchmark as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_benchmark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_benchtime_used as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_benchtime_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_benchtime_available as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_benchtime_available)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_chain64_alloclen as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_chain64_alloclen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_chain64_len as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_chain64_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_chain64_array as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_chain64_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_dspchain>())).c_chain64_extra_array as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_dspchain),
            "::",
            stringify!(c_chain64_extra_array)
        )
    );
}
pub type t_dspchain = _dspchain;
#[doc = "\tA function pointer for the audio perform routine used by MSP objects to process blocks of samples. @ingroup msp"]
pub type t_perfroutine =
    ::std::option::Option<unsafe extern "C" fn(args: *mut t_int) -> *mut t_int>;
pub type t_perfroutine64 = ::std::option::Option<
    unsafe extern "C" fn(
        x: *mut t_object,
        dsp64: *mut t_object,
        ins: *mut *mut f64,
        numins: ::std::os::raw::c_long,
        outs: *mut *mut f64,
        numouts: ::std::os::raw::c_long,
        sampleframes: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
        userparam: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    #[doc = "\tQuery MSP for the maximum global vector (block) size."]
    #[doc = "@ingroup\tmsp"]
    #[doc = "@return\t\tThe maximum global vector size for the MSP environment."]
    pub fn sys_getmaxblksize() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\tQuery MSP for the current global vector (block) size."]
    #[doc = "@ingroup\tmsp"]
    #[doc = "@return\t\tThe current global vector size for the MSP environment."]
    pub fn sys_getblksize() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\tQuery MSP for the global sample rate."]
    #[doc = "@ingroup\tmsp"]
    #[doc = "@return\t\tThe global sample rate of the MSP environment."]
    pub fn sys_getsr() -> f32;
}
extern "C" {
    pub fn sys_getch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sys_optimize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sys_altivec() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\tQuery MSP to determine whether or not it is running."]
    #[doc = "@ingroup\tmsp"]
    #[doc = "@return\t\tReturns true if the DSP is turned on, otherwise returns false."]
    pub fn sys_getdspstate() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Query MSP to determine whether or not a given audio object is"]
    #[doc = "in a running dsp chain.  This is preferable over sys_getdspstate()"]
    #[doc = "since global audio can be on but an object could be in a patcher that"]
    #[doc = "is not running."]
    #[doc = "@ingroup\tmsp"]
    #[doc = "@return\t\tReturns true if the MSP object is in a patcher that has audio on, otherwise returns false."]
    pub fn sys_getdspobjdspstate(o: *mut t_object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canvas_start_dsp();
}
extern "C" {
    pub fn canvas_stop_dsp();
}
extern "C" {
    pub fn dsp_tick();
}
extern "C" {
    pub fn canvas_start_onedsp(
        p: *mut t_patcher,
        c: *mut *mut t_dspchain,
        bs: ::std::os::raw::c_long,
        sr: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn canvas_stop_onedsp(c: *mut t_dspchain);
}
extern "C" {
    pub fn dsp_add(f: t_perfroutine, n: ::std::os::raw::c_int, ...);
}
extern "C" {
    pub fn dsp_addv(
        f: t_perfroutine,
        n: ::std::os::raw::c_int,
        vector: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dsp_add64(
        chain: *mut t_object,
        x: *mut t_object,
        f: t_perfroutine64,
        flags: ::std::os::raw::c_long,
        userparam: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = "\tCall this routine after creating your object in the new instance routine"]
    #[doc = "with object_alloc(). Cast your object to #t_pxobject as the first"]
    #[doc = "argument, then specify the number of signal inputs your object will"]
    #[doc = "have. dsp_setup() initializes fields of the #t_pxobject header and"]
    #[doc = "allocates any proxies needed (if num_signal_inputs is greater than 1)."]
    #[doc = ""]
    #[doc = "Some signal objects have no inputs; you should pass 0 for"]
    #[doc = "num_signal_inputs in this case. After calling dsp_setup(), you can"]
    #[doc = "create additional non-signal inlets using intin(), floatin(), or"]
    #[doc = "inlet_new()."]
    #[doc = ""]
    #[doc = "@ingroup\t\t\tmsp"]
    #[doc = "@param\tx\t\t\tYour object's pointer."]
    #[doc = "@param\tnsignals\tThe number of signal/proxy inlets to create for the object."]
    #[doc = "@see \t\t\t\t#dsp_setup"]
    pub fn z_dsp_setup(x: *mut t_pxobject, nsignals: ::std::os::raw::c_long);
}
extern "C" {
    pub fn dsp_resize(x: *mut t_pxobject, nsignals: ::std::os::raw::c_long);
}
extern "C" {
    #[doc = "\tThis function disposes of any memory used by proxies allocated by"]
    #[doc = "dsp_setup(). It also notifies the signal compiler that the DSP call chain"]
    #[doc = "needs to be rebuilt if signal processing is active. You should be sure to"]
    #[doc = "call this before de-allocating any memory that might be in use by your"]
    #[doc = "object’s perform routine, in the event that signal processing is on when"]
    #[doc = "your object is freed."]
    #[doc = ""]
    #[doc = "@ingroup\tmsp"]
    #[doc = "@param\tx\tThe object to free."]
    #[doc = "@see\t\t#dsp_free"]
    pub fn z_dsp_free(x: *mut t_pxobject);
}
extern "C" {
    pub fn dsp_setpatcher(p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dsp_getpatcher() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn z_isconnected(
        x: *mut t_object,
        dst: *mut t_object,
        index: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn z_dsp_setloadupdate(way: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dsp_setpostprocess(pm: method) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dsp_setpreprocess(pm: method) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sys_setprocessflag(way: ::std::os::raw::c_short);
}
extern "C" {
    #[doc = "\tThis routine must be called in your object's initialization routine. It"]
    #[doc = "adds a set of methods to your object's class that are called by MSP to"]
    #[doc = "build the DSP call chain. These methods function entirely"]
    #[doc = "transparently to your object so you don't have to worry about them."]
    #[doc = "However, you should avoid binding anything to their names: signal,"]
    #[doc = "userconnect, nsiginlets, and enable."]
    #[doc = ""]
    #[doc = "This routine is for non-user-interface objects only"]
    #[doc = "(where the first item in your object's struct is a t_pxobject)."]
    #[doc = "It must be called prior to calling class_register() for your class."]
    #[doc = ""]
    #[doc = "@ingroup\tmsp"]
    #[doc = "@param\tc\tThe class to make dsp-ready."]
    #[doc = "@see\t\tclass_dspinitjbox()"]
    pub fn class_dspinit(c: *mut t_class);
}
extern "C" {
    #[doc = "\tThis routine must be called in your object's initialization routine. It"]
    #[doc = "adds a set of methods to your object's class that are called by MSP to"]
    #[doc = "build the DSP call chain. These methods function entirely"]
    #[doc = "transparently to your object so you don't have to worry about them."]
    #[doc = "However, you should avoid binding anything to their names: signal,"]
    #[doc = "userconnect, nsiginlets, and enable."]
    #[doc = ""]
    #[doc = "This routine is for user-interface objects only"]
    #[doc = "(where the first item in your object's struct is a t_jbox)."]
    #[doc = ""]
    #[doc = "@ingroup\tmsp"]
    #[doc = "@param\tc\tThe class to make dsp-ready."]
    #[doc = "@see\t\tclass_dspinit()"]
    pub fn class_dspinitjbox(c: *mut t_class);
}
#[doc = "\tHeader for any ui signal processing object."]
#[doc = "For non-ui objects use #t_pxobject."]
#[doc = "@ingroup\tmsp"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pxjbox {
    #[doc = "< The box struct used by all ui objects."]
    pub z_box: t_jbox,
    pub z_in: ::std::os::raw::c_long,
    pub z_proxy: *mut ::std::os::raw::c_void,
    #[doc = "< set to non-zero if this object is muted (using the pcontrol or mute~ objects)"]
    pub z_disabled: ::std::os::raw::c_long,
    #[doc = "< the number of signal inlets"]
    pub z_count: ::std::os::raw::c_short,
    #[doc = "< flags (bitmask) determining object behaviour, such as #Z_NO_INPLACE, #Z_PUT_FIRST, or #Z_PUT_LAST"]
    pub z_misc: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__pxjbox() {
    assert_eq!(
        ::std::mem::size_of::<_pxjbox>(),
        320usize,
        concat!("Size of: ", stringify!(_pxjbox))
    );
    assert_eq!(
        ::std::mem::align_of::<_pxjbox>(),
        8usize,
        concat!("Alignment of ", stringify!(_pxjbox))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pxjbox>())).z_box as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pxjbox),
            "::",
            stringify!(z_box)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pxjbox>())).z_in as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_pxjbox),
            "::",
            stringify!(z_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pxjbox>())).z_proxy as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_pxjbox),
            "::",
            stringify!(z_proxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pxjbox>())).z_disabled as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_pxjbox),
            "::",
            stringify!(z_disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pxjbox>())).z_count as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_pxjbox),
            "::",
            stringify!(z_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pxjbox>())).z_misc as *const _ as usize },
        314usize,
        concat!(
            "Offset of field: ",
            stringify!(_pxjbox),
            "::",
            stringify!(z_misc)
        )
    );
}
#[doc = "\tHeader for any ui signal processing object."]
#[doc = "For non-ui objects use #t_pxobject."]
#[doc = "@ingroup\tmsp"]
pub type t_pxjbox = _pxjbox;
extern "C" {
    pub fn z_jbox_dsp_setup(x: *mut t_pxjbox, nsignals: ::std::os::raw::c_long);
}
extern "C" {
    pub fn z_jbox_dsp_free(x: *mut t_pxjbox);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _buffer_ref {
    _unused: [u8; 0],
}
#[doc = "\tA buffer~ reference."]
#[doc = "Use this struct to represent a reference to a buffer~ object in Max."]
#[doc = "Use the buffer_ref_getbuffer() call to return a pointer to the buffer."]
#[doc = "You can then make calls on the buffer itself."]
#[doc = ""]
#[doc = "@ingroup buffers"]
pub type t_buffer_ref = _buffer_ref;
#[doc = "\tA buffer~ object."]
#[doc = "This represents the actual buffer~ object."]
#[doc = "You can use this to send messages, query attributes, etc. of the actual buffer object"]
#[doc = "referenced by a #t_buffer_ref."]
#[doc = ""]
#[doc = "@ingroup buffers"]
pub type t_buffer_obj = t_object;
#[doc = "\tCommon buffer~ data/metadata."]
#[doc = "This info can be retreived from a buffer~ using the buffer_getinfo() call."]
#[doc = ""]
#[doc = "@ingroup buffers"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _buffer_info {
    #[doc = "< name of the buffer"]
    pub b_name: *mut t_symbol,
    #[doc = "< stored with interleaved channels if multi-channel"]
    pub b_samples: *mut f32,
    #[doc = "< number of sample frames (each one is sizeof(float) * b_nchans bytes)"]
    pub b_frames: ::std::os::raw::c_long,
    #[doc = "< number of channels"]
    pub b_nchans: ::std::os::raw::c_long,
    #[doc = "< size of buffer in floats"]
    pub b_size: ::std::os::raw::c_long,
    #[doc = "< sampling rate of the buffer"]
    pub b_sr: f32,
    #[doc = "< last modified time (\"dirty\" method)"]
    pub b_modtime: ::std::os::raw::c_long,
    #[doc = "< reserved for future use (total struct size is 64x4 = 256 bytes)"]
    pub b_rfu: [::std::os::raw::c_long; 57usize],
}
#[test]
fn bindgen_test_layout__buffer_info() {
    assert_eq!(
        ::std::mem::size_of::<_buffer_info>(),
        512usize,
        concat!("Size of: ", stringify!(_buffer_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_buffer_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_buffer_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_buffer_info>())).b_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_buffer_info),
            "::",
            stringify!(b_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_buffer_info>())).b_samples as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_buffer_info),
            "::",
            stringify!(b_samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_buffer_info>())).b_frames as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_buffer_info),
            "::",
            stringify!(b_frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_buffer_info>())).b_nchans as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_buffer_info),
            "::",
            stringify!(b_nchans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_buffer_info>())).b_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_buffer_info),
            "::",
            stringify!(b_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_buffer_info>())).b_sr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_buffer_info),
            "::",
            stringify!(b_sr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_buffer_info>())).b_modtime as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_buffer_info),
            "::",
            stringify!(b_modtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_buffer_info>())).b_rfu as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_buffer_info),
            "::",
            stringify!(b_rfu)
        )
    );
}
#[doc = "\tCommon buffer~ data/metadata."]
#[doc = "This info can be retreived from a buffer~ using the buffer_getinfo() call."]
#[doc = ""]
#[doc = "@ingroup buffers"]
pub type t_buffer_info = _buffer_info;
extern "C" {
    #[doc = "\tCreate a reference to a buffer~ object by name."]
    #[doc = "You must release the buffer reference using object_free() when you are finished using it."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tself\tpointer to your object"]
    #[doc = "@param\tname \tthe name of the buffer~"]
    #[doc = "@return\t\t\ta pointer to your new buffer reference"]
    pub fn buffer_ref_new(self_: *mut t_object, name: *mut t_symbol) -> *mut t_buffer_ref;
}
extern "C" {
    #[doc = "\tChange a buffer reference to refer to a different buffer~ object by name."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tx\t\tthe buffer reference"]
    #[doc = "@param\tname \tthe name of a different buffer~ to reference"]
    pub fn buffer_ref_set(x: *mut t_buffer_ref, name: *mut t_symbol);
}
extern "C" {
    #[doc = "\tQuery to find out if a buffer~ with the referenced name actually exists."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tx\t\tthe buffer reference"]
    #[doc = "@return\t\t\tnon-zero if the buffer~ exists, otherwise zero"]
    pub fn buffer_ref_exists(x: *mut t_buffer_ref) -> t_atom_long;
}
extern "C" {
    #[doc = "\tQuery a buffer reference to get the actual buffer~ object being referenced, if it exists."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tx\t\t\tthe buffer reference"]
    #[doc = "@return\t\t\tthe buffer object if exists, otherwise NULL"]
    pub fn buffer_ref_getobject(x: *mut t_buffer_ref) -> *mut t_buffer_obj;
}
extern "C" {
    #[doc = "\tYour object needs to handle notifications issued by the buffer~ you reference."]
    #[doc = "You do this by defining a \"notify\" method."]
    #[doc = "Your notify method should then call this notify method for the #t_buffer_ref."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tx\t\tthe buffer reference"]
    #[doc = "@param\ts \t\tthe registered name of the sending object"]
    #[doc = "@param\tmsg\t\tthen name of the notification/message sent"]
    #[doc = "@param\tsender\tthe pointer to the sending object"]
    #[doc = "@param\tdata\toptional argument sent with the notification/message"]
    #[doc = "@return\t\t\ta max error code"]
    pub fn buffer_ref_notify(
        x: *mut t_buffer_ref,
        s: *mut t_symbol,
        msg: *mut t_symbol,
        sender: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tOpen a viewer window to display the contents of the buffer~."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tbuffer_object\tthe buffer object"]
    pub fn buffer_view(buffer_object: *mut t_buffer_obj);
}
extern "C" {
    #[doc = "\tClaim the buffer~ and get a pointer to the first sample in memory."]
    #[doc = "When you are done reading/writing to the buffer you must call buffer_unlocksamples()."]
    #[doc = "If the attempt to claim the buffer~ fails the returned pointer will be NULL."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tbuffer_object\tthe buffer object"]
    #[doc = "@return\t\t\t\t\ta pointer to the first sample in memory, or NULL if the buffer doesn't exist."]
    pub fn buffer_locksamples(buffer_object: *mut t_buffer_obj) -> *mut f32;
}
extern "C" {
    #[doc = "\tRelease your claim on the buffer~ contents so that other objects may read/write to the buffer~."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tbuffer_object\tthe buffer object"]
    pub fn buffer_unlocksamples(buffer_object: *mut t_buffer_obj);
}
extern "C" {
    #[doc = "\tQuery a buffer~ to find out how many channels are present in the buffer content."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tbuffer_object\tthe buffer object"]
    #[doc = "@return\t\t\t\t\tthe number of channels in the buffer"]
    pub fn buffer_getchannelcount(buffer_object: *mut t_buffer_obj) -> t_atom_long;
}
extern "C" {
    #[doc = "\tQuery a buffer~ to find out how many frames long the buffer content is in samples."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tbuffer_object\tthe buffer object"]
    #[doc = "@return\t\t\t\t\tthe number of frames in the buffer"]
    pub fn buffer_getframecount(buffer_object: *mut t_buffer_obj) -> t_atom_long;
}
extern "C" {
    #[doc = "\tQuery a buffer~ to find out its native sample rate in samples per second."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tbuffer_object\tthe buffer object"]
    #[doc = "@return\t\t\t\t\tthe sample rate in samples per second"]
    pub fn buffer_getsamplerate(buffer_object: *mut t_buffer_obj) -> t_atom_float;
}
extern "C" {
    #[doc = "\tQuery a buffer~ to find out its native sample rate in samples per millisecond."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tbuffer_object\tthe buffer object"]
    #[doc = "@return\t\t\t\t\tthe sample rate in samples per millisecond"]
    pub fn buffer_getmillisamplerate(buffer_object: *mut t_buffer_obj) -> t_atom_float;
}
extern "C" {
    #[doc = " Set the number of samples with which to zero-pad the buffer~'s contents."]
    #[doc = "The typical application for this need is to pad a buffer with enough room to allow for the reach of a FIR kernel in convolution."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tbuffer_object\tthe buffer object"]
    #[doc = "@param\tsamplecount\t\tthe number of sample to pad the buffer with on each side of the contents"]
    #[doc = "@return\t\t\t\t\tan error code"]
    pub fn buffer_setpadding(
        buffer_object: *mut t_buffer_obj,
        samplecount: t_atom_long,
    ) -> t_max_err;
}
extern "C" {
    #[doc = "\tSet the buffer's dirty flag, indicating that changes have been made."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tbuffer_object\tthe buffer object"]
    #[doc = "@return\t\t\t\t\tan error code"]
    pub fn buffer_setdirty(buffer_object: *mut t_buffer_obj) -> t_max_err;
}
extern "C" {
    #[doc = " Retrieve the name of the last file to be read by a buffer~."]
    #[doc = "(Not the last file written)."]
    #[doc = ""]
    #[doc = "@ingroup buffers"]
    #[doc = "@param\tbuffer_object\tthe buffer object"]
    #[doc = "@return\t\t\t\t\tThe name of the file last read, or gensym(\"\") if no files have been read."]
    #[doc = ""]
    #[doc = "@version Introduced in Max 7.0.1"]
    pub fn buffer_getfilename(buffer_object: *mut t_buffer_obj) -> *mut t_symbol;
}
extern "C" {
    pub fn buffer_perform_begin(buffer_object: *mut t_buffer_obj) -> t_max_err;
}
extern "C" {
    pub fn buffer_perform_end(buffer_object: *mut t_buffer_obj) -> t_max_err;
}
extern "C" {
    pub fn buffer_getinfo(buffer_object: *mut t_buffer_obj, info: *mut t_buffer_info) -> t_max_err;
}
extern "C" {
    pub fn buffer_edit_begin(buffer_object: *mut t_buffer_obj) -> t_max_err;
}
extern "C" {
    pub fn buffer_edit_end(
        buffer_object: *mut t_buffer_obj,
        valid: ::std::os::raw::c_long,
    ) -> t_max_err;
}
extern "C" {
    pub fn buffer_lock(buffer_object: *mut t_buffer_obj) -> t_max_err;
}
extern "C" {
    pub fn buffer_trylock(buffer_object: *mut t_buffer_obj) -> t_max_err;
}
extern "C" {
    pub fn buffer_unlock(buffer_object: *mut t_buffer_obj) -> t_max_err;
}
extern "C" {
    pub fn buffer_findowner(buffer_object: *mut t_buffer_obj) -> *mut t_buffer_obj;
}
extern "C" {
    pub fn buffer_spinwait(buffer_object: *mut t_buffer_obj) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn buffer_valid(
        buffer_object: *mut t_buffer_obj,
        way: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
pub type t_jit_err = t_atom_long;
extern "C" {
    pub fn jit_object_post(x: *mut t_object, s: *mut ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn jit_object_error(x: *mut t_object, s: *mut ::std::os::raw::c_char, ...);
}
pub type t_jit_object = t_object;
extern "C" {
    pub fn max_jit_obex_new(
        mc: *mut ::std::os::raw::c_void,
        classname: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_obex_free(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn max_jit_classex_setup(oboffset: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_classex_addattr(
        x: *mut ::std::os::raw::c_void,
        attr: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_classex_standard_wrap(
        mclass: *mut ::std::os::raw::c_void,
        jclass: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn max_jit_class_addmethods(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn max_jit_class_addmethods_flags(
        x: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn max_jit_class_attrlist2methods(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn max_addmethod_defer(m: method, s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn max_addmethod_defer_low(m: method, s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn max_addmethod_usurp(m: method, s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn max_addmethod_usurp_low(m: method, s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn max_jit_object_alloc(
        mclass: *mut t_class,
        jitter_classname: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_object_free(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn max_jit_class_obex_setup(mclass: *mut t_class, oboffset: ::std::os::raw::c_long);
}
extern "C" {
    pub fn max_jit_class_addattr(
        mclass: *mut t_class,
        attr: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_class_wrap_standard(
        mclass: *mut t_class,
        jclass: *mut t_class,
        flags: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn max_jit_class_wrap_addmethods(mclass: *mut t_class, jclass: *mut t_class);
}
extern "C" {
    pub fn max_jit_class_wrap_addmethods_flags(
        mclass: *mut t_class,
        jclass: *mut t_class,
        flags: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn max_jit_class_wrap_attrlist2methods(mclass: *mut t_class, jclass: *mut t_class);
}
extern "C" {
    pub fn max_jit_class_addmethod_defer(
        mclass: *mut t_class,
        m: method,
        s: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn max_jit_class_addmethod_defer_low(
        mclass: *mut t_class,
        m: method,
        s: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn max_jit_class_addmethod_usurp(
        mclass: *mut t_class,
        m: method,
        s: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn max_jit_class_addmethod_usurp_low(
        mclass: *mut t_class,
        m: method,
        s: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn max_jit_object_addattr(x: *mut t_object, attr: *mut ::std::os::raw::c_void)
        -> t_jit_err;
}
extern "C" {
    pub fn max_jit_object_wrap_standard(
        mob: *mut t_object,
        job: *mut t_object,
        flags: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn max_jit_object_wrap_complete(
        mob: *mut t_object,
        job: *mut t_object,
        flags: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn max_jit_object_wrap_addmethods(mob: *mut t_object, job: *mut t_object);
}
extern "C" {
    pub fn max_jit_object_wrap_addmethods_flags(
        mob: *mut t_object,
        job: *mut t_object,
        flags: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn max_jit_object_wrap_attrlist2methods(mob: *mut t_object, job: *mut t_object);
}
extern "C" {
    pub fn max_jit_object_addmethod_defer(
        x: *mut t_object,
        m: method,
        s: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn max_jit_object_addmethod_defer_low(
        x: *mut t_object,
        m: method,
        s: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn max_jit_object_addmethod_usurp(
        x: *mut t_object,
        m: method,
        s: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn max_jit_object_addmethod_usurp_low(
        x: *mut t_object,
        m: method,
        s: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn max_jit_object_attr_dump(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn max_jit_attr_args_offset(
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn max_jit_attr_args(
        x: *mut ::std::os::raw::c_void,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
    );
}
extern "C" {
    pub fn max_jit_attr_set(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_short,
        av: *mut t_atom,
    );
}
extern "C" {
    pub fn max_jit_obex_attrlist_get(x: *mut ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_obex_attr_set(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_obex_attr_get(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        ac: *mut ::std::os::raw::c_long,
        av: *mut *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_obex_attr_getdump(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    );
}
extern "C" {
    pub fn max_jit_obex_set(
        x: *mut ::std::os::raw::c_void,
        p: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_obex_get(x: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_obex_jitob_get(x: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_obex_jitob_set(
        x: *mut ::std::os::raw::c_void,
        jitob: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn max_jit_obex_usurplist_get(
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_obex_usurplist_set(
        x: *mut ::std::os::raw::c_void,
        usurplist: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn max_jit_obex_proxylist_get(
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_obex_proxylist_set(
        x: *mut ::std::os::raw::c_void,
        proxylist: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn max_jit_obex_inletnumber_get(x: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn max_jit_obex_inletnumber_set(
        x: *mut ::std::os::raw::c_void,
        inletnumber: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn max_jit_obex_proxy_new(
        x: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_obex_proxy_resize(
        x: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_obex_proxy_deletetail(x: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_obex_proxy_append(
        x: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_obex_dumpout_set(
        x: *mut ::std::os::raw::c_void,
        outlet: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn max_jit_obex_dumpout_get(x: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_obex_dumpout(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_short,
        argv: *mut t_atom,
    );
}
extern "C" {
    pub fn max_jit_obex_adornmentlist_get(
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_obex_adornmentlist_set(
        x: *mut ::std::os::raw::c_void,
        adornmentlist: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn max_jit_obex_adornment_get(
        x: *mut ::std::os::raw::c_void,
        classname: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_obex_addadornment(
        x: *mut ::std::os::raw::c_void,
        adornment: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_obex_gimmeback(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    );
}
extern "C" {
    pub fn max_jit_obex_gimmeback_dumpout(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    );
}
extern "C" {
    pub fn max_jit_method_is_attr(x: *mut ::std::os::raw::c_void, s: *mut t_symbol) -> t_atom_long;
}
extern "C" {
    pub fn max_jit_method_is_undocumented(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
    ) -> t_atom_long;
}
extern "C" {
    pub fn max_jit_method_is_groupreference(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
    ) -> t_atom_long;
}
extern "C" {
    pub fn max_jit_getqueuestate() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_global_critical_enter();
}
extern "C" {
    pub fn jit_global_critical_exit();
}
pub type t_jit_fileref = ::std::os::raw::c_long;
extern "C" {
    pub fn jit_file_fsclose(refnum: t_jit_fileref) -> t_jit_err;
}
extern "C" {
    pub fn jit_file_fsread(
        refnum: t_jit_fileref,
        count: *mut ::std::os::raw::c_long,
        bufptr: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_file_fswrite(
        refnum: t_jit_fileref,
        count: *mut ::std::os::raw::c_long,
        bufptr: *const ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_file_seteof(refnum: t_jit_fileref, logeof: ::std::os::raw::c_long) -> t_jit_err;
}
extern "C" {
    pub fn jit_file_geteof(refnum: t_jit_fileref, logeof: *mut ::std::os::raw::c_long)
        -> t_jit_err;
}
extern "C" {
    pub fn jit_file_setfpos(
        refnum: t_jit_fileref,
        mode: ::std::os::raw::c_long,
        offset: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_file_getfpos(
        refnum: t_jit_fileref,
        filepos: *mut ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_math_cos(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_sin(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_tan(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_acos(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_asin(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_atan(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_atan2(y: f64, x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_cosh(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_sinh(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_tanh(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_acosh(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_asinh(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_atanh(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_exp(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_expm1(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_exp2(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_log(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_log2(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_log10(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_hypot(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn jit_math_pow(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn jit_math_sqrt(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_ceil(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_floor(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_round(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_trunc(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_fmod(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn jit_math_wrap(x: f64, lo: f64, hi: f64) -> f64;
}
extern "C" {
    pub fn jit_math_fold(x: f64, lo: f64, hi: f64) -> f64;
}
extern "C" {
    pub fn jit_math_j1(x: f64) -> f64;
}
extern "C" {
    pub fn jit_math_is_valid(x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_math_roundup_poweroftwo(x: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn jit_math_is_poweroftwo(x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_math_is_finite(x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_math_is_nan(x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_math_project_to_sphere(r: f32, x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn jit_math_fast_sqrt(x: f32) -> f32;
}
extern "C" {
    pub fn jit_math_fast_invsqrt(x: f32) -> f32;
}
extern "C" {
    pub fn jit_math_fast_sin(x: f32) -> f32;
}
extern "C" {
    pub fn jit_math_fast_cos(x: f32) -> f32;
}
extern "C" {
    pub fn jit_math_fast_tan(x: f32) -> f32;
}
extern "C" {
    pub fn jit_math_fast_asin(x: f32) -> f32;
}
extern "C" {
    pub fn jit_math_fast_acos(x: f32) -> f32;
}
extern "C" {
    pub fn jit_math_fast_atan(x: f32) -> f32;
}
pub type uchar = ::std::os::raw::c_uchar;
#[doc = " Provides base pointer and stride for vector operator functions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_op_info {
    #[doc = "< base pointer (coerced to appropriate type)"]
    pub p: *mut ::std::os::raw::c_void,
    #[doc = "< stride between elements (in type, not bytes)"]
    pub stride: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__jit_op_info() {
    assert_eq!(
        ::std::mem::size_of::<_jit_op_info>(),
        16usize,
        concat!("Size of: ", stringify!(_jit_op_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_op_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_op_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_op_info>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_op_info),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_op_info>())).stride as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_op_info),
            "::",
            stringify!(stride)
        )
    );
}
#[doc = " Provides base pointer and stride for vector operator functions"]
pub type t_jit_op_info = _jit_op_info;
pub type t_jit_op_fn = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_long)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_op_fn_object {
    pub ob: t_object,
    pub name: *mut t_symbol,
    pub argcount: ::std::os::raw::c_long,
    pub charfn: t_jit_op_fn,
    pub longfn: t_jit_op_fn,
    pub float32fn: t_jit_op_fn,
    pub float64fn: t_jit_op_fn,
}
#[test]
fn bindgen_test_layout__jit_op_fn_object() {
    assert_eq!(
        ::std::mem::size_of::<_jit_op_fn_object>(),
        80usize,
        concat!("Size of: ", stringify!(_jit_op_fn_object))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_op_fn_object>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_op_fn_object))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_op_fn_object>())).ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_op_fn_object),
            "::",
            stringify!(ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_op_fn_object>())).name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_op_fn_object),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_op_fn_object>())).argcount as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_op_fn_object),
            "::",
            stringify!(argcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_op_fn_object>())).charfn as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_op_fn_object),
            "::",
            stringify!(charfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_op_fn_object>())).longfn as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_op_fn_object),
            "::",
            stringify!(longfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_op_fn_object>())).float32fn as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_op_fn_object),
            "::",
            stringify!(float32fn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_op_fn_object>())).float64fn as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_op_fn_object),
            "::",
            stringify!(float64fn)
        )
    );
}
pub type t_jit_op_fn_object = _jit_op_fn_object;
extern "C" {
    pub fn jit_op_init() -> t_jit_err;
}
extern "C" {
    pub fn jit_op_sym2fn(opsym: *mut t_symbol, type_: *mut t_symbol) -> t_jit_op_fn;
}
extern "C" {
    pub fn jit_op_fn_lookup(opsym: *mut t_symbol) -> *mut t_jit_op_fn_object;
}
extern "C" {
    pub fn jit_op_fn_store(opsym: *mut t_symbol, x: *mut t_jit_op_fn_object) -> t_jit_err;
}
extern "C" {
    pub fn jit_op_vector_pass_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_mult_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_div_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_mod_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_add_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_adds_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_sub_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_subs_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_min_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_max_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_avg_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_absdiff_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_pass_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_mult_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_div_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_mod_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_add_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_adds_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_sub_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_subs_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_min_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_max_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_avg_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_pass_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_mult_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_div_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_mod_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_add_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_sub_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_min_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_max_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_abs_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_avg_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_absdiff_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_pass_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_mult_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        ip2: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_div_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        ip2: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_mod_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        ip2: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_add_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        ip2: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_sub_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        ip2: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_min_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        ip2: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_max_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        ip2: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_abs_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_avg_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        ip2: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_pass_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_mult_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_div_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_add_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_sub_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_min_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_max_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_abs_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_avg_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_absdiff_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_mod_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_fold_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_wrap_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_pass_float32_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut f32,
        op: *mut f32,
    );
}
extern "C" {
    pub fn jit_op_vector_mult_float32_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut f32,
        ip2: *mut f32,
        op: *mut f32,
    );
}
extern "C" {
    pub fn jit_op_vector_div_float32_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut f32,
        ip2: *mut f32,
        op: *mut f32,
    );
}
extern "C" {
    pub fn jit_op_vector_add_float32_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut f32,
        ip2: *mut f32,
        op: *mut f32,
    );
}
extern "C" {
    pub fn jit_op_vector_sub_float32_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut f32,
        ip2: *mut f32,
        op: *mut f32,
    );
}
extern "C" {
    pub fn jit_op_vector_min_float32_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut f32,
        ip2: *mut f32,
        op: *mut f32,
    );
}
extern "C" {
    pub fn jit_op_vector_max_float32_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut f32,
        ip2: *mut f32,
        op: *mut f32,
    );
}
extern "C" {
    pub fn jit_op_vector_abs_float32_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut f32,
        op: *mut f32,
    );
}
extern "C" {
    pub fn jit_op_vector_avg_float32_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut f32,
        ip2: *mut f32,
        op: *mut f32,
    );
}
extern "C" {
    pub fn jit_op_vector_absdiff_float32_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut f32,
        ip2: *mut f32,
        op: *mut f32,
    );
}
extern "C" {
    pub fn jit_op_vector_pass_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_mult_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_div_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_add_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_sub_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_min_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_max_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_abs_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_avg_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_absdiff_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_mod_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_fold_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_wrap_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flippass_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flipdiv_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flipmod_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flipsub_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flippass_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flipdiv_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flipmod_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flipsub_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flippass_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flipdiv_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flipmod_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flipsub_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flippass_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flipdiv_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flipmod_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_flipsub_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_bitand_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_bitor_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_bitxor_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_bitnot_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_lshift_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_rshift_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_bitand_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_bitor_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_bitxor_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_bitnot_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_lshift_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_rshift_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_bitand_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_bitor_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_bitxor_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_bitnot_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_lshift_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_rshift_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_bitand_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        ip2: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_bitor_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        ip2: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_bitxor_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        ip2: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_bitnot_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_lshift_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        ip2: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_rshift_long_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut t_int32,
        ip2: *mut t_int32,
        op: *mut t_int32,
    );
}
extern "C" {
    pub fn jit_op_vector_and_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_or_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_not_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gt_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gte_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_lt_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_lte_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_eq_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_neq_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_and_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_or_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_not_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_gt_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_gte_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_lt_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_lte_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_eq_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_neq_char_altivec(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        ip1: *mut uchar,
        ip2: *mut uchar,
        op: *mut uchar,
    );
}
extern "C" {
    pub fn jit_op_vector_and_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_or_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_not_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gt_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gte_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_lt_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_lte_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_eq_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_neq_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_and_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_or_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_not_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gt_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gte_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_lt_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_lte_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_eq_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_neq_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_and_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_or_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_not_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gt_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gte_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_lt_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_lte_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_eq_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_neq_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gtp_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gtep_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ltp_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ltep_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_eqp_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_neqp_char(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gtp_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gtep_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ltp_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ltep_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_eqp_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_neqp_long(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gtp_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gtep_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ltp_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ltep_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_eqp_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_neqp_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gtp_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_gtep_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ltp_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ltep_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_eqp_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_neqp_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_sin_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_cos_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_tan_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_asin_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_acos_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_atan_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_atan2_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_sinh_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_cosh_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_tanh_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_asinh_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_acosh_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_atanh_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_exp_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_exp2_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_log_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_log2_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_log10_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_hypot_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_pow_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_sqrt_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ceil_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_floor_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_round_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_trunc_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_sin_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_cos_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_tan_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_asin_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_acos_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_atan_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_atan2_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_sinh_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_cosh_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_tanh_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_asinh_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_acosh_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_atanh_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_exp_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_exp2_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_log_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_log2_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_log10_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_hypot_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_pow_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_sqrt_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ceil_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_floor_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_round_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_trunc_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ax_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ax_float32_complex(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ax_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_ax_float64_complex(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_axpy_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_axpy_float32_complex(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_axpy_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_axpy_float64_complex(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_dotprod_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_dotprod_float32_complex(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_dotprod_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_dotprod_float64_complex(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_swap_float32(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_swap_float32_complex(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_swap_float64(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_op_vector_swap_float64_complex(
        n: ::std::os::raw::c_long,
        vecdata: *mut ::std::os::raw::c_void,
        in0: *mut t_jit_op_info,
        in1: *mut t_jit_op_info,
        out: *mut t_jit_op_info,
    );
}
extern "C" {
    pub fn jit_linklist_init();
}
#[doc = " Matrix information struct."]
#[doc = " Used to get/set multiple matrix attributes at once."]
#[doc = ""]
#[doc = " @ingroup matrixfun"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_matrix_info {
    #[doc = "< in bytes (0xFFFFFFFF=UNKNOWN)"]
    pub size: ::std::os::raw::c_long,
    #[doc = "< primitifve type (char, long, float32, or float64)"]
    pub type_: *mut t_symbol,
    #[doc = "< flags to specify data reference, handle, or tightly packed"]
    pub flags: ::std::os::raw::c_long,
    #[doc = "< number of dimensions"]
    pub dimcount: ::std::os::raw::c_long,
    #[doc = "< dimension sizes"]
    pub dim: [::std::os::raw::c_long; 32usize],
    #[doc = "< stride across dimensions in bytes"]
    pub dimstride: [::std::os::raw::c_long; 32usize],
    #[doc = "< number of planes"]
    pub planecount: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__jit_matrix_info() {
    assert_eq!(
        ::std::mem::size_of::<_jit_matrix_info>(),
        552usize,
        concat!("Size of: ", stringify!(_jit_matrix_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_matrix_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_matrix_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_matrix_info>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_matrix_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_matrix_info>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_matrix_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_matrix_info>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_matrix_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_matrix_info>())).dimcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_matrix_info),
            "::",
            stringify!(dimcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_matrix_info>())).dim as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_matrix_info),
            "::",
            stringify!(dim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_matrix_info>())).dimstride as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_matrix_info),
            "::",
            stringify!(dimstride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_matrix_info>())).planecount as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_matrix_info),
            "::",
            stringify!(planecount)
        )
    );
}
#[doc = " Matrix information struct."]
#[doc = " Used to get/set multiple matrix attributes at once."]
#[doc = ""]
#[doc = " @ingroup matrixfun"]
pub type t_jit_matrix_info = _jit_matrix_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_parallel_ndim_io {
    pub flags: ::std::os::raw::c_long,
    pub minfo: *mut t_jit_matrix_info,
    pub bp: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__jit_parallel_ndim_io() {
    assert_eq!(
        ::std::mem::size_of::<_jit_parallel_ndim_io>(),
        24usize,
        concat!("Size of: ", stringify!(_jit_parallel_ndim_io))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_parallel_ndim_io>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_parallel_ndim_io))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_parallel_ndim_io>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_parallel_ndim_io),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_parallel_ndim_io>())).minfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_parallel_ndim_io),
            "::",
            stringify!(minfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_parallel_ndim_io>())).bp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_parallel_ndim_io),
            "::",
            stringify!(bp)
        )
    );
}
pub type t_jit_parallel_ndim_io = _jit_parallel_ndim_io;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_parallel_ndim {
    pub flags: ::std::os::raw::c_long,
    pub data: *mut ::std::os::raw::c_void,
    pub dimcount: ::std::os::raw::c_long,
    pub dim: *mut ::std::os::raw::c_long,
    pub planecount: ::std::os::raw::c_long,
    pub iocount: ::std::os::raw::c_long,
    pub io: [t_jit_parallel_ndim_io; 32usize],
    pub fn_: method,
}
#[test]
fn bindgen_test_layout__jit_parallel_ndim() {
    assert_eq!(
        ::std::mem::size_of::<_jit_parallel_ndim>(),
        824usize,
        concat!("Size of: ", stringify!(_jit_parallel_ndim))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_parallel_ndim>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_parallel_ndim))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_parallel_ndim>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_parallel_ndim),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_parallel_ndim>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_parallel_ndim),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_parallel_ndim>())).dimcount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_parallel_ndim),
            "::",
            stringify!(dimcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_parallel_ndim>())).dim as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_parallel_ndim),
            "::",
            stringify!(dim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_parallel_ndim>())).planecount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_parallel_ndim),
            "::",
            stringify!(planecount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_parallel_ndim>())).iocount as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_parallel_ndim),
            "::",
            stringify!(iocount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_parallel_ndim>())).io as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_parallel_ndim),
            "::",
            stringify!(io)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_parallel_ndim>())).fn_ as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_parallel_ndim),
            "::",
            stringify!(fn_)
        )
    );
}
pub type t_jit_parallel_ndim = _jit_parallel_ndim;
extern "C" {
    pub fn jit_parallel_utils_init();
}
extern "C" {
    pub fn jit_parallel_ndim_calc(p: *mut t_jit_parallel_ndim);
}
extern "C" {
    pub fn jit_parallel_ndim_simplecalc1(
        fn_: method,
        data: *mut ::std::os::raw::c_void,
        dimcount: ::std::os::raw::c_long,
        dim: *mut ::std::os::raw::c_long,
        planecount: ::std::os::raw::c_long,
        minfo1: *mut t_jit_matrix_info,
        bp1: *mut ::std::os::raw::c_char,
        flags1: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jit_parallel_ndim_simplecalc2(
        fn_: method,
        data: *mut ::std::os::raw::c_void,
        dimcount: ::std::os::raw::c_long,
        dim: *mut ::std::os::raw::c_long,
        planecount: ::std::os::raw::c_long,
        minfo1: *mut t_jit_matrix_info,
        bp1: *mut ::std::os::raw::c_char,
        minfo2: *mut t_jit_matrix_info,
        bp2: *mut ::std::os::raw::c_char,
        flags1: ::std::os::raw::c_long,
        flags2: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jit_parallel_ndim_simplecalc3(
        fn_: method,
        data: *mut ::std::os::raw::c_void,
        dimcount: ::std::os::raw::c_long,
        dim: *mut ::std::os::raw::c_long,
        planecount: ::std::os::raw::c_long,
        minfo1: *mut t_jit_matrix_info,
        bp1: *mut ::std::os::raw::c_char,
        minfo2: *mut t_jit_matrix_info,
        bp2: *mut ::std::os::raw::c_char,
        minfo3: *mut t_jit_matrix_info,
        bp3: *mut ::std::os::raw::c_char,
        flags1: ::std::os::raw::c_long,
        flags2: ::std::os::raw::c_long,
        flags3: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jit_parallel_ndim_simplecalc4(
        fn_: method,
        data: *mut ::std::os::raw::c_void,
        dimcount: ::std::os::raw::c_long,
        dim: *mut ::std::os::raw::c_long,
        planecount: ::std::os::raw::c_long,
        minfo1: *mut t_jit_matrix_info,
        bp1: *mut ::std::os::raw::c_char,
        minfo2: *mut t_jit_matrix_info,
        bp2: *mut ::std::os::raw::c_char,
        minfo3: *mut t_jit_matrix_info,
        bp3: *mut ::std::os::raw::c_char,
        minfo4: *mut t_jit_matrix_info,
        bp4: *mut ::std::os::raw::c_char,
        flags1: ::std::os::raw::c_long,
        flags2: ::std::os::raw::c_long,
        flags3: ::std::os::raw::c_long,
        flags4: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jit_method_true(x: *mut ::std::os::raw::c_void) -> t_atom_long;
}
extern "C" {
    pub fn jit_method_false(x: *mut ::std::os::raw::c_void) -> t_atom_long;
}
extern "C" {
    pub fn jit_class_new(
        name: *const ::std::os::raw::c_char,
        mnew: method,
        mfree: method,
        size: ::std::os::raw::c_long,
        ...
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_class_free(c: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn jit_class_register(c: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn jit_class_addmethod(
        c: *mut ::std::os::raw::c_void,
        m: method,
        name: *const ::std::os::raw::c_char,
        ...
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_class_addattr(c: *mut ::std::os::raw::c_void, attr: *mut t_jit_object) -> t_jit_err;
}
extern "C" {
    pub fn jit_class_addadornment(
        c: *mut ::std::os::raw::c_void,
        o: *mut t_jit_object,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_class_addinterface(
        c: *mut ::std::os::raw::c_void,
        interfaceclass: *mut ::std::os::raw::c_void,
        byteoffset: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_class_adornment_get(
        c: *mut ::std::os::raw::c_void,
        classname: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_class_nameget(c: *mut ::std::os::raw::c_void) -> *mut t_symbol;
}
extern "C" {
    pub fn jit_class_findbyname(classname: *mut t_symbol) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_object_classname_compare(
        x: *mut ::std::os::raw::c_void,
        name: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_class_method(c: *mut ::std::os::raw::c_void, methodname: *mut t_symbol) -> method;
}
extern "C" {
    pub fn jit_class_attr_get(
        c: *mut ::std::os::raw::c_void,
        attrname: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_class_addtypedwrapper(
        c: *mut ::std::os::raw::c_void,
        m: method,
        name: *mut ::std::os::raw::c_char,
        ...
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_class_typedwrapper_get(
        c: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
    ) -> *mut t_messlist;
}
extern "C" {
    pub fn jit_class_method_addargsafe(
        c: *mut ::std::os::raw::c_void,
        argname: *mut ::std::os::raw::c_char,
        methodname: *mut ::std::os::raw::c_char,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_class_method_argsafe_get(
        c: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
    ) -> *mut t_symbol;
}
extern "C" {
    pub fn jit_object_alloc(c: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_object_new(classname: *mut t_symbol, ...) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_object_new_imp(
        classname: *mut ::std::os::raw::c_void,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut ::std::os::raw::c_void,
        p3: *mut ::std::os::raw::c_void,
        p4: *mut ::std::os::raw::c_void,
        p5: *mut ::std::os::raw::c_void,
        p6: *mut ::std::os::raw::c_void,
        p7: *mut ::std::os::raw::c_void,
        p8: *mut ::std::os::raw::c_void,
        dummy: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_object_free(x: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn jit_object_method(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        ...
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_object_method_imp(
        x: *mut ::std::os::raw::c_void,
        s: *mut ::std::os::raw::c_void,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut ::std::os::raw::c_void,
        p3: *mut ::std::os::raw::c_void,
        p4: *mut ::std::os::raw::c_void,
        p5: *mut ::std::os::raw::c_void,
        p6: *mut ::std::os::raw::c_void,
        p7: *mut ::std::os::raw::c_void,
        p8: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_object_method_typed(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        rv: *mut t_atom,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_object_getmethod(x: *mut ::std::os::raw::c_void, s: *mut t_symbol) -> method;
}
extern "C" {
    pub fn jit_object_classname(x: *mut ::std::os::raw::c_void) -> *mut t_symbol;
}
extern "C" {
    pub fn jit_object_register(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_object_findregistered(s: *mut t_symbol) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_object_findregisteredbyptr(x: *mut ::std::os::raw::c_void) -> *mut t_symbol;
}
extern "C" {
    pub fn jit_object_unregister(x: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn jit_object_attach(
        s: *mut t_symbol,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_object_detach(s: *mut t_symbol, x: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn jit_object_notify(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        data: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_object_class(x: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_object_attr_usercanget(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_object_attr_usercanset(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_object_attr_get(
        x: *mut ::std::os::raw::c_void,
        attrname: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_object_importattrs(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_object_exportattrs(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_object_exportsummary(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_object_method_argsafe_get(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
    ) -> *mut t_symbol;
}
extern "C" {
    pub fn jit_getbytes(size: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_freebytes(ptr: *mut ::std::os::raw::c_void, size: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jit_handle_new(size: ::std::os::raw::c_long) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_handle_free(handle: *mut *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn jit_handle_size_get(handle: *mut *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_handle_size_set(
        handle: *mut *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_handle_lock(
        handle: *mut *mut ::std::os::raw::c_void,
        lock: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_copy_bytes(
        dest: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        bytes: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jit_freemem() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_newptr(size: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jit_disposeptr(ptr: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn jit_atom_setlong(a: *mut t_atom, b: t_atom_long) -> t_jit_err;
}
extern "C" {
    pub fn jit_atom_setfloat(a: *mut t_atom, b: f64) -> t_jit_err;
}
extern "C" {
    pub fn jit_atom_setsym(a: *mut t_atom, b: *mut t_symbol) -> t_jit_err;
}
extern "C" {
    pub fn jit_atom_setobj(a: *mut t_atom, b: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn jit_atom_getlong(a: *mut t_atom) -> t_atom_long;
}
extern "C" {
    pub fn jit_atom_getfloat(a: *mut t_atom) -> f64;
}
extern "C" {
    pub fn jit_atom_getsym(a: *mut t_atom) -> *mut t_symbol;
}
extern "C" {
    pub fn jit_atom_getobj(a: *mut t_atom) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_atom_getcharfix(a: *mut t_atom) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_atom_arg_getlong(
        c: *mut t_atom_long,
        idx: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_atom_arg_getfloat(
        c: *mut f32,
        idx: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_atom_arg_getdouble(
        c: *mut f64,
        idx: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_atom_arg_getsym(
        c: *mut *mut t_symbol,
        idx: ::std::os::raw::c_long,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_matrix_info_default(info: *mut t_jit_matrix_info) -> t_jit_err;
}
extern "C" {
    pub fn jit_matrix_info_typesize(minfo: *mut t_jit_matrix_info) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_mop_single_type(x: *mut ::std::os::raw::c_void, s: *mut t_symbol) -> t_jit_err;
}
extern "C" {
    pub fn jit_mop_single_planecount(
        x: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_mop_methodall(x: *mut ::std::os::raw::c_void, s: *mut t_symbol, ...) -> t_jit_err;
}
extern "C" {
    pub fn jit_mop_input_nolink(
        mop: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_mop_output_nolink(
        mop: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_mop_ioproc_copy_adapt(
        mop: *mut ::std::os::raw::c_void,
        mop_io: *mut ::std::os::raw::c_void,
        matrix: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_mop_ioproc_copy_trunc(
        mop: *mut ::std::os::raw::c_void,
        mop_io: *mut ::std::os::raw::c_void,
        matrix: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_mop_ioproc_copy_trunc_zero(
        mop: *mut ::std::os::raw::c_void,
        mop_io: *mut ::std::os::raw::c_void,
        matrix: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_mop_ioproc_tosym(ioproc: *mut ::std::os::raw::c_void) -> *mut t_symbol;
}
extern "C" {
    pub fn jit_attr_getlong(x: *mut ::std::os::raw::c_void, s: *mut t_symbol) -> t_atom_long;
}
extern "C" {
    pub fn jit_attr_setlong(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        c: t_atom_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_getfloat(x: *mut ::std::os::raw::c_void, s: *mut t_symbol) -> t_atom_float;
}
extern "C" {
    pub fn jit_attr_setfloat(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        c: t_atom_float,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_getsym(x: *mut ::std::os::raw::c_void, s: *mut t_symbol) -> *mut t_symbol;
}
extern "C" {
    pub fn jit_attr_setsym(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        c: *mut t_symbol,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_getlong_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        max: ::std::os::raw::c_long,
        vals: *mut t_atom_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_attr_setlong_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        count: ::std::os::raw::c_long,
        vals: *mut t_atom_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_getchar_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        max: ::std::os::raw::c_long,
        vals: *mut uchar,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_attr_setchar_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        count: ::std::os::raw::c_long,
        vals: *mut uchar,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_getfloat_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        max: ::std::os::raw::c_long,
        vals: *mut f32,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_attr_setfloat_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        count: ::std::os::raw::c_long,
        vals: *mut f32,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_getdouble_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        max: ::std::os::raw::c_long,
        vals: *mut f64,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_attr_setdouble_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        count: ::std::os::raw::c_long,
        vals: *mut f64,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_getsym_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        max: ::std::os::raw::c_long,
        vals: *mut *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_attr_setsym_array(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        count: ::std::os::raw::c_long,
        vals: *mut *mut t_symbol,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_addfilterset_clip(
        x: *mut ::std::os::raw::c_void,
        min: f64,
        max: f64,
        usemin: ::std::os::raw::c_long,
        usemax: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_addfilterset_clip_scale(
        x: *mut ::std::os::raw::c_void,
        scale: f64,
        min: f64,
        max: f64,
        usemin: ::std::os::raw::c_long,
        usemax: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_addfilterget_clip(
        x: *mut ::std::os::raw::c_void,
        min: f64,
        max: f64,
        usemin: ::std::os::raw::c_long,
        usemax: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_addfilterget_clip_scale(
        x: *mut ::std::os::raw::c_void,
        scale: f64,
        min: f64,
        max: f64,
        usemin: ::std::os::raw::c_long,
        usemax: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_addfilter_clip(
        x: *mut ::std::os::raw::c_void,
        min: f64,
        max: f64,
        usemin: ::std::os::raw::c_long,
        usemax: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_addfilter_clip_scale(
        x: *mut ::std::os::raw::c_void,
        scale: f64,
        min: f64,
        max: f64,
        usemin: ::std::os::raw::c_long,
        usemax: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_addfilterset_proc(x: *mut ::std::os::raw::c_void, proc_: method) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_addfilterget_proc(x: *mut ::std::os::raw::c_void, proc_: method) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_user_setvalueof(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_user_touch(x: *mut ::std::os::raw::c_void, s: *mut t_symbol) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_user_touch_parse(
        x: *mut ::std::os::raw::c_void,
        attrnames: *mut ::std::os::raw::c_char,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_object_addattr(x: *mut ::std::os::raw::c_void, attr: *mut t_object) -> t_jit_err;
}
extern "C" {
    pub fn jit_object_deleteattr(
        x: *mut ::std::os::raw::c_void,
        attrname: *mut t_symbol,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_attr_cleanall(x: *mut t_object);
}
extern "C" {
    pub fn jit_attr_clean(x: *mut t_object, name: *mut t_symbol);
}
extern "C" {
    pub fn jit_rand_setseed(n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jit_rand() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_symbol_unique() -> *mut t_symbol;
}
extern "C" {
    pub fn jit_error_code(x: *mut ::std::os::raw::c_void, v: t_jit_err);
}
extern "C" {
    pub fn jit_error_sym(x: *mut ::std::os::raw::c_void, s: *mut t_symbol);
}
extern "C" {
    pub fn jit_post_sym(x: *mut ::std::os::raw::c_void, s: *mut t_symbol);
}
extern "C" {
    pub fn jit_err_from_max_err(err: t_max_err) -> t_jit_err;
}
extern "C" {
    pub fn jit_video_recreate_outlet(
        maxob: *mut t_object,
        type_: ::std::os::raw::c_long,
        curoutlet: *mut *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_bin_read_header(
        fh: t_filehandle,
        version: *mut t_uint32,
        filesize: *mut t_int32,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_bin_read_chunk_info(
        fh: t_filehandle,
        ckid: *mut t_uint32,
        cksize: *mut t_int32,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_bin_read_matrix(fh: t_filehandle, matrix: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn jit_bin_write_header(fh: t_filehandle, filesize: t_int32) -> t_jit_err;
}
extern "C" {
    pub fn jit_bin_write_matrix(fh: t_filehandle, matrix: *mut ::std::os::raw::c_void)
        -> t_jit_err;
}
extern "C" {
    pub fn jit_cpost(format: *const ::std::os::raw::c_char, ...);
}
pub type t_jit_cubicspline_basismatrix_fixed = [[t_int32; 4usize]; 4usize];
pub type t_jit_cubicspline_basismatrix_float32 = [[f32; 4usize]; 4usize];
pub type t_jit_cubicspline_basismatrix_float64 = [[f64; 4usize]; 4usize];
extern "C" {
    pub fn jit_cubicspline_fillbasis_fixed(
        name: *mut t_symbol,
        matrix: *mut t_jit_cubicspline_basismatrix_fixed,
        stepcount: *mut t_int32,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_cubicspline_fillbasis_float32(
        name: *mut t_symbol,
        matrix: *mut t_jit_cubicspline_basismatrix_float32,
        stepcount: *mut t_int32,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_cubicspline_fillbasis_float64(
        name: *mut t_symbol,
        matrix: *mut t_jit_cubicspline_basismatrix_float64,
        stepcount: *mut t_int32,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_cubicspline_general_eval_fixed(
        val: t_int32,
        stepcount: t_int32,
        knotcount: t_int32,
        knots: *mut t_int32,
        matrix: *mut [t_int32; 4usize],
    ) -> t_int32;
}
extern "C" {
    pub fn jit_cubicspline_general_eval_float32(
        val: f32,
        stepcount: t_int32,
        knotcount: t_int32,
        knots: *mut f32,
        matrix: *mut [f32; 4usize],
    ) -> f32;
}
extern "C" {
    pub fn jit_cubicspline_general_eval_float64(
        val: f64,
        stepcount: t_int32,
        knotcount: t_int32,
        knots: *mut f64,
        matrix: *mut [f64; 4usize],
    ) -> f64;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FSRef {
    pub hidden: [UInt8; 80usize],
}
#[test]
fn bindgen_test_layout_FSRef() {
    assert_eq!(
        ::std::mem::size_of::<FSRef>(),
        80usize,
        concat!("Size of: ", stringify!(FSRef))
    );
    assert_eq!(
        ::std::mem::align_of::<FSRef>(),
        1usize,
        concat!("Alignment of ", stringify!(FSRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FSRef>())).hidden as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FSRef),
            "::",
            stringify!(hidden)
        )
    );
}
pub type t_jit_functor_fixed_sig = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: t_int32,
        arg3: *mut t_int32,
    ) -> t_int32,
>;
pub type t_jit_functor_float32_sig = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: t_int32, arg3: *mut f32) -> f32,
>;
pub type t_jit_functor_float64_sig = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: t_int32, arg3: *mut f64) -> f64,
>;
pub type t_jit_functor_fixed_scalar_sig = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: t_int32) -> t_int32,
>;
pub type t_jit_functor_float32_scalar_sig = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: f32) -> f32,
>;
pub type t_jit_functor_float64_scalar_sig = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: f64) -> f64,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_functor_interface {
    pub evalfixed: t_jit_functor_fixed_sig,
    pub evalfixed_1d: t_jit_functor_fixed_sig,
    pub evalfixed_2d: t_jit_functor_fixed_sig,
    pub evalfixed_3d: t_jit_functor_fixed_sig,
    pub evalfloat32: t_jit_functor_float32_sig,
    pub evalfloat32_1d: t_jit_functor_float32_sig,
    pub evalfloat32_2d: t_jit_functor_float32_sig,
    pub evalfloat32_3d: t_jit_functor_float32_sig,
    pub evalfloat64: t_jit_functor_float64_sig,
    pub evalfloat64_1d: t_jit_functor_float64_sig,
    pub evalfloat64_2d: t_jit_functor_float64_sig,
    pub evalfloat64_3d: t_jit_functor_float64_sig,
}
#[test]
fn bindgen_test_layout__jit_functor_interface() {
    assert_eq!(
        ::std::mem::size_of::<_jit_functor_interface>(),
        96usize,
        concat!("Size of: ", stringify!(_jit_functor_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_functor_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_functor_interface))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_interface>())).evalfixed as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_interface),
            "::",
            stringify!(evalfixed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_interface>())).evalfixed_1d as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_interface),
            "::",
            stringify!(evalfixed_1d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_interface>())).evalfixed_2d as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_interface),
            "::",
            stringify!(evalfixed_2d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_interface>())).evalfixed_3d as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_interface),
            "::",
            stringify!(evalfixed_3d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_interface>())).evalfloat32 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_interface),
            "::",
            stringify!(evalfloat32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_interface>())).evalfloat32_1d as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_interface),
            "::",
            stringify!(evalfloat32_1d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_interface>())).evalfloat32_2d as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_interface),
            "::",
            stringify!(evalfloat32_2d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_interface>())).evalfloat32_3d as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_interface),
            "::",
            stringify!(evalfloat32_3d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_interface>())).evalfloat64 as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_interface),
            "::",
            stringify!(evalfloat64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_interface>())).evalfloat64_1d as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_interface),
            "::",
            stringify!(evalfloat64_1d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_interface>())).evalfloat64_2d as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_interface),
            "::",
            stringify!(evalfloat64_2d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_interface>())).evalfloat64_3d as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_interface),
            "::",
            stringify!(evalfloat64_3d)
        )
    );
}
pub type t_jit_functor_interface = _jit_functor_interface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_functor_wrapper {
    pub ob: *mut t_jit_object,
    pub fm: *mut t_jit_functor_interface,
}
#[test]
fn bindgen_test_layout__jit_functor_wrapper() {
    assert_eq!(
        ::std::mem::size_of::<_jit_functor_wrapper>(),
        16usize,
        concat!("Size of: ", stringify!(_jit_functor_wrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_functor_wrapper>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_functor_wrapper))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_functor_wrapper>())).ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_wrapper),
            "::",
            stringify!(ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_functor_wrapper>())).fm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_wrapper),
            "::",
            stringify!(fm)
        )
    );
}
pub type t_jit_functor_wrapper = _jit_functor_wrapper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_functor_combined_dynarray {
    pub fixed: *mut t_int32,
    pub float32: *mut f32,
    pub float64: *mut f64,
    pub count: t_int32,
}
#[test]
fn bindgen_test_layout__jit_functor_combined_dynarray() {
    assert_eq!(
        ::std::mem::size_of::<_jit_functor_combined_dynarray>(),
        32usize,
        concat!("Size of: ", stringify!(_jit_functor_combined_dynarray))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_functor_combined_dynarray>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_functor_combined_dynarray))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_combined_dynarray>())).fixed as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_combined_dynarray),
            "::",
            stringify!(fixed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_combined_dynarray>())).float32 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_combined_dynarray),
            "::",
            stringify!(float32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_combined_dynarray>())).float64 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_combined_dynarray),
            "::",
            stringify!(float64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_functor_combined_dynarray>())).count as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_functor_combined_dynarray),
            "::",
            stringify!(count)
        )
    );
}
pub type t_jit_functor_combined_dynarray = _jit_functor_combined_dynarray;
extern "C" {
    pub fn jit_functor_setup_class(
        c: *mut t_class,
        categoryname: *mut ::std::os::raw::c_char,
        classname: *mut ::std::os::raw::c_char,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_functor_addcategory(c: *mut t_class, categoryname: *mut t_symbol) -> t_jit_err;
}
extern "C" {
    pub fn jit_functor_getcategorylist(c: *mut t_class) -> *mut t_jit_object;
}
extern "C" {
    pub fn jit_functor_classlist_in_category(categoryname: *mut t_symbol) -> *mut t_jit_object;
}
extern "C" {
    pub fn jit_functor_lookup_relaxed(
        categoryname: *mut t_symbol,
        classname: *mut t_symbol,
    ) -> *mut t_class;
}
extern "C" {
    pub fn jit_functor_lookup(
        categoryname: *mut t_symbol,
        classname: *mut t_symbol,
    ) -> *mut t_class;
}
extern "C" {
    pub fn jit_functor_new_object_with_interface(
        ob: *mut *mut t_jit_object,
        fi: *mut *mut t_jit_functor_interface,
        category: *mut t_symbol,
        name: *mut t_symbol,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_functor_wrapper_init(
        e: *mut t_jit_functor_wrapper,
        category: *mut t_symbol,
        name: *mut t_symbol,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_functor_setattr(
        x: *mut t_jit_object,
        s: *mut t_symbol,
        ac: t_int32,
        av: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_functor_eval_fixed_with_float32(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut t_int32,
        fp: t_jit_functor_float32_sig,
    ) -> t_int32;
}
extern "C" {
    pub fn jit_functor_eval_fixed_with_float64(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut t_int32,
        fp: t_jit_functor_float64_sig,
    ) -> t_int32;
}
extern "C" {
    pub fn jit_functor_eval_float32_with_fixed(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut f32,
        fp: t_jit_functor_fixed_sig,
    ) -> f32;
}
extern "C" {
    pub fn jit_functor_eval_float32_with_float64(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut f32,
        fp: t_jit_functor_float64_sig,
    ) -> f32;
}
extern "C" {
    pub fn jit_functor_eval_float64_with_fixed(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut f64,
        fp: t_jit_functor_fixed_sig,
    ) -> f64;
}
extern "C" {
    pub fn jit_functor_eval_float64_with_float32(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut f64,
        fp: t_jit_functor_float32_sig,
    ) -> f64;
}
extern "C" {
    pub fn jit_functor_eval_fixed_with_scalar_product(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut t_int32,
        fp: t_jit_functor_fixed_scalar_sig,
    ) -> t_int32;
}
extern "C" {
    pub fn jit_functor_eval_float32_with_scalar_product(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut f32,
        fp: t_jit_functor_float32_scalar_sig,
    ) -> f32;
}
extern "C" {
    pub fn jit_functor_eval_float64_with_scalar_product(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut f64,
        fp: t_jit_functor_float64_scalar_sig,
    ) -> f64;
}
extern "C" {
    pub fn jit_functor_eval_fixed_with_scalar_sum(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut t_int32,
        fp: t_jit_functor_fixed_scalar_sig,
    ) -> t_int32;
}
extern "C" {
    pub fn jit_functor_eval_float32_with_scalar_sum(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut f32,
        fp: t_jit_functor_float32_scalar_sig,
    ) -> f32;
}
extern "C" {
    pub fn jit_functor_eval_float64_with_scalar_sum(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut f64,
        fp: t_jit_functor_float64_scalar_sig,
    ) -> f64;
}
extern "C" {
    pub fn jit_functor_eval_fixed_with_lut_wrap_product(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut t_int32,
        fixlut: *mut t_int32,
    ) -> t_int32;
}
extern "C" {
    pub fn jit_functor_eval_fixed_with_lut_wrap_sum(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut t_int32,
        fixlut: *mut t_int32,
    ) -> t_int32;
}
extern "C" {
    pub fn jit_functor_eval_fixed_with_lut_clip_product(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut t_int32,
        fixlut: *mut t_int32,
    ) -> t_int32;
}
extern "C" {
    pub fn jit_functor_eval_fixed_with_lut_clip_sum(
        x: *mut t_jit_object,
        dimcount: t_int32,
        vals: *mut t_int32,
        fixlut: *mut t_int32,
    ) -> t_int32;
}
extern "C" {
    pub fn jit_functor_combined_dynarray_init(
        x: *mut t_jit_functor_combined_dynarray,
        count: t_int32,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_functor_combined_dynarray_destroy(
        x: *mut t_jit_functor_combined_dynarray,
    ) -> t_jit_err;
}
pub type CGDirectDisplayID = u32;
pub type t_jit_gl_context_modifier = ::std::os::raw::c_long;
extern "C" {
    pub fn max_jit_class_ob3d_wrap(c: *mut t_class);
}
extern "C" {
    pub fn max_jit_ob3d_attach(
        x: *mut ::std::os::raw::c_void,
        jit_ob: *mut t_jit_object,
        outlet: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn max_jit_ob3d_detach(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn max_jit_ob3d_assist(
        x: *mut ::std::os::raw::c_void,
        b: *mut ::std::os::raw::c_void,
        m: ::std::os::raw::c_long,
        a: ::std::os::raw::c_long,
        s: *mut ::std::os::raw::c_char,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_ob3d_acceptsdrag(
        x: *mut ::std::os::raw::c_void,
        drag: *mut t_object,
        view: *mut t_object,
    ) -> t_atom_long;
}
extern "C" {
    pub fn max_jit_ob3d_seterrorob(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn max_jit_ob3d_geterrorob() -> *mut ::std::os::raw::c_void;
}
#[doc = " t_wind_mouse_info_struct provided by jit.window and jit.pwindow mouse events"]
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_wind_mouse_info {
    #[doc = "< h, v, (up/down), cmdKey, shiftKey, alphaLock, option, control."]
    pub mouseatoms: [t_atom; 8usize],
    #[doc = "< argument count"]
    pub argc: ::std::os::raw::c_int,
    #[doc = "< mouse event type"]
    pub mousesymbol: *mut t_symbol,
    pub scalefactor: f64,
}
#[test]
fn bindgen_test_layout_t_wind_mouse_info() {
    assert_eq!(
        ::std::mem::size_of::<t_wind_mouse_info>(),
        152usize,
        concat!("Size of: ", stringify!(t_wind_mouse_info))
    );
    assert_eq!(
        ::std::mem::align_of::<t_wind_mouse_info>(),
        8usize,
        concat!("Alignment of ", stringify!(t_wind_mouse_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_wind_mouse_info>())).mouseatoms as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_wind_mouse_info),
            "::",
            stringify!(mouseatoms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_wind_mouse_info>())).argc as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(t_wind_mouse_info),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_wind_mouse_info>())).mousesymbol as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(t_wind_mouse_info),
            "::",
            stringify!(mousesymbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_wind_mouse_info>())).scalefactor as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(t_wind_mouse_info),
            "::",
            stringify!(scalefactor)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_wind_mousewheel_info {
    #[doc = "< h, v, (up/down), cmdKey, shiftKey, alphaLock, option, control, dx, dy + RFU"]
    pub mouseatoms: [t_atom; 16usize],
    #[doc = "< argument count"]
    pub argc: ::std::os::raw::c_int,
    #[doc = "< mouse event type"]
    pub mousesymbol: *mut t_symbol,
}
#[test]
fn bindgen_test_layout_t_wind_mousewheel_info() {
    assert_eq!(
        ::std::mem::size_of::<t_wind_mousewheel_info>(),
        272usize,
        concat!("Size of: ", stringify!(t_wind_mousewheel_info))
    );
    assert_eq!(
        ::std::mem::align_of::<t_wind_mousewheel_info>(),
        8usize,
        concat!("Alignment of ", stringify!(t_wind_mousewheel_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_wind_mousewheel_info>())).mouseatoms as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_wind_mousewheel_info),
            "::",
            stringify!(mouseatoms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_wind_mousewheel_info>())).argc as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(t_wind_mousewheel_info),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_wind_mousewheel_info>())).mousesymbol as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(t_wind_mousewheel_info),
            "::",
            stringify!(mousesymbol)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_wind_key_info {
    #[doc = "< keycode, textcharacter, (up/down), cmdKey, shiftKey, alphaLock, option, control."]
    pub keyatoms: [t_atom; 8usize],
    #[doc = "< argument count"]
    pub argc: ::std::os::raw::c_int,
    #[doc = "< key event type"]
    pub keysymbol: *mut t_symbol,
}
#[test]
fn bindgen_test_layout_t_wind_key_info() {
    assert_eq!(
        ::std::mem::size_of::<t_wind_key_info>(),
        144usize,
        concat!("Size of: ", stringify!(t_wind_key_info))
    );
    assert_eq!(
        ::std::mem::align_of::<t_wind_key_info>(),
        8usize,
        concat!("Alignment of ", stringify!(t_wind_key_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_wind_key_info>())).keyatoms as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_wind_key_info),
            "::",
            stringify!(keyatoms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_wind_key_info>())).argc as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(t_wind_key_info),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_wind_key_info>())).keysymbol as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(t_wind_key_info),
            "::",
            stringify!(keysymbol)
        )
    );
}
#[doc = " 3D point (GLfloat)"]
pub type t_point_3d = [f32; 3usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_pt {
    pub x: ::std::os::raw::c_long,
    pub y: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__jit_pt() {
    assert_eq!(
        ::std::mem::size_of::<_jit_pt>(),
        16usize,
        concat!("Size of: ", stringify!(_jit_pt))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_pt>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_pt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_pt>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_pt),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_pt>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_pt),
            "::",
            stringify!(y)
        )
    );
}
pub type t_jit_pt = _jit_pt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_rect {
    pub x: ::std::os::raw::c_long,
    pub y: ::std::os::raw::c_long,
    pub width: ::std::os::raw::c_long,
    pub height: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__jit_rect() {
    assert_eq!(
        ::std::mem::size_of::<_jit_rect>(),
        32usize,
        concat!("Size of: ", stringify!(_jit_rect))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_rect>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_rect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_rect>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_rect),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_rect>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_rect),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_rect>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_rect),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_rect>())).height as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_rect),
            "::",
            stringify!(height)
        )
    );
}
pub type t_jit_rect = _jit_rect;
pub type t_jit_gl_native_device = CGDirectDisplayID;
pub type t_jit_gl_native_context = *mut ::std::os::raw::c_void;
pub type t_jit_gl_native_pixelformat = *mut ::std::os::raw::c_void;
pub type GLbitfield = u32;
pub type GLboolean = u8;
pub type GLbyte = i8;
pub type GLclampf = f32;
pub type GLenum = u32;
pub type GLfloat = f32;
pub type GLint = i32;
pub type GLshort = i16;
pub type GLsizei = i32;
pub type GLubyte = u8;
pub type GLuint = u32;
pub type GLushort = u16;
pub type GLvoid = ::std::os::raw::c_void;
pub type GLcharARB = ::std::os::raw::c_char;
pub type GLhandleARB = *mut ::std::os::raw::c_void;
pub type GLdouble = f64;
pub type GLclampd = f64;
pub type GLintptr = isize;
pub type GLsizeiptr = isize;
pub type GLintptrARB = isize;
pub type GLsizeiptrARB = isize;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _jit_vec2 {
    pub __bindgen_anon_1: _jit_vec2__bindgen_ty_1,
    pub __bindgen_anon_2: _jit_vec2__bindgen_ty_2,
    pub vals: [f32; 2usize],
    _bindgen_union_align: [u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_vec2__bindgen_ty_1 {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout__jit_vec2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_jit_vec2__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_jit_vec2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_vec2__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_vec2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec2__bindgen_ty_1>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec2__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec2__bindgen_ty_1>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec2__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_vec2__bindgen_ty_2 {
    pub s: f32,
    pub t: f32,
}
#[test]
fn bindgen_test_layout__jit_vec2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_jit_vec2__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_jit_vec2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_vec2__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_vec2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec2__bindgen_ty_2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec2__bindgen_ty_2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec2__bindgen_ty_2>())).t as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec2__bindgen_ty_2),
            "::",
            stringify!(t)
        )
    );
}
#[test]
fn bindgen_test_layout__jit_vec2() {
    assert_eq!(
        ::std::mem::size_of::<_jit_vec2>(),
        8usize,
        concat!("Size of: ", stringify!(_jit_vec2))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_vec2>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_vec2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec2>())).vals as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec2),
            "::",
            stringify!(vals)
        )
    );
}
pub type t_jit_vec2 = _jit_vec2;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _jit_vec3 {
    pub __bindgen_anon_1: _jit_vec3__bindgen_ty_1,
    pub __bindgen_anon_2: _jit_vec3__bindgen_ty_2,
    pub vals: [f32; 3usize],
    _bindgen_union_align: [u32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_vec3__bindgen_ty_1 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout__jit_vec3__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_jit_vec3__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(_jit_vec3__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_vec3__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_vec3__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec3__bindgen_ty_1>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec3__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec3__bindgen_ty_1>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec3__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec3__bindgen_ty_1>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec3__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_vec3__bindgen_ty_2 {
    pub s: f32,
    pub t: f32,
    pub r: f32,
}
#[test]
fn bindgen_test_layout__jit_vec3__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_jit_vec3__bindgen_ty_2>(),
        12usize,
        concat!("Size of: ", stringify!(_jit_vec3__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_vec3__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_vec3__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec3__bindgen_ty_2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec3__bindgen_ty_2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec3__bindgen_ty_2>())).t as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec3__bindgen_ty_2),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec3__bindgen_ty_2>())).r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec3__bindgen_ty_2),
            "::",
            stringify!(r)
        )
    );
}
#[test]
fn bindgen_test_layout__jit_vec3() {
    assert_eq!(
        ::std::mem::size_of::<_jit_vec3>(),
        12usize,
        concat!("Size of: ", stringify!(_jit_vec3))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_vec3>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_vec3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec3>())).vals as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec3),
            "::",
            stringify!(vals)
        )
    );
}
pub type t_jit_vec3 = _jit_vec3;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _jit_vec4 {
    pub __bindgen_anon_1: _jit_vec4__bindgen_ty_1,
    pub __bindgen_anon_2: _jit_vec4__bindgen_ty_2,
    pub vals: [f32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_vec4__bindgen_ty_1 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout__jit_vec4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_jit_vec4__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_jit_vec4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_vec4__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_vec4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec4__bindgen_ty_1>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec4__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec4__bindgen_ty_1>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec4__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec4__bindgen_ty_1>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec4__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec4__bindgen_ty_1>())).w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec4__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_vec4__bindgen_ty_2 {
    pub s: f32,
    pub t: f32,
    pub r: f32,
    pub q: f32,
}
#[test]
fn bindgen_test_layout__jit_vec4__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_jit_vec4__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(_jit_vec4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_vec4__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_vec4__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec4__bindgen_ty_2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec4__bindgen_ty_2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec4__bindgen_ty_2>())).t as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec4__bindgen_ty_2),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec4__bindgen_ty_2>())).r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec4__bindgen_ty_2),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec4__bindgen_ty_2>())).q as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec4__bindgen_ty_2),
            "::",
            stringify!(q)
        )
    );
}
#[test]
fn bindgen_test_layout__jit_vec4() {
    assert_eq!(
        ::std::mem::size_of::<_jit_vec4>(),
        16usize,
        concat!("Size of: ", stringify!(_jit_vec4))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_vec4>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_vec4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_vec4>())).vals as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_vec4),
            "::",
            stringify!(vals)
        )
    );
}
pub type t_jit_vec4 = _jit_vec4;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _jit_quat {
    pub __bindgen_anon_1: _jit_quat__bindgen_ty_1,
    pub vals: [f32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_quat__bindgen_ty_1 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout__jit_quat__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_jit_quat__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_jit_quat__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_quat__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_quat__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_quat__bindgen_ty_1>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_quat__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_quat__bindgen_ty_1>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_quat__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_quat__bindgen_ty_1>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_quat__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_quat__bindgen_ty_1>())).w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_quat__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[test]
fn bindgen_test_layout__jit_quat() {
    assert_eq!(
        ::std::mem::size_of::<_jit_quat>(),
        16usize,
        concat!("Size of: ", stringify!(_jit_quat))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_quat>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_quat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_quat>())).vals as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_quat),
            "::",
            stringify!(vals)
        )
    );
}
pub type t_jit_quat = _jit_quat;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _jit_mat3 {
    pub __bindgen_anon_1: _jit_mat3__bindgen_ty_1,
    pub vals: [f32; 9usize],
    _bindgen_union_align: [u32; 9usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_mat3__bindgen_ty_1 {
    pub v00: f32,
    pub v10: f32,
    pub v20: f32,
    pub v01: f32,
    pub v11: f32,
    pub v21: f32,
    pub v02: f32,
    pub v12: f32,
    pub v22: f32,
}
#[test]
fn bindgen_test_layout__jit_mat3__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_jit_mat3__bindgen_ty_1>(),
        36usize,
        concat!("Size of: ", stringify!(_jit_mat3__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_mat3__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_mat3__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat3__bindgen_ty_1>())).v00 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat3__bindgen_ty_1),
            "::",
            stringify!(v00)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat3__bindgen_ty_1>())).v10 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat3__bindgen_ty_1),
            "::",
            stringify!(v10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat3__bindgen_ty_1>())).v20 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat3__bindgen_ty_1),
            "::",
            stringify!(v20)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat3__bindgen_ty_1>())).v01 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat3__bindgen_ty_1),
            "::",
            stringify!(v01)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat3__bindgen_ty_1>())).v11 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat3__bindgen_ty_1),
            "::",
            stringify!(v11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat3__bindgen_ty_1>())).v21 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat3__bindgen_ty_1),
            "::",
            stringify!(v21)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat3__bindgen_ty_1>())).v02 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat3__bindgen_ty_1),
            "::",
            stringify!(v02)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat3__bindgen_ty_1>())).v12 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat3__bindgen_ty_1),
            "::",
            stringify!(v12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat3__bindgen_ty_1>())).v22 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat3__bindgen_ty_1),
            "::",
            stringify!(v22)
        )
    );
}
#[test]
fn bindgen_test_layout__jit_mat3() {
    assert_eq!(
        ::std::mem::size_of::<_jit_mat3>(),
        36usize,
        concat!("Size of: ", stringify!(_jit_mat3))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_mat3>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_mat3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat3>())).vals as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat3),
            "::",
            stringify!(vals)
        )
    );
}
pub type t_jit_mat3 = _jit_mat3;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _jit_mat4 {
    pub __bindgen_anon_1: _jit_mat4__bindgen_ty_1,
    pub __bindgen_anon_2: _jit_mat4__bindgen_ty_2,
    pub vals: [f32; 16usize],
    _bindgen_union_align: [u32; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_mat4__bindgen_ty_1 {
    pub v00: f32,
    pub v10: f32,
    pub v20: f32,
    pub v30: f32,
    pub v01: f32,
    pub v11: f32,
    pub v21: f32,
    pub v31: f32,
    pub v02: f32,
    pub v12: f32,
    pub v22: f32,
    pub v32: f32,
    pub v03: f32,
    pub v13: f32,
    pub v23: f32,
    pub v33: f32,
}
#[test]
fn bindgen_test_layout__jit_mat4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_jit_mat4__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(_jit_mat4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_mat4__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_mat4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v00 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v00)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v10 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v20 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v20)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v30 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v30)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v01 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v01)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v11 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v21 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v21)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v31 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v31)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v02 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v02)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v12 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v22 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v22)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v32 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v03 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v03)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v13 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v23 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v23)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_1>())).v33 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_1),
            "::",
            stringify!(v33)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _jit_mat4__bindgen_ty_2 {
    pub __bindgen_anon_1: _jit_mat4__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: [u32; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_mat4__bindgen_ty_2__bindgen_ty_1 {
    pub b00: f32,
    pub b10: f32,
    pub b20: f32,
    pub p: f32,
    pub b01: f32,
    pub b11: f32,
    pub b21: f32,
    pub q: f32,
    pub b02: f32,
    pub b12: f32,
    pub b22: f32,
    pub r: f32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout__jit_mat4__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).b00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(b00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).b10 as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(b10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).b20 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(b20)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).p as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).b01 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(b01)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).b11 as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(b11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).b21 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(b21)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).q as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).b02 as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(b02)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).b12 as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(b12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).b22 as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(b22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).r as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).x as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).y as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).z as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_mat4__bindgen_ty_2__bindgen_ty_1>())).w as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[test]
fn bindgen_test_layout__jit_mat4__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_jit_mat4__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(_jit_mat4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_mat4__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_mat4__bindgen_ty_2))
    );
}
#[test]
fn bindgen_test_layout__jit_mat4() {
    assert_eq!(
        ::std::mem::size_of::<_jit_mat4>(),
        64usize,
        concat!("Size of: ", stringify!(_jit_mat4))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_mat4>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_mat4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_mat4>())).vals as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_mat4),
            "::",
            stringify!(vals)
        )
    );
}
pub type t_jit_mat4 = _jit_mat4;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _jit_line {
    pub start: t_jit_vec3,
    pub end: t_jit_vec3,
}
#[test]
fn bindgen_test_layout__jit_line() {
    assert_eq!(
        ::std::mem::size_of::<_jit_line>(),
        24usize,
        concat!("Size of: ", stringify!(_jit_line))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_line>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_line))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_line>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_line),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_line>())).end as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_line),
            "::",
            stringify!(end)
        )
    );
}
pub type t_jit_line = _jit_line;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _jit_ray {
    pub origin: t_jit_vec3,
    pub direction: t_jit_vec3,
}
#[test]
fn bindgen_test_layout__jit_ray() {
    assert_eq!(
        ::std::mem::size_of::<_jit_ray>(),
        24usize,
        concat!("Size of: ", stringify!(_jit_ray))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_ray>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_ray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_ray>())).origin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_ray),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_ray>())).direction as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_ray),
            "::",
            stringify!(direction)
        )
    );
}
pub type t_jit_ray = _jit_ray;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _jit_plane {
    pub origin: t_jit_vec3,
    pub normal: t_jit_vec3,
}
#[test]
fn bindgen_test_layout__jit_plane() {
    assert_eq!(
        ::std::mem::size_of::<_jit_plane>(),
        24usize,
        concat!("Size of: ", stringify!(_jit_plane))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_plane>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_plane))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_plane>())).origin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_plane),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_plane>())).normal as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_plane),
            "::",
            stringify!(normal)
        )
    );
}
pub type t_jit_plane = _jit_plane;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _jit_sphere {
    pub center: t_jit_vec3,
    pub radius: f32,
}
#[test]
fn bindgen_test_layout__jit_sphere() {
    assert_eq!(
        ::std::mem::size_of::<_jit_sphere>(),
        16usize,
        concat!("Size of: ", stringify!(_jit_sphere))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_sphere>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_sphere))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_sphere>())).center as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_sphere),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_sphere>())).radius as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_sphere),
            "::",
            stringify!(radius)
        )
    );
}
pub type t_jit_sphere = _jit_sphere;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _jit_aabb {
    pub min: t_jit_vec3,
    pub max: t_jit_vec3,
}
#[test]
fn bindgen_test_layout__jit_aabb() {
    assert_eq!(
        ::std::mem::size_of::<_jit_aabb>(),
        24usize,
        concat!("Size of: ", stringify!(_jit_aabb))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_aabb>(),
        4usize,
        concat!("Alignment of ", stringify!(_jit_aabb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_aabb>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_aabb),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_aabb>())).max as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_aabb),
            "::",
            stringify!(max)
        )
    );
}
pub type t_jit_aabb = _jit_aabb;
extern "C" {
    pub fn jit_vecmath_init() -> t_jit_err;
}
extern "C" {
    pub fn jit_vec2_fill(u: *mut t_jit_vec2, x: f32);
}
extern "C" {
    pub fn jit_vec2_assign(u: *mut t_jit_vec2, v: *mut t_jit_vec2);
}
extern "C" {
    pub fn jit_vec2_from_array(u: *mut t_jit_vec2, xy: *mut f32);
}
extern "C" {
    pub fn jit_vec2_from_coords(u: *mut t_jit_vec2, x: f32, y: f32);
}
extern "C" {
    pub fn jit_vec2_to_array(u: *mut t_jit_vec2, xy: *mut f32);
}
extern "C" {
    pub fn jit_vec2_to_coords(u: *mut t_jit_vec2, x: *mut f32, y: *mut f32);
}
extern "C" {
    pub fn jit_vec2_equal(u: *mut t_jit_vec2, v: *mut t_jit_vec2) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_vec2_not_equal(u: *mut t_jit_vec2, v: *mut t_jit_vec2) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_vec2_mult(u: *mut t_jit_vec2, a: *mut t_jit_vec2, b: *mut t_jit_vec2);
}
extern "C" {
    pub fn jit_vec2_scale(u: *mut t_jit_vec2, a: *mut t_jit_vec2, s: f32);
}
extern "C" {
    pub fn jit_vec2_accum_scale(u: *mut t_jit_vec2, s: f32);
}
extern "C" {
    pub fn jit_vec2_div(u: *mut t_jit_vec2, a: *mut t_jit_vec2, s: f32);
}
extern "C" {
    pub fn jit_vec2_sub(u: *mut t_jit_vec2, a: *mut t_jit_vec2, b: *mut t_jit_vec2);
}
extern "C" {
    pub fn jit_vec2_accum_sub(u: *mut t_jit_vec2, v: *mut t_jit_vec2);
}
extern "C" {
    pub fn jit_vec2_add(u: *mut t_jit_vec2, a: *mut t_jit_vec2, b: *mut t_jit_vec2);
}
extern "C" {
    pub fn jit_vec2_accum_add(u: *mut t_jit_vec2, v: *mut t_jit_vec2);
}
extern "C" {
    pub fn jit_vec2_get_coord(u: *mut t_jit_vec2, i: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn jit_vec2_mag_sqr(u: *mut t_jit_vec2) -> f32;
}
extern "C" {
    pub fn jit_vec2_mag(u: *mut t_jit_vec2) -> f32;
}
extern "C" {
    pub fn jit_vec2_negate(u: *mut t_jit_vec2);
}
extern "C" {
    pub fn jit_vec2_max(r: *mut t_jit_vec2, a: *mut t_jit_vec2, b: *mut t_jit_vec2);
}
extern "C" {
    pub fn jit_vec2_min(r: *mut t_jit_vec2, a: *mut t_jit_vec2, b: *mut t_jit_vec2);
}
extern "C" {
    pub fn jit_vec2_lerp(w: *mut t_jit_vec2, t: f32, u: *mut t_jit_vec2, v: *mut t_jit_vec2);
}
extern "C" {
    pub fn jit_vec2_is_valid(v: *mut t_jit_vec2) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_vec3_fill(u: *mut t_jit_vec3, x: f32);
}
extern "C" {
    pub fn jit_vec3_assign(u: *mut t_jit_vec3, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_from_array(u: *mut t_jit_vec3, xyz: *mut f32);
}
extern "C" {
    pub fn jit_vec3_from_coords(u: *mut t_jit_vec3, x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn jit_vec3_to_array(u: *mut t_jit_vec3, xyz: *mut f32);
}
extern "C" {
    pub fn jit_vec3_to_coords(u: *mut t_jit_vec3, x: *mut f32, y: *mut f32, z: *mut f32);
}
extern "C" {
    pub fn jit_vec3_equal(u: *mut t_jit_vec3, v: *mut t_jit_vec3) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_vec3_not_equal(u: *mut t_jit_vec3, v: *mut t_jit_vec3) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_vec3_less(u: *mut t_jit_vec3, v: *mut t_jit_vec3) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_vec3_greater(u: *mut t_jit_vec3, v: *mut t_jit_vec3) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_vec3_mult(u: *mut t_jit_vec3, a: *mut t_jit_vec3, b: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_scale(u: *mut t_jit_vec3, a: *mut t_jit_vec3, s: f32);
}
extern "C" {
    pub fn jit_vec3_accum_scale(u: *mut t_jit_vec3, s: f32);
}
extern "C" {
    pub fn jit_vec3_div(u: *mut t_jit_vec3, a: *mut t_jit_vec3, s: f32);
}
extern "C" {
    pub fn jit_vec3_sub(u: *mut t_jit_vec3, a: *mut t_jit_vec3, b: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_accum_sub(u: *mut t_jit_vec3, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_add(u: *mut t_jit_vec3, a: *mut t_jit_vec3, b: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_accum_add(u: *mut t_jit_vec3, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_madd(u: *mut t_jit_vec3, v: *mut t_jit_vec3, s: f32);
}
extern "C" {
    pub fn jit_vec3_get_coord(u: *mut t_jit_vec3, i: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn jit_vec3_mag_sqr(u: *mut t_jit_vec3) -> f32;
}
extern "C" {
    pub fn jit_vec3_mag(u: *mut t_jit_vec3) -> f32;
}
extern "C" {
    pub fn jit_vec3_negate(u: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_cross(u: *mut t_jit_vec3, a: *mut t_jit_vec3, b: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_dot(u: *mut t_jit_vec3, v: *mut t_jit_vec3) -> f32;
}
extern "C" {
    pub fn jit_vec3_reflect(r: *mut t_jit_vec3, n: *mut t_jit_vec3, l: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_normalize(u: *mut t_jit_vec3) -> f32;
}
extern "C" {
    pub fn jit_vec3_orthogonalize(u: *mut t_jit_vec3, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_orthonormalize(u: *mut t_jit_vec3, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_max(r: *mut t_jit_vec3, a: *mut t_jit_vec3, b: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_min(r: *mut t_jit_vec3, a: *mut t_jit_vec3, b: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_lerp(w: *mut t_jit_vec3, t: f32, u: *mut t_jit_vec3, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_cubemap_normal(
        v: *mut t_jit_vec3,
        i: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        cubesize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jit_vec3_is_valid(v: *mut t_jit_vec3) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_vec4_fill(u: *mut t_jit_vec4, x: f32);
}
extern "C" {
    pub fn jit_vec4_assign(u: *mut t_jit_vec4, v: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_vec4_from_array(u: *mut t_jit_vec4, xyzw: *mut f32);
}
extern "C" {
    pub fn jit_vec4_from_coords(u: *mut t_jit_vec4, x: f32, y: f32, z: f32, w: f32);
}
extern "C" {
    pub fn jit_vec4_to_array(u: *mut t_jit_vec4, xyzw: *mut f32);
}
extern "C" {
    pub fn jit_vec4_to_coords(
        u: *mut t_jit_vec4,
        x: *mut f32,
        y: *mut f32,
        z: *mut f32,
        w: *mut f32,
    );
}
extern "C" {
    pub fn jit_vec4_equal(u: *mut t_jit_vec4, v: *mut t_jit_vec4) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_vec4_not_equal(u: *mut t_jit_vec4, v: *mut t_jit_vec4) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_vec4_mult(u: *mut t_jit_vec4, a: *mut t_jit_vec4, b: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_vec4_scale(u: *mut t_jit_vec4, a: *mut t_jit_vec4, s: f32);
}
extern "C" {
    pub fn jit_vec4_accum_scale(u: *mut t_jit_vec4, s: f32);
}
extern "C" {
    pub fn jit_vec4_div(u: *mut t_jit_vec4, a: *mut t_jit_vec4, s: f32);
}
extern "C" {
    pub fn jit_vec4_sub(u: *mut t_jit_vec4, a: *mut t_jit_vec4, b: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_vec4_accum_sub(u: *mut t_jit_vec4, v: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_vec4_add(u: *mut t_jit_vec4, a: *mut t_jit_vec4, b: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_vec4_accum_add(u: *mut t_jit_vec4, v: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_vec4_get_coord(u: *mut t_jit_vec4, i: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn jit_vec4_mag_sqr(u: *mut t_jit_vec4) -> f32;
}
extern "C" {
    pub fn jit_vec4_mag(u: *mut t_jit_vec4) -> f32;
}
extern "C" {
    pub fn jit_vec4_negate(u: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_vec4_dot(u: *mut t_jit_vec4, w: *mut t_jit_vec4) -> f32;
}
extern "C" {
    pub fn jit_vec4_normalize(u: *mut t_jit_vec4) -> f32;
}
extern "C" {
    pub fn jit_vec4_max(r: *mut t_jit_vec4, a: *mut t_jit_vec4, b: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_vec4_min(r: *mut t_jit_vec4, a: *mut t_jit_vec4, b: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_vec4_lerp(w: *mut t_jit_vec4, t: f32, u: *mut t_jit_vec4, v: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_vec4_is_valid(v: *mut t_jit_vec4) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_quat_fill(u: *mut t_jit_quat, x: f32);
}
extern "C" {
    pub fn jit_quat_assign(u: *mut t_jit_quat, v: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_from_array(u: *mut t_jit_quat, xyzw: *mut f32);
}
extern "C" {
    pub fn jit_quat_from_coords(u: *mut t_jit_quat, x: f32, y: f32, z: f32, w: f32);
}
extern "C" {
    pub fn jit_quat_to_array(u: *mut t_jit_quat, xyzw: *mut f32);
}
extern "C" {
    pub fn jit_quat_to_coords(
        u: *mut t_jit_quat,
        x: *mut f32,
        y: *mut f32,
        z: *mut f32,
        w: *mut f32,
    );
}
extern "C" {
    pub fn jit_quat_equal(u: *mut t_jit_quat, v: *mut t_jit_quat) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_quat_not_equal(u: *mut t_jit_quat, v: *mut t_jit_quat) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_quat_scale(u: *mut t_jit_quat, a: *mut t_jit_quat, s: f32);
}
extern "C" {
    pub fn jit_quat_accum_scale(u: *mut t_jit_quat, s: f32);
}
extern "C" {
    pub fn jit_quat_div(u: *mut t_jit_quat, a: *mut t_jit_quat, s: f32);
}
extern "C" {
    pub fn jit_quat_add(r: *mut t_jit_quat, q1: *mut t_jit_quat, q2: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_sub(r: *mut t_jit_quat, q1: *mut t_jit_quat, q2: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_mult(r: *mut t_jit_quat, p: *mut t_jit_quat, q: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_inverse(r: *mut t_jit_quat, p: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_log(r: *mut t_jit_quat, p: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_exp(r: *mut t_jit_quat, p: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_dot(q1: *mut t_jit_quat, q2: *mut t_jit_quat) -> f32;
}
extern "C" {
    pub fn jit_quat_get_coord(u: *mut t_jit_quat, i: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn jit_quat_mag_sqr(u: *mut t_jit_quat) -> f32;
}
extern "C" {
    pub fn jit_quat_mag(u: *mut t_jit_quat) -> f32;
}
extern "C" {
    pub fn jit_quat_negate(u: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_normalize(u: *mut t_jit_quat) -> f32;
}
extern "C" {
    pub fn jit_quat_max(r: *mut t_jit_quat, a: *mut t_jit_quat, b: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_min(r: *mut t_jit_quat, a: *mut t_jit_quat, b: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_from_mat3(q: *mut t_jit_quat, m: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_from_quat(mat: *mut t_jit_mat3, q: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_from_mat4(q: *mut t_jit_quat, m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_quat_from_axisangle(q: *mut t_jit_quat, a: *mut t_jit_vec3, angle: f32);
}
extern "C" {
    pub fn jit_quat_to_axisangle(q: *mut t_jit_quat, a: *mut t_jit_vec3, angle: *mut f32);
}
extern "C" {
    pub fn jit_quat_from_xyz(q: *mut t_jit_quat, xyz: *mut f32);
}
extern "C" {
    pub fn jit_quat_to_xyz(q: *mut t_jit_quat, xyz: *mut f32);
}
extern "C" {
    pub fn jit_quat_mult_vec3(r: *mut t_jit_vec3, q: *mut t_jit_quat, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_quat_from_axes(
        q: *mut t_jit_quat,
        x: *mut t_jit_vec3,
        y: *mut t_jit_vec3,
        z: *mut t_jit_vec3,
    );
}
extern "C" {
    pub fn jit_quat_to_axes(
        q: *mut t_jit_quat,
        x: *mut t_jit_vec3,
        y: *mut t_jit_vec3,
        z: *mut t_jit_vec3,
    );
}
extern "C" {
    pub fn jit_quat_shortest_arc(q: *mut t_jit_quat, a: *mut t_jit_vec3, b: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_quat_conj(p: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_get_conj(p: *mut t_jit_quat, q: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_lerp(
        r: *mut t_jit_quat,
        s: f32,
        q1: *mut t_jit_quat,
        q2: *mut t_jit_quat,
        shortest: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jit_quat_slerp(r: *mut t_jit_quat, s: f32, q1: *mut t_jit_quat, q2: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_quat_slerp_shortest(
        r: *mut t_jit_quat,
        s: f32,
        q1: *mut t_jit_quat,
        q2: *mut t_jit_quat,
    );
}
extern "C" {
    pub fn jit_quat_squad(
        r: *mut t_jit_quat,
        s: f32,
        p: *mut t_jit_quat,
        a: *mut t_jit_quat,
        b: *mut t_jit_quat,
        q: *mut t_jit_quat,
        shortestpath: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jit_quat_trackball(
        q: *mut t_jit_quat,
        p1: *mut t_jit_vec2,
        p2: *mut t_jit_vec2,
        radius: f32,
    );
}
extern "C" {
    pub fn jit_quat_is_valid(v: *mut t_jit_quat) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_mat3_assign(m: *mut t_jit_mat3, a: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_from_array(m: *mut t_jit_mat3, v: *mut f32);
}
extern "C" {
    pub fn jit_mat3_from_array3x3(m: *mut t_jit_mat3, v: *mut *mut f32);
}
extern "C" {
    pub fn jit_mat3_from_coords(
        m: *mut t_jit_mat3,
        f0: f32,
        f1: f32,
        f2: f32,
        f3: f32,
        f4: f32,
        f5: f32,
        f6: f32,
        f7: f32,
        f8: f32,
    );
}
extern "C" {
    pub fn jit_mat3_to_array(m: *mut t_jit_mat3, v: *mut f32);
}
extern "C" {
    pub fn jit_mat3_to_array3x3(m: *mut t_jit_mat3, v: *mut *mut f32);
}
extern "C" {
    pub fn jit_mat3_to_coords(
        m: *mut t_jit_mat3,
        f0: *mut f32,
        f1: *mut f32,
        f2: *mut f32,
        f3: *mut f32,
        f4: *mut f32,
        f5: *mut f32,
        f6: *mut f32,
        f7: *mut f32,
        f8: *mut f32,
    );
}
extern "C" {
    pub fn jit_mat3_get_row(v: *mut t_jit_vec3, i: ::std::os::raw::c_long, m: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_set_row(m: *mut t_jit_mat3, i: ::std::os::raw::c_long, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_mat3_get_col(v: *mut t_jit_vec3, i: ::std::os::raw::c_long, m: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_set_col(m: *mut t_jit_mat3, i: ::std::os::raw::c_long, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_mat3_get_coord(
        m: *mut t_jit_mat3,
        r: ::std::os::raw::c_long,
        c: ::std::os::raw::c_long,
    ) -> f32;
}
extern "C" {
    pub fn jit_mat3_add(c: *mut t_jit_mat3, a: *mut t_jit_mat3, b: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_accum_add(a: *mut t_jit_mat3, b: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_accum_scale(m: *mut t_jit_mat3, s: f32);
}
extern "C" {
    pub fn jit_mat3_accum_sub(m: *mut t_jit_mat3, a: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_mult(c: *mut t_jit_mat3, a: *mut t_jit_mat3, b: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_get_transpose(b: *mut t_jit_mat3, a: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_transpose(a: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_mult_vec3(r: *mut t_jit_vec3, m: *mut t_jit_mat3, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_mult_mat3(r: *mut t_jit_vec3, v: *mut t_jit_vec3, m: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_from_axisangle(m: *mut t_jit_mat3, v: *mut t_jit_vec3, theta: f32);
}
extern "C" {
    pub fn jit_mat3_from_uv(m: *mut t_jit_mat3, u: *mut t_jit_vec3, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_mat3_determinant(m: *mut t_jit_mat3) -> f32;
}
extern "C" {
    pub fn jit_mat3_get_inverse(b: *mut t_jit_mat3, a: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_negate(m: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_tangent_basis(
        basis: *mut t_jit_mat3,
        v0: *mut t_jit_vec3,
        v1: *mut t_jit_vec3,
        v2: *mut t_jit_vec3,
        t0: *mut t_jit_vec2,
        t1: *mut t_jit_vec2,
        t2: *mut t_jit_vec2,
        n: *mut t_jit_vec3,
    );
}
extern "C" {
    pub fn jit_mat3_to_eulerxyz(m: *mut t_jit_mat3, xyz: *mut f32) -> t_bool;
}
extern "C" {
    pub fn jit_mat3_to_eulerxzy(m: *mut t_jit_mat3, xyz: *mut f32) -> t_bool;
}
extern "C" {
    pub fn jit_mat3_to_euleryxz(m: *mut t_jit_mat3, xyz: *mut f32) -> t_bool;
}
extern "C" {
    pub fn jit_mat3_to_euleryzx(m: *mut t_jit_mat3, xyz: *mut f32) -> t_bool;
}
extern "C" {
    pub fn jit_mat3_to_eulerzxy(m: *mut t_jit_mat3, xyz: *mut f32) -> t_bool;
}
extern "C" {
    pub fn jit_mat3_to_eulerzyx(m: *mut t_jit_mat3, xyz: *mut f32) -> t_bool;
}
extern "C" {
    pub fn jit_mat3_from_eulerxyz(m: *mut t_jit_mat3, fYAngle: f64, fPAngle: f64, fRAngle: f64);
}
extern "C" {
    pub fn jit_mat3_from_eulerxzy(m: *mut t_jit_mat3, fYAngle: f64, fPAngle: f64, fRAngle: f64);
}
extern "C" {
    pub fn jit_mat3_from_euleryxz(m: *mut t_jit_mat3, fYAngle: f64, fPAngle: f64, fRAngle: f64);
}
extern "C" {
    pub fn jit_mat3_from_euleryzx(m: *mut t_jit_mat3, fYAngle: f64, fPAngle: f64, fRAngle: f64);
}
extern "C" {
    pub fn jit_mat3_from_eulerzxy(m: *mut t_jit_mat3, fYAngle: f64, fPAngle: f64, fRAngle: f64);
}
extern "C" {
    pub fn jit_mat3_from_eulerzyx(m: *mut t_jit_mat3, fYAngle: f64, fPAngle: f64, fRAngle: f64);
}
extern "C" {
    pub fn jit_vec3_mult_mat4_pos(u: *mut t_jit_vec3, v: *mut t_jit_vec3, m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_mult_vec3_pos(u: *mut t_jit_vec3, m: *mut t_jit_mat4, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_mult_mat4_dir(u: *mut t_jit_vec3, v: *mut t_jit_vec3, m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_mult_vec3_dir(u: *mut t_jit_vec3, m: *mut t_jit_mat4, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_vec3_mult_mat4(u: *mut t_jit_vec3, v: *mut t_jit_vec3, m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_mult_vec3(u: *mut t_jit_vec3, m: *mut t_jit_mat4, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_mat4_assign(m: *mut t_jit_mat4, a: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_from_array(m: *mut t_jit_mat4, v: *mut f32);
}
extern "C" {
    pub fn jit_mat4_from_array4x4(m: *mut t_jit_mat4, v: *mut *mut f32);
}
extern "C" {
    pub fn jit_mat4_from_coords(
        m: *mut t_jit_mat4,
        f0: f32,
        f1: f32,
        f2: f32,
        f3: f32,
        f4: f32,
        f5: f32,
        f6: f32,
        f7: f32,
        f8: f32,
        f9: f32,
        f10: f32,
        f11: f32,
        f12: f32,
        f13: f32,
        f14: f32,
        f15: f32,
    );
}
extern "C" {
    pub fn jit_mat4_to_array(m: *mut t_jit_mat4, v: *mut f32);
}
extern "C" {
    pub fn jit_mat4_to_array4x4(m: *mut t_jit_mat4, v: *mut *mut f32);
}
extern "C" {
    pub fn jit_mat4_to_coords(
        m: *mut t_jit_mat4,
        f0: *mut f32,
        f1: *mut f32,
        f2: *mut f32,
        f3: *mut f32,
        f4: *mut f32,
        f5: *mut f32,
        f6: *mut f32,
        f7: *mut f32,
        f8: *mut f32,
        f9: *mut f32,
        f10: *mut f32,
        f11: *mut f32,
        f12: *mut f32,
        f13: *mut f32,
        f14: *mut f32,
        f15: *mut f32,
    );
}
extern "C" {
    pub fn jit_mat4_get_row(v: *mut t_jit_vec4, i: ::std::os::raw::c_long, m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_set_row(m: *mut t_jit_mat4, i: ::std::os::raw::c_long, v: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_mat4_get_col(v: *mut t_jit_vec4, i: ::std::os::raw::c_long, m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_set_col(m: *mut t_jit_mat4, i: ::std::os::raw::c_long, v: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_mat4_get_coord(
        m: *mut t_jit_mat4,
        r: ::std::os::raw::c_long,
        c: ::std::os::raw::c_long,
    ) -> f32;
}
extern "C" {
    pub fn jit_mat4_mult_vec4(u: *mut t_jit_vec4, m: *mut t_jit_mat4, v: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_vec4_mult_mat4(u: *mut t_jit_vec4, v: *mut t_jit_vec4, m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_accum_add(a: *mut t_jit_mat4, b: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_add(c: *mut t_jit_mat4, a: *mut t_jit_mat4, b: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_mult(c: *mut t_jit_mat4, a: *mut t_jit_mat4, b: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_transpose(m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_get_transpose(b: *mut t_jit_mat4, a: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_get_inverse(b: *mut t_jit_mat4, a: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_get_inverse_rot_trans(b: *mut t_jit_mat4, a: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_identity(m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_look_at(
        m: *mut t_jit_mat4,
        eye: *mut t_jit_vec3,
        center: *mut t_jit_vec3,
        up: *mut t_jit_vec3,
    );
}
extern "C" {
    pub fn jit_mat4_frustum(
        m: *mut t_jit_mat4,
        left: f32,
        right: f32,
        bottom: f32,
        top: f32,
        near: f32,
        far: f32,
    );
}
extern "C" {
    pub fn jit_mat4_perspective(m: *mut t_jit_mat4, fovy: f32, aspect: f32, near: f32, far: f32);
}
extern "C" {
    pub fn jit_mat4_ortho(
        m: *mut t_jit_mat4,
        left: f32,
        right: f32,
        bottom: f32,
        top: f32,
        near: f32,
        far: f32,
    );
}
extern "C" {
    pub fn jit_mat4_ortho_view(m: *mut t_jit_mat4, lens_angle: f32, aspect: f32, n: f32, f: f32);
}
extern "C" {
    pub fn jit_mat4_from_quat(m: *mut t_jit_mat4, q: *mut t_jit_quat);
}
extern "C" {
    pub fn jit_mat4_from_axisangle(m: *mut t_jit_mat4, v: *mut t_jit_vec3, theta: f32);
}
extern "C" {
    pub fn jit_mat4_from_uv(m: *mut t_jit_mat4, u: *mut t_jit_vec3, v: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_mat4_from_mat3(m: *mut t_jit_mat4, r: *mut t_jit_mat3);
}
extern "C" {
    pub fn jit_mat3_from_mat4(r: *mut t_jit_mat3, m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_set_scale(m: *mut t_jit_mat4, s: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_mat4_get_scale(s: *mut t_jit_vec3, m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_set_translation(m: *mut t_jit_mat4, t: *mut t_jit_vec3);
}
extern "C" {
    pub fn jit_mat4_get_translation(t: *mut t_jit_vec3, m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_mat4_negate(m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_tri_area(v1: *mut t_jit_vec3, v2: *mut t_jit_vec3, v3: *mut t_jit_vec3) -> f32;
}
extern "C" {
    pub fn jit_tri_perimeter(v1: *mut t_jit_vec3, v2: *mut t_jit_vec3, v3: *mut t_jit_vec3) -> f32;
}
extern "C" {
    pub fn jit_tri_find_in_circle(
        center: *mut t_jit_vec3,
        v1: *mut t_jit_vec3,
        v2: *mut t_jit_vec3,
        v3: *mut t_jit_vec3,
    ) -> f32;
}
extern "C" {
    pub fn jit_tri_find_circ_circle(
        center: *mut t_jit_vec3,
        v1: *mut t_jit_vec3,
        v2: *mut t_jit_vec3,
        v3: *mut t_jit_vec3,
    ) -> f32;
}
extern "C" {
    pub fn jit_ray_get_point(p: *mut t_jit_vec3, ray: *mut t_jit_ray, t: f32);
}
extern "C" {
    pub fn jit_ray_intersects_plane(
        d: *mut f32,
        ray: *mut t_jit_ray,
        plane: *mut t_jit_plane,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_ray_intersects_sphere(
        d: *mut f32,
        ray: *mut t_jit_ray,
        sphere: *mut t_jit_sphere,
        discard_inside: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_ray_intersects_box(
        d: *mut f32,
        ray: *mut t_jit_ray,
        box_: *mut t_jit_aabb,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_line_intersects_sphere(
        p1: *mut t_jit_vec3,
        line: *mut t_jit_line,
        sphere: *mut t_jit_sphere,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_line_closest_sphere(
        p1: *mut t_jit_vec3,
        line: *mut t_jit_line,
        sphere: *mut t_jit_sphere,
    );
}
extern "C" {
    pub fn jit_ob3d_draw_geometry(
        ob3d: *mut ::std::os::raw::c_void,
        geometry: *mut t_jit_object,
    ) -> t_jit_err;
}
#[doc = " Represents a view into a buffer, for use with glVertexAttribPointer etc."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_gl_buffer_view {
    pub name: *mut t_symbol,
    pub type_: uint,
    pub size: uint,
    pub normalized: uchar,
    pub stride: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_long,
    pub active: ::std::os::raw::c_long,
    pub ud: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__jit_gl_buffer_view() {
    assert_eq!(
        ::std::mem::size_of::<_jit_gl_buffer_view>(),
        48usize,
        concat!("Size of: ", stringify!(_jit_gl_buffer_view))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_gl_buffer_view>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_gl_buffer_view))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_view>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_view),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_view>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_view),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_view>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_view),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_view>())).normalized as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_view),
            "::",
            stringify!(normalized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_view>())).stride as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_view),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_view>())).offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_view),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_view>())).active as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_view),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_view>())).ud as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_view),
            "::",
            stringify!(ud)
        )
    );
}
#[doc = " Represents a view into a buffer, for use with glVertexAttribPointer etc."]
pub type t_jit_gl_buffer_view = _jit_gl_buffer_view;
#[doc = " Represents data to be stored in a buffer"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_gl_buffer_data {
    pub nviews: ::std::os::raw::c_long,
    pub views: *mut *mut t_jit_gl_buffer_view,
    pub constant: ::std::os::raw::c_long,
    pub size: ::std::os::raw::c_long,
    pub flags: ::std::os::raw::c_long,
    pub ptr: *mut ::std::os::raw::c_void,
    pub instance_div: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__jit_gl_buffer_data() {
    assert_eq!(
        ::std::mem::size_of::<_jit_gl_buffer_data>(),
        56usize,
        concat!("Size of: ", stringify!(_jit_gl_buffer_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_gl_buffer_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_gl_buffer_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_data>())).nviews as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_data),
            "::",
            stringify!(nviews)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_data>())).views as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_data),
            "::",
            stringify!(views)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_data>())).constant as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_data),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_data>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_data),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_data>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_data),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_buffer_data>())).ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_data),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_buffer_data>())).instance_div as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_buffer_data),
            "::",
            stringify!(instance_div)
        )
    );
}
#[doc = " Represents data to be stored in a buffer"]
pub type t_jit_gl_buffer_data = _jit_gl_buffer_data;
pub mod e_view_tag {
    #[doc = " Create a buffer data object with a format specified by tags"]
    #[doc = "Tag format: buffer kind, buffer type, ..., ..., VIEW_TAG_NULL"]
    #[doc = "NOTE: the list of tags must always be terminated by a VIEW_TAG_NULL tag."]
    #[doc = ""]
    #[doc = "examples:"]
    #[doc = "1) A buffer with vertices and normals:"]
    #[doc = "tags - {"]
    #[doc = "VIEW_TAG_VERTEX, VIEW_TAG_VEC3,"]
    #[doc = "VIEW_TAG_NORMAL, VIEW_TAG_VEC3,"]
    #[doc = "VIEW_TAG_NULL"]
    #[doc = "}"]
    #[doc = "buffer layout - VVVNNN"]
    #[doc = ""]
    #[doc = "2) A buffer with only vertices:"]
    #[doc = "tags - {"]
    #[doc = "VIEW_TAG_VERTEX, VIEW_TAG_VEC3,"]
    #[doc = "VIEW_TAG_NULL"]
    #[doc = "}"]
    #[doc = "buffer layout - VVV"]
    #[doc = ""]
    #[doc = "3) A buffer with vertices, texture coordinates, and colors:"]
    #[doc = "tags - {"]
    #[doc = "VIEW_TAG_VERTEX, VIEW_TAG_VEC3,"]
    #[doc = "VIEW_TAG_TEXCOORD, VIEW_TAG_VEC2,"]
    #[doc = "VIEW_TAG_COLOR, VIEW_TAG_VEC4,"]
    #[doc = "VIEW_TAG_NULL"]
    #[doc = "}"]
    #[doc = "buffer layout - VVVTTCCCC"]
    pub type Type = ::std::os::raw::c_int;
    pub const VIEW_TAG_INVALID: Type = -1;
    pub const VIEW_TAG_NULL: Type = 0;
    pub const VIEW_TAG_IGNORE: Type = 1;
    pub const VIEW_TAG_VERTEX: Type = 2;
    pub const VIEW_TAG_TEXCOORD: Type = 3;
    pub const VIEW_TAG_NORMAL: Type = 4;
    pub const VIEW_TAG_COLOR: Type = 5;
    pub const VIEW_TAG_INDEX: Type = 6;
    pub const VIEW_TAG_SPECULAR: Type = 7;
    pub const VIEW_TAG_EDGEFLAG: Type = 8;
    pub const VIEW_TAG_TANGENT: Type = 9;
    pub const VIEW_TAG_VERTEX_ATTR: Type = 10;
    pub const VIEW_TAG_VATTR0: Type = 11;
    pub const VIEW_TAG_VATTR1: Type = 12;
    pub const VIEW_TAG_VATTR2: Type = 13;
    pub const VIEW_TAG_VATTR3: Type = 14;
    pub const VIEW_TAG_CHAR: Type = 15;
    pub const VIEW_TAG_UCHAR: Type = 16;
    pub const VIEW_TAG_INT: Type = 17;
    pub const VIEW_TAG_UINT: Type = 18;
    pub const VIEW_TAG_FLOAT: Type = 19;
    pub const VIEW_TAG_DOUBLE: Type = 20;
    pub const VIEW_TAG_VEC2: Type = 21;
    pub const VIEW_TAG_VEC3: Type = 22;
    pub const VIEW_TAG_VEC4: Type = 23;
}
extern "C" {
    pub fn jit_gl_buffer_data_create_tagged(
        x: *mut t_jit_gl_buffer_data,
        tags: *mut e_view_tag::Type,
        size: ::std::os::raw::c_long,
        ptr: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn jit_gl_buffer_data_create_constant(
        x: *mut t_jit_gl_buffer_data,
        tags: *mut e_view_tag::Type,
        size: ::std::os::raw::c_long,
        ptr: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn jit_gl_buffer_data_create_from_matrix_data(
        x: *mut t_jit_gl_buffer_data,
        info: *mut t_jit_matrix_info,
        ptr: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_buffer_data_create_instances(
        x: *mut t_jit_gl_buffer_data,
        view_type: e_view_tag::Type,
        count: ::std::os::raw::c_int,
        size: ::std::os::raw::c_long,
        ptr: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn jit_gl_buffer_data_destroy_tagged(x: *mut t_jit_gl_buffer_data);
}
extern "C" {
    pub fn jit_gl_buffer_name_from_tag(view_tag: e_view_tag::Type) -> *mut t_symbol;
}
extern "C" {
    pub fn jit_gl_view_tag_for_minfo(minfo: *mut t_jit_matrix_info) -> e_view_tag::Type;
}
extern "C" {
    #[doc = " Enable transations with the rendering state"]
    pub fn jit_gl_state_begin(state: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn jit_gl_state_end();
}
pub mod e_jit_state {
    #[doc = " Enums for manipulating rendering state"]
    pub type Type = ::std::os::raw::c_uint;
    pub const JIT_STATE_FALSE: Type = 0;
    pub const JIT_STATE_TRUE: Type = 1;
    pub const JIT_STATE_POINTS: Type = 2;
    pub const JIT_STATE_LINES: Type = 3;
    pub const JIT_STATE_LINE_LOOP: Type = 4;
    pub const JIT_STATE_LINE_STRIP: Type = 5;
    pub const JIT_STATE_TRIANGLES: Type = 6;
    pub const JIT_STATE_TRIANGLE_STRIP: Type = 7;
    pub const JIT_STATE_TRIANGLE_FAN: Type = 8;
    pub const JIT_STATE_QUADS: Type = 9;
    pub const JIT_STATE_QUAD_STRIP: Type = 10;
    pub const JIT_STATE_POLYGON: Type = 11;
    pub const JIT_STATE_LINES_ADJACENCY: Type = 12;
    pub const JIT_STATE_LINE_STRIP_ADJACENCY: Type = 13;
    pub const JIT_STATE_TRIANGLES_ADJACENCY: Type = 14;
    pub const JIT_STATE_TRIANGLE_STRIP_ADJACENCY: Type = 15;
    pub const JIT_STATE_MODELVIEW: Type = 16;
    pub const JIT_STATE_PROJECTION: Type = 17;
    pub const JIT_STATE_FRONT_AND_BACK: Type = 18;
    pub const JIT_STATE_FRONT: Type = 19;
    pub const JIT_STATE_BACK: Type = 20;
    pub const JIT_STATE_2PASS: Type = 21;
    pub const JIT_STATE_CULL_FACE: Type = 22;
    pub const JIT_STATE_EMISSION: Type = 23;
    pub const JIT_STATE_AMBIENT: Type = 24;
    pub const JIT_STATE_DIFFUSE: Type = 25;
    pub const JIT_STATE_SPECULAR: Type = 26;
    pub const JIT_STATE_SHININESS: Type = 27;
    pub const JIT_STATE_AMBIENT_AND_DIFFUSE: Type = 28;
    pub const JIT_STATE_LIGHT0: Type = 100;
    pub const JIT_STATE_LIGHT1: Type = 101;
    pub const JIT_STATE_LIGHT2: Type = 102;
    pub const JIT_STATE_LIGHT3: Type = 103;
    pub const JIT_STATE_LIGHT4: Type = 104;
    pub const JIT_STATE_LIGHT5: Type = 105;
    pub const JIT_STATE_LIGHT6: Type = 106;
    pub const JIT_STATE_LIGHT7: Type = 107;
    pub const JIT_STATE_SPOT_EXPONENT: Type = 108;
    pub const JIT_STATE_SPOT_CUTOFF: Type = 109;
    pub const JIT_STATE_CONSTANT_ATTENUATION: Type = 110;
    pub const JIT_STATE_LINEAR_ATTENUATION: Type = 111;
    pub const JIT_STATE_QUADRATIC_ATTENUATION: Type = 112;
    pub const JIT_STATE_POSITION: Type = 113;
    pub const JIT_STATE_SPOT_DIRECTION: Type = 114;
    pub const JIT_STATE_LIGHT_MODEL_AMBIENT: Type = 115;
    pub const JIT_STATE_LIGHT_MODEL_TWO_SIDE: Type = 116;
    pub const JIT_STATE_LIGHTING: Type = 117;
    pub const JIT_STATE_NORMALIZE: Type = 118;
    pub const JIT_STATE_COLOR_MATERIAL: Type = 119;
    pub const JIT_STATE_POINT: Type = 120;
    pub const JIT_STATE_LINE: Type = 121;
    pub const JIT_STATE_FILL: Type = 122;
    pub const JIT_STATE_SMOOTH: Type = 123;
    pub const JIT_STATE_FLAT: Type = 124;
    pub const JIT_STATE_FOG: Type = 125;
    pub const JIT_STATE_FOG_MODE: Type = 126;
    pub const JIT_STATE_FOG_DENSITY: Type = 127;
    pub const JIT_STATE_FOG_START: Type = 128;
    pub const JIT_STATE_FOG_END: Type = 129;
    pub const JIT_STATE_FOG_COLOR: Type = 130;
    pub const JIT_STATE_LINEAR: Type = 131;
    pub const JIT_STATE_EXP: Type = 132;
    pub const JIT_STATE_EXP2: Type = 133;
    pub const JIT_STATE_INSTANCING: Type = 134;
}
extern "C" {
    #[doc = " Apply updates on the rendering state"]
    pub fn jit_gl_materialf(face: e_jit_state::Type, pname: e_jit_state::Type, v: f64);
}
extern "C" {
    pub fn jit_gl_materialfv(face: e_jit_state::Type, pname: e_jit_state::Type, v: *mut f32);
}
extern "C" {
    pub fn jit_gl_lightf(light: e_jit_state::Type, pname: e_jit_state::Type, v: f64);
}
extern "C" {
    pub fn jit_gl_lightfv(light: e_jit_state::Type, pname: e_jit_state::Type, v: *mut f32);
}
extern "C" {
    pub fn jit_gl_light_modeli(pname: e_jit_state::Type, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jit_gl_light_modelfv(pname: e_jit_state::Type, v: *mut f32);
}
extern "C" {
    pub fn jit_gl_enable(cap: e_jit_state::Type);
}
extern "C" {
    pub fn jit_gl_disable(cap: e_jit_state::Type);
}
extern "C" {
    pub fn jit_gl_polygon_mode(face: e_jit_state::Type, mode: e_jit_state::Type);
}
extern "C" {
    pub fn jit_gl_cull_face(mode: e_jit_state::Type);
}
extern "C" {
    pub fn jit_gl_shade_model(mode: e_jit_state::Type);
}
extern "C" {
    pub fn jit_gl_colorfv(c: *mut f32);
}
extern "C" {
    pub fn jit_gl_colorf(r: f64, g: f64, b: f64, a: f64);
}
extern "C" {
    pub fn jit_gl_color(c: *mut t_jit_vec4);
}
extern "C" {
    pub fn jit_gl_color_material(face: e_jit_state::Type, mode: e_jit_state::Type);
}
extern "C" {
    pub fn jit_gl_fogi(pname: e_jit_state::Type, v: ::std::os::raw::c_long);
}
extern "C" {
    pub fn jit_gl_fogf(pname: e_jit_state::Type, v: f64);
}
extern "C" {
    pub fn jit_gl_fogfv(pname: e_jit_state::Type, v: *mut f32);
}
extern "C" {
    pub fn jit_gl_matrix_mode(mode: e_jit_state::Type);
}
extern "C" {
    pub fn jit_gl_get_matrix() -> *mut t_jit_mat4;
}
extern "C" {
    pub fn jit_gl_get_modelview_matrix(modelview: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_gl_get_projection_matrix(proj: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_gl_push_matrix();
}
extern "C" {
    pub fn jit_gl_pop_matrix();
}
extern "C" {
    pub fn jit_gl_load_identity();
}
extern "C" {
    pub fn jit_gl_load_matrix(m: *mut t_jit_mat4);
}
extern "C" {
    pub fn jit_gl_translate(x: f64, y: f64, z: f64);
}
extern "C" {
    pub fn jit_gl_rotate(angle: f64, x: f64, y: f64, z: f64);
}
extern "C" {
    pub fn jit_gl_scale(x: f64, y: f64, z: f64);
}
extern "C" {
    pub fn jit_gl_ortho(left: f64, right: f64, bottom: f64, top: f64, zNear: f64, zFar: f64);
}
extern "C" {
    pub fn jit_gl_set_shader(shader: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn jit_gl_bind_texture(unit: ::std::os::raw::c_long, texture: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn jit_gl_unbind_texture(
        unit: ::std::os::raw::c_long,
        texture: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn jit_gl_immediate_begin(primitive: e_jit_state::Type);
}
extern "C" {
    pub fn jit_gl_immediate_end();
}
extern "C" {
    pub fn jit_gl_immediate_vertex2f(x: f64, y: f64);
}
extern "C" {
    pub fn jit_gl_immediate_vertex3f(x: f64, y: f64, z: f64);
}
extern "C" {
    pub fn jit_gl_immediate_texcoord2f(x: f64, y: f64);
}
extern "C" {
    pub fn jit_gl_immediate_texcoord3f(x: f64, y: f64, z: f64);
}
extern "C" {
    pub fn jit_gl_immediate_normal3f(x: f64, y: f64, z: f64);
}
extern "C" {
    pub fn jit_gl_immediate_color3f(r: f64, g: f64, b: f64);
}
extern "C" {
    pub fn jit_gl_immediate_color4f(r: f64, g: f64, b: f64, a: f64);
}
extern "C" {
    pub fn jit_gl_immediate_getgeometry() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_ob3d_state_get(x: *mut t_jit_object) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_ob3d_state_set(x: *mut t_jit_object, state: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn jit_ob3d_state_begin(x: *mut t_jit_object);
}
extern "C" {
    pub fn jit_ob3d_state_end(x: *mut t_jit_object);
}
extern "C" {
    pub fn jit_gl_fs_quad_getgeometry(
        flipped: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_gl_fs_quad_draw(
        geometry: *mut ::std::os::raw::c_void,
        state: *mut ::std::os::raw::c_void,
        width: ::std::os::raw::c_long,
        height: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jit_gl_state_bind_texture(
        state: *mut ::std::os::raw::c_void,
        unit: ::std::os::raw::c_long,
        texture: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_state_unbind_texture(
        state: *mut ::std::os::raw::c_void,
        unit: ::std::os::raw::c_long,
        texture: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_gl_texture_ex {
    pub ob: t_jit_object,
    pub pob: *mut ::std::os::raw::c_void,
    pub id: ::std::os::raw::c_long,
    pub target: ::std::os::raw::c_long,
    pub dim: [::std::os::raw::c_long; 3usize],
    pub rectangle: ::std::os::raw::c_long,
    pub flip: ::std::os::raw::c_long,
    pub name: *mut t_symbol,
    pub bindmeth: method,
    pub unbindmeth: method,
}
#[test]
fn bindgen_test_layout__jit_gl_texture_ex() {
    assert_eq!(
        ::std::mem::size_of::<_jit_gl_texture_ex>(),
        120usize,
        concat!("Size of: ", stringify!(_jit_gl_texture_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_gl_texture_ex>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_gl_texture_ex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_texture_ex>())).ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_texture_ex),
            "::",
            stringify!(ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_texture_ex>())).pob as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_texture_ex),
            "::",
            stringify!(pob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_texture_ex>())).id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_texture_ex),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_texture_ex>())).target as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_texture_ex),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_texture_ex>())).dim as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_texture_ex),
            "::",
            stringify!(dim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_texture_ex>())).rectangle as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_texture_ex),
            "::",
            stringify!(rectangle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_texture_ex>())).flip as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_texture_ex),
            "::",
            stringify!(flip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_texture_ex>())).name as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_texture_ex),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_texture_ex>())).bindmeth as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_texture_ex),
            "::",
            stringify!(bindmeth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_texture_ex>())).unbindmeth as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_texture_ex),
            "::",
            stringify!(unbindmeth)
        )
    );
}
pub type t_jit_gl_texture_ex = _jit_gl_texture_ex;
extern "C" {
    pub fn jit_gl_texture_ex_set_transform(
        x: *mut t_jit_gl_texture_ex,
        state: *mut ::std::os::raw::c_void,
        unit: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
#[doc = " t_jit_glchunk is a public structure to store one gl-command's-worth of data,"]
#[doc = " in a format which can be passed easily to glDrawRangeElements, and matrixoutput."]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_glchunk {
    #[doc = "< drawing primitive. \"tri_strip\", \"tri\", \"quads\", \"quad_grid\", etc."]
    pub prim: *mut t_symbol,
    #[doc = "< vertex matrix containing xyzst... data"]
    pub m_vertex: *mut t_jit_object,
    #[doc = "< vertex matrix name"]
    pub m_vertex_name: *mut t_symbol,
    #[doc = "< optional 1d matrix of vertex indices to use with drawing primitive"]
    pub m_index: *mut t_jit_object,
    #[doc = "< index matrix name"]
    pub m_index_name: *mut t_symbol,
    #[doc = "< chunk flags to ignore texture, normal, color, or edge planes when drawing"]
    pub m_flags: ::std::os::raw::c_ulong,
    #[doc = "< pointer to next chunk for drawing a list of chunks together"]
    pub next_chunk: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__jit_glchunk() {
    assert_eq!(
        ::std::mem::size_of::<_jit_glchunk>(),
        56usize,
        concat!("Size of: ", stringify!(_jit_glchunk))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_glchunk>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_glchunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_glchunk>())).prim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_glchunk),
            "::",
            stringify!(prim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_glchunk>())).m_vertex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_glchunk),
            "::",
            stringify!(m_vertex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_glchunk>())).m_vertex_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_glchunk),
            "::",
            stringify!(m_vertex_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_glchunk>())).m_index as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_glchunk),
            "::",
            stringify!(m_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_glchunk>())).m_index_name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_glchunk),
            "::",
            stringify!(m_index_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_glchunk>())).m_flags as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_glchunk),
            "::",
            stringify!(m_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_glchunk>())).next_chunk as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_glchunk),
            "::",
            stringify!(next_chunk)
        )
    );
}
#[doc = " t_jit_glchunk is a public structure to store one gl-command's-worth of data,"]
#[doc = " in a format which can be passed easily to glDrawRangeElements, and matrixoutput."]
#[doc = ""]
pub type t_jit_glchunk = _jit_glchunk;
extern "C" {
    pub fn jit_glchunk_new(
        prim: *mut t_symbol,
        planes: ::std::os::raw::c_int,
        vertices: ::std::os::raw::c_int,
        indices: ::std::os::raw::c_int,
    ) -> *mut t_jit_glchunk;
}
extern "C" {
    pub fn jit_glchunk_grid_new(
        prim: *mut t_symbol,
        planes: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut t_jit_glchunk;
}
extern "C" {
    pub fn jit_glchunk_delete(x: *mut t_jit_glchunk);
}
extern "C" {
    pub fn jit_glchunk_copy(
        newcopy: *mut *mut t_jit_glchunk,
        orig: *mut t_jit_glchunk,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_glchunk_new_frommatrix(
        prim: *mut t_symbol,
        vm: *mut ::std::os::raw::c_void,
        im: *mut ::std::os::raw::c_void,
    ) -> *mut t_jit_glchunk;
}
extern "C" {
    pub fn jit_ob3d_setup(
        jit_class: *mut ::std::os::raw::c_void,
        oboffset: ::std::os::raw::c_long,
        ob3d_flags: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_ob3d_set(
        x: *mut ::std::os::raw::c_void,
        p: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_ob3d_get(x: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_ob3d_new(
        x: *mut ::std::os::raw::c_void,
        dest_name: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_ob3d_free(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn jit_ob3d_set_context(x: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn jit_ob3d_draw_chunk(
        ob3d: *mut ::std::os::raw::c_void,
        chunk: *mut t_jit_glchunk,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_ob3d_set_viewport(
        v: *mut ::std::os::raw::c_void,
        x: ::std::os::raw::c_long,
        y: ::std::os::raw::c_long,
        width: ::std::os::raw::c_long,
        height: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jit_ob3d_init_jpatcher_render(jitob: *mut ::std::os::raw::c_void) -> *mut t_symbol;
}
extern "C" {
    pub fn jit_ob3d_dest_name_set(
        x: *mut t_jit_object,
        attr: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_vbo_create(
        x: *mut ::std::os::raw::c_void,
        target: GLenum,
        usage: GLenum,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_vbo_submit(
        x: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_long,
        data: *const ::std::os::raw::c_void,
    ) -> t_jit_err;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_gl_support {
    pub initialized: ::std::os::raw::c_long,
    pub color_buffer_float: ::std::os::raw::c_long,
    pub color_float_pixels: ::std::os::raw::c_long,
    pub color_red_bits: ::std::os::raw::c_long,
    pub color_green_bits: ::std::os::raw::c_long,
    pub color_blue_bits: ::std::os::raw::c_long,
    pub color_alpha_bits: ::std::os::raw::c_long,
    pub color_index_bits: ::std::os::raw::c_long,
    pub accum_red_bits: ::std::os::raw::c_long,
    pub accum_green_bits: ::std::os::raw::c_long,
    pub accum_blue_bits: ::std::os::raw::c_long,
    pub accum_alpha_bits: ::std::os::raw::c_long,
    pub stencil_bits: ::std::os::raw::c_long,
    pub depth_bits: ::std::os::raw::c_long,
    pub aux_buffers: ::std::os::raw::c_long,
    pub multitexture: ::std::os::raw::c_long,
    pub multisample: ::std::os::raw::c_long,
    pub multisample_buffers: ::std::os::raw::c_long,
    pub multisample_samples: ::std::os::raw::c_long,
    pub light_count: ::std::os::raw::c_long,
    pub texture_units: ::std::os::raw::c_long,
    pub texture_image_units: ::std::os::raw::c_long,
    pub texture_max_size: ::std::os::raw::c_long,
    pub texture_3d: ::std::os::raw::c_long,
    pub texture_cubemap: ::std::os::raw::c_long,
    pub texture_depth: ::std::os::raw::c_long,
    pub texture_shadow: ::std::os::raw::c_long,
    pub texture_float: ::std::os::raw::c_long,
    pub texture_env: ::std::os::raw::c_long,
    pub texture_env_add: ::std::os::raw::c_long,
    pub texture_env_combine: ::std::os::raw::c_long,
    pub texture_env_crossbar: ::std::os::raw::c_long,
    pub texture_env_dot3: ::std::os::raw::c_long,
    pub texture_env_target: ::std::os::raw::c_long,
    pub texture_border_clamp: ::std::os::raw::c_long,
    pub texture_mirrored_repeat: ::std::os::raw::c_long,
    pub texture_anisotropic: ::std::os::raw::c_long,
    pub texture_max_anisotropy: ::std::os::raw::c_long,
    pub texture_rect: ::std::os::raw::c_long,
    pub texture_rect_target: ::std::os::raw::c_long,
    pub texture_rect_uniform: ::std::os::raw::c_long,
    pub texture_compression: ::std::os::raw::c_long,
    pub texture_compression_s3tc: ::std::os::raw::c_long,
    pub texture_compression_vtc: ::std::os::raw::c_long,
    pub texture_range: ::std::os::raw::c_long,
    pub client_storage: ::std::os::raw::c_long,
    pub pixel_float16: ::std::os::raw::c_long,
    pub pixel_float32: ::std::os::raw::c_long,
    pub pixel_float_target: ::std::os::raw::c_long,
    pub pbo: ::std::os::raw::c_long,
    pub fbo: ::std::os::raw::c_long,
    pub vbo: ::std::os::raw::c_long,
    pub pbuffer: ::std::os::raw::c_long,
    pub pbuffer_float: ::std::os::raw::c_long,
    pub pbuffer_float_target: ::std::os::raw::c_long,
    pub pbuffer_rtt: ::std::os::raw::c_long,
    pub pbuffer_rtt_rect: ::std::os::raw::c_long,
    pub pbuffer_rtt_rect_target: ::std::os::raw::c_long,
    pub pbuffer_rtt_depth: ::std::os::raw::c_long,
    pub shader_objects_glsl_arb: ::std::os::raw::c_long,
    pub vertex_shader_glsl_arb: ::std::os::raw::c_long,
    pub fragment_shader_glsl_arb: ::std::os::raw::c_long,
    pub shading_language_support_glsl_arb: ::std::os::raw::c_long,
    pub vertex_program_arb: ::std::os::raw::c_long,
    pub fragment_program_arb: ::std::os::raw::c_long,
    pub vertex_program_nv: ::std::os::raw::c_long,
    pub vertex_program_nv_version: ::std::os::raw::c_long,
    pub fragment_program_nv: ::std::os::raw::c_long,
    pub fragment_program_nv_version: ::std::os::raw::c_long,
    pub fragment_program_shadow: ::std::os::raw::c_long,
    pub geometry_shader: ::std::os::raw::c_long,
    pub gpu_program4_nv: ::std::os::raw::c_long,
    pub transform_feedback: ::std::os::raw::c_long,
    pub gpu_program_parameters: ::std::os::raw::c_long,
    pub gpu_shader4: ::std::os::raw::c_long,
    pub version_major: ::std::os::raw::c_long,
    pub version_minor: ::std::os::raw::c_long,
    pub version_release: ::std::os::raw::c_long,
    pub glsl_version_major: ::std::os::raw::c_long,
    pub glsl_version_minor: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__jit_gl_support() {
    assert_eq!(
        ::std::mem::size_of::<_jit_gl_support>(),
        640usize,
        concat!("Size of: ", stringify!(_jit_gl_support))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_gl_support>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_gl_support))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).initialized as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).color_buffer_float as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(color_buffer_float)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).color_float_pixels as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(color_float_pixels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).color_red_bits as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(color_red_bits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).color_green_bits as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(color_green_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).color_blue_bits as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(color_blue_bits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).color_alpha_bits as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(color_alpha_bits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).color_index_bits as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(color_index_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).accum_red_bits as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(accum_red_bits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).accum_green_bits as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(accum_green_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).accum_blue_bits as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(accum_blue_bits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).accum_alpha_bits as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(accum_alpha_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).stencil_bits as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(stencil_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).depth_bits as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(depth_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).aux_buffers as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(aux_buffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).multitexture as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(multitexture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).multisample as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(multisample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).multisample_buffers as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(multisample_buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).multisample_samples as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(multisample_samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).light_count as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(light_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).texture_units as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_image_units as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_image_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_max_size as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_max_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).texture_3d as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_3d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).texture_cubemap as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_cubemap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).texture_depth as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).texture_shadow as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_shadow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).texture_float as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).texture_env as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).texture_env_add as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_env_add)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_env_combine as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_env_combine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_env_crossbar as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_env_crossbar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_env_dot3 as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_env_dot3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_env_target as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_env_target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_border_clamp as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_border_clamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_mirrored_repeat as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_mirrored_repeat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_anisotropic as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_anisotropic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_max_anisotropy as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_max_anisotropy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).texture_rect as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_rect_target as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_rect_target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_rect_uniform as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_rect_uniform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_compression as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_compression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_compression_s3tc as *const _
                as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_compression_s3tc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).texture_compression_vtc as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_compression_vtc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).texture_range as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(texture_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).client_storage as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(client_storage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).pixel_float16 as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(pixel_float16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).pixel_float32 as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(pixel_float32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).pixel_float_target as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(pixel_float_target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).pbo as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(pbo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).fbo as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(fbo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).vbo as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(vbo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).pbuffer as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(pbuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).pbuffer_float as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(pbuffer_float)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).pbuffer_float_target as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(pbuffer_float_target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).pbuffer_rtt as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(pbuffer_rtt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).pbuffer_rtt_rect as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(pbuffer_rtt_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).pbuffer_rtt_rect_target as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(pbuffer_rtt_rect_target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).pbuffer_rtt_depth as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(pbuffer_rtt_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).shader_objects_glsl_arb as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(shader_objects_glsl_arb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).vertex_shader_glsl_arb as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(vertex_shader_glsl_arb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).fragment_shader_glsl_arb as *const _
                as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(fragment_shader_glsl_arb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).shading_language_support_glsl_arb
                as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(shading_language_support_glsl_arb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).vertex_program_arb as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(vertex_program_arb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).fragment_program_arb as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(fragment_program_arb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).vertex_program_nv as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(vertex_program_nv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).vertex_program_nv_version as *const _
                as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(vertex_program_nv_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).fragment_program_nv as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(fragment_program_nv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).fragment_program_nv_version as *const _
                as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(fragment_program_nv_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).fragment_program_shadow as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(fragment_program_shadow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).geometry_shader as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(geometry_shader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).gpu_program4_nv as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(gpu_program4_nv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).transform_feedback as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(transform_feedback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).gpu_program_parameters as *const _ as usize
        },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(gpu_program_parameters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).gpu_shader4 as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(gpu_shader4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).version_major as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(version_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).version_minor as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(version_minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_support>())).version_release as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(version_release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).glsl_version_major as *const _ as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(glsl_version_major)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_support>())).glsl_version_minor as *const _ as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_support),
            "::",
            stringify!(glsl_version_minor)
        )
    );
}
pub type t_jit_gl_support = _jit_gl_support;
extern "C" {
    pub fn jit_gl_support_new() -> *mut t_jit_gl_support;
}
extern "C" {
    pub fn jit_gl_support_init(
        x: *mut t_jit_gl_support,
        extensions: *const ::std::os::raw::c_char,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_support_field_value(
        x: *mut t_jit_gl_support,
        name: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_support_free(x: *mut t_jit_gl_support);
}
pub type GLhalfNV = ::std::os::raw::c_ushort;
extern "C" {
    pub fn jit_gl_procs_init() -> t_jit_err;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_jit_gl_extprocs {
    pub BlendColor: ::std::option::Option<
        unsafe extern "C" fn(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf),
    >,
    pub BlendEquation: ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>,
    pub DrawRangeElements: ::std::option::Option<
        unsafe extern "C" fn(
            mode: GLenum,
            start: GLuint,
            end: GLuint,
            count: GLsizei,
            type_: GLenum,
            indices: *const GLvoid,
        ),
    >,
    pub ColorTable: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            format: GLenum,
            type_: GLenum,
            table: *const GLvoid,
        ),
    >,
    pub ColorTableParameterfv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub ColorTableParameteriv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub CopyColorTable: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            x: GLint,
            y: GLint,
            width: GLsizei,
        ),
    >,
    pub GetColorTable: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, table: *mut GLvoid),
    >,
    pub GetColorTableParameterfv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetColorTableParameteriv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub ColorSubTable: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            start: GLsizei,
            count: GLsizei,
            format: GLenum,
            type_: GLenum,
            data: *const GLvoid,
        ),
    >,
    pub CopyColorSubTable: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei),
    >,
    pub ConvolutionFilter1D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            format: GLenum,
            type_: GLenum,
            image: *const GLvoid,
        ),
    >,
    pub ConvolutionFilter2D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            format: GLenum,
            type_: GLenum,
            image: *const GLvoid,
        ),
    >,
    pub ConvolutionParameterf:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: GLfloat)>,
    pub ConvolutionParameterfv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub ConvolutionParameteri:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: GLint)>,
    pub ConvolutionParameteriv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub CopyConvolutionFilter1D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            x: GLint,
            y: GLint,
            width: GLsizei,
        ),
    >,
    pub CopyConvolutionFilter2D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            x: GLint,
            y: GLint,
            width: GLsizei,
            height: GLsizei,
        ),
    >,
    pub GetConvolutionFilter: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, image: *mut GLvoid),
    >,
    pub GetConvolutionParameterfv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetConvolutionParameteriv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetSeparableFilter: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            format: GLenum,
            type_: GLenum,
            row: *mut GLvoid,
            column: *mut GLvoid,
            span: *mut GLvoid,
        ),
    >,
    pub SeparableFilter2D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            format: GLenum,
            type_: GLenum,
            row: *const GLvoid,
            column: *const GLvoid,
        ),
    >,
    pub GetHistogram: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            reset: GLboolean,
            format: GLenum,
            type_: GLenum,
            values: *mut GLvoid,
        ),
    >,
    pub GetHistogramParameterfv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetHistogramParameteriv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetMinmax: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            reset: GLboolean,
            format: GLenum,
            type_: GLenum,
            values: *mut GLvoid,
        ),
    >,
    pub GetMinmaxParameterfv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetMinmaxParameteriv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub Histogram: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            width: GLsizei,
            internalformat: GLenum,
            sink: GLboolean,
        ),
    >,
    pub Minmax: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, internalformat: GLenum, sink: GLboolean),
    >,
    pub ResetHistogram: ::std::option::Option<unsafe extern "C" fn(target: GLenum)>,
    pub ResetMinmax: ::std::option::Option<unsafe extern "C" fn(target: GLenum)>,
    pub TexImage3D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            internalformat: GLint,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            border: GLint,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub TexSubImage3D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            zoffset: GLint,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub CopyTexSubImage3D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            zoffset: GLint,
            x: GLint,
            y: GLint,
            width: GLsizei,
            height: GLsizei,
        ),
    >,
    pub ActiveTexture: ::std::option::Option<unsafe extern "C" fn(texture: GLenum)>,
    pub ClientActiveTexture: ::std::option::Option<unsafe extern "C" fn(texture: GLenum)>,
    pub MultiTexCoord1d: ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLdouble)>,
    pub MultiTexCoord1dv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLdouble)>,
    pub MultiTexCoord1f: ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLfloat)>,
    pub MultiTexCoord1fv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLfloat)>,
    pub MultiTexCoord1i: ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLint)>,
    pub MultiTexCoord1iv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLint)>,
    pub MultiTexCoord1s: ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLshort)>,
    pub MultiTexCoord1sv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLshort)>,
    pub MultiTexCoord2d:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble)>,
    pub MultiTexCoord2dv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLdouble)>,
    pub MultiTexCoord2f:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat)>,
    pub MultiTexCoord2fv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLfloat)>,
    pub MultiTexCoord2i:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLint, t: GLint)>,
    pub MultiTexCoord2iv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLint)>,
    pub MultiTexCoord2s:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLshort, t: GLshort)>,
    pub MultiTexCoord2sv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLshort)>,
    pub MultiTexCoord3d: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble),
    >,
    pub MultiTexCoord3dv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLdouble)>,
    pub MultiTexCoord3f: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat),
    >,
    pub MultiTexCoord3fv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLfloat)>,
    pub MultiTexCoord3i:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint)>,
    pub MultiTexCoord3iv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLint)>,
    pub MultiTexCoord3s: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort),
    >,
    pub MultiTexCoord3sv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLshort)>,
    pub MultiTexCoord4d: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble),
    >,
    pub MultiTexCoord4dv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLdouble)>,
    pub MultiTexCoord4f: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat),
    >,
    pub MultiTexCoord4fv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLfloat)>,
    pub MultiTexCoord4i: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint),
    >,
    pub MultiTexCoord4iv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLint)>,
    pub MultiTexCoord4s: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort),
    >,
    pub MultiTexCoord4sv:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLshort)>,
    pub LoadTransposeMatrixf: ::std::option::Option<unsafe extern "C" fn(m: *const GLfloat)>,
    pub LoadTransposeMatrixd: ::std::option::Option<unsafe extern "C" fn(m: *const GLdouble)>,
    pub MultTransposeMatrixf: ::std::option::Option<unsafe extern "C" fn(m: *const GLfloat)>,
    pub MultTransposeMatrixd: ::std::option::Option<unsafe extern "C" fn(m: *const GLdouble)>,
    pub SampleCoverage:
        ::std::option::Option<unsafe extern "C" fn(value: GLclampf, invert: GLboolean)>,
    pub CompressedTexImage3D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            border: GLint,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub CompressedTexImage2D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            border: GLint,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub CompressedTexImage1D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            width: GLsizei,
            border: GLint,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub CompressedTexSubImage3D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            zoffset: GLint,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            format: GLenum,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub CompressedTexSubImage2D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            width: GLsizei,
            height: GLsizei,
            format: GLenum,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub CompressedTexSubImage1D: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            width: GLsizei,
            format: GLenum,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub GetCompressedTexImage:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, level: GLint, img: *mut GLvoid)>,
    pub BlendFuncSeparate: ::std::option::Option<
        unsafe extern "C" fn(
            sfactorRGB: GLenum,
            dfactorRGB: GLenum,
            sfactorAlpha: GLenum,
            dfactorAlpha: GLenum,
        ),
    >,
    pub FogCoordf: ::std::option::Option<unsafe extern "C" fn(coord: GLfloat)>,
    pub FogCoordfv: ::std::option::Option<unsafe extern "C" fn(coord: *const GLfloat)>,
    pub FogCoordd: ::std::option::Option<unsafe extern "C" fn(coord: GLdouble)>,
    pub FogCoorddv: ::std::option::Option<unsafe extern "C" fn(coord: *const GLdouble)>,
    pub FogCoordPointer: ::std::option::Option<
        unsafe extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *const GLvoid),
    >,
    pub MultiDrawArrays: ::std::option::Option<
        unsafe extern "C" fn(
            mode: GLenum,
            first: *mut GLint,
            count: *mut GLsizei,
            primcount: GLsizei,
        ),
    >,
    pub MultiDrawElements: ::std::option::Option<
        unsafe extern "C" fn(
            mode: GLenum,
            count: *const GLsizei,
            type_: GLenum,
            indices: *mut *const GLvoid,
            primcount: GLsizei,
        ),
    >,
    pub PointParameterf: ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>,
    pub PointParameterfv:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>,
    pub PointParameteri: ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>,
    pub PointParameteriv:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>,
    pub SecondaryColor3b:
        ::std::option::Option<unsafe extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte)>,
    pub SecondaryColor3bv: ::std::option::Option<unsafe extern "C" fn(v: *const GLbyte)>,
    pub SecondaryColor3d:
        ::std::option::Option<unsafe extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble)>,
    pub SecondaryColor3dv: ::std::option::Option<unsafe extern "C" fn(v: *const GLdouble)>,
    pub SecondaryColor3f:
        ::std::option::Option<unsafe extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat)>,
    pub SecondaryColor3fv: ::std::option::Option<unsafe extern "C" fn(v: *const GLfloat)>,
    pub SecondaryColor3i:
        ::std::option::Option<unsafe extern "C" fn(red: GLint, green: GLint, blue: GLint)>,
    pub SecondaryColor3iv: ::std::option::Option<unsafe extern "C" fn(v: *const GLint)>,
    pub SecondaryColor3s:
        ::std::option::Option<unsafe extern "C" fn(red: GLshort, green: GLshort, blue: GLshort)>,
    pub SecondaryColor3sv: ::std::option::Option<unsafe extern "C" fn(v: *const GLshort)>,
    pub SecondaryColor3ub:
        ::std::option::Option<unsafe extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte)>,
    pub SecondaryColor3ubv: ::std::option::Option<unsafe extern "C" fn(v: *const GLubyte)>,
    pub SecondaryColor3ui:
        ::std::option::Option<unsafe extern "C" fn(red: GLuint, green: GLuint, blue: GLuint)>,
    pub SecondaryColor3uiv: ::std::option::Option<unsafe extern "C" fn(v: *const GLuint)>,
    pub SecondaryColor3us:
        ::std::option::Option<unsafe extern "C" fn(red: GLushort, green: GLushort, blue: GLushort)>,
    pub SecondaryColor3usv: ::std::option::Option<unsafe extern "C" fn(v: *const GLushort)>,
    pub SecondaryColorPointer: ::std::option::Option<
        unsafe extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const GLvoid),
    >,
    pub WindowPos2d: ::std::option::Option<unsafe extern "C" fn(x: GLdouble, y: GLdouble)>,
    pub WindowPos2dv: ::std::option::Option<unsafe extern "C" fn(v: *const GLdouble)>,
    pub WindowPos2f: ::std::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat)>,
    pub WindowPos2fv: ::std::option::Option<unsafe extern "C" fn(v: *const GLfloat)>,
    pub WindowPos2i: ::std::option::Option<unsafe extern "C" fn(x: GLint, y: GLint)>,
    pub WindowPos2iv: ::std::option::Option<unsafe extern "C" fn(v: *const GLint)>,
    pub WindowPos2s: ::std::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort)>,
    pub WindowPos2sv: ::std::option::Option<unsafe extern "C" fn(v: *const GLshort)>,
    pub WindowPos3d:
        ::std::option::Option<unsafe extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble)>,
    pub WindowPos3dv: ::std::option::Option<unsafe extern "C" fn(v: *const GLdouble)>,
    pub WindowPos3f:
        ::std::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat)>,
    pub WindowPos3fv: ::std::option::Option<unsafe extern "C" fn(v: *const GLfloat)>,
    pub WindowPos3i: ::std::option::Option<unsafe extern "C" fn(x: GLint, y: GLint, z: GLint)>,
    pub WindowPos3iv: ::std::option::Option<unsafe extern "C" fn(v: *const GLint)>,
    pub WindowPos3s:
        ::std::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort, z: GLshort)>,
    pub WindowPos3sv: ::std::option::Option<unsafe extern "C" fn(v: *const GLshort)>,
    pub GenQueries: ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>,
    pub DeleteQueries: ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *const GLuint)>,
    pub IsQuery: ::std::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>,
    pub BeginQuery: ::std::option::Option<unsafe extern "C" fn(target: GLenum, id: GLuint)>,
    pub EndQuery: ::std::option::Option<unsafe extern "C" fn(target: GLenum)>,
    pub GetQueryiv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetQueryObjectiv:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint)>,
    pub GetQueryObjectuiv:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint)>,
    pub BindBuffer: ::std::option::Option<unsafe extern "C" fn(target: GLenum, buffer: GLuint)>,
    pub DeleteBuffers:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *const GLuint)>,
    pub GenBuffers: ::std::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *mut GLuint)>,
    pub IsBuffer: ::std::option::Option<unsafe extern "C" fn(buffer: GLuint) -> GLboolean>,
    pub BufferData: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, size: GLsizeiptr, data: *const GLvoid, usage: GLenum),
    >,
    pub BufferSubData: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            offset: GLintptr,
            size: GLsizeiptr,
            data: *const GLvoid,
        ),
    >,
    pub GetBufferSubData: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *mut GLvoid),
    >,
    pub MapBuffer:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, access: GLenum) -> *mut GLvoid>,
    pub UnmapBuffer: ::std::option::Option<unsafe extern "C" fn(target: GLenum) -> GLboolean>,
    pub GetBufferParameteriv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetBufferPointerv: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut *mut GLvoid),
    >,
    pub ActiveTextureARB: ::std::option::Option<unsafe extern "C" fn(texture: GLenum)>,
    pub ClientActiveTextureARB: ::std::option::Option<unsafe extern "C" fn(texture: GLenum)>,
    pub MultiTexCoord1dARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLdouble)>,
    pub MultiTexCoord1dvARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLdouble)>,
    pub MultiTexCoord1fARB: ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLfloat)>,
    pub MultiTexCoord1fvARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLfloat)>,
    pub MultiTexCoord1iARB: ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLint)>,
    pub MultiTexCoord1ivARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLint)>,
    pub MultiTexCoord1sARB: ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLshort)>,
    pub MultiTexCoord1svARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLshort)>,
    pub MultiTexCoord2dARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble)>,
    pub MultiTexCoord2dvARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLdouble)>,
    pub MultiTexCoord2fARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat)>,
    pub MultiTexCoord2fvARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLfloat)>,
    pub MultiTexCoord2iARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLint, t: GLint)>,
    pub MultiTexCoord2ivARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLint)>,
    pub MultiTexCoord2sARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLshort, t: GLshort)>,
    pub MultiTexCoord2svARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLshort)>,
    pub MultiTexCoord3dARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble),
    >,
    pub MultiTexCoord3dvARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLdouble)>,
    pub MultiTexCoord3fARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat),
    >,
    pub MultiTexCoord3fvARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLfloat)>,
    pub MultiTexCoord3iARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint)>,
    pub MultiTexCoord3ivARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLint)>,
    pub MultiTexCoord3sARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort),
    >,
    pub MultiTexCoord3svARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLshort)>,
    pub MultiTexCoord4dARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble),
    >,
    pub MultiTexCoord4dvARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLdouble)>,
    pub MultiTexCoord4fARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat),
    >,
    pub MultiTexCoord4fvARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLfloat)>,
    pub MultiTexCoord4iARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint),
    >,
    pub MultiTexCoord4ivARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLint)>,
    pub MultiTexCoord4sARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort),
    >,
    pub MultiTexCoord4svARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLshort)>,
    pub LoadTransposeMatrixfARB: ::std::option::Option<unsafe extern "C" fn(m: *const GLfloat)>,
    pub LoadTransposeMatrixdARB: ::std::option::Option<unsafe extern "C" fn(m: *const GLdouble)>,
    pub MultTransposeMatrixfARB: ::std::option::Option<unsafe extern "C" fn(m: *const GLfloat)>,
    pub MultTransposeMatrixdARB: ::std::option::Option<unsafe extern "C" fn(m: *const GLdouble)>,
    pub SampleCoverageARB:
        ::std::option::Option<unsafe extern "C" fn(value: GLclampf, invert: GLboolean)>,
    pub CompressedTexImage3DARB: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            border: GLint,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub CompressedTexImage2DARB: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            border: GLint,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub CompressedTexImage1DARB: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            width: GLsizei,
            border: GLint,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub CompressedTexSubImage3DARB: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            zoffset: GLint,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            format: GLenum,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub CompressedTexSubImage2DARB: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            width: GLsizei,
            height: GLsizei,
            format: GLenum,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub CompressedTexSubImage1DARB: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            width: GLsizei,
            format: GLenum,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub GetCompressedTexImageARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, level: GLint, img: *mut GLvoid)>,
    pub PointParameterfARB:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>,
    pub PointParameterfvARB:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>,
    pub WeightbvARB:
        ::std::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLbyte)>,
    pub WeightsvARB:
        ::std::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLshort)>,
    pub WeightivARB:
        ::std::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLint)>,
    pub WeightfvARB:
        ::std::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLfloat)>,
    pub WeightdvARB:
        ::std::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLdouble)>,
    pub WeightubvARB:
        ::std::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLubyte)>,
    pub WeightusvARB:
        ::std::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLushort)>,
    pub WeightuivARB:
        ::std::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLuint)>,
    pub WeightPointerARB: ::std::option::Option<
        unsafe extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const GLvoid),
    >,
    pub VertexBlendARB: ::std::option::Option<unsafe extern "C" fn(count: GLint)>,
    pub CurrentPaletteMatrixARB: ::std::option::Option<unsafe extern "C" fn(index: GLint)>,
    pub MatrixIndexubvARB:
        ::std::option::Option<unsafe extern "C" fn(size: GLint, indices: *const GLubyte)>,
    pub MatrixIndexusvARB:
        ::std::option::Option<unsafe extern "C" fn(size: GLint, indices: *const GLushort)>,
    pub MatrixIndexuivARB:
        ::std::option::Option<unsafe extern "C" fn(size: GLint, indices: *const GLuint)>,
    pub MatrixIndexPointerARB: ::std::option::Option<
        unsafe extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const GLvoid),
    >,
    pub WindowPos2dARB: ::std::option::Option<unsafe extern "C" fn(x: GLdouble, y: GLdouble)>,
    pub WindowPos2dvARB: ::std::option::Option<unsafe extern "C" fn(v: *const GLdouble)>,
    pub WindowPos2fARB: ::std::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat)>,
    pub WindowPos2fvARB: ::std::option::Option<unsafe extern "C" fn(v: *const GLfloat)>,
    pub WindowPos2iARB: ::std::option::Option<unsafe extern "C" fn(x: GLint, y: GLint)>,
    pub WindowPos2ivARB: ::std::option::Option<unsafe extern "C" fn(v: *const GLint)>,
    pub WindowPos2sARB: ::std::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort)>,
    pub WindowPos2svARB: ::std::option::Option<unsafe extern "C" fn(v: *const GLshort)>,
    pub WindowPos3dARB:
        ::std::option::Option<unsafe extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble)>,
    pub WindowPos3dvARB: ::std::option::Option<unsafe extern "C" fn(v: *const GLdouble)>,
    pub WindowPos3fARB:
        ::std::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat)>,
    pub WindowPos3fvARB: ::std::option::Option<unsafe extern "C" fn(v: *const GLfloat)>,
    pub WindowPos3iARB: ::std::option::Option<unsafe extern "C" fn(x: GLint, y: GLint, z: GLint)>,
    pub WindowPos3ivARB: ::std::option::Option<unsafe extern "C" fn(v: *const GLint)>,
    pub WindowPos3sARB:
        ::std::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort, z: GLshort)>,
    pub WindowPos3svARB: ::std::option::Option<unsafe extern "C" fn(v: *const GLshort)>,
    pub VertexAttrib1dARB: ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble)>,
    pub VertexAttrib1dvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>,
    pub VertexAttrib1fARB: ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat)>,
    pub VertexAttrib1fvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>,
    pub VertexAttrib1sARB: ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort)>,
    pub VertexAttrib1svARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>,
    pub VertexAttrib2dARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble)>,
    pub VertexAttrib2dvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>,
    pub VertexAttrib2fARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat)>,
    pub VertexAttrib2fvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>,
    pub VertexAttrib2sARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort)>,
    pub VertexAttrib2svARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>,
    pub VertexAttrib3dARB: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble),
    >,
    pub VertexAttrib3dvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>,
    pub VertexAttrib3fARB: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat),
    >,
    pub VertexAttrib3fvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>,
    pub VertexAttrib3sARB: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort),
    >,
    pub VertexAttrib3svARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>,
    pub VertexAttrib4NbvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>,
    pub VertexAttrib4NivARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>,
    pub VertexAttrib4NsvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>,
    pub VertexAttrib4NubARB: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte),
    >,
    pub VertexAttrib4NubvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>,
    pub VertexAttrib4NuivARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>,
    pub VertexAttrib4NusvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>,
    pub VertexAttrib4bvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>,
    pub VertexAttrib4dARB: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
    >,
    pub VertexAttrib4dvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>,
    pub VertexAttrib4fARB: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat),
    >,
    pub VertexAttrib4fvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>,
    pub VertexAttrib4ivARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>,
    pub VertexAttrib4sARB: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort),
    >,
    pub VertexAttrib4svARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>,
    pub VertexAttrib4ubvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>,
    pub VertexAttrib4uivARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>,
    pub VertexAttrib4usvARB:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>,
    pub VertexAttribPointerARB: ::std::option::Option<
        unsafe extern "C" fn(
            index: GLuint,
            size: GLint,
            type_: GLenum,
            normalized: GLboolean,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub EnableVertexAttribArrayARB: ::std::option::Option<unsafe extern "C" fn(index: GLuint)>,
    pub DisableVertexAttribArrayARB: ::std::option::Option<unsafe extern "C" fn(index: GLuint)>,
    pub ProgramStringARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, format: GLenum, len: GLsizei, string: *const GLvoid),
    >,
    pub BindProgramARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, program: GLuint)>,
    pub DeleteProgramsARB:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, programs: *const GLuint)>,
    pub GenProgramsARB:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, programs: *mut GLuint)>,
    pub ProgramEnvParameter4dARB: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            index: GLuint,
            x: GLdouble,
            y: GLdouble,
            z: GLdouble,
            w: GLdouble,
        ),
    >,
    pub ProgramEnvParameter4dvARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, params: *const GLdouble),
    >,
    pub ProgramEnvParameter4fARB: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            index: GLuint,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
            w: GLfloat,
        ),
    >,
    pub ProgramEnvParameter4fvARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, params: *const GLfloat),
    >,
    pub ProgramLocalParameter4dARB: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            index: GLuint,
            x: GLdouble,
            y: GLdouble,
            z: GLdouble,
            w: GLdouble,
        ),
    >,
    pub ProgramLocalParameter4dvARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, params: *const GLdouble),
    >,
    pub ProgramLocalParameter4fARB: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            index: GLuint,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
            w: GLfloat,
        ),
    >,
    pub ProgramLocalParameter4fvARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, params: *const GLfloat),
    >,
    pub GetProgramEnvParameterdvARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, params: *mut GLdouble),
    >,
    pub GetProgramEnvParameterfvARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, params: *mut GLfloat),
    >,
    pub GetProgramLocalParameterdvARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, params: *mut GLdouble),
    >,
    pub GetProgramLocalParameterfvARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, params: *mut GLfloat),
    >,
    pub GetProgramivARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetProgramStringARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, string: *mut GLvoid),
    >,
    pub GetVertexAttribdvARB: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLdouble),
    >,
    pub GetVertexAttribfvARB: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetVertexAttribivARB: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub GetVertexAttribPointervARB: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, pname: GLenum, pointer: *mut *mut GLvoid),
    >,
    pub IsProgramARB: ::std::option::Option<unsafe extern "C" fn(program: GLuint) -> GLboolean>,
    pub BindBufferARB: ::std::option::Option<unsafe extern "C" fn(target: GLenum, buffer: GLuint)>,
    pub DeleteBuffersARB:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *const GLuint)>,
    pub GenBuffersARB:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *mut GLuint)>,
    pub IsBufferARB: ::std::option::Option<unsafe extern "C" fn(buffer: GLuint) -> GLboolean>,
    pub BufferDataARB: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            size: GLsizeiptrARB,
            data: *const GLvoid,
            usage: GLenum,
        ),
    >,
    pub BufferSubDataARB: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            offset: GLintptrARB,
            size: GLsizeiptrARB,
            data: *const GLvoid,
        ),
    >,
    pub GetBufferSubDataARB: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            offset: GLintptrARB,
            size: GLsizeiptrARB,
            data: *mut GLvoid,
        ),
    >,
    pub MapBufferARB:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, access: GLenum) -> *mut GLvoid>,
    pub UnmapBufferARB: ::std::option::Option<unsafe extern "C" fn(target: GLenum) -> GLboolean>,
    pub GetBufferParameterivARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetBufferPointervARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut *mut GLvoid),
    >,
    pub GenQueriesARB: ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>,
    pub DeleteQueriesARB:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *const GLuint)>,
    pub IsQueryARB: ::std::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>,
    pub BeginQueryARB: ::std::option::Option<unsafe extern "C" fn(target: GLenum, id: GLuint)>,
    pub EndQueryARB: ::std::option::Option<unsafe extern "C" fn(target: GLenum)>,
    pub GetQueryivARB: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetQueryObjectivARB:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint)>,
    pub GetQueryObjectuivARB:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint)>,
    pub DeleteObjectARB: ::std::option::Option<unsafe extern "C" fn(obj: GLhandleARB)>,
    pub GetHandleARB: ::std::option::Option<unsafe extern "C" fn(pname: GLenum) -> GLhandleARB>,
    pub DetachObjectARB: ::std::option::Option<
        unsafe extern "C" fn(containerObj: GLhandleARB, attachedObj: GLhandleARB),
    >,
    pub CreateShaderObjectARB:
        ::std::option::Option<unsafe extern "C" fn(shaderType: GLenum) -> GLhandleARB>,
    pub ShaderSourceARB: ::std::option::Option<
        unsafe extern "C" fn(
            shaderObj: GLhandleARB,
            count: GLsizei,
            string: *mut *const GLcharARB,
            length: *const GLint,
        ),
    >,
    pub CompileShaderARB: ::std::option::Option<unsafe extern "C" fn(shaderObj: GLhandleARB)>,
    pub CreateProgramObjectARB: ::std::option::Option<unsafe extern "C" fn() -> GLhandleARB>,
    pub AttachObjectARB:
        ::std::option::Option<unsafe extern "C" fn(containerObj: GLhandleARB, obj: GLhandleARB)>,
    pub LinkProgramARB: ::std::option::Option<unsafe extern "C" fn(programObj: GLhandleARB)>,
    pub UseProgramObjectARB: ::std::option::Option<unsafe extern "C" fn(programObj: GLhandleARB)>,
    pub ValidateProgramARB: ::std::option::Option<unsafe extern "C" fn(programObj: GLhandleARB)>,
    pub Uniform1fARB: ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLfloat)>,
    pub Uniform2fARB:
        ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat)>,
    pub Uniform3fARB: ::std::option::Option<
        unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat),
    >,
    pub Uniform4fARB: ::std::option::Option<
        unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat),
    >,
    pub Uniform1iARB: ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint)>,
    pub Uniform2iARB:
        ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint)>,
    pub Uniform3iARB: ::std::option::Option<
        unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint),
    >,
    pub Uniform4iARB: ::std::option::Option<
        unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint),
    >,
    pub Uniform1fvARB: ::std::option::Option<
        unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
    >,
    pub Uniform2fvARB: ::std::option::Option<
        unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
    >,
    pub Uniform3fvARB: ::std::option::Option<
        unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
    >,
    pub Uniform4fvARB: ::std::option::Option<
        unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
    >,
    pub Uniform1ivARB: ::std::option::Option<
        unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
    >,
    pub Uniform2ivARB: ::std::option::Option<
        unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
    >,
    pub Uniform3ivARB: ::std::option::Option<
        unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
    >,
    pub Uniform4ivARB: ::std::option::Option<
        unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
    >,
    pub UniformMatrix2fvARB: ::std::option::Option<
        unsafe extern "C" fn(
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub UniformMatrix3fvARB: ::std::option::Option<
        unsafe extern "C" fn(
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub UniformMatrix4fvARB: ::std::option::Option<
        unsafe extern "C" fn(
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub GetObjectParameterfvARB: ::std::option::Option<
        unsafe extern "C" fn(obj: GLhandleARB, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetObjectParameterivARB: ::std::option::Option<
        unsafe extern "C" fn(obj: GLhandleARB, pname: GLenum, params: *mut GLint),
    >,
    pub GetInfoLogARB: ::std::option::Option<
        unsafe extern "C" fn(
            obj: GLhandleARB,
            maxLength: GLsizei,
            length: *mut GLsizei,
            infoLog: *mut GLcharARB,
        ),
    >,
    pub GetAttachedObjectsARB: ::std::option::Option<
        unsafe extern "C" fn(
            containerObj: GLhandleARB,
            maxCount: GLsizei,
            count: *mut GLsizei,
            obj: *mut GLhandleARB,
        ),
    >,
    pub GetUniformLocationARB: ::std::option::Option<
        unsafe extern "C" fn(programObj: GLhandleARB, name: *const GLcharARB) -> GLint,
    >,
    pub GetActiveUniformARB: ::std::option::Option<
        unsafe extern "C" fn(
            programObj: GLhandleARB,
            index: GLuint,
            maxLength: GLsizei,
            length: *mut GLsizei,
            size: *mut GLint,
            type_: *mut GLenum,
            name: *mut GLcharARB,
        ),
    >,
    pub GetUniformfvARB: ::std::option::Option<
        unsafe extern "C" fn(programObj: GLhandleARB, location: GLint, params: *mut GLfloat),
    >,
    pub GetUniformivARB: ::std::option::Option<
        unsafe extern "C" fn(programObj: GLhandleARB, location: GLint, params: *mut GLint),
    >,
    pub GetShaderSourceARB: ::std::option::Option<
        unsafe extern "C" fn(
            obj: GLhandleARB,
            maxLength: GLsizei,
            length: *mut GLsizei,
            source: *mut GLcharARB,
        ),
    >,
    pub BindAttribLocationARB: ::std::option::Option<
        unsafe extern "C" fn(programObj: GLhandleARB, index: GLuint, name: *const GLcharARB),
    >,
    pub GetActiveAttribARB: ::std::option::Option<
        unsafe extern "C" fn(
            programObj: GLhandleARB,
            index: GLuint,
            maxLength: GLsizei,
            length: *mut GLsizei,
            size: *mut GLint,
            type_: *mut GLenum,
            name: *mut GLcharARB,
        ),
    >,
    pub GetAttribLocationARB: ::std::option::Option<
        unsafe extern "C" fn(programObj: GLhandleARB, name: *const GLcharARB) -> GLint,
    >,
    pub BlendColorEXT: ::std::option::Option<
        unsafe extern "C" fn(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf),
    >,
    pub PolygonOffsetEXT:
        ::std::option::Option<unsafe extern "C" fn(factor: GLfloat, bias: GLfloat)>,
    pub TexImage3DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            border: GLint,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub TexSubImage3DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            zoffset: GLint,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub GetTexFilterFuncSGIS: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, filter: GLenum, weights: *mut GLfloat),
    >,
    pub TexFilterFuncSGIS: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, filter: GLenum, n: GLsizei, weights: *const GLfloat),
    >,
    pub TexSubImage1DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            width: GLsizei,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub TexSubImage2DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            width: GLsizei,
            height: GLsizei,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub CopyTexImage1DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            x: GLint,
            y: GLint,
            width: GLsizei,
            border: GLint,
        ),
    >,
    pub CopyTexImage2DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            x: GLint,
            y: GLint,
            width: GLsizei,
            height: GLsizei,
            border: GLint,
        ),
    >,
    pub CopyTexSubImage1DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            x: GLint,
            y: GLint,
            width: GLsizei,
        ),
    >,
    pub CopyTexSubImage2DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            x: GLint,
            y: GLint,
            width: GLsizei,
            height: GLsizei,
        ),
    >,
    pub CopyTexSubImage3DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            zoffset: GLint,
            x: GLint,
            y: GLint,
            width: GLsizei,
            height: GLsizei,
        ),
    >,
    pub GetHistogramEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            reset: GLboolean,
            format: GLenum,
            type_: GLenum,
            values: *mut GLvoid,
        ),
    >,
    pub GetHistogramParameterfvEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetHistogramParameterivEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetMinmaxEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            reset: GLboolean,
            format: GLenum,
            type_: GLenum,
            values: *mut GLvoid,
        ),
    >,
    pub GetMinmaxParameterfvEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetMinmaxParameterivEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub HistogramEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            width: GLsizei,
            internalformat: GLenum,
            sink: GLboolean,
        ),
    >,
    pub MinmaxEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, internalformat: GLenum, sink: GLboolean),
    >,
    pub ResetHistogramEXT: ::std::option::Option<unsafe extern "C" fn(target: GLenum)>,
    pub ResetMinmaxEXT: ::std::option::Option<unsafe extern "C" fn(target: GLenum)>,
    pub ConvolutionFilter1DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            format: GLenum,
            type_: GLenum,
            image: *const GLvoid,
        ),
    >,
    pub ConvolutionFilter2DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            format: GLenum,
            type_: GLenum,
            image: *const GLvoid,
        ),
    >,
    pub ConvolutionParameterfEXT:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: GLfloat)>,
    pub ConvolutionParameterfvEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub ConvolutionParameteriEXT:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: GLint)>,
    pub ConvolutionParameterivEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub CopyConvolutionFilter1DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            x: GLint,
            y: GLint,
            width: GLsizei,
        ),
    >,
    pub CopyConvolutionFilter2DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            x: GLint,
            y: GLint,
            width: GLsizei,
            height: GLsizei,
        ),
    >,
    pub GetConvolutionFilterEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, image: *mut GLvoid),
    >,
    pub GetConvolutionParameterfvEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetConvolutionParameterivEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetSeparableFilterEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            format: GLenum,
            type_: GLenum,
            row: *mut GLvoid,
            column: *mut GLvoid,
            span: *mut GLvoid,
        ),
    >,
    pub SeparableFilter2DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            format: GLenum,
            type_: GLenum,
            row: *const GLvoid,
            column: *const GLvoid,
        ),
    >,
    pub ColorTableSGI: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            format: GLenum,
            type_: GLenum,
            table: *const GLvoid,
        ),
    >,
    pub ColorTableParameterfvSGI: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub ColorTableParameterivSGI: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub CopyColorTableSGI: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            x: GLint,
            y: GLint,
            width: GLsizei,
        ),
    >,
    pub GetColorTableSGI: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, table: *mut GLvoid),
    >,
    pub GetColorTableParameterfvSGI: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetColorTableParameterivSGI: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub PixelTexGenSGIX: ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>,
    pub PixelTexGenParameteriSGIS:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>,
    pub PixelTexGenParameterivSGIS:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>,
    pub PixelTexGenParameterfSGIS:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>,
    pub PixelTexGenParameterfvSGIS:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>,
    pub GetPixelTexGenParameterivSGIS:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLint)>,
    pub GetPixelTexGenParameterfvSGIS:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLfloat)>,
    pub TexImage4DSGIS: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            size4d: GLsizei,
            border: GLint,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub TexSubImage4DSGIS: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            zoffset: GLint,
            woffset: GLint,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            size4d: GLsizei,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub AreTexturesResidentEXT: ::std::option::Option<
        unsafe extern "C" fn(
            n: GLsizei,
            textures: *const GLuint,
            residences: *mut GLboolean,
        ) -> GLboolean,
    >,
    pub BindTextureEXT:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, texture: GLuint)>,
    pub DeleteTexturesEXT:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, textures: *const GLuint)>,
    pub GenTexturesEXT:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, textures: *mut GLuint)>,
    pub IsTextureEXT: ::std::option::Option<unsafe extern "C" fn(texture: GLuint) -> GLboolean>,
    pub PrioritizeTexturesEXT: ::std::option::Option<
        unsafe extern "C" fn(n: GLsizei, textures: *const GLuint, priorities: *const GLclampf),
    >,
    pub DetailTexFuncSGIS: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, n: GLsizei, points: *const GLfloat),
    >,
    pub GetDetailTexFuncSGIS:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, points: *mut GLfloat)>,
    pub SharpenTexFuncSGIS: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, n: GLsizei, points: *const GLfloat),
    >,
    pub GetSharpenTexFuncSGIS:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, points: *mut GLfloat)>,
    pub SampleMaskSGIS:
        ::std::option::Option<unsafe extern "C" fn(value: GLclampf, invert: GLboolean)>,
    pub SamplePatternSGIS: ::std::option::Option<unsafe extern "C" fn(pattern: GLenum)>,
    pub ArrayElementEXT: ::std::option::Option<unsafe extern "C" fn(i: GLint)>,
    pub ColorPointerEXT: ::std::option::Option<
        unsafe extern "C" fn(
            size: GLint,
            type_: GLenum,
            stride: GLsizei,
            count: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub DrawArraysEXT:
        ::std::option::Option<unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei)>,
    pub EdgeFlagPointerEXT: ::std::option::Option<
        unsafe extern "C" fn(stride: GLsizei, count: GLsizei, pointer: *const GLboolean),
    >,
    pub GetPointervEXT:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut *mut GLvoid)>,
    pub IndexPointerEXT: ::std::option::Option<
        unsafe extern "C" fn(
            type_: GLenum,
            stride: GLsizei,
            count: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub NormalPointerEXT: ::std::option::Option<
        unsafe extern "C" fn(
            type_: GLenum,
            stride: GLsizei,
            count: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub TexCoordPointerEXT: ::std::option::Option<
        unsafe extern "C" fn(
            size: GLint,
            type_: GLenum,
            stride: GLsizei,
            count: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub VertexPointerEXT: ::std::option::Option<
        unsafe extern "C" fn(
            size: GLint,
            type_: GLenum,
            stride: GLsizei,
            count: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub BlendEquationEXT: ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>,
    pub SpriteParameterfSGIX:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>,
    pub SpriteParameterfvSGIX:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>,
    pub SpriteParameteriSGIX:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>,
    pub SpriteParameterivSGIX:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>,
    pub PointParameterfEXT:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>,
    pub PointParameterfvEXT:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>,
    pub PointParameterfSGIS:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>,
    pub PointParameterfvSGIS:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>,
    pub GetInstrumentsSGIX: ::std::option::Option<unsafe extern "C" fn() -> GLint>,
    pub InstrumentsBufferSGIX:
        ::std::option::Option<unsafe extern "C" fn(size: GLsizei, buffer: *mut GLint)>,
    pub PollInstrumentsSGIX:
        ::std::option::Option<unsafe extern "C" fn(marker_p: *mut GLint) -> GLint>,
    pub ReadInstrumentsSGIX: ::std::option::Option<unsafe extern "C" fn(marker: GLint)>,
    pub StartInstrumentsSGIX: ::std::option::Option<unsafe extern "C" fn()>,
    pub StopInstrumentsSGIX: ::std::option::Option<unsafe extern "C" fn(marker: GLint)>,
    pub FrameZoomSGIX: ::std::option::Option<unsafe extern "C" fn(factor: GLint)>,
    pub TagSampleBufferSGIX: ::std::option::Option<unsafe extern "C" fn()>,
    pub DeformationMap3dSGIX: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            u1: GLdouble,
            u2: GLdouble,
            ustride: GLint,
            uorder: GLint,
            v1: GLdouble,
            v2: GLdouble,
            vstride: GLint,
            vorder: GLint,
            w1: GLdouble,
            w2: GLdouble,
            wstride: GLint,
            worder: GLint,
            points: *const GLdouble,
        ),
    >,
    pub DeformationMap3fSGIX: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            u1: GLfloat,
            u2: GLfloat,
            ustride: GLint,
            uorder: GLint,
            v1: GLfloat,
            v2: GLfloat,
            vstride: GLint,
            vorder: GLint,
            w1: GLfloat,
            w2: GLfloat,
            wstride: GLint,
            worder: GLint,
            points: *const GLfloat,
        ),
    >,
    pub DeformSGIX: ::std::option::Option<unsafe extern "C" fn(mask: GLbitfield)>,
    pub LoadIdentityDeformationMapSGIX:
        ::std::option::Option<unsafe extern "C" fn(mask: GLbitfield)>,
    pub ReferencePlaneSGIX: ::std::option::Option<unsafe extern "C" fn(equation: *const GLdouble)>,
    pub FlushRasterSGIX: ::std::option::Option<unsafe extern "C" fn()>,
    pub FogFuncSGIS:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, points: *const GLfloat)>,
    pub GetFogFuncSGIS: ::std::option::Option<unsafe extern "C" fn(points: *mut GLfloat)>,
    pub ImageTransformParameteriHP:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLint)>,
    pub ImageTransformParameterfHP:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat)>,
    pub ImageTransformParameterivHP: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub ImageTransformParameterfvHP: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub GetImageTransformParameterivHP: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetImageTransformParameterfvHP: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub ColorSubTableEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            start: GLsizei,
            count: GLsizei,
            format: GLenum,
            type_: GLenum,
            data: *const GLvoid,
        ),
    >,
    pub CopyColorSubTableEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei),
    >,
    pub HintPGI: ::std::option::Option<unsafe extern "C" fn(target: GLenum, mode: GLint)>,
    pub ColorTableEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalFormat: GLenum,
            width: GLsizei,
            format: GLenum,
            type_: GLenum,
            table: *const GLvoid,
        ),
    >,
    pub GetColorTableEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, data: *mut GLvoid),
    >,
    pub GetColorTableParameterivEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetColorTableParameterfvEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetListParameterfvSGIX: ::std::option::Option<
        unsafe extern "C" fn(list: GLuint, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetListParameterivSGIX: ::std::option::Option<
        unsafe extern "C" fn(list: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub ListParameterfSGIX:
        ::std::option::Option<unsafe extern "C" fn(list: GLuint, pname: GLenum, param: GLfloat)>,
    pub ListParameterfvSGIX: ::std::option::Option<
        unsafe extern "C" fn(list: GLuint, pname: GLenum, params: *const GLfloat),
    >,
    pub ListParameteriSGIX:
        ::std::option::Option<unsafe extern "C" fn(list: GLuint, pname: GLenum, param: GLint)>,
    pub ListParameterivSGIX: ::std::option::Option<
        unsafe extern "C" fn(list: GLuint, pname: GLenum, params: *const GLint),
    >,
    pub IndexMaterialEXT: ::std::option::Option<unsafe extern "C" fn(face: GLenum, mode: GLenum)>,
    pub IndexFuncEXT: ::std::option::Option<unsafe extern "C" fn(func: GLenum, ref_: GLclampf)>,
    pub LockArraysEXT: ::std::option::Option<unsafe extern "C" fn(first: GLint, count: GLsizei)>,
    pub UnlockArraysEXT: ::std::option::Option<unsafe extern "C" fn()>,
    pub CullParameterdvEXT:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLdouble)>,
    pub CullParameterfvEXT:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLfloat)>,
    pub FragmentColorMaterialSGIX:
        ::std::option::Option<unsafe extern "C" fn(face: GLenum, mode: GLenum)>,
    pub FragmentLightfSGIX:
        ::std::option::Option<unsafe extern "C" fn(light: GLenum, pname: GLenum, param: GLfloat)>,
    pub FragmentLightfvSGIX: ::std::option::Option<
        unsafe extern "C" fn(light: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub FragmentLightiSGIX:
        ::std::option::Option<unsafe extern "C" fn(light: GLenum, pname: GLenum, param: GLint)>,
    pub FragmentLightivSGIX: ::std::option::Option<
        unsafe extern "C" fn(light: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub FragmentLightModelfSGIX:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>,
    pub FragmentLightModelfvSGIX:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>,
    pub FragmentLightModeliSGIX:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>,
    pub FragmentLightModelivSGIX:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>,
    pub FragmentMaterialfSGIX:
        ::std::option::Option<unsafe extern "C" fn(face: GLenum, pname: GLenum, param: GLfloat)>,
    pub FragmentMaterialfvSGIX: ::std::option::Option<
        unsafe extern "C" fn(face: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub FragmentMaterialiSGIX:
        ::std::option::Option<unsafe extern "C" fn(face: GLenum, pname: GLenum, param: GLint)>,
    pub FragmentMaterialivSGIX: ::std::option::Option<
        unsafe extern "C" fn(face: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub GetFragmentLightfvSGIX: ::std::option::Option<
        unsafe extern "C" fn(light: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetFragmentLightivSGIX: ::std::option::Option<
        unsafe extern "C" fn(light: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetFragmentMaterialfvSGIX: ::std::option::Option<
        unsafe extern "C" fn(face: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetFragmentMaterialivSGIX: ::std::option::Option<
        unsafe extern "C" fn(face: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub LightEnviSGIX: ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>,
    pub DrawRangeElementsEXT: ::std::option::Option<
        unsafe extern "C" fn(
            mode: GLenum,
            start: GLuint,
            end: GLuint,
            count: GLsizei,
            type_: GLenum,
            indices: *const GLvoid,
        ),
    >,
    pub ApplyTextureEXT: ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>,
    pub TextureLightEXT: ::std::option::Option<unsafe extern "C" fn(pname: GLenum)>,
    pub TextureMaterialEXT: ::std::option::Option<unsafe extern "C" fn(face: GLenum, mode: GLenum)>,
    pub AsyncMarkerSGIX: ::std::option::Option<unsafe extern "C" fn(marker: GLuint)>,
    pub FinishAsyncSGIX: ::std::option::Option<unsafe extern "C" fn(markerp: *mut GLuint) -> GLint>,
    pub PollAsyncSGIX: ::std::option::Option<unsafe extern "C" fn(markerp: *mut GLuint) -> GLint>,
    pub GenAsyncMarkersSGIX: ::std::option::Option<unsafe extern "C" fn(range: GLsizei) -> GLuint>,
    pub DeleteAsyncMarkersSGIX:
        ::std::option::Option<unsafe extern "C" fn(marker: GLuint, range: GLsizei)>,
    pub IsAsyncMarkerSGIX: ::std::option::Option<unsafe extern "C" fn(marker: GLuint) -> GLboolean>,
    pub VertexPointervINTEL: ::std::option::Option<
        unsafe extern "C" fn(size: GLint, type_: GLenum, pointer: *mut *const GLvoid),
    >,
    pub NormalPointervINTEL:
        ::std::option::Option<unsafe extern "C" fn(type_: GLenum, pointer: *mut *const GLvoid)>,
    pub ColorPointervINTEL: ::std::option::Option<
        unsafe extern "C" fn(size: GLint, type_: GLenum, pointer: *mut *const GLvoid),
    >,
    pub TexCoordPointervINTEL: ::std::option::Option<
        unsafe extern "C" fn(size: GLint, type_: GLenum, pointer: *mut *const GLvoid),
    >,
    pub PixelTransformParameteriEXT:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLint)>,
    pub PixelTransformParameterfEXT:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat)>,
    pub PixelTransformParameterivEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub PixelTransformParameterfvEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub SecondaryColor3bEXT:
        ::std::option::Option<unsafe extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte)>,
    pub SecondaryColor3bvEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLbyte)>,
    pub SecondaryColor3dEXT:
        ::std::option::Option<unsafe extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble)>,
    pub SecondaryColor3dvEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLdouble)>,
    pub SecondaryColor3fEXT:
        ::std::option::Option<unsafe extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat)>,
    pub SecondaryColor3fvEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLfloat)>,
    pub SecondaryColor3iEXT:
        ::std::option::Option<unsafe extern "C" fn(red: GLint, green: GLint, blue: GLint)>,
    pub SecondaryColor3ivEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLint)>,
    pub SecondaryColor3sEXT:
        ::std::option::Option<unsafe extern "C" fn(red: GLshort, green: GLshort, blue: GLshort)>,
    pub SecondaryColor3svEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLshort)>,
    pub SecondaryColor3ubEXT:
        ::std::option::Option<unsafe extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte)>,
    pub SecondaryColor3ubvEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLubyte)>,
    pub SecondaryColor3uiEXT:
        ::std::option::Option<unsafe extern "C" fn(red: GLuint, green: GLuint, blue: GLuint)>,
    pub SecondaryColor3uivEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLuint)>,
    pub SecondaryColor3usEXT:
        ::std::option::Option<unsafe extern "C" fn(red: GLushort, green: GLushort, blue: GLushort)>,
    pub SecondaryColor3usvEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLushort)>,
    pub SecondaryColorPointerEXT: ::std::option::Option<
        unsafe extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const GLvoid),
    >,
    pub TextureNormalEXT: ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>,
    pub MultiDrawArraysEXT: ::std::option::Option<
        unsafe extern "C" fn(
            mode: GLenum,
            first: *mut GLint,
            count: *mut GLsizei,
            primcount: GLsizei,
        ),
    >,
    pub MultiDrawElementsEXT: ::std::option::Option<
        unsafe extern "C" fn(
            mode: GLenum,
            count: *const GLsizei,
            type_: GLenum,
            indices: *mut *const GLvoid,
            primcount: GLsizei,
        ),
    >,
    pub FogCoordfEXT: ::std::option::Option<unsafe extern "C" fn(coord: GLfloat)>,
    pub FogCoordfvEXT: ::std::option::Option<unsafe extern "C" fn(coord: *const GLfloat)>,
    pub FogCoorddEXT: ::std::option::Option<unsafe extern "C" fn(coord: GLdouble)>,
    pub FogCoorddvEXT: ::std::option::Option<unsafe extern "C" fn(coord: *const GLdouble)>,
    pub FogCoordPointerEXT: ::std::option::Option<
        unsafe extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *const GLvoid),
    >,
    pub Tangent3bEXT:
        ::std::option::Option<unsafe extern "C" fn(tx: GLbyte, ty: GLbyte, tz: GLbyte)>,
    pub Tangent3bvEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLbyte)>,
    pub Tangent3dEXT:
        ::std::option::Option<unsafe extern "C" fn(tx: GLdouble, ty: GLdouble, tz: GLdouble)>,
    pub Tangent3dvEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLdouble)>,
    pub Tangent3fEXT:
        ::std::option::Option<unsafe extern "C" fn(tx: GLfloat, ty: GLfloat, tz: GLfloat)>,
    pub Tangent3fvEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLfloat)>,
    pub Tangent3iEXT: ::std::option::Option<unsafe extern "C" fn(tx: GLint, ty: GLint, tz: GLint)>,
    pub Tangent3ivEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLint)>,
    pub Tangent3sEXT:
        ::std::option::Option<unsafe extern "C" fn(tx: GLshort, ty: GLshort, tz: GLshort)>,
    pub Tangent3svEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLshort)>,
    pub Binormal3bEXT:
        ::std::option::Option<unsafe extern "C" fn(bx: GLbyte, by: GLbyte, bz: GLbyte)>,
    pub Binormal3bvEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLbyte)>,
    pub Binormal3dEXT:
        ::std::option::Option<unsafe extern "C" fn(bx: GLdouble, by: GLdouble, bz: GLdouble)>,
    pub Binormal3dvEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLdouble)>,
    pub Binormal3fEXT:
        ::std::option::Option<unsafe extern "C" fn(bx: GLfloat, by: GLfloat, bz: GLfloat)>,
    pub Binormal3fvEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLfloat)>,
    pub Binormal3iEXT: ::std::option::Option<unsafe extern "C" fn(bx: GLint, by: GLint, bz: GLint)>,
    pub Binormal3ivEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLint)>,
    pub Binormal3sEXT:
        ::std::option::Option<unsafe extern "C" fn(bx: GLshort, by: GLshort, bz: GLshort)>,
    pub Binormal3svEXT: ::std::option::Option<unsafe extern "C" fn(v: *const GLshort)>,
    pub TangentPointerEXT: ::std::option::Option<
        unsafe extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *const GLvoid),
    >,
    pub BinormalPointerEXT: ::std::option::Option<
        unsafe extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *const GLvoid),
    >,
    pub FinishTextureSUNX: ::std::option::Option<unsafe extern "C" fn()>,
    pub GlobalAlphaFactorbSUN: ::std::option::Option<unsafe extern "C" fn(factor: GLbyte)>,
    pub GlobalAlphaFactorsSUN: ::std::option::Option<unsafe extern "C" fn(factor: GLshort)>,
    pub GlobalAlphaFactoriSUN: ::std::option::Option<unsafe extern "C" fn(factor: GLint)>,
    pub GlobalAlphaFactorfSUN: ::std::option::Option<unsafe extern "C" fn(factor: GLfloat)>,
    pub GlobalAlphaFactordSUN: ::std::option::Option<unsafe extern "C" fn(factor: GLdouble)>,
    pub GlobalAlphaFactorubSUN: ::std::option::Option<unsafe extern "C" fn(factor: GLubyte)>,
    pub GlobalAlphaFactorusSUN: ::std::option::Option<unsafe extern "C" fn(factor: GLushort)>,
    pub GlobalAlphaFactoruiSUN: ::std::option::Option<unsafe extern "C" fn(factor: GLuint)>,
    pub ReplacementCodeuiSUN: ::std::option::Option<unsafe extern "C" fn(code: GLuint)>,
    pub ReplacementCodeusSUN: ::std::option::Option<unsafe extern "C" fn(code: GLushort)>,
    pub ReplacementCodeubSUN: ::std::option::Option<unsafe extern "C" fn(code: GLubyte)>,
    pub ReplacementCodeuivSUN: ::std::option::Option<unsafe extern "C" fn(code: *const GLuint)>,
    pub ReplacementCodeusvSUN: ::std::option::Option<unsafe extern "C" fn(code: *const GLushort)>,
    pub ReplacementCodeubvSUN: ::std::option::Option<unsafe extern "C" fn(code: *const GLubyte)>,
    pub ReplacementCodePointerSUN: ::std::option::Option<
        unsafe extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *mut *const GLvoid),
    >,
    pub Color4ubVertex2fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            r: GLubyte,
            g: GLubyte,
            b: GLubyte,
            a: GLubyte,
            x: GLfloat,
            y: GLfloat,
        ),
    >,
    pub Color4ubVertex2fvSUN:
        ::std::option::Option<unsafe extern "C" fn(c: *const GLubyte, v: *const GLfloat)>,
    pub Color4ubVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            r: GLubyte,
            g: GLubyte,
            b: GLubyte,
            a: GLubyte,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub Color4ubVertex3fvSUN:
        ::std::option::Option<unsafe extern "C" fn(c: *const GLubyte, v: *const GLfloat)>,
    pub Color3fVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            r: GLfloat,
            g: GLfloat,
            b: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub Color3fVertex3fvSUN:
        ::std::option::Option<unsafe extern "C" fn(c: *const GLfloat, v: *const GLfloat)>,
    pub Normal3fVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            nx: GLfloat,
            ny: GLfloat,
            nz: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub Normal3fVertex3fvSUN:
        ::std::option::Option<unsafe extern "C" fn(n: *const GLfloat, v: *const GLfloat)>,
    pub Color4fNormal3fVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            r: GLfloat,
            g: GLfloat,
            b: GLfloat,
            a: GLfloat,
            nx: GLfloat,
            ny: GLfloat,
            nz: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub Color4fNormal3fVertex3fvSUN: ::std::option::Option<
        unsafe extern "C" fn(c: *const GLfloat, n: *const GLfloat, v: *const GLfloat),
    >,
    pub TexCoord2fVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat),
    >,
    pub TexCoord2fVertex3fvSUN:
        ::std::option::Option<unsafe extern "C" fn(tc: *const GLfloat, v: *const GLfloat)>,
    pub TexCoord4fVertex4fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            s: GLfloat,
            t: GLfloat,
            p: GLfloat,
            q: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
            w: GLfloat,
        ),
    >,
    pub TexCoord4fVertex4fvSUN:
        ::std::option::Option<unsafe extern "C" fn(tc: *const GLfloat, v: *const GLfloat)>,
    pub TexCoord2fColor4ubVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            s: GLfloat,
            t: GLfloat,
            r: GLubyte,
            g: GLubyte,
            b: GLubyte,
            a: GLubyte,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub TexCoord2fColor4ubVertex3fvSUN: ::std::option::Option<
        unsafe extern "C" fn(tc: *const GLfloat, c: *const GLubyte, v: *const GLfloat),
    >,
    pub TexCoord2fColor3fVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            s: GLfloat,
            t: GLfloat,
            r: GLfloat,
            g: GLfloat,
            b: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub TexCoord2fColor3fVertex3fvSUN: ::std::option::Option<
        unsafe extern "C" fn(tc: *const GLfloat, c: *const GLfloat, v: *const GLfloat),
    >,
    pub TexCoord2fNormal3fVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            s: GLfloat,
            t: GLfloat,
            nx: GLfloat,
            ny: GLfloat,
            nz: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub TexCoord2fNormal3fVertex3fvSUN: ::std::option::Option<
        unsafe extern "C" fn(tc: *const GLfloat, n: *const GLfloat, v: *const GLfloat),
    >,
    pub TexCoord2fColor4fNormal3fVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            s: GLfloat,
            t: GLfloat,
            r: GLfloat,
            g: GLfloat,
            b: GLfloat,
            a: GLfloat,
            nx: GLfloat,
            ny: GLfloat,
            nz: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub TexCoord2fColor4fNormal3fVertex3fvSUN: ::std::option::Option<
        unsafe extern "C" fn(
            tc: *const GLfloat,
            c: *const GLfloat,
            n: *const GLfloat,
            v: *const GLfloat,
        ),
    >,
    pub TexCoord4fColor4fNormal3fVertex4fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            s: GLfloat,
            t: GLfloat,
            p: GLfloat,
            q: GLfloat,
            r: GLfloat,
            g: GLfloat,
            b: GLfloat,
            a: GLfloat,
            nx: GLfloat,
            ny: GLfloat,
            nz: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
            w: GLfloat,
        ),
    >,
    pub TexCoord4fColor4fNormal3fVertex4fvSUN: ::std::option::Option<
        unsafe extern "C" fn(
            tc: *const GLfloat,
            c: *const GLfloat,
            n: *const GLfloat,
            v: *const GLfloat,
        ),
    >,
    pub ReplacementCodeuiVertex3fSUN:
        ::std::option::Option<unsafe extern "C" fn(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat)>,
    pub ReplacementCodeuiVertex3fvSUN:
        ::std::option::Option<unsafe extern "C" fn(rc: *const GLuint, v: *const GLfloat)>,
    pub ReplacementCodeuiColor4ubVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            rc: GLuint,
            r: GLubyte,
            g: GLubyte,
            b: GLubyte,
            a: GLubyte,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub ReplacementCodeuiColor4ubVertex3fvSUN: ::std::option::Option<
        unsafe extern "C" fn(rc: *const GLuint, c: *const GLubyte, v: *const GLfloat),
    >,
    pub ReplacementCodeuiColor3fVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            rc: GLuint,
            r: GLfloat,
            g: GLfloat,
            b: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub ReplacementCodeuiColor3fVertex3fvSUN: ::std::option::Option<
        unsafe extern "C" fn(rc: *const GLuint, c: *const GLfloat, v: *const GLfloat),
    >,
    pub ReplacementCodeuiNormal3fVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            rc: GLuint,
            nx: GLfloat,
            ny: GLfloat,
            nz: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub ReplacementCodeuiNormal3fVertex3fvSUN: ::std::option::Option<
        unsafe extern "C" fn(rc: *const GLuint, n: *const GLfloat, v: *const GLfloat),
    >,
    pub ReplacementCodeuiColor4fNormal3fVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            rc: GLuint,
            r: GLfloat,
            g: GLfloat,
            b: GLfloat,
            a: GLfloat,
            nx: GLfloat,
            ny: GLfloat,
            nz: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub ReplacementCodeuiColor4fNormal3fVertex3fvSUN: ::std::option::Option<
        unsafe extern "C" fn(
            rc: *const GLuint,
            c: *const GLfloat,
            n: *const GLfloat,
            v: *const GLfloat,
        ),
    >,
    pub ReplacementCodeuiTexCoord2fVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            rc: GLuint,
            s: GLfloat,
            t: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub ReplacementCodeuiTexCoord2fVertex3fvSUN: ::std::option::Option<
        unsafe extern "C" fn(rc: *const GLuint, tc: *const GLfloat, v: *const GLfloat),
    >,
    pub ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            rc: GLuint,
            s: GLfloat,
            t: GLfloat,
            nx: GLfloat,
            ny: GLfloat,
            nz: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: ::std::option::Option<
        unsafe extern "C" fn(
            rc: *const GLuint,
            tc: *const GLfloat,
            n: *const GLfloat,
            v: *const GLfloat,
        ),
    >,
    pub ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: ::std::option::Option<
        unsafe extern "C" fn(
            rc: GLuint,
            s: GLfloat,
            t: GLfloat,
            r: GLfloat,
            g: GLfloat,
            b: GLfloat,
            a: GLfloat,
            nx: GLfloat,
            ny: GLfloat,
            nz: GLfloat,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: ::std::option::Option<
        unsafe extern "C" fn(
            rc: *const GLuint,
            tc: *const GLfloat,
            c: *const GLfloat,
            n: *const GLfloat,
            v: *const GLfloat,
        ),
    >,
    pub BlendFuncSeparateEXT: ::std::option::Option<
        unsafe extern "C" fn(
            sfactorRGB: GLenum,
            dfactorRGB: GLenum,
            sfactorAlpha: GLenum,
            dfactorAlpha: GLenum,
        ),
    >,
    pub BlendFuncSeparateINGR: ::std::option::Option<
        unsafe extern "C" fn(
            sfactorRGB: GLenum,
            dfactorRGB: GLenum,
            sfactorAlpha: GLenum,
            dfactorAlpha: GLenum,
        ),
    >,
    pub VertexWeightfEXT: ::std::option::Option<unsafe extern "C" fn(weight: GLfloat)>,
    pub VertexWeightfvEXT: ::std::option::Option<unsafe extern "C" fn(weight: *const GLfloat)>,
    pub VertexWeightPointerEXT: ::std::option::Option<
        unsafe extern "C" fn(size: GLsizei, type_: GLenum, stride: GLsizei, pointer: *const GLvoid),
    >,
    pub FlushVertexArrayRangeNV: ::std::option::Option<unsafe extern "C" fn()>,
    pub VertexArrayRangeNV:
        ::std::option::Option<unsafe extern "C" fn(length: GLsizei, pointer: *const GLvoid)>,
    pub CombinerParameterfvNV:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>,
    pub CombinerParameterfNV:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>,
    pub CombinerParameterivNV:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>,
    pub CombinerParameteriNV:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>,
    pub CombinerInputNV: ::std::option::Option<
        unsafe extern "C" fn(
            stage: GLenum,
            portion: GLenum,
            variable: GLenum,
            input: GLenum,
            mapping: GLenum,
            componentUsage: GLenum,
        ),
    >,
    pub CombinerOutputNV: ::std::option::Option<
        unsafe extern "C" fn(
            stage: GLenum,
            portion: GLenum,
            abOutput: GLenum,
            cdOutput: GLenum,
            sumOutput: GLenum,
            scale: GLenum,
            bias: GLenum,
            abDotProduct: GLboolean,
            cdDotProduct: GLboolean,
            muxSum: GLboolean,
        ),
    >,
    pub FinalCombinerInputNV: ::std::option::Option<
        unsafe extern "C" fn(
            variable: GLenum,
            input: GLenum,
            mapping: GLenum,
            componentUsage: GLenum,
        ),
    >,
    pub GetCombinerInputParameterfvNV: ::std::option::Option<
        unsafe extern "C" fn(
            stage: GLenum,
            portion: GLenum,
            variable: GLenum,
            pname: GLenum,
            params: *mut GLfloat,
        ),
    >,
    pub GetCombinerInputParameterivNV: ::std::option::Option<
        unsafe extern "C" fn(
            stage: GLenum,
            portion: GLenum,
            variable: GLenum,
            pname: GLenum,
            params: *mut GLint,
        ),
    >,
    pub GetCombinerOutputParameterfvNV: ::std::option::Option<
        unsafe extern "C" fn(stage: GLenum, portion: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetCombinerOutputParameterivNV: ::std::option::Option<
        unsafe extern "C" fn(stage: GLenum, portion: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetFinalCombinerInputParameterfvNV: ::std::option::Option<
        unsafe extern "C" fn(variable: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetFinalCombinerInputParameterivNV: ::std::option::Option<
        unsafe extern "C" fn(variable: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub ResizeBuffersMESA: ::std::option::Option<unsafe extern "C" fn()>,
    pub WindowPos2dMESA: ::std::option::Option<unsafe extern "C" fn(x: GLdouble, y: GLdouble)>,
    pub WindowPos2dvMESA: ::std::option::Option<unsafe extern "C" fn(v: *const GLdouble)>,
    pub WindowPos2fMESA: ::std::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat)>,
    pub WindowPos2fvMESA: ::std::option::Option<unsafe extern "C" fn(v: *const GLfloat)>,
    pub WindowPos2iMESA: ::std::option::Option<unsafe extern "C" fn(x: GLint, y: GLint)>,
    pub WindowPos2ivMESA: ::std::option::Option<unsafe extern "C" fn(v: *const GLint)>,
    pub WindowPos2sMESA: ::std::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort)>,
    pub WindowPos2svMESA: ::std::option::Option<unsafe extern "C" fn(v: *const GLshort)>,
    pub WindowPos3dMESA:
        ::std::option::Option<unsafe extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble)>,
    pub WindowPos3dvMESA: ::std::option::Option<unsafe extern "C" fn(v: *const GLdouble)>,
    pub WindowPos3fMESA:
        ::std::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat)>,
    pub WindowPos3fvMESA: ::std::option::Option<unsafe extern "C" fn(v: *const GLfloat)>,
    pub WindowPos3iMESA: ::std::option::Option<unsafe extern "C" fn(x: GLint, y: GLint, z: GLint)>,
    pub WindowPos3ivMESA: ::std::option::Option<unsafe extern "C" fn(v: *const GLint)>,
    pub WindowPos3sMESA:
        ::std::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort, z: GLshort)>,
    pub WindowPos3svMESA: ::std::option::Option<unsafe extern "C" fn(v: *const GLshort)>,
    pub WindowPos4dMESA: ::std::option::Option<
        unsafe extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
    >,
    pub WindowPos4dvMESA: ::std::option::Option<unsafe extern "C" fn(v: *const GLdouble)>,
    pub WindowPos4fMESA:
        ::std::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat)>,
    pub WindowPos4fvMESA: ::std::option::Option<unsafe extern "C" fn(v: *const GLfloat)>,
    pub WindowPos4iMESA:
        ::std::option::Option<unsafe extern "C" fn(x: GLint, y: GLint, z: GLint, w: GLint)>,
    pub WindowPos4ivMESA: ::std::option::Option<unsafe extern "C" fn(v: *const GLint)>,
    pub WindowPos4sMESA:
        ::std::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort, z: GLshort, w: GLshort)>,
    pub WindowPos4svMESA: ::std::option::Option<unsafe extern "C" fn(v: *const GLshort)>,
    pub MultiModeDrawArraysIBM: ::std::option::Option<
        unsafe extern "C" fn(
            mode: *const GLenum,
            first: *const GLint,
            count: *const GLsizei,
            primcount: GLsizei,
            modestride: GLint,
        ),
    >,
    pub MultiModeDrawElementsIBM: ::std::option::Option<
        unsafe extern "C" fn(
            mode: *const GLenum,
            count: *const GLsizei,
            type_: GLenum,
            indices: *const *const GLvoid,
            primcount: GLsizei,
            modestride: GLint,
        ),
    >,
    pub ColorPointerListIBM: ::std::option::Option<
        unsafe extern "C" fn(
            size: GLint,
            type_: GLenum,
            stride: GLint,
            pointer: *mut *const GLvoid,
            ptrstride: GLint,
        ),
    >,
    pub SecondaryColorPointerListIBM: ::std::option::Option<
        unsafe extern "C" fn(
            size: GLint,
            type_: GLenum,
            stride: GLint,
            pointer: *mut *const GLvoid,
            ptrstride: GLint,
        ),
    >,
    pub EdgeFlagPointerListIBM: ::std::option::Option<
        unsafe extern "C" fn(stride: GLint, pointer: *mut *const GLboolean, ptrstride: GLint),
    >,
    pub FogCoordPointerListIBM: ::std::option::Option<
        unsafe extern "C" fn(
            type_: GLenum,
            stride: GLint,
            pointer: *mut *const GLvoid,
            ptrstride: GLint,
        ),
    >,
    pub IndexPointerListIBM: ::std::option::Option<
        unsafe extern "C" fn(
            type_: GLenum,
            stride: GLint,
            pointer: *mut *const GLvoid,
            ptrstride: GLint,
        ),
    >,
    pub NormalPointerListIBM: ::std::option::Option<
        unsafe extern "C" fn(
            type_: GLenum,
            stride: GLint,
            pointer: *mut *const GLvoid,
            ptrstride: GLint,
        ),
    >,
    pub TexCoordPointerListIBM: ::std::option::Option<
        unsafe extern "C" fn(
            size: GLint,
            type_: GLenum,
            stride: GLint,
            pointer: *mut *const GLvoid,
            ptrstride: GLint,
        ),
    >,
    pub VertexPointerListIBM: ::std::option::Option<
        unsafe extern "C" fn(
            size: GLint,
            type_: GLenum,
            stride: GLint,
            pointer: *mut *const GLvoid,
            ptrstride: GLint,
        ),
    >,
    pub TbufferMask3DFX: ::std::option::Option<unsafe extern "C" fn(mask: GLuint)>,
    pub SampleMaskEXT:
        ::std::option::Option<unsafe extern "C" fn(value: GLclampf, invert: GLboolean)>,
    pub SamplePatternEXT: ::std::option::Option<unsafe extern "C" fn(pattern: GLenum)>,
    pub TextureColorMaskSGIS: ::std::option::Option<
        unsafe extern "C" fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean),
    >,
    pub IglooInterfaceSGIX:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLvoid)>,
    pub DeleteFencesNV:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, fences: *const GLuint)>,
    pub GenFencesNV: ::std::option::Option<unsafe extern "C" fn(n: GLsizei, fences: *mut GLuint)>,
    pub IsFenceNV: ::std::option::Option<unsafe extern "C" fn(fence: GLuint) -> GLboolean>,
    pub TestFenceNV: ::std::option::Option<unsafe extern "C" fn(fence: GLuint) -> GLboolean>,
    pub GetFenceivNV: ::std::option::Option<
        unsafe extern "C" fn(fence: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub FinishFenceNV: ::std::option::Option<unsafe extern "C" fn(fence: GLuint)>,
    pub SetFenceNV: ::std::option::Option<unsafe extern "C" fn(fence: GLuint, condition: GLenum)>,
    pub MapControlPointsNV: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            index: GLuint,
            type_: GLenum,
            ustride: GLsizei,
            vstride: GLsizei,
            uorder: GLint,
            vorder: GLint,
            packed: GLboolean,
            points: *const GLvoid,
        ),
    >,
    pub MapParameterivNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub MapParameterfvNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub GetMapControlPointsNV: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            index: GLuint,
            type_: GLenum,
            ustride: GLsizei,
            vstride: GLsizei,
            packed: GLboolean,
            points: *mut GLvoid,
        ),
    >,
    pub GetMapParameterivNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetMapParameterfvNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetMapAttribParameterivNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub GetMapAttribParameterfvNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLfloat),
    >,
    pub EvalMapsNV: ::std::option::Option<unsafe extern "C" fn(target: GLenum, mode: GLenum)>,
    pub CombinerStageParameterfvNV: ::std::option::Option<
        unsafe extern "C" fn(stage: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub GetCombinerStageParameterfvNV: ::std::option::Option<
        unsafe extern "C" fn(stage: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub AreProgramsResidentNV: ::std::option::Option<
        unsafe extern "C" fn(
            n: GLsizei,
            programs: *const GLuint,
            residences: *mut GLboolean,
        ) -> GLboolean,
    >,
    pub BindProgramNV: ::std::option::Option<unsafe extern "C" fn(target: GLenum, id: GLuint)>,
    pub DeleteProgramsNV:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, programs: *const GLuint)>,
    pub ExecuteProgramNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, id: GLuint, params: *const GLfloat),
    >,
    pub GenProgramsNV:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, programs: *mut GLuint)>,
    pub GetProgramParameterdvNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLdouble),
    >,
    pub GetProgramParameterfvNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetProgramivNV:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint)>,
    pub GetProgramStringNV: ::std::option::Option<
        unsafe extern "C" fn(id: GLuint, pname: GLenum, program: *mut GLubyte),
    >,
    pub GetTrackMatrixivNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, address: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub GetVertexAttribdvNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLdouble),
    >,
    pub GetVertexAttribfvNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetVertexAttribivNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub GetVertexAttribPointervNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, pname: GLenum, pointer: *mut *mut GLvoid),
    >,
    pub IsProgramNV: ::std::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>,
    pub LoadProgramNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, id: GLuint, len: GLsizei, program: *const GLubyte),
    >,
    pub ProgramParameter4dNV: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            index: GLuint,
            x: GLdouble,
            y: GLdouble,
            z: GLdouble,
            w: GLdouble,
        ),
    >,
    pub ProgramParameter4dvNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, v: *const GLdouble),
    >,
    pub ProgramParameter4fNV: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            index: GLuint,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
            w: GLfloat,
        ),
    >,
    pub ProgramParameter4fvNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, v: *const GLfloat),
    >,
    pub ProgramParameters4dvNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, count: GLuint, v: *const GLdouble),
    >,
    pub ProgramParameters4fvNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, index: GLuint, count: GLuint, v: *const GLfloat),
    >,
    pub RequestResidentProgramsNV:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, programs: *const GLuint)>,
    pub TrackMatrixNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum),
    >,
    pub VertexAttribPointerNV: ::std::option::Option<
        unsafe extern "C" fn(
            index: GLuint,
            fsize: GLint,
            type_: GLenum,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub VertexAttrib1dNV: ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble)>,
    pub VertexAttrib1dvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>,
    pub VertexAttrib1fNV: ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat)>,
    pub VertexAttrib1fvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>,
    pub VertexAttrib1sNV: ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort)>,
    pub VertexAttrib1svNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>,
    pub VertexAttrib2dNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble)>,
    pub VertexAttrib2dvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>,
    pub VertexAttrib2fNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat)>,
    pub VertexAttrib2fvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>,
    pub VertexAttrib2sNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort)>,
    pub VertexAttrib2svNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>,
    pub VertexAttrib3dNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble),
    >,
    pub VertexAttrib3dvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>,
    pub VertexAttrib3fNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat),
    >,
    pub VertexAttrib3fvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>,
    pub VertexAttrib3sNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort),
    >,
    pub VertexAttrib3svNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>,
    pub VertexAttrib4dNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
    >,
    pub VertexAttrib4dvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>,
    pub VertexAttrib4fNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat),
    >,
    pub VertexAttrib4fvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>,
    pub VertexAttrib4sNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort),
    >,
    pub VertexAttrib4svNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>,
    pub VertexAttrib4ubNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte),
    >,
    pub VertexAttrib4ubvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>,
    pub VertexAttribs1dvNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLdouble),
    >,
    pub VertexAttribs1fvNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLfloat),
    >,
    pub VertexAttribs1svNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLshort),
    >,
    pub VertexAttribs2dvNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLdouble),
    >,
    pub VertexAttribs2fvNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLfloat),
    >,
    pub VertexAttribs2svNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLshort),
    >,
    pub VertexAttribs3dvNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLdouble),
    >,
    pub VertexAttribs3fvNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLfloat),
    >,
    pub VertexAttribs3svNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLshort),
    >,
    pub VertexAttribs4dvNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLdouble),
    >,
    pub VertexAttribs4fvNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLfloat),
    >,
    pub VertexAttribs4svNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLshort),
    >,
    pub VertexAttribs4ubvNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLubyte),
    >,
    pub TexBumpParameterivATI:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: *const GLint)>,
    pub TexBumpParameterfvATI:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: *const GLfloat)>,
    pub GetTexBumpParameterivATI:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: *mut GLint)>,
    pub GetTexBumpParameterfvATI:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: *mut GLfloat)>,
    pub GenFragmentShadersATI: ::std::option::Option<unsafe extern "C" fn(range: GLuint) -> GLuint>,
    pub BindFragmentShaderATI: ::std::option::Option<unsafe extern "C" fn(id: GLuint)>,
    pub DeleteFragmentShaderATI: ::std::option::Option<unsafe extern "C" fn(id: GLuint)>,
    pub BeginFragmentShaderATI: ::std::option::Option<unsafe extern "C" fn()>,
    pub EndFragmentShaderATI: ::std::option::Option<unsafe extern "C" fn()>,
    pub PassTexCoordATI:
        ::std::option::Option<unsafe extern "C" fn(dst: GLuint, coord: GLuint, swizzle: GLenum)>,
    pub SampleMapATI:
        ::std::option::Option<unsafe extern "C" fn(dst: GLuint, interp: GLuint, swizzle: GLenum)>,
    pub ColorFragmentOp1ATI: ::std::option::Option<
        unsafe extern "C" fn(
            op: GLenum,
            dst: GLuint,
            dstMask: GLuint,
            dstMod: GLuint,
            arg1: GLuint,
            arg1Rep: GLuint,
            arg1Mod: GLuint,
        ),
    >,
    pub ColorFragmentOp2ATI: ::std::option::Option<
        unsafe extern "C" fn(
            op: GLenum,
            dst: GLuint,
            dstMask: GLuint,
            dstMod: GLuint,
            arg1: GLuint,
            arg1Rep: GLuint,
            arg1Mod: GLuint,
            arg2: GLuint,
            arg2Rep: GLuint,
            arg2Mod: GLuint,
        ),
    >,
    pub ColorFragmentOp3ATI: ::std::option::Option<
        unsafe extern "C" fn(
            op: GLenum,
            dst: GLuint,
            dstMask: GLuint,
            dstMod: GLuint,
            arg1: GLuint,
            arg1Rep: GLuint,
            arg1Mod: GLuint,
            arg2: GLuint,
            arg2Rep: GLuint,
            arg2Mod: GLuint,
            arg3: GLuint,
            arg3Rep: GLuint,
            arg3Mod: GLuint,
        ),
    >,
    pub AlphaFragmentOp1ATI: ::std::option::Option<
        unsafe extern "C" fn(
            op: GLenum,
            dst: GLuint,
            dstMod: GLuint,
            arg1: GLuint,
            arg1Rep: GLuint,
            arg1Mod: GLuint,
        ),
    >,
    pub AlphaFragmentOp2ATI: ::std::option::Option<
        unsafe extern "C" fn(
            op: GLenum,
            dst: GLuint,
            dstMod: GLuint,
            arg1: GLuint,
            arg1Rep: GLuint,
            arg1Mod: GLuint,
            arg2: GLuint,
            arg2Rep: GLuint,
            arg2Mod: GLuint,
        ),
    >,
    pub AlphaFragmentOp3ATI: ::std::option::Option<
        unsafe extern "C" fn(
            op: GLenum,
            dst: GLuint,
            dstMod: GLuint,
            arg1: GLuint,
            arg1Rep: GLuint,
            arg1Mod: GLuint,
            arg2: GLuint,
            arg2Rep: GLuint,
            arg2Mod: GLuint,
            arg3: GLuint,
            arg3Rep: GLuint,
            arg3Mod: GLuint,
        ),
    >,
    pub SetFragmentShaderConstantATI:
        ::std::option::Option<unsafe extern "C" fn(dst: GLuint, value: *const GLfloat)>,
    pub PNTrianglesiATI: ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>,
    pub PNTrianglesfATI: ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>,
    pub NewObjectBufferATI: ::std::option::Option<
        unsafe extern "C" fn(size: GLsizei, pointer: *const GLvoid, usage: GLenum) -> GLuint,
    >,
    pub IsObjectBufferATI: ::std::option::Option<unsafe extern "C" fn(buffer: GLuint) -> GLboolean>,
    pub UpdateObjectBufferATI: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: GLuint,
            offset: GLuint,
            size: GLsizei,
            pointer: *const GLvoid,
            preserve: GLenum,
        ),
    >,
    pub GetObjectBufferfvATI: ::std::option::Option<
        unsafe extern "C" fn(buffer: GLuint, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetObjectBufferivATI: ::std::option::Option<
        unsafe extern "C" fn(buffer: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub FreeObjectBufferATI: ::std::option::Option<unsafe extern "C" fn(buffer: GLuint)>,
    pub ArrayObjectATI: ::std::option::Option<
        unsafe extern "C" fn(
            array: GLenum,
            size: GLint,
            type_: GLenum,
            stride: GLsizei,
            buffer: GLuint,
            offset: GLuint,
        ),
    >,
    pub GetArrayObjectfvATI: ::std::option::Option<
        unsafe extern "C" fn(array: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetArrayObjectivATI: ::std::option::Option<
        unsafe extern "C" fn(array: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub VariantArrayObjectATI: ::std::option::Option<
        unsafe extern "C" fn(
            id: GLuint,
            type_: GLenum,
            stride: GLsizei,
            buffer: GLuint,
            offset: GLuint,
        ),
    >,
    pub GetVariantArrayObjectfvATI: ::std::option::Option<
        unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetVariantArrayObjectivATI:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint)>,
    pub BeginVertexShaderEXT: ::std::option::Option<unsafe extern "C" fn()>,
    pub EndVertexShaderEXT: ::std::option::Option<unsafe extern "C" fn()>,
    pub BindVertexShaderEXT: ::std::option::Option<unsafe extern "C" fn(id: GLuint)>,
    pub GenVertexShadersEXT: ::std::option::Option<unsafe extern "C" fn(range: GLuint) -> GLuint>,
    pub DeleteVertexShaderEXT: ::std::option::Option<unsafe extern "C" fn(id: GLuint)>,
    pub ShaderOp1EXT:
        ::std::option::Option<unsafe extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint)>,
    pub ShaderOp2EXT: ::std::option::Option<
        unsafe extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint),
    >,
    pub ShaderOp3EXT: ::std::option::Option<
        unsafe extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint),
    >,
    pub SwizzleEXT: ::std::option::Option<
        unsafe extern "C" fn(
            res: GLuint,
            in_: GLuint,
            outX: GLenum,
            outY: GLenum,
            outZ: GLenum,
            outW: GLenum,
        ),
    >,
    pub WriteMaskEXT: ::std::option::Option<
        unsafe extern "C" fn(
            res: GLuint,
            in_: GLuint,
            outX: GLenum,
            outY: GLenum,
            outZ: GLenum,
            outW: GLenum,
        ),
    >,
    pub InsertComponentEXT:
        ::std::option::Option<unsafe extern "C" fn(res: GLuint, src: GLuint, num: GLuint)>,
    pub ExtractComponentEXT:
        ::std::option::Option<unsafe extern "C" fn(res: GLuint, src: GLuint, num: GLuint)>,
    pub GenSymbolsEXT: ::std::option::Option<
        unsafe extern "C" fn(
            datatype: GLenum,
            storagetype: GLenum,
            range: GLenum,
            components: GLuint,
        ) -> GLuint,
    >,
    pub SetInvariantEXT:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, type_: GLenum, addr: *const GLvoid)>,
    pub SetLocalConstantEXT:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, type_: GLenum, addr: *const GLvoid)>,
    pub VariantbvEXT: ::std::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLbyte)>,
    pub VariantsvEXT: ::std::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLshort)>,
    pub VariantivEXT: ::std::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLint)>,
    pub VariantfvEXT: ::std::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLfloat)>,
    pub VariantdvEXT:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLdouble)>,
    pub VariantubvEXT:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLubyte)>,
    pub VariantusvEXT:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLushort)>,
    pub VariantuivEXT: ::std::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLuint)>,
    pub VariantPointerEXT: ::std::option::Option<
        unsafe extern "C" fn(id: GLuint, type_: GLenum, stride: GLuint, addr: *const GLvoid),
    >,
    pub EnableVariantClientStateEXT: ::std::option::Option<unsafe extern "C" fn(id: GLuint)>,
    pub DisableVariantClientStateEXT: ::std::option::Option<unsafe extern "C" fn(id: GLuint)>,
    pub BindLightParameterEXT:
        ::std::option::Option<unsafe extern "C" fn(light: GLenum, value: GLenum) -> GLuint>,
    pub BindMaterialParameterEXT:
        ::std::option::Option<unsafe extern "C" fn(face: GLenum, value: GLenum) -> GLuint>,
    pub BindTexGenParameterEXT: ::std::option::Option<
        unsafe extern "C" fn(unit: GLenum, coord: GLenum, value: GLenum) -> GLuint,
    >,
    pub BindTextureUnitParameterEXT:
        ::std::option::Option<unsafe extern "C" fn(unit: GLenum, value: GLenum) -> GLuint>,
    pub BindParameterEXT: ::std::option::Option<unsafe extern "C" fn(value: GLenum) -> GLuint>,
    pub IsVariantEnabledEXT:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, cap: GLenum) -> GLboolean>,
    pub GetVariantBooleanvEXT: ::std::option::Option<
        unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLboolean),
    >,
    pub GetVariantIntegervEXT:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLint)>,
    pub GetVariantFloatvEXT:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLfloat)>,
    pub GetVariantPointervEXT: ::std::option::Option<
        unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut *mut GLvoid),
    >,
    pub GetInvariantBooleanvEXT: ::std::option::Option<
        unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLboolean),
    >,
    pub GetInvariantIntegervEXT:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLint)>,
    pub GetInvariantFloatvEXT:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLfloat)>,
    pub GetLocalConstantBooleanvEXT: ::std::option::Option<
        unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLboolean),
    >,
    pub GetLocalConstantIntegervEXT:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLint)>,
    pub GetLocalConstantFloatvEXT:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLfloat)>,
    pub VertexStream1sATI: ::std::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLshort)>,
    pub VertexStream1svATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLshort)>,
    pub VertexStream1iATI: ::std::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLint)>,
    pub VertexStream1ivATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLint)>,
    pub VertexStream1fATI: ::std::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLfloat)>,
    pub VertexStream1fvATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLfloat)>,
    pub VertexStream1dATI: ::std::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLdouble)>,
    pub VertexStream1dvATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLdouble)>,
    pub VertexStream2sATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLshort, y: GLshort)>,
    pub VertexStream2svATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLshort)>,
    pub VertexStream2iATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLint, y: GLint)>,
    pub VertexStream2ivATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLint)>,
    pub VertexStream2fATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat)>,
    pub VertexStream2fvATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLfloat)>,
    pub VertexStream2dATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble)>,
    pub VertexStream2dvATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLdouble)>,
    pub VertexStream3sATI: ::std::option::Option<
        unsafe extern "C" fn(stream: GLenum, x: GLshort, y: GLshort, z: GLshort),
    >,
    pub VertexStream3svATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLshort)>,
    pub VertexStream3iATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLint, y: GLint, z: GLint)>,
    pub VertexStream3ivATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLint)>,
    pub VertexStream3fATI: ::std::option::Option<
        unsafe extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat),
    >,
    pub VertexStream3fvATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLfloat)>,
    pub VertexStream3dATI: ::std::option::Option<
        unsafe extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble),
    >,
    pub VertexStream3dvATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLdouble)>,
    pub VertexStream4sATI: ::std::option::Option<
        unsafe extern "C" fn(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort),
    >,
    pub VertexStream4svATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLshort)>,
    pub VertexStream4iATI: ::std::option::Option<
        unsafe extern "C" fn(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint),
    >,
    pub VertexStream4ivATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLint)>,
    pub VertexStream4fATI: ::std::option::Option<
        unsafe extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat),
    >,
    pub VertexStream4fvATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLfloat)>,
    pub VertexStream4dATI: ::std::option::Option<
        unsafe extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
    >,
    pub VertexStream4dvATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLdouble)>,
    pub NormalStream3bATI: ::std::option::Option<
        unsafe extern "C" fn(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte),
    >,
    pub NormalStream3bvATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLbyte)>,
    pub NormalStream3sATI: ::std::option::Option<
        unsafe extern "C" fn(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort),
    >,
    pub NormalStream3svATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLshort)>,
    pub NormalStream3iATI: ::std::option::Option<
        unsafe extern "C" fn(stream: GLenum, nx: GLint, ny: GLint, nz: GLint),
    >,
    pub NormalStream3ivATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLint)>,
    pub NormalStream3fATI: ::std::option::Option<
        unsafe extern "C" fn(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat),
    >,
    pub NormalStream3fvATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLfloat)>,
    pub NormalStream3dATI: ::std::option::Option<
        unsafe extern "C" fn(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble),
    >,
    pub NormalStream3dvATI:
        ::std::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLdouble)>,
    pub ClientActiveVertexStreamATI: ::std::option::Option<unsafe extern "C" fn(stream: GLenum)>,
    pub VertexBlendEnviATI:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>,
    pub VertexBlendEnvfATI:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>,
    pub ElementPointerATI:
        ::std::option::Option<unsafe extern "C" fn(type_: GLenum, pointer: *const GLvoid)>,
    pub DrawElementArrayATI:
        ::std::option::Option<unsafe extern "C" fn(mode: GLenum, count: GLsizei)>,
    pub DrawRangeElementArrayATI: ::std::option::Option<
        unsafe extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei),
    >,
    pub DrawMeshArraysSUN: ::std::option::Option<
        unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei),
    >,
    pub GenOcclusionQueriesNV:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>,
    pub DeleteOcclusionQueriesNV:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *const GLuint)>,
    pub IsOcclusionQueryNV: ::std::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>,
    pub BeginOcclusionQueryNV: ::std::option::Option<unsafe extern "C" fn(id: GLuint)>,
    pub EndOcclusionQueryNV: ::std::option::Option<unsafe extern "C" fn()>,
    pub GetOcclusionQueryivNV:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint)>,
    pub GetOcclusionQueryuivNV:
        ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint)>,
    pub PointParameteriNV: ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>,
    pub PointParameterivNV:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>,
    pub ActiveStencilFaceEXT: ::std::option::Option<unsafe extern "C" fn(face: GLenum)>,
    pub DrawBuffersATI:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, bufs: *const GLenum)>,
    pub ProgramNamedParameter4fNV: ::std::option::Option<
        unsafe extern "C" fn(
            id: GLuint,
            len: GLsizei,
            name: *const GLubyte,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
            w: GLfloat,
        ),
    >,
    pub ProgramNamedParameter4dNV: ::std::option::Option<
        unsafe extern "C" fn(
            id: GLuint,
            len: GLsizei,
            name: *const GLubyte,
            x: GLdouble,
            y: GLdouble,
            z: GLdouble,
            w: GLdouble,
        ),
    >,
    pub ProgramNamedParameter4fvNV: ::std::option::Option<
        unsafe extern "C" fn(id: GLuint, len: GLsizei, name: *const GLubyte, v: *const GLfloat),
    >,
    pub ProgramNamedParameter4dvNV: ::std::option::Option<
        unsafe extern "C" fn(id: GLuint, len: GLsizei, name: *const GLubyte, v: *const GLdouble),
    >,
    pub GetProgramNamedParameterfvNV: ::std::option::Option<
        unsafe extern "C" fn(id: GLuint, len: GLsizei, name: *const GLubyte, params: *mut GLfloat),
    >,
    pub GetProgramNamedParameterdvNV: ::std::option::Option<
        unsafe extern "C" fn(id: GLuint, len: GLsizei, name: *const GLubyte, params: *mut GLdouble),
    >,
    pub Vertex2hNV: ::std::option::Option<unsafe extern "C" fn(x: GLhalfNV, y: GLhalfNV)>,
    pub Vertex2hvNV: ::std::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>,
    pub Vertex3hNV:
        ::std::option::Option<unsafe extern "C" fn(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV)>,
    pub Vertex3hvNV: ::std::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>,
    pub Vertex4hNV: ::std::option::Option<
        unsafe extern "C" fn(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV),
    >,
    pub Vertex4hvNV: ::std::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>,
    pub Normal3hNV:
        ::std::option::Option<unsafe extern "C" fn(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV)>,
    pub Normal3hvNV: ::std::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>,
    pub Color3hNV:
        ::std::option::Option<unsafe extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV)>,
    pub Color3hvNV: ::std::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>,
    pub Color4hNV: ::std::option::Option<
        unsafe extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV),
    >,
    pub Color4hvNV: ::std::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>,
    pub TexCoord1hNV: ::std::option::Option<unsafe extern "C" fn(s: GLhalfNV)>,
    pub TexCoord1hvNV: ::std::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>,
    pub TexCoord2hNV: ::std::option::Option<unsafe extern "C" fn(s: GLhalfNV, t: GLhalfNV)>,
    pub TexCoord2hvNV: ::std::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>,
    pub TexCoord3hNV:
        ::std::option::Option<unsafe extern "C" fn(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV)>,
    pub TexCoord3hvNV: ::std::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>,
    pub TexCoord4hNV: ::std::option::Option<
        unsafe extern "C" fn(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV),
    >,
    pub TexCoord4hvNV: ::std::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>,
    pub MultiTexCoord1hNV: ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLhalfNV)>,
    pub MultiTexCoord1hvNV:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLhalfNV)>,
    pub MultiTexCoord2hNV:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV)>,
    pub MultiTexCoord2hvNV:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLhalfNV)>,
    pub MultiTexCoord3hNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV),
    >,
    pub MultiTexCoord3hvNV:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLhalfNV)>,
    pub MultiTexCoord4hNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV),
    >,
    pub MultiTexCoord4hvNV:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLhalfNV)>,
    pub FogCoordhNV: ::std::option::Option<unsafe extern "C" fn(fog: GLhalfNV)>,
    pub FogCoordhvNV: ::std::option::Option<unsafe extern "C" fn(fog: *const GLhalfNV)>,
    pub SecondaryColor3hNV:
        ::std::option::Option<unsafe extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV)>,
    pub SecondaryColor3hvNV: ::std::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>,
    pub VertexWeighthNV: ::std::option::Option<unsafe extern "C" fn(weight: GLhalfNV)>,
    pub VertexWeighthvNV: ::std::option::Option<unsafe extern "C" fn(weight: *const GLhalfNV)>,
    pub VertexAttrib1hNV: ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLhalfNV)>,
    pub VertexAttrib1hvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLhalfNV)>,
    pub VertexAttrib2hNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV)>,
    pub VertexAttrib2hvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLhalfNV)>,
    pub VertexAttrib3hNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV),
    >,
    pub VertexAttrib3hvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLhalfNV)>,
    pub VertexAttrib4hNV: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV),
    >,
    pub VertexAttrib4hvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLhalfNV)>,
    pub VertexAttribs1hvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, n: GLsizei, v: *const GLhalfNV)>,
    pub VertexAttribs2hvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, n: GLsizei, v: *const GLhalfNV)>,
    pub VertexAttribs3hvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, n: GLsizei, v: *const GLhalfNV)>,
    pub VertexAttribs4hvNV:
        ::std::option::Option<unsafe extern "C" fn(index: GLuint, n: GLsizei, v: *const GLhalfNV)>,
    pub PixelDataRangeNV: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, length: GLsizei, pointer: *mut GLvoid),
    >,
    pub FlushPixelDataRangeNV: ::std::option::Option<unsafe extern "C" fn(target: GLenum)>,
    pub PrimitiveRestartNV: ::std::option::Option<unsafe extern "C" fn()>,
    pub PrimitiveRestartIndexNV: ::std::option::Option<unsafe extern "C" fn(index: GLuint)>,
    pub MapObjectBufferATI:
        ::std::option::Option<unsafe extern "C" fn(buffer: GLuint) -> *mut GLvoid>,
    pub UnmapObjectBufferATI: ::std::option::Option<unsafe extern "C" fn(buffer: GLuint)>,
    pub StencilOpSeparateATI: ::std::option::Option<
        unsafe extern "C" fn(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum),
    >,
    pub StencilFuncSeparateATI: ::std::option::Option<
        unsafe extern "C" fn(frontfunc: GLenum, backfunc: GLenum, ref_: GLint, mask: GLuint),
    >,
    pub VertexAttribArrayObjectATI: ::std::option::Option<
        unsafe extern "C" fn(
            index: GLuint,
            size: GLint,
            type_: GLenum,
            normalized: GLboolean,
            stride: GLsizei,
            buffer: GLuint,
            offset: GLuint,
        ),
    >,
    pub GetVertexAttribArrayObjectfvATI: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLfloat),
    >,
    pub GetVertexAttribArrayObjectivATI: ::std::option::Option<
        unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub DepthBoundsEXT: ::std::option::Option<unsafe extern "C" fn(zmin: GLclampd, zmax: GLclampd)>,
    pub BlendEquationSeparateEXT:
        ::std::option::Option<unsafe extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum)>,
    pub AddSwapHintRectWIN: ::std::option::Option<
        unsafe extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei),
    >,
    pub BindFramebufferEXT:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, framebuffer: GLuint)>,
    pub BindRenderbufferEXT:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum, renderbuffer: GLuint)>,
    pub CheckFramebufferStatusEXT:
        ::std::option::Option<unsafe extern "C" fn(target: GLenum) -> GLenum>,
    pub DeleteFramebuffersEXT:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, framebuffers: *const GLuint)>,
    pub DeleteRenderbuffersEXT:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, renderbuffers: *const GLuint)>,
    pub FramebufferRenderbufferEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            attachment: GLenum,
            renderbuffertarget: GLenum,
            renderbuffer: GLuint,
        ),
    >,
    pub FramebufferTexture1DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            attachment: GLenum,
            textarget: GLenum,
            texture: GLuint,
            level: GLint,
        ),
    >,
    pub FramebufferTexture2DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            attachment: GLenum,
            textarget: GLenum,
            texture: GLuint,
            level: GLint,
        ),
    >,
    pub FramebufferTexture3DEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            attachment: GLenum,
            textarget: GLenum,
            texture: GLuint,
            level: GLint,
            zoffset: GLint,
        ),
    >,
    pub GenFramebuffersEXT:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, framebuffers: *mut GLuint)>,
    pub GenRenderbuffersEXT:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, renderbuffers: *mut GLuint)>,
    pub GenerateMipmapEXT: ::std::option::Option<unsafe extern "C" fn(target: GLenum)>,
    pub GetFramebufferAttachmentParameterivEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub GetRenderbufferParameterivEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub IsFramebufferEXT:
        ::std::option::Option<unsafe extern "C" fn(framebuffer: GLuint) -> GLboolean>,
    pub IsRenderbufferEXT:
        ::std::option::Option<unsafe extern "C" fn(renderbuffer: GLuint) -> GLboolean>,
    pub RenderbufferStorageEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
        ),
    >,
    pub ProgramParameteriEXT:
        ::std::option::Option<unsafe extern "C" fn(program: GLuint, pname: GLenum, value: GLint)>,
    pub FramebufferTextureEXT: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint),
    >,
    pub FramebufferTextureLayerEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            attachment: GLenum,
            texture: GLuint,
            level: GLint,
            layer: GLint,
        ),
    >,
    pub FramebufferTextureFaceEXT: ::std::option::Option<
        unsafe extern "C" fn(
            target: GLenum,
            attachment: GLenum,
            texture: GLuint,
            level: GLint,
            face: GLenum,
        ),
    >,
    pub DrawBuffersARB:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, bufs: *const GLenum)>,
    pub ElementPointerAPPLE:
        ::std::option::Option<unsafe extern "C" fn(type_: GLenum, pointer: *const GLvoid)>,
    pub DrawElementArrayAPPLE:
        ::std::option::Option<unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei)>,
    pub DrawRangeElementArrayAPPLE: ::std::option::Option<
        unsafe extern "C" fn(
            mode: GLenum,
            start: GLuint,
            end: GLuint,
            first: GLint,
            count: GLsizei,
        ),
    >,
    pub MultiDrawElementArrayAPPLE: ::std::option::Option<
        unsafe extern "C" fn(
            mode: GLenum,
            first: *const GLint,
            count: *const GLsizei,
            primcount: GLsizei,
        ),
    >,
    pub MultiDrawRangeElementArrayAPPLE: ::std::option::Option<
        unsafe extern "C" fn(
            mode: GLenum,
            start: GLuint,
            end: GLuint,
            first: *const GLint,
            count: *const GLsizei,
            primcount: GLsizei,
        ),
    >,
    pub GenFencesAPPLE:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, fences: *mut GLuint)>,
    pub DeleteFencesAPPLE:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, fences: *const GLuint)>,
    pub SetFenceAPPLE: ::std::option::Option<unsafe extern "C" fn(fence: GLuint)>,
    pub IsFenceAPPLE: ::std::option::Option<unsafe extern "C" fn(fence: GLuint) -> GLboolean>,
    pub TestFenceAPPLE: ::std::option::Option<unsafe extern "C" fn(fence: GLuint) -> GLboolean>,
    pub FinishFenceAPPLE: ::std::option::Option<unsafe extern "C" fn(fence: GLuint)>,
    pub TestObjectAPPLE:
        ::std::option::Option<unsafe extern "C" fn(object: GLenum, name: GLuint) -> GLboolean>,
    pub FinishObjectAPPLE: ::std::option::Option<unsafe extern "C" fn(object: GLenum, name: GLint)>,
    pub BindVertexArrayAPPLE: ::std::option::Option<unsafe extern "C" fn(array: GLuint)>,
    pub DeleteVertexArraysAPPLE:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, arrays: *const GLuint)>,
    pub GenVertexArraysAPPLE:
        ::std::option::Option<unsafe extern "C" fn(n: GLsizei, arrays: *const GLuint)>,
    pub IsVertexArrayAPPLE: ::std::option::Option<unsafe extern "C" fn(array: GLuint) -> GLboolean>,
    pub VertexArrayRangeAPPLE:
        ::std::option::Option<unsafe extern "C" fn(length: GLsizei, pointer: *mut GLvoid)>,
    pub FlushVertexArrayRangeAPPLE:
        ::std::option::Option<unsafe extern "C" fn(length: GLsizei, pointer: *mut GLvoid)>,
    pub VertexArrayParameteriAPPLE:
        ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>,
    pub TextureRangeAPPLE: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, length: GLsizei, pointer: *mut GLvoid),
    >,
    pub GetTexParameterPointervAPPLE: ::std::option::Option<
        unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut *mut GLvoid),
    >,
}
#[test]
fn bindgen_test_layout_t_jit_gl_extprocs() {
    assert_eq!(
        ::std::mem::size_of::<t_jit_gl_extprocs>(),
        7984usize,
        concat!("Size of: ", stringify!(t_jit_gl_extprocs))
    );
    assert_eq!(
        ::std::mem::align_of::<t_jit_gl_extprocs>(),
        8usize,
        concat!("Alignment of ", stringify!(t_jit_gl_extprocs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BlendColor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BlendColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BlendEquation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BlendEquation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DrawRangeElements as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DrawRangeElements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorTable as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorTable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorTableParameterfv as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorTableParameterfv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorTableParameteriv as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorTableParameteriv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyColorTable as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyColorTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetColorTable as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetColorTable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetColorTableParameterfv as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetColorTableParameterfv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetColorTableParameteriv as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetColorTableParameteriv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorSubTable as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorSubTable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyColorSubTable as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyColorSubTable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ConvolutionFilter1D as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ConvolutionFilter1D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ConvolutionFilter2D as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ConvolutionFilter2D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ConvolutionParameterf as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ConvolutionParameterf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ConvolutionParameterfv as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ConvolutionParameterfv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ConvolutionParameteri as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ConvolutionParameteri)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ConvolutionParameteriv as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ConvolutionParameteriv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyConvolutionFilter1D as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyConvolutionFilter1D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyConvolutionFilter2D as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyConvolutionFilter2D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetConvolutionFilter as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetConvolutionFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetConvolutionParameterfv as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetConvolutionParameterfv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetConvolutionParameteriv as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetConvolutionParameteriv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetSeparableFilter as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetSeparableFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SeparableFilter2D as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SeparableFilter2D)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetHistogram as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetHistogram)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetHistogramParameterfv as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetHistogramParameterfv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetHistogramParameteriv as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetHistogramParameteriv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetMinmax as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetMinmax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetMinmaxParameterfv as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetMinmaxParameterfv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetMinmaxParameteriv as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetMinmaxParameteriv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Histogram as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Histogram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Minmax as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Minmax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ResetHistogram as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ResetHistogram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ResetMinmax as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ResetMinmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexImage3D as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexImage3D)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexSubImage3D as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexSubImage3D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyTexSubImage3D as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyTexSubImage3D)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ActiveTexture as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ActiveTexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ClientActiveTexture as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ClientActiveTexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1d as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1dv as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1dv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1f as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1fv as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1fv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1i as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1i)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1iv as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1iv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1s as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1sv as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1sv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2d as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2dv as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2dv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2f as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2fv as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2fv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2i as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2i)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2iv as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2iv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2s as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2sv as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2sv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3d as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3dv as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3dv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3f as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3fv as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3fv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3i as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3i)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3iv as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3iv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3s as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3sv as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3sv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4d as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4dv as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4dv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4f as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4fv as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4fv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4i as *const _ as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4i)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4iv as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4iv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4s as *const _ as usize
        },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4sv as *const _ as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4sv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).LoadTransposeMatrixf as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(LoadTransposeMatrixf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).LoadTransposeMatrixd as *const _ as usize
        },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(LoadTransposeMatrixd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultTransposeMatrixf as *const _ as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultTransposeMatrixf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultTransposeMatrixd as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultTransposeMatrixd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SampleCoverage as *const _ as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SampleCoverage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CompressedTexImage3D as *const _ as usize
        },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CompressedTexImage3D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CompressedTexImage2D as *const _ as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CompressedTexImage2D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CompressedTexImage1D as *const _ as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CompressedTexImage1D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CompressedTexSubImage3D as *const _
                as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CompressedTexSubImage3D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CompressedTexSubImage2D as *const _
                as usize
        },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CompressedTexSubImage2D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CompressedTexSubImage1D as *const _
                as usize
        },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CompressedTexSubImage1D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetCompressedTexImage as *const _ as usize
        },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetCompressedTexImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BlendFuncSeparate as *const _ as usize
        },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BlendFuncSeparate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogCoordf as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogCoordf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogCoordfv as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogCoordfv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogCoordd as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogCoordd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogCoorddv as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogCoorddv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogCoordPointer as *const _ as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogCoordPointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiDrawArrays as *const _ as usize
        },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiDrawArrays)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiDrawElements as *const _ as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiDrawElements)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PointParameterf as *const _ as usize
        },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PointParameterf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PointParameterfv as *const _ as usize
        },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PointParameterfv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PointParameteri as *const _ as usize
        },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PointParameteri)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PointParameteriv as *const _ as usize
        },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PointParameteriv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3b as *const _ as usize
        },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3b)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3bv as *const _ as usize
        },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3bv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3d as *const _ as usize
        },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3dv as *const _ as usize
        },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3dv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3f as *const _ as usize
        },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3fv as *const _ as usize
        },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3fv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3i as *const _ as usize
        },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3i)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3iv as *const _ as usize
        },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3iv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3s as *const _ as usize
        },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3sv as *const _ as usize
        },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3sv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3ub as *const _ as usize
        },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3ub)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3ubv as *const _ as usize
        },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3ubv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3ui as *const _ as usize
        },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3ui)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3uiv as *const _ as usize
        },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3uiv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3us as *const _ as usize
        },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3us)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3usv as *const _ as usize
        },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3usv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColorPointer as *const _ as usize
        },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColorPointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2d as *const _ as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2dv as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2dv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2f as *const _ as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2fv as *const _ as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2fv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2i as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2iv as *const _ as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2s as *const _ as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2sv as *const _ as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3d as *const _ as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3dv as *const _ as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3dv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3f as *const _ as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3fv as *const _ as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3fv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3i as *const _ as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3iv as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3s as *const _ as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3sv as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenQueries as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenQueries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteQueries as *const _ as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteQueries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsQuery as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsQuery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BeginQuery as *const _ as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BeginQuery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).EndQuery as *const _ as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(EndQuery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetQueryiv as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetQueryiv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetQueryObjectiv as *const _ as usize
        },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetQueryObjectiv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetQueryObjectuiv as *const _ as usize
        },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetQueryObjectuiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindBuffer as *const _ as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteBuffers as *const _ as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteBuffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenBuffers as *const _ as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenBuffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsBuffer as *const _ as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BufferData as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BufferData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BufferSubData as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BufferSubData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetBufferSubData as *const _ as usize
        },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetBufferSubData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MapBuffer as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MapBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).UnmapBuffer as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(UnmapBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetBufferParameteriv as *const _ as usize
        },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetBufferParameteriv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetBufferPointerv as *const _ as usize
        },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetBufferPointerv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ActiveTextureARB as *const _ as usize
        },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ActiveTextureARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ClientActiveTextureARB as *const _
                as usize
        },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ClientActiveTextureARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1dARB as *const _ as usize
        },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1dARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1dvARB as *const _ as usize
        },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1dvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1fARB as *const _ as usize
        },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1fARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1fvARB as *const _ as usize
        },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1iARB as *const _ as usize
        },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1iARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1ivARB as *const _ as usize
        },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1ivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1sARB as *const _ as usize
        },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1sARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1svARB as *const _ as usize
        },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1svARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2dARB as *const _ as usize
        },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2dARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2dvARB as *const _ as usize
        },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2dvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2fARB as *const _ as usize
        },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2fARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2fvARB as *const _ as usize
        },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2iARB as *const _ as usize
        },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2iARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2ivARB as *const _ as usize
        },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2ivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2sARB as *const _ as usize
        },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2sARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2svARB as *const _ as usize
        },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2svARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3dARB as *const _ as usize
        },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3dARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3dvARB as *const _ as usize
        },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3dvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3fARB as *const _ as usize
        },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3fARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3fvARB as *const _ as usize
        },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3iARB as *const _ as usize
        },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3iARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3ivARB as *const _ as usize
        },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3ivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3sARB as *const _ as usize
        },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3sARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3svARB as *const _ as usize
        },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3svARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4dARB as *const _ as usize
        },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4dARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4dvARB as *const _ as usize
        },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4dvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4fARB as *const _ as usize
        },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4fARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4fvARB as *const _ as usize
        },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4iARB as *const _ as usize
        },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4iARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4ivARB as *const _ as usize
        },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4ivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4sARB as *const _ as usize
        },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4sARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4svARB as *const _ as usize
        },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4svARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).LoadTransposeMatrixfARB as *const _
                as usize
        },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(LoadTransposeMatrixfARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).LoadTransposeMatrixdARB as *const _
                as usize
        },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(LoadTransposeMatrixdARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultTransposeMatrixfARB as *const _
                as usize
        },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultTransposeMatrixfARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultTransposeMatrixdARB as *const _
                as usize
        },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultTransposeMatrixdARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SampleCoverageARB as *const _ as usize
        },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SampleCoverageARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CompressedTexImage3DARB as *const _
                as usize
        },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CompressedTexImage3DARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CompressedTexImage2DARB as *const _
                as usize
        },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CompressedTexImage2DARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CompressedTexImage1DARB as *const _
                as usize
        },
        1512usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CompressedTexImage1DARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CompressedTexSubImage3DARB as *const _
                as usize
        },
        1520usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CompressedTexSubImage3DARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CompressedTexSubImage2DARB as *const _
                as usize
        },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CompressedTexSubImage2DARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CompressedTexSubImage1DARB as *const _
                as usize
        },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CompressedTexSubImage1DARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetCompressedTexImageARB as *const _
                as usize
        },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetCompressedTexImageARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PointParameterfARB as *const _ as usize
        },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PointParameterfARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PointParameterfvARB as *const _ as usize
        },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PointParameterfvARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WeightbvARB as *const _ as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WeightbvARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WeightsvARB as *const _ as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WeightsvARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WeightivARB as *const _ as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WeightivARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WeightfvARB as *const _ as usize },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WeightfvARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WeightdvARB as *const _ as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WeightdvARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WeightubvARB as *const _ as usize },
        1608usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WeightubvARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WeightusvARB as *const _ as usize },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WeightusvARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WeightuivARB as *const _ as usize },
        1624usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WeightuivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WeightPointerARB as *const _ as usize
        },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WeightPointerARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexBlendARB as *const _ as usize
        },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexBlendARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CurrentPaletteMatrixARB as *const _
                as usize
        },
        1648usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CurrentPaletteMatrixARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MatrixIndexubvARB as *const _ as usize
        },
        1656usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MatrixIndexubvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MatrixIndexusvARB as *const _ as usize
        },
        1664usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MatrixIndexusvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MatrixIndexuivARB as *const _ as usize
        },
        1672usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MatrixIndexuivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MatrixIndexPointerARB as *const _ as usize
        },
        1680usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MatrixIndexPointerARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2dARB as *const _ as usize
        },
        1688usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2dARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2dvARB as *const _ as usize
        },
        1696usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2dvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2fARB as *const _ as usize
        },
        1704usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2fARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2fvARB as *const _ as usize
        },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2iARB as *const _ as usize
        },
        1720usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2iARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2ivARB as *const _ as usize
        },
        1728usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2ivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2sARB as *const _ as usize
        },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2sARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2svARB as *const _ as usize
        },
        1744usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2svARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3dARB as *const _ as usize
        },
        1752usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3dARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3dvARB as *const _ as usize
        },
        1760usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3dvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3fARB as *const _ as usize
        },
        1768usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3fARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3fvARB as *const _ as usize
        },
        1776usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3iARB as *const _ as usize
        },
        1784usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3iARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3ivARB as *const _ as usize
        },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3ivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3sARB as *const _ as usize
        },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3sARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3svARB as *const _ as usize
        },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3svARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1dARB as *const _ as usize
        },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1dARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1dvARB as *const _ as usize
        },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1dvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1fARB as *const _ as usize
        },
        1832usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1fARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1fvARB as *const _ as usize
        },
        1840usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1sARB as *const _ as usize
        },
        1848usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1sARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1svARB as *const _ as usize
        },
        1856usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1svARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2dARB as *const _ as usize
        },
        1864usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2dARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2dvARB as *const _ as usize
        },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2dvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2fARB as *const _ as usize
        },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2fARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2fvARB as *const _ as usize
        },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2sARB as *const _ as usize
        },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2sARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2svARB as *const _ as usize
        },
        1904usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2svARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3dARB as *const _ as usize
        },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3dARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3dvARB as *const _ as usize
        },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3dvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3fARB as *const _ as usize
        },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3fARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3fvARB as *const _ as usize
        },
        1936usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3sARB as *const _ as usize
        },
        1944usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3sARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3svARB as *const _ as usize
        },
        1952usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3svARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4NbvARB as *const _ as usize
        },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4NbvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4NivARB as *const _ as usize
        },
        1968usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4NivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4NsvARB as *const _ as usize
        },
        1976usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4NsvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4NubARB as *const _ as usize
        },
        1984usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4NubARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4NubvARB as *const _ as usize
        },
        1992usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4NubvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4NuivARB as *const _ as usize
        },
        2000usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4NuivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4NusvARB as *const _ as usize
        },
        2008usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4NusvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4bvARB as *const _ as usize
        },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4bvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4dARB as *const _ as usize
        },
        2024usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4dARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4dvARB as *const _ as usize
        },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4dvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4fARB as *const _ as usize
        },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4fARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4fvARB as *const _ as usize
        },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4ivARB as *const _ as usize
        },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4ivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4sARB as *const _ as usize
        },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4sARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4svARB as *const _ as usize
        },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4svARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4ubvARB as *const _ as usize
        },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4ubvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4uivARB as *const _ as usize
        },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4uivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4usvARB as *const _ as usize
        },
        2096usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4usvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribPointerARB as *const _
                as usize
        },
        2104usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribPointerARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).EnableVertexAttribArrayARB as *const _
                as usize
        },
        2112usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(EnableVertexAttribArrayARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DisableVertexAttribArrayARB as *const _
                as usize
        },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DisableVertexAttribArrayARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramStringARB as *const _ as usize
        },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramStringARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindProgramARB as *const _ as usize
        },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindProgramARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteProgramsARB as *const _ as usize
        },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteProgramsARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenProgramsARB as *const _ as usize
        },
        2152usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenProgramsARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramEnvParameter4dARB as *const _
                as usize
        },
        2160usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramEnvParameter4dARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramEnvParameter4dvARB as *const _
                as usize
        },
        2168usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramEnvParameter4dvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramEnvParameter4fARB as *const _
                as usize
        },
        2176usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramEnvParameter4fARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramEnvParameter4fvARB as *const _
                as usize
        },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramEnvParameter4fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramLocalParameter4dARB as *const _
                as usize
        },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramLocalParameter4dARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramLocalParameter4dvARB as *const _
                as usize
        },
        2200usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramLocalParameter4dvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramLocalParameter4fARB as *const _
                as usize
        },
        2208usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramLocalParameter4fARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramLocalParameter4fvARB as *const _
                as usize
        },
        2216usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramLocalParameter4fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetProgramEnvParameterdvARB as *const _
                as usize
        },
        2224usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetProgramEnvParameterdvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetProgramEnvParameterfvARB as *const _
                as usize
        },
        2232usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetProgramEnvParameterfvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetProgramLocalParameterdvARB as *const _
                as usize
        },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetProgramLocalParameterdvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetProgramLocalParameterfvARB as *const _
                as usize
        },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetProgramLocalParameterfvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetProgramivARB as *const _ as usize
        },
        2256usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetProgramivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetProgramStringARB as *const _ as usize
        },
        2264usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetProgramStringARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVertexAttribdvARB as *const _ as usize
        },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVertexAttribdvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVertexAttribfvARB as *const _ as usize
        },
        2280usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVertexAttribfvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVertexAttribivARB as *const _ as usize
        },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVertexAttribivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVertexAttribPointervARB as *const _
                as usize
        },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVertexAttribPointervARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsProgramARB as *const _ as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsProgramARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindBufferARB as *const _ as usize },
        2312usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindBufferARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteBuffersARB as *const _ as usize
        },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteBuffersARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenBuffersARB as *const _ as usize },
        2328usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenBuffersARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsBufferARB as *const _ as usize },
        2336usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsBufferARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BufferDataARB as *const _ as usize },
        2344usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BufferDataARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BufferSubDataARB as *const _ as usize
        },
        2352usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BufferSubDataARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetBufferSubDataARB as *const _ as usize
        },
        2360usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetBufferSubDataARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MapBufferARB as *const _ as usize },
        2368usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MapBufferARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).UnmapBufferARB as *const _ as usize
        },
        2376usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(UnmapBufferARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetBufferParameterivARB as *const _
                as usize
        },
        2384usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetBufferParameterivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetBufferPointervARB as *const _ as usize
        },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetBufferPointervARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenQueriesARB as *const _ as usize },
        2400usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenQueriesARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteQueriesARB as *const _ as usize
        },
        2408usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteQueriesARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsQueryARB as *const _ as usize },
        2416usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsQueryARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BeginQueryARB as *const _ as usize },
        2424usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BeginQueryARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).EndQueryARB as *const _ as usize },
        2432usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(EndQueryARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetQueryivARB as *const _ as usize },
        2440usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetQueryivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetQueryObjectivARB as *const _ as usize
        },
        2448usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetQueryObjectivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetQueryObjectuivARB as *const _ as usize
        },
        2456usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetQueryObjectuivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteObjectARB as *const _ as usize
        },
        2464usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteObjectARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetHandleARB as *const _ as usize },
        2472usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetHandleARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DetachObjectARB as *const _ as usize
        },
        2480usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DetachObjectARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CreateShaderObjectARB as *const _ as usize
        },
        2488usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CreateShaderObjectARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ShaderSourceARB as *const _ as usize
        },
        2496usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ShaderSourceARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CompileShaderARB as *const _ as usize
        },
        2504usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CompileShaderARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CreateProgramObjectARB as *const _
                as usize
        },
        2512usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CreateProgramObjectARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).AttachObjectARB as *const _ as usize
        },
        2520usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(AttachObjectARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).LinkProgramARB as *const _ as usize
        },
        2528usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(LinkProgramARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).UseProgramObjectARB as *const _ as usize
        },
        2536usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(UseProgramObjectARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ValidateProgramARB as *const _ as usize
        },
        2544usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ValidateProgramARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform1fARB as *const _ as usize },
        2552usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform1fARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform2fARB as *const _ as usize },
        2560usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform2fARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform3fARB as *const _ as usize },
        2568usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform3fARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform4fARB as *const _ as usize },
        2576usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform4fARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform1iARB as *const _ as usize },
        2584usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform1iARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform2iARB as *const _ as usize },
        2592usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform2iARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform3iARB as *const _ as usize },
        2600usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform3iARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform4iARB as *const _ as usize },
        2608usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform4iARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform1fvARB as *const _ as usize },
        2616usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform1fvARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform2fvARB as *const _ as usize },
        2624usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform2fvARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform3fvARB as *const _ as usize },
        2632usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform3fvARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform4fvARB as *const _ as usize },
        2640usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform4fvARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform1ivARB as *const _ as usize },
        2648usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform1ivARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform2ivARB as *const _ as usize },
        2656usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform2ivARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform3ivARB as *const _ as usize },
        2664usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform3ivARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Uniform4ivARB as *const _ as usize },
        2672usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Uniform4ivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).UniformMatrix2fvARB as *const _ as usize
        },
        2680usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(UniformMatrix2fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).UniformMatrix3fvARB as *const _ as usize
        },
        2688usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(UniformMatrix3fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).UniformMatrix4fvARB as *const _ as usize
        },
        2696usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(UniformMatrix4fvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetObjectParameterfvARB as *const _
                as usize
        },
        2704usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetObjectParameterfvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetObjectParameterivARB as *const _
                as usize
        },
        2712usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetObjectParameterivARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetInfoLogARB as *const _ as usize },
        2720usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetInfoLogARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetAttachedObjectsARB as *const _ as usize
        },
        2728usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetAttachedObjectsARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetUniformLocationARB as *const _ as usize
        },
        2736usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetUniformLocationARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetActiveUniformARB as *const _ as usize
        },
        2744usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetActiveUniformARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetUniformfvARB as *const _ as usize
        },
        2752usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetUniformfvARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetUniformivARB as *const _ as usize
        },
        2760usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetUniformivARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetShaderSourceARB as *const _ as usize
        },
        2768usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetShaderSourceARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindAttribLocationARB as *const _ as usize
        },
        2776usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindAttribLocationARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetActiveAttribARB as *const _ as usize
        },
        2784usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetActiveAttribARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetAttribLocationARB as *const _ as usize
        },
        2792usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetAttribLocationARB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BlendColorEXT as *const _ as usize },
        2800usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BlendColorEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PolygonOffsetEXT as *const _ as usize
        },
        2808usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PolygonOffsetEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexImage3DEXT as *const _ as usize },
        2816usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexImage3DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexSubImage3DEXT as *const _ as usize
        },
        2824usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexSubImage3DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetTexFilterFuncSGIS as *const _ as usize
        },
        2832usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetTexFilterFuncSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexFilterFuncSGIS as *const _ as usize
        },
        2840usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexFilterFuncSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexSubImage1DEXT as *const _ as usize
        },
        2848usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexSubImage1DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexSubImage2DEXT as *const _ as usize
        },
        2856usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexSubImage2DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyTexImage1DEXT as *const _ as usize
        },
        2864usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyTexImage1DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyTexImage2DEXT as *const _ as usize
        },
        2872usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyTexImage2DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyTexSubImage1DEXT as *const _ as usize
        },
        2880usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyTexSubImage1DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyTexSubImage2DEXT as *const _ as usize
        },
        2888usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyTexSubImage2DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyTexSubImage3DEXT as *const _ as usize
        },
        2896usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyTexSubImage3DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetHistogramEXT as *const _ as usize
        },
        2904usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetHistogramEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetHistogramParameterfvEXT as *const _
                as usize
        },
        2912usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetHistogramParameterfvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetHistogramParameterivEXT as *const _
                as usize
        },
        2920usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetHistogramParameterivEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetMinmaxEXT as *const _ as usize },
        2928usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetMinmaxEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetMinmaxParameterfvEXT as *const _
                as usize
        },
        2936usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetMinmaxParameterfvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetMinmaxParameterivEXT as *const _
                as usize
        },
        2944usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetMinmaxParameterivEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).HistogramEXT as *const _ as usize },
        2952usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(HistogramEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MinmaxEXT as *const _ as usize },
        2960usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MinmaxEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ResetHistogramEXT as *const _ as usize
        },
        2968usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ResetHistogramEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ResetMinmaxEXT as *const _ as usize
        },
        2976usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ResetMinmaxEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ConvolutionFilter1DEXT as *const _
                as usize
        },
        2984usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ConvolutionFilter1DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ConvolutionFilter2DEXT as *const _
                as usize
        },
        2992usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ConvolutionFilter2DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ConvolutionParameterfEXT as *const _
                as usize
        },
        3000usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ConvolutionParameterfEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ConvolutionParameterfvEXT as *const _
                as usize
        },
        3008usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ConvolutionParameterfvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ConvolutionParameteriEXT as *const _
                as usize
        },
        3016usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ConvolutionParameteriEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ConvolutionParameterivEXT as *const _
                as usize
        },
        3024usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ConvolutionParameterivEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyConvolutionFilter1DEXT as *const _
                as usize
        },
        3032usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyConvolutionFilter1DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyConvolutionFilter2DEXT as *const _
                as usize
        },
        3040usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyConvolutionFilter2DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetConvolutionFilterEXT as *const _
                as usize
        },
        3048usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetConvolutionFilterEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetConvolutionParameterfvEXT as *const _
                as usize
        },
        3056usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetConvolutionParameterfvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetConvolutionParameterivEXT as *const _
                as usize
        },
        3064usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetConvolutionParameterivEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetSeparableFilterEXT as *const _ as usize
        },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetSeparableFilterEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SeparableFilter2DEXT as *const _ as usize
        },
        3080usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SeparableFilter2DEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorTableSGI as *const _ as usize },
        3088usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorTableSGI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorTableParameterfvSGI as *const _
                as usize
        },
        3096usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorTableParameterfvSGI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorTableParameterivSGI as *const _
                as usize
        },
        3104usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorTableParameterivSGI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyColorTableSGI as *const _ as usize
        },
        3112usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyColorTableSGI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetColorTableSGI as *const _ as usize
        },
        3120usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetColorTableSGI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetColorTableParameterfvSGI as *const _
                as usize
        },
        3128usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetColorTableParameterfvSGI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetColorTableParameterivSGI as *const _
                as usize
        },
        3136usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetColorTableParameterivSGI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PixelTexGenSGIX as *const _ as usize
        },
        3144usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PixelTexGenSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PixelTexGenParameteriSGIS as *const _
                as usize
        },
        3152usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PixelTexGenParameteriSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PixelTexGenParameterivSGIS as *const _
                as usize
        },
        3160usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PixelTexGenParameterivSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PixelTexGenParameterfSGIS as *const _
                as usize
        },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PixelTexGenParameterfSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PixelTexGenParameterfvSGIS as *const _
                as usize
        },
        3176usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PixelTexGenParameterfvSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetPixelTexGenParameterivSGIS as *const _
                as usize
        },
        3184usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetPixelTexGenParameterivSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetPixelTexGenParameterfvSGIS as *const _
                as usize
        },
        3192usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetPixelTexGenParameterfvSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexImage4DSGIS as *const _ as usize
        },
        3200usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexImage4DSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexSubImage4DSGIS as *const _ as usize
        },
        3208usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexSubImage4DSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).AreTexturesResidentEXT as *const _
                as usize
        },
        3216usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(AreTexturesResidentEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindTextureEXT as *const _ as usize
        },
        3224usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindTextureEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteTexturesEXT as *const _ as usize
        },
        3232usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteTexturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenTexturesEXT as *const _ as usize
        },
        3240usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenTexturesEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsTextureEXT as *const _ as usize },
        3248usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsTextureEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PrioritizeTexturesEXT as *const _ as usize
        },
        3256usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PrioritizeTexturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DetailTexFuncSGIS as *const _ as usize
        },
        3264usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DetailTexFuncSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetDetailTexFuncSGIS as *const _ as usize
        },
        3272usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetDetailTexFuncSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SharpenTexFuncSGIS as *const _ as usize
        },
        3280usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SharpenTexFuncSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetSharpenTexFuncSGIS as *const _ as usize
        },
        3288usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetSharpenTexFuncSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SampleMaskSGIS as *const _ as usize
        },
        3296usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SampleMaskSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SamplePatternSGIS as *const _ as usize
        },
        3304usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SamplePatternSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ArrayElementEXT as *const _ as usize
        },
        3312usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ArrayElementEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorPointerEXT as *const _ as usize
        },
        3320usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorPointerEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DrawArraysEXT as *const _ as usize },
        3328usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DrawArraysEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).EdgeFlagPointerEXT as *const _ as usize
        },
        3336usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(EdgeFlagPointerEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetPointervEXT as *const _ as usize
        },
        3344usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetPointervEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IndexPointerEXT as *const _ as usize
        },
        3352usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IndexPointerEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NormalPointerEXT as *const _ as usize
        },
        3360usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NormalPointerEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoordPointerEXT as *const _ as usize
        },
        3368usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoordPointerEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexPointerEXT as *const _ as usize
        },
        3376usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexPointerEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BlendEquationEXT as *const _ as usize
        },
        3384usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BlendEquationEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SpriteParameterfSGIX as *const _ as usize
        },
        3392usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SpriteParameterfSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SpriteParameterfvSGIX as *const _ as usize
        },
        3400usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SpriteParameterfvSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SpriteParameteriSGIX as *const _ as usize
        },
        3408usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SpriteParameteriSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SpriteParameterivSGIX as *const _ as usize
        },
        3416usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SpriteParameterivSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PointParameterfEXT as *const _ as usize
        },
        3424usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PointParameterfEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PointParameterfvEXT as *const _ as usize
        },
        3432usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PointParameterfvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PointParameterfSGIS as *const _ as usize
        },
        3440usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PointParameterfSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PointParameterfvSGIS as *const _ as usize
        },
        3448usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PointParameterfvSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetInstrumentsSGIX as *const _ as usize
        },
        3456usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetInstrumentsSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).InstrumentsBufferSGIX as *const _ as usize
        },
        3464usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(InstrumentsBufferSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PollInstrumentsSGIX as *const _ as usize
        },
        3472usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PollInstrumentsSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReadInstrumentsSGIX as *const _ as usize
        },
        3480usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReadInstrumentsSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).StartInstrumentsSGIX as *const _ as usize
        },
        3488usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(StartInstrumentsSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).StopInstrumentsSGIX as *const _ as usize
        },
        3496usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(StopInstrumentsSGIX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FrameZoomSGIX as *const _ as usize },
        3504usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FrameZoomSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TagSampleBufferSGIX as *const _ as usize
        },
        3512usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TagSampleBufferSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeformationMap3dSGIX as *const _ as usize
        },
        3520usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeformationMap3dSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeformationMap3fSGIX as *const _ as usize
        },
        3528usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeformationMap3fSGIX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeformSGIX as *const _ as usize },
        3536usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeformSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).LoadIdentityDeformationMapSGIX as *const _
                as usize
        },
        3544usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(LoadIdentityDeformationMapSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReferencePlaneSGIX as *const _ as usize
        },
        3552usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReferencePlaneSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FlushRasterSGIX as *const _ as usize
        },
        3560usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FlushRasterSGIX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogFuncSGIS as *const _ as usize },
        3568usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogFuncSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetFogFuncSGIS as *const _ as usize
        },
        3576usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetFogFuncSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ImageTransformParameteriHP as *const _
                as usize
        },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ImageTransformParameteriHP)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ImageTransformParameterfHP as *const _
                as usize
        },
        3592usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ImageTransformParameterfHP)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ImageTransformParameterivHP as *const _
                as usize
        },
        3600usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ImageTransformParameterivHP)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ImageTransformParameterfvHP as *const _
                as usize
        },
        3608usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ImageTransformParameterfvHP)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetImageTransformParameterivHP as *const _
                as usize
        },
        3616usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetImageTransformParameterivHP)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetImageTransformParameterfvHP as *const _
                as usize
        },
        3624usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetImageTransformParameterfvHP)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorSubTableEXT as *const _ as usize
        },
        3632usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorSubTableEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CopyColorSubTableEXT as *const _ as usize
        },
        3640usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CopyColorSubTableEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).HintPGI as *const _ as usize },
        3648usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(HintPGI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorTableEXT as *const _ as usize },
        3656usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorTableEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetColorTableEXT as *const _ as usize
        },
        3664usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetColorTableEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetColorTableParameterivEXT as *const _
                as usize
        },
        3672usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetColorTableParameterivEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetColorTableParameterfvEXT as *const _
                as usize
        },
        3680usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetColorTableParameterfvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetListParameterfvSGIX as *const _
                as usize
        },
        3688usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetListParameterfvSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetListParameterivSGIX as *const _
                as usize
        },
        3696usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetListParameterivSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ListParameterfSGIX as *const _ as usize
        },
        3704usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ListParameterfSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ListParameterfvSGIX as *const _ as usize
        },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ListParameterfvSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ListParameteriSGIX as *const _ as usize
        },
        3720usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ListParameteriSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ListParameterivSGIX as *const _ as usize
        },
        3728usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ListParameterivSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IndexMaterialEXT as *const _ as usize
        },
        3736usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IndexMaterialEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IndexFuncEXT as *const _ as usize },
        3744usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IndexFuncEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).LockArraysEXT as *const _ as usize },
        3752usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(LockArraysEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).UnlockArraysEXT as *const _ as usize
        },
        3760usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(UnlockArraysEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CullParameterdvEXT as *const _ as usize
        },
        3768usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CullParameterdvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CullParameterfvEXT as *const _ as usize
        },
        3776usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CullParameterfvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FragmentColorMaterialSGIX as *const _
                as usize
        },
        3784usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FragmentColorMaterialSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FragmentLightfSGIX as *const _ as usize
        },
        3792usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FragmentLightfSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FragmentLightfvSGIX as *const _ as usize
        },
        3800usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FragmentLightfvSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FragmentLightiSGIX as *const _ as usize
        },
        3808usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FragmentLightiSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FragmentLightivSGIX as *const _ as usize
        },
        3816usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FragmentLightivSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FragmentLightModelfSGIX as *const _
                as usize
        },
        3824usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FragmentLightModelfSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FragmentLightModelfvSGIX as *const _
                as usize
        },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FragmentLightModelfvSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FragmentLightModeliSGIX as *const _
                as usize
        },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FragmentLightModeliSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FragmentLightModelivSGIX as *const _
                as usize
        },
        3848usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FragmentLightModelivSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FragmentMaterialfSGIX as *const _ as usize
        },
        3856usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FragmentMaterialfSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FragmentMaterialfvSGIX as *const _
                as usize
        },
        3864usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FragmentMaterialfvSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FragmentMaterialiSGIX as *const _ as usize
        },
        3872usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FragmentMaterialiSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FragmentMaterialivSGIX as *const _
                as usize
        },
        3880usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FragmentMaterialivSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetFragmentLightfvSGIX as *const _
                as usize
        },
        3888usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetFragmentLightfvSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetFragmentLightivSGIX as *const _
                as usize
        },
        3896usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetFragmentLightivSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetFragmentMaterialfvSGIX as *const _
                as usize
        },
        3904usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetFragmentMaterialfvSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetFragmentMaterialivSGIX as *const _
                as usize
        },
        3912usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetFragmentMaterialivSGIX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).LightEnviSGIX as *const _ as usize },
        3920usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(LightEnviSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DrawRangeElementsEXT as *const _ as usize
        },
        3928usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DrawRangeElementsEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ApplyTextureEXT as *const _ as usize
        },
        3936usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ApplyTextureEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TextureLightEXT as *const _ as usize
        },
        3944usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TextureLightEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TextureMaterialEXT as *const _ as usize
        },
        3952usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TextureMaterialEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).AsyncMarkerSGIX as *const _ as usize
        },
        3960usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(AsyncMarkerSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FinishAsyncSGIX as *const _ as usize
        },
        3968usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FinishAsyncSGIX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PollAsyncSGIX as *const _ as usize },
        3976usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PollAsyncSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenAsyncMarkersSGIX as *const _ as usize
        },
        3984usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenAsyncMarkersSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteAsyncMarkersSGIX as *const _
                as usize
        },
        3992usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteAsyncMarkersSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsAsyncMarkerSGIX as *const _ as usize
        },
        4000usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsAsyncMarkerSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexPointervINTEL as *const _ as usize
        },
        4008usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexPointervINTEL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NormalPointervINTEL as *const _ as usize
        },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NormalPointervINTEL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorPointervINTEL as *const _ as usize
        },
        4024usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorPointervINTEL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoordPointervINTEL as *const _ as usize
        },
        4032usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoordPointervINTEL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PixelTransformParameteriEXT as *const _
                as usize
        },
        4040usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PixelTransformParameteriEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PixelTransformParameterfEXT as *const _
                as usize
        },
        4048usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PixelTransformParameterfEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PixelTransformParameterivEXT as *const _
                as usize
        },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PixelTransformParameterivEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PixelTransformParameterfvEXT as *const _
                as usize
        },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PixelTransformParameterfvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3bEXT as *const _ as usize
        },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3bEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3bvEXT as *const _ as usize
        },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3bvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3dEXT as *const _ as usize
        },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3dEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3dvEXT as *const _ as usize
        },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3dvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3fEXT as *const _ as usize
        },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3fEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3fvEXT as *const _ as usize
        },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3fvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3iEXT as *const _ as usize
        },
        4120usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3iEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3ivEXT as *const _ as usize
        },
        4128usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3ivEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3sEXT as *const _ as usize
        },
        4136usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3sEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3svEXT as *const _ as usize
        },
        4144usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3svEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3ubEXT as *const _ as usize
        },
        4152usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3ubEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3ubvEXT as *const _ as usize
        },
        4160usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3ubvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3uiEXT as *const _ as usize
        },
        4168usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3uiEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3uivEXT as *const _ as usize
        },
        4176usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3uivEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3usEXT as *const _ as usize
        },
        4184usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3usEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3usvEXT as *const _ as usize
        },
        4192usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3usvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColorPointerEXT as *const _
                as usize
        },
        4200usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColorPointerEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TextureNormalEXT as *const _ as usize
        },
        4208usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TextureNormalEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiDrawArraysEXT as *const _ as usize
        },
        4216usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiDrawArraysEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiDrawElementsEXT as *const _ as usize
        },
        4224usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiDrawElementsEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogCoordfEXT as *const _ as usize },
        4232usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogCoordfEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogCoordfvEXT as *const _ as usize },
        4240usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogCoordfvEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogCoorddEXT as *const _ as usize },
        4248usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogCoorddEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogCoorddvEXT as *const _ as usize },
        4256usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogCoorddvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogCoordPointerEXT as *const _ as usize
        },
        4264usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogCoordPointerEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Tangent3bEXT as *const _ as usize },
        4272usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Tangent3bEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Tangent3bvEXT as *const _ as usize },
        4280usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Tangent3bvEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Tangent3dEXT as *const _ as usize },
        4288usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Tangent3dEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Tangent3dvEXT as *const _ as usize },
        4296usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Tangent3dvEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Tangent3fEXT as *const _ as usize },
        4304usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Tangent3fEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Tangent3fvEXT as *const _ as usize },
        4312usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Tangent3fvEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Tangent3iEXT as *const _ as usize },
        4320usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Tangent3iEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Tangent3ivEXT as *const _ as usize },
        4328usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Tangent3ivEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Tangent3sEXT as *const _ as usize },
        4336usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Tangent3sEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Tangent3svEXT as *const _ as usize },
        4344usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Tangent3svEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Binormal3bEXT as *const _ as usize },
        4352usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Binormal3bEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Binormal3bvEXT as *const _ as usize
        },
        4360usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Binormal3bvEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Binormal3dEXT as *const _ as usize },
        4368usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Binormal3dEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Binormal3dvEXT as *const _ as usize
        },
        4376usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Binormal3dvEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Binormal3fEXT as *const _ as usize },
        4384usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Binormal3fEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Binormal3fvEXT as *const _ as usize
        },
        4392usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Binormal3fvEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Binormal3iEXT as *const _ as usize },
        4400usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Binormal3iEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Binormal3ivEXT as *const _ as usize
        },
        4408usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Binormal3ivEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Binormal3sEXT as *const _ as usize },
        4416usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Binormal3sEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Binormal3svEXT as *const _ as usize
        },
        4424usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Binormal3svEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TangentPointerEXT as *const _ as usize
        },
        4432usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TangentPointerEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BinormalPointerEXT as *const _ as usize
        },
        4440usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BinormalPointerEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FinishTextureSUNX as *const _ as usize
        },
        4448usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FinishTextureSUNX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GlobalAlphaFactorbSUN as *const _ as usize
        },
        4456usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GlobalAlphaFactorbSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GlobalAlphaFactorsSUN as *const _ as usize
        },
        4464usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GlobalAlphaFactorsSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GlobalAlphaFactoriSUN as *const _ as usize
        },
        4472usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GlobalAlphaFactoriSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GlobalAlphaFactorfSUN as *const _ as usize
        },
        4480usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GlobalAlphaFactorfSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GlobalAlphaFactordSUN as *const _ as usize
        },
        4488usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GlobalAlphaFactordSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GlobalAlphaFactorubSUN as *const _
                as usize
        },
        4496usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GlobalAlphaFactorubSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GlobalAlphaFactorusSUN as *const _
                as usize
        },
        4504usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GlobalAlphaFactorusSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GlobalAlphaFactoruiSUN as *const _
                as usize
        },
        4512usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GlobalAlphaFactoruiSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeuiSUN as *const _ as usize
        },
        4520usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeusSUN as *const _ as usize
        },
        4528usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeusSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeubSUN as *const _ as usize
        },
        4536usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeubSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeuivSUN as *const _ as usize
        },
        4544usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuivSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeusvSUN as *const _ as usize
        },
        4552usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeusvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeubvSUN as *const _ as usize
        },
        4560usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeubvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodePointerSUN as *const _
                as usize
        },
        4568usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodePointerSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Color4ubVertex2fSUN as *const _ as usize
        },
        4576usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Color4ubVertex2fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Color4ubVertex2fvSUN as *const _ as usize
        },
        4584usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Color4ubVertex2fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Color4ubVertex3fSUN as *const _ as usize
        },
        4592usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Color4ubVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Color4ubVertex3fvSUN as *const _ as usize
        },
        4600usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Color4ubVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Color3fVertex3fSUN as *const _ as usize
        },
        4608usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Color3fVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Color3fVertex3fvSUN as *const _ as usize
        },
        4616usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Color3fVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Normal3fVertex3fSUN as *const _ as usize
        },
        4624usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Normal3fVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Normal3fVertex3fvSUN as *const _ as usize
        },
        4632usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Normal3fVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Color4fNormal3fVertex3fSUN as *const _
                as usize
        },
        4640usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Color4fNormal3fVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Color4fNormal3fVertex3fvSUN as *const _
                as usize
        },
        4648usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Color4fNormal3fVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord2fVertex3fSUN as *const _ as usize
        },
        4656usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord2fVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord2fVertex3fvSUN as *const _
                as usize
        },
        4664usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord2fVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord4fVertex4fSUN as *const _ as usize
        },
        4672usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord4fVertex4fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord4fVertex4fvSUN as *const _
                as usize
        },
        4680usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord4fVertex4fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord2fColor4ubVertex3fSUN as *const _
                as usize
        },
        4688usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord2fColor4ubVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord2fColor4ubVertex3fvSUN as *const _
                as usize
        },
        4696usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord2fColor4ubVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord2fColor3fVertex3fSUN as *const _
                as usize
        },
        4704usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord2fColor3fVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord2fColor3fVertex3fvSUN as *const _
                as usize
        },
        4712usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord2fColor3fVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord2fNormal3fVertex3fSUN as *const _
                as usize
        },
        4720usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord2fNormal3fVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord2fNormal3fVertex3fvSUN as *const _
                as usize
        },
        4728usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord2fNormal3fVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord2fColor4fNormal3fVertex3fSUN
                as *const _ as usize
        },
        4736usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord2fColor4fNormal3fVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord2fColor4fNormal3fVertex3fvSUN
                as *const _ as usize
        },
        4744usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord2fColor4fNormal3fVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord4fColor4fNormal3fVertex4fSUN
                as *const _ as usize
        },
        4752usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord4fColor4fNormal3fVertex4fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord4fColor4fNormal3fVertex4fvSUN
                as *const _ as usize
        },
        4760usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord4fColor4fNormal3fVertex4fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeuiVertex3fSUN as *const _
                as usize
        },
        4768usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeuiVertex3fvSUN as *const _
                as usize
        },
        4776usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeuiColor4ubVertex3fSUN
                as *const _ as usize
        },
        4784usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiColor4ubVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeuiColor4ubVertex3fvSUN
                as *const _ as usize
        },
        4792usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiColor4ubVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeuiColor3fVertex3fSUN
                as *const _ as usize
        },
        4800usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiColor3fVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeuiColor3fVertex3fvSUN
                as *const _ as usize
        },
        4808usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiColor3fVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeuiNormal3fVertex3fSUN
                as *const _ as usize
        },
        4816usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiNormal3fVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeuiNormal3fVertex3fvSUN
                as *const _ as usize
        },
        4824usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiNormal3fVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>()))
                .ReplacementCodeuiColor4fNormal3fVertex3fSUN as *const _ as usize
        },
        4832usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiColor4fNormal3fVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>()))
                .ReplacementCodeuiColor4fNormal3fVertex3fvSUN as *const _ as usize
        },
        4840usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiColor4fNormal3fVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeuiTexCoord2fVertex3fSUN
                as *const _ as usize
        },
        4848usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiTexCoord2fVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ReplacementCodeuiTexCoord2fVertex3fvSUN
                as *const _ as usize
        },
        4856usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiTexCoord2fVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>()))
                .ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN as *const _ as usize
        },
        4864usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>()))
                .ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN as *const _ as usize
        },
        4872usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>()))
                .ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN as *const _
                as usize
        },
        4880usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>()))
                .ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN as *const _
                as usize
        },
        4888usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BlendFuncSeparateEXT as *const _ as usize
        },
        4896usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BlendFuncSeparateEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BlendFuncSeparateINGR as *const _ as usize
        },
        4904usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BlendFuncSeparateINGR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexWeightfEXT as *const _ as usize
        },
        4912usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexWeightfEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexWeightfvEXT as *const _ as usize
        },
        4920usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexWeightfvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexWeightPointerEXT as *const _
                as usize
        },
        4928usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexWeightPointerEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FlushVertexArrayRangeNV as *const _
                as usize
        },
        4936usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FlushVertexArrayRangeNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexArrayRangeNV as *const _ as usize
        },
        4944usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexArrayRangeNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CombinerParameterfvNV as *const _ as usize
        },
        4952usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CombinerParameterfvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CombinerParameterfNV as *const _ as usize
        },
        4960usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CombinerParameterfNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CombinerParameterivNV as *const _ as usize
        },
        4968usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CombinerParameterivNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CombinerParameteriNV as *const _ as usize
        },
        4976usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CombinerParameteriNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CombinerInputNV as *const _ as usize
        },
        4984usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CombinerInputNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CombinerOutputNV as *const _ as usize
        },
        4992usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CombinerOutputNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FinalCombinerInputNV as *const _ as usize
        },
        5000usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FinalCombinerInputNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetCombinerInputParameterfvNV as *const _
                as usize
        },
        5008usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetCombinerInputParameterfvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetCombinerInputParameterivNV as *const _
                as usize
        },
        5016usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetCombinerInputParameterivNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetCombinerOutputParameterfvNV as *const _
                as usize
        },
        5024usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetCombinerOutputParameterfvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetCombinerOutputParameterivNV as *const _
                as usize
        },
        5032usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetCombinerOutputParameterivNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetFinalCombinerInputParameterfvNV
                as *const _ as usize
        },
        5040usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetFinalCombinerInputParameterfvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetFinalCombinerInputParameterivNV
                as *const _ as usize
        },
        5048usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetFinalCombinerInputParameterivNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ResizeBuffersMESA as *const _ as usize
        },
        5056usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ResizeBuffersMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2dMESA as *const _ as usize
        },
        5064usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2dMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2dvMESA as *const _ as usize
        },
        5072usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2dvMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2fMESA as *const _ as usize
        },
        5080usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2fMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2fvMESA as *const _ as usize
        },
        5088usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2fvMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2iMESA as *const _ as usize
        },
        5096usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2iMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2ivMESA as *const _ as usize
        },
        5104usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2ivMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2sMESA as *const _ as usize
        },
        5112usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2sMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos2svMESA as *const _ as usize
        },
        5120usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos2svMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3dMESA as *const _ as usize
        },
        5128usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3dMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3dvMESA as *const _ as usize
        },
        5136usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3dvMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3fMESA as *const _ as usize
        },
        5144usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3fMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3fvMESA as *const _ as usize
        },
        5152usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3fvMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3iMESA as *const _ as usize
        },
        5160usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3iMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3ivMESA as *const _ as usize
        },
        5168usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3ivMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3sMESA as *const _ as usize
        },
        5176usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3sMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos3svMESA as *const _ as usize
        },
        5184usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos3svMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos4dMESA as *const _ as usize
        },
        5192usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos4dMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos4dvMESA as *const _ as usize
        },
        5200usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos4dvMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos4fMESA as *const _ as usize
        },
        5208usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos4fMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos4fvMESA as *const _ as usize
        },
        5216usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos4fvMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos4iMESA as *const _ as usize
        },
        5224usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos4iMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos4ivMESA as *const _ as usize
        },
        5232usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos4ivMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos4sMESA as *const _ as usize
        },
        5240usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos4sMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WindowPos4svMESA as *const _ as usize
        },
        5248usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WindowPos4svMESA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiModeDrawArraysIBM as *const _
                as usize
        },
        5256usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiModeDrawArraysIBM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiModeDrawElementsIBM as *const _
                as usize
        },
        5264usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiModeDrawElementsIBM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorPointerListIBM as *const _ as usize
        },
        5272usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorPointerListIBM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColorPointerListIBM as *const _
                as usize
        },
        5280usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColorPointerListIBM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).EdgeFlagPointerListIBM as *const _
                as usize
        },
        5288usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(EdgeFlagPointerListIBM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogCoordPointerListIBM as *const _
                as usize
        },
        5296usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogCoordPointerListIBM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IndexPointerListIBM as *const _ as usize
        },
        5304usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IndexPointerListIBM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NormalPointerListIBM as *const _ as usize
        },
        5312usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NormalPointerListIBM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoordPointerListIBM as *const _
                as usize
        },
        5320usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoordPointerListIBM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexPointerListIBM as *const _ as usize
        },
        5328usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexPointerListIBM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TbufferMask3DFX as *const _ as usize
        },
        5336usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TbufferMask3DFX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SampleMaskEXT as *const _ as usize },
        5344usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SampleMaskEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SamplePatternEXT as *const _ as usize
        },
        5352usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SamplePatternEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TextureColorMaskSGIS as *const _ as usize
        },
        5360usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TextureColorMaskSGIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IglooInterfaceSGIX as *const _ as usize
        },
        5368usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IglooInterfaceSGIX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteFencesNV as *const _ as usize
        },
        5376usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteFencesNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenFencesNV as *const _ as usize },
        5384usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenFencesNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsFenceNV as *const _ as usize },
        5392usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsFenceNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TestFenceNV as *const _ as usize },
        5400usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TestFenceNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetFenceivNV as *const _ as usize },
        5408usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetFenceivNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FinishFenceNV as *const _ as usize },
        5416usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FinishFenceNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SetFenceNV as *const _ as usize },
        5424usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SetFenceNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MapControlPointsNV as *const _ as usize
        },
        5432usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MapControlPointsNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MapParameterivNV as *const _ as usize
        },
        5440usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MapParameterivNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MapParameterfvNV as *const _ as usize
        },
        5448usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MapParameterfvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetMapControlPointsNV as *const _ as usize
        },
        5456usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetMapControlPointsNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetMapParameterivNV as *const _ as usize
        },
        5464usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetMapParameterivNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetMapParameterfvNV as *const _ as usize
        },
        5472usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetMapParameterfvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetMapAttribParameterivNV as *const _
                as usize
        },
        5480usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetMapAttribParameterivNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetMapAttribParameterfvNV as *const _
                as usize
        },
        5488usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetMapAttribParameterfvNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).EvalMapsNV as *const _ as usize },
        5496usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(EvalMapsNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CombinerStageParameterfvNV as *const _
                as usize
        },
        5504usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CombinerStageParameterfvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetCombinerStageParameterfvNV as *const _
                as usize
        },
        5512usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetCombinerStageParameterfvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).AreProgramsResidentNV as *const _ as usize
        },
        5520usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(AreProgramsResidentNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindProgramNV as *const _ as usize },
        5528usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindProgramNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteProgramsNV as *const _ as usize
        },
        5536usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteProgramsNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ExecuteProgramNV as *const _ as usize
        },
        5544usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ExecuteProgramNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenProgramsNV as *const _ as usize },
        5552usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenProgramsNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetProgramParameterdvNV as *const _
                as usize
        },
        5560usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetProgramParameterdvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetProgramParameterfvNV as *const _
                as usize
        },
        5568usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetProgramParameterfvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetProgramivNV as *const _ as usize
        },
        5576usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetProgramivNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetProgramStringNV as *const _ as usize
        },
        5584usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetProgramStringNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetTrackMatrixivNV as *const _ as usize
        },
        5592usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetTrackMatrixivNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVertexAttribdvNV as *const _ as usize
        },
        5600usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVertexAttribdvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVertexAttribfvNV as *const _ as usize
        },
        5608usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVertexAttribfvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVertexAttribivNV as *const _ as usize
        },
        5616usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVertexAttribivNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVertexAttribPointervNV as *const _
                as usize
        },
        5624usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVertexAttribPointervNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsProgramNV as *const _ as usize },
        5632usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsProgramNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).LoadProgramNV as *const _ as usize },
        5640usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(LoadProgramNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramParameter4dNV as *const _ as usize
        },
        5648usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramParameter4dNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramParameter4dvNV as *const _ as usize
        },
        5656usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramParameter4dvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramParameter4fNV as *const _ as usize
        },
        5664usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramParameter4fNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramParameter4fvNV as *const _ as usize
        },
        5672usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramParameter4fvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramParameters4dvNV as *const _
                as usize
        },
        5680usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramParameters4dvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramParameters4fvNV as *const _
                as usize
        },
        5688usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramParameters4fvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).RequestResidentProgramsNV as *const _
                as usize
        },
        5696usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(RequestResidentProgramsNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TrackMatrixNV as *const _ as usize },
        5704usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TrackMatrixNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribPointerNV as *const _ as usize
        },
        5712usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribPointerNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1dNV as *const _ as usize
        },
        5720usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1dNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1dvNV as *const _ as usize
        },
        5728usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1dvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1fNV as *const _ as usize
        },
        5736usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1fNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1fvNV as *const _ as usize
        },
        5744usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1fvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1sNV as *const _ as usize
        },
        5752usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1sNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1svNV as *const _ as usize
        },
        5760usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1svNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2dNV as *const _ as usize
        },
        5768usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2dNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2dvNV as *const _ as usize
        },
        5776usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2dvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2fNV as *const _ as usize
        },
        5784usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2fNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2fvNV as *const _ as usize
        },
        5792usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2fvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2sNV as *const _ as usize
        },
        5800usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2sNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2svNV as *const _ as usize
        },
        5808usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2svNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3dNV as *const _ as usize
        },
        5816usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3dNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3dvNV as *const _ as usize
        },
        5824usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3dvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3fNV as *const _ as usize
        },
        5832usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3fNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3fvNV as *const _ as usize
        },
        5840usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3fvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3sNV as *const _ as usize
        },
        5848usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3sNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3svNV as *const _ as usize
        },
        5856usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3svNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4dNV as *const _ as usize
        },
        5864usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4dNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4dvNV as *const _ as usize
        },
        5872usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4dvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4fNV as *const _ as usize
        },
        5880usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4fNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4fvNV as *const _ as usize
        },
        5888usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4fvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4sNV as *const _ as usize
        },
        5896usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4sNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4svNV as *const _ as usize
        },
        5904usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4svNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4ubNV as *const _ as usize
        },
        5912usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4ubNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4ubvNV as *const _ as usize
        },
        5920usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4ubvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs1dvNV as *const _ as usize
        },
        5928usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs1dvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs1fvNV as *const _ as usize
        },
        5936usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs1fvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs1svNV as *const _ as usize
        },
        5944usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs1svNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs2dvNV as *const _ as usize
        },
        5952usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs2dvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs2fvNV as *const _ as usize
        },
        5960usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs2fvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs2svNV as *const _ as usize
        },
        5968usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs2svNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs3dvNV as *const _ as usize
        },
        5976usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs3dvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs3fvNV as *const _ as usize
        },
        5984usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs3fvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs3svNV as *const _ as usize
        },
        5992usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs3svNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs4dvNV as *const _ as usize
        },
        6000usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs4dvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs4fvNV as *const _ as usize
        },
        6008usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs4fvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs4svNV as *const _ as usize
        },
        6016usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs4svNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs4ubvNV as *const _ as usize
        },
        6024usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs4ubvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexBumpParameterivATI as *const _ as usize
        },
        6032usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexBumpParameterivATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexBumpParameterfvATI as *const _ as usize
        },
        6040usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexBumpParameterfvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetTexBumpParameterivATI as *const _
                as usize
        },
        6048usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetTexBumpParameterivATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetTexBumpParameterfvATI as *const _
                as usize
        },
        6056usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetTexBumpParameterfvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenFragmentShadersATI as *const _ as usize
        },
        6064usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenFragmentShadersATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindFragmentShaderATI as *const _ as usize
        },
        6072usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindFragmentShaderATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteFragmentShaderATI as *const _
                as usize
        },
        6080usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteFragmentShaderATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BeginFragmentShaderATI as *const _
                as usize
        },
        6088usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BeginFragmentShaderATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).EndFragmentShaderATI as *const _ as usize
        },
        6096usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(EndFragmentShaderATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PassTexCoordATI as *const _ as usize
        },
        6104usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PassTexCoordATI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SampleMapATI as *const _ as usize },
        6112usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SampleMapATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorFragmentOp1ATI as *const _ as usize
        },
        6120usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorFragmentOp1ATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorFragmentOp2ATI as *const _ as usize
        },
        6128usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorFragmentOp2ATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ColorFragmentOp3ATI as *const _ as usize
        },
        6136usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ColorFragmentOp3ATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).AlphaFragmentOp1ATI as *const _ as usize
        },
        6144usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(AlphaFragmentOp1ATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).AlphaFragmentOp2ATI as *const _ as usize
        },
        6152usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(AlphaFragmentOp2ATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).AlphaFragmentOp3ATI as *const _ as usize
        },
        6160usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(AlphaFragmentOp3ATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SetFragmentShaderConstantATI as *const _
                as usize
        },
        6168usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SetFragmentShaderConstantATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PNTrianglesiATI as *const _ as usize
        },
        6176usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PNTrianglesiATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PNTrianglesfATI as *const _ as usize
        },
        6184usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PNTrianglesfATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NewObjectBufferATI as *const _ as usize
        },
        6192usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NewObjectBufferATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsObjectBufferATI as *const _ as usize
        },
        6200usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsObjectBufferATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).UpdateObjectBufferATI as *const _ as usize
        },
        6208usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(UpdateObjectBufferATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetObjectBufferfvATI as *const _ as usize
        },
        6216usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetObjectBufferfvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetObjectBufferivATI as *const _ as usize
        },
        6224usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetObjectBufferivATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FreeObjectBufferATI as *const _ as usize
        },
        6232usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FreeObjectBufferATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ArrayObjectATI as *const _ as usize
        },
        6240usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ArrayObjectATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetArrayObjectfvATI as *const _ as usize
        },
        6248usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetArrayObjectfvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetArrayObjectivATI as *const _ as usize
        },
        6256usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetArrayObjectivATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VariantArrayObjectATI as *const _ as usize
        },
        6264usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VariantArrayObjectATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVariantArrayObjectfvATI as *const _
                as usize
        },
        6272usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVariantArrayObjectfvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVariantArrayObjectivATI as *const _
                as usize
        },
        6280usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVariantArrayObjectivATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BeginVertexShaderEXT as *const _ as usize
        },
        6288usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BeginVertexShaderEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).EndVertexShaderEXT as *const _ as usize
        },
        6296usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(EndVertexShaderEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindVertexShaderEXT as *const _ as usize
        },
        6304usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindVertexShaderEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenVertexShadersEXT as *const _ as usize
        },
        6312usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenVertexShadersEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteVertexShaderEXT as *const _ as usize
        },
        6320usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteVertexShaderEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ShaderOp1EXT as *const _ as usize },
        6328usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ShaderOp1EXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ShaderOp2EXT as *const _ as usize },
        6336usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ShaderOp2EXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ShaderOp3EXT as *const _ as usize },
        6344usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ShaderOp3EXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SwizzleEXT as *const _ as usize },
        6352usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SwizzleEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).WriteMaskEXT as *const _ as usize },
        6360usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(WriteMaskEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).InsertComponentEXT as *const _ as usize
        },
        6368usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(InsertComponentEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ExtractComponentEXT as *const _ as usize
        },
        6376usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ExtractComponentEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenSymbolsEXT as *const _ as usize },
        6384usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenSymbolsEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SetInvariantEXT as *const _ as usize
        },
        6392usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SetInvariantEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SetLocalConstantEXT as *const _ as usize
        },
        6400usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SetLocalConstantEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VariantbvEXT as *const _ as usize },
        6408usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VariantbvEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VariantsvEXT as *const _ as usize },
        6416usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VariantsvEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VariantivEXT as *const _ as usize },
        6424usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VariantivEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VariantfvEXT as *const _ as usize },
        6432usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VariantfvEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VariantdvEXT as *const _ as usize },
        6440usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VariantdvEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VariantubvEXT as *const _ as usize },
        6448usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VariantubvEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VariantusvEXT as *const _ as usize },
        6456usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VariantusvEXT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VariantuivEXT as *const _ as usize },
        6464usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VariantuivEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VariantPointerEXT as *const _ as usize
        },
        6472usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VariantPointerEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).EnableVariantClientStateEXT as *const _
                as usize
        },
        6480usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(EnableVariantClientStateEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DisableVariantClientStateEXT as *const _
                as usize
        },
        6488usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DisableVariantClientStateEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindLightParameterEXT as *const _ as usize
        },
        6496usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindLightParameterEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindMaterialParameterEXT as *const _
                as usize
        },
        6504usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindMaterialParameterEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindTexGenParameterEXT as *const _
                as usize
        },
        6512usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindTexGenParameterEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindTextureUnitParameterEXT as *const _
                as usize
        },
        6520usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindTextureUnitParameterEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindParameterEXT as *const _ as usize
        },
        6528usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindParameterEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsVariantEnabledEXT as *const _ as usize
        },
        6536usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsVariantEnabledEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVariantBooleanvEXT as *const _ as usize
        },
        6544usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVariantBooleanvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVariantIntegervEXT as *const _ as usize
        },
        6552usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVariantIntegervEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVariantFloatvEXT as *const _ as usize
        },
        6560usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVariantFloatvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVariantPointervEXT as *const _ as usize
        },
        6568usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVariantPointervEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetInvariantBooleanvEXT as *const _
                as usize
        },
        6576usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetInvariantBooleanvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetInvariantIntegervEXT as *const _
                as usize
        },
        6584usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetInvariantIntegervEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetInvariantFloatvEXT as *const _ as usize
        },
        6592usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetInvariantFloatvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetLocalConstantBooleanvEXT as *const _
                as usize
        },
        6600usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetLocalConstantBooleanvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetLocalConstantIntegervEXT as *const _
                as usize
        },
        6608usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetLocalConstantIntegervEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetLocalConstantFloatvEXT as *const _
                as usize
        },
        6616usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetLocalConstantFloatvEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream1sATI as *const _ as usize
        },
        6624usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream1sATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream1svATI as *const _ as usize
        },
        6632usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream1svATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream1iATI as *const _ as usize
        },
        6640usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream1iATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream1ivATI as *const _ as usize
        },
        6648usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream1ivATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream1fATI as *const _ as usize
        },
        6656usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream1fATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream1fvATI as *const _ as usize
        },
        6664usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream1fvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream1dATI as *const _ as usize
        },
        6672usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream1dATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream1dvATI as *const _ as usize
        },
        6680usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream1dvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream2sATI as *const _ as usize
        },
        6688usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream2sATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream2svATI as *const _ as usize
        },
        6696usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream2svATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream2iATI as *const _ as usize
        },
        6704usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream2iATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream2ivATI as *const _ as usize
        },
        6712usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream2ivATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream2fATI as *const _ as usize
        },
        6720usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream2fATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream2fvATI as *const _ as usize
        },
        6728usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream2fvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream2dATI as *const _ as usize
        },
        6736usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream2dATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream2dvATI as *const _ as usize
        },
        6744usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream2dvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream3sATI as *const _ as usize
        },
        6752usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream3sATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream3svATI as *const _ as usize
        },
        6760usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream3svATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream3iATI as *const _ as usize
        },
        6768usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream3iATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream3ivATI as *const _ as usize
        },
        6776usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream3ivATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream3fATI as *const _ as usize
        },
        6784usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream3fATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream3fvATI as *const _ as usize
        },
        6792usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream3fvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream3dATI as *const _ as usize
        },
        6800usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream3dATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream3dvATI as *const _ as usize
        },
        6808usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream3dvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream4sATI as *const _ as usize
        },
        6816usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream4sATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream4svATI as *const _ as usize
        },
        6824usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream4svATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream4iATI as *const _ as usize
        },
        6832usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream4iATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream4ivATI as *const _ as usize
        },
        6840usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream4ivATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream4fATI as *const _ as usize
        },
        6848usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream4fATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream4fvATI as *const _ as usize
        },
        6856usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream4fvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream4dATI as *const _ as usize
        },
        6864usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream4dATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexStream4dvATI as *const _ as usize
        },
        6872usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexStream4dvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NormalStream3bATI as *const _ as usize
        },
        6880usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NormalStream3bATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NormalStream3bvATI as *const _ as usize
        },
        6888usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NormalStream3bvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NormalStream3sATI as *const _ as usize
        },
        6896usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NormalStream3sATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NormalStream3svATI as *const _ as usize
        },
        6904usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NormalStream3svATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NormalStream3iATI as *const _ as usize
        },
        6912usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NormalStream3iATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NormalStream3ivATI as *const _ as usize
        },
        6920usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NormalStream3ivATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NormalStream3fATI as *const _ as usize
        },
        6928usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NormalStream3fATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NormalStream3fvATI as *const _ as usize
        },
        6936usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NormalStream3fvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NormalStream3dATI as *const _ as usize
        },
        6944usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NormalStream3dATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).NormalStream3dvATI as *const _ as usize
        },
        6952usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(NormalStream3dvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ClientActiveVertexStreamATI as *const _
                as usize
        },
        6960usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ClientActiveVertexStreamATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexBlendEnviATI as *const _ as usize
        },
        6968usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexBlendEnviATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexBlendEnvfATI as *const _ as usize
        },
        6976usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexBlendEnvfATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ElementPointerATI as *const _ as usize
        },
        6984usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ElementPointerATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DrawElementArrayATI as *const _ as usize
        },
        6992usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DrawElementArrayATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DrawRangeElementArrayATI as *const _
                as usize
        },
        7000usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DrawRangeElementArrayATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DrawMeshArraysSUN as *const _ as usize
        },
        7008usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DrawMeshArraysSUN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenOcclusionQueriesNV as *const _ as usize
        },
        7016usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenOcclusionQueriesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteOcclusionQueriesNV as *const _
                as usize
        },
        7024usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteOcclusionQueriesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsOcclusionQueryNV as *const _ as usize
        },
        7032usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsOcclusionQueryNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BeginOcclusionQueryNV as *const _ as usize
        },
        7040usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BeginOcclusionQueryNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).EndOcclusionQueryNV as *const _ as usize
        },
        7048usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(EndOcclusionQueryNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetOcclusionQueryivNV as *const _ as usize
        },
        7056usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetOcclusionQueryivNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetOcclusionQueryuivNV as *const _
                as usize
        },
        7064usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetOcclusionQueryuivNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PointParameteriNV as *const _ as usize
        },
        7072usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PointParameteriNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PointParameterivNV as *const _ as usize
        },
        7080usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PointParameterivNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ActiveStencilFaceEXT as *const _ as usize
        },
        7088usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ActiveStencilFaceEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DrawBuffersATI as *const _ as usize
        },
        7096usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DrawBuffersATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramNamedParameter4fNV as *const _
                as usize
        },
        7104usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramNamedParameter4fNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramNamedParameter4dNV as *const _
                as usize
        },
        7112usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramNamedParameter4dNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramNamedParameter4fvNV as *const _
                as usize
        },
        7120usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramNamedParameter4fvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramNamedParameter4dvNV as *const _
                as usize
        },
        7128usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramNamedParameter4dvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetProgramNamedParameterfvNV as *const _
                as usize
        },
        7136usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetProgramNamedParameterfvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetProgramNamedParameterdvNV as *const _
                as usize
        },
        7144usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetProgramNamedParameterdvNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Vertex2hNV as *const _ as usize },
        7152usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Vertex2hNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Vertex2hvNV as *const _ as usize },
        7160usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Vertex2hvNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Vertex3hNV as *const _ as usize },
        7168usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Vertex3hNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Vertex3hvNV as *const _ as usize },
        7176usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Vertex3hvNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Vertex4hNV as *const _ as usize },
        7184usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Vertex4hNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Vertex4hvNV as *const _ as usize },
        7192usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Vertex4hvNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Normal3hNV as *const _ as usize },
        7200usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Normal3hNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Normal3hvNV as *const _ as usize },
        7208usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Normal3hvNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Color3hNV as *const _ as usize },
        7216usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Color3hNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Color3hvNV as *const _ as usize },
        7224usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Color3hvNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Color4hNV as *const _ as usize },
        7232usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Color4hNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).Color4hvNV as *const _ as usize },
        7240usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(Color4hvNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord1hNV as *const _ as usize },
        7248usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord1hNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord1hvNV as *const _ as usize },
        7256usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord1hvNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord2hNV as *const _ as usize },
        7264usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord2hNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord2hvNV as *const _ as usize },
        7272usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord2hvNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord3hNV as *const _ as usize },
        7280usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord3hNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord3hvNV as *const _ as usize },
        7288usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord3hvNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord4hNV as *const _ as usize },
        7296usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord4hNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TexCoord4hvNV as *const _ as usize },
        7304usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TexCoord4hvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1hNV as *const _ as usize
        },
        7312usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1hNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord1hvNV as *const _ as usize
        },
        7320usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord1hvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2hNV as *const _ as usize
        },
        7328usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2hNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord2hvNV as *const _ as usize
        },
        7336usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord2hvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3hNV as *const _ as usize
        },
        7344usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3hNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord3hvNV as *const _ as usize
        },
        7352usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord3hvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4hNV as *const _ as usize
        },
        7360usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4hNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiTexCoord4hvNV as *const _ as usize
        },
        7368usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiTexCoord4hvNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogCoordhNV as *const _ as usize },
        7376usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogCoordhNV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FogCoordhvNV as *const _ as usize },
        7384usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FogCoordhvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3hNV as *const _ as usize
        },
        7392usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3hNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SecondaryColor3hvNV as *const _ as usize
        },
        7400usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SecondaryColor3hvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexWeighthNV as *const _ as usize
        },
        7408usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexWeighthNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexWeighthvNV as *const _ as usize
        },
        7416usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexWeighthvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1hNV as *const _ as usize
        },
        7424usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1hNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib1hvNV as *const _ as usize
        },
        7432usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib1hvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2hNV as *const _ as usize
        },
        7440usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2hNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib2hvNV as *const _ as usize
        },
        7448usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib2hvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3hNV as *const _ as usize
        },
        7456usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3hNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib3hvNV as *const _ as usize
        },
        7464usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib3hvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4hNV as *const _ as usize
        },
        7472usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4hNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttrib4hvNV as *const _ as usize
        },
        7480usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttrib4hvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs1hvNV as *const _ as usize
        },
        7488usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs1hvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs2hvNV as *const _ as usize
        },
        7496usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs2hvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs3hvNV as *const _ as usize
        },
        7504usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs3hvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribs4hvNV as *const _ as usize
        },
        7512usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribs4hvNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PixelDataRangeNV as *const _ as usize
        },
        7520usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PixelDataRangeNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FlushPixelDataRangeNV as *const _ as usize
        },
        7528usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FlushPixelDataRangeNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PrimitiveRestartNV as *const _ as usize
        },
        7536usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PrimitiveRestartNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).PrimitiveRestartIndexNV as *const _
                as usize
        },
        7544usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(PrimitiveRestartIndexNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MapObjectBufferATI as *const _ as usize
        },
        7552usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MapObjectBufferATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).UnmapObjectBufferATI as *const _ as usize
        },
        7560usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(UnmapObjectBufferATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).StencilOpSeparateATI as *const _ as usize
        },
        7568usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(StencilOpSeparateATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).StencilFuncSeparateATI as *const _
                as usize
        },
        7576usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(StencilFuncSeparateATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexAttribArrayObjectATI as *const _
                as usize
        },
        7584usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexAttribArrayObjectATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVertexAttribArrayObjectfvATI
                as *const _ as usize
        },
        7592usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVertexAttribArrayObjectfvATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetVertexAttribArrayObjectivATI
                as *const _ as usize
        },
        7600usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetVertexAttribArrayObjectivATI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DepthBoundsEXT as *const _ as usize
        },
        7608usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DepthBoundsEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BlendEquationSeparateEXT as *const _
                as usize
        },
        7616usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BlendEquationSeparateEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).AddSwapHintRectWIN as *const _ as usize
        },
        7624usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(AddSwapHintRectWIN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindFramebufferEXT as *const _ as usize
        },
        7632usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindFramebufferEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindRenderbufferEXT as *const _ as usize
        },
        7640usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindRenderbufferEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).CheckFramebufferStatusEXT as *const _
                as usize
        },
        7648usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(CheckFramebufferStatusEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteFramebuffersEXT as *const _ as usize
        },
        7656usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteFramebuffersEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteRenderbuffersEXT as *const _
                as usize
        },
        7664usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteRenderbuffersEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FramebufferRenderbufferEXT as *const _
                as usize
        },
        7672usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FramebufferRenderbufferEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FramebufferTexture1DEXT as *const _
                as usize
        },
        7680usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FramebufferTexture1DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FramebufferTexture2DEXT as *const _
                as usize
        },
        7688usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FramebufferTexture2DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FramebufferTexture3DEXT as *const _
                as usize
        },
        7696usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FramebufferTexture3DEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenFramebuffersEXT as *const _ as usize
        },
        7704usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenFramebuffersEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenRenderbuffersEXT as *const _ as usize
        },
        7712usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenRenderbuffersEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenerateMipmapEXT as *const _ as usize
        },
        7720usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenerateMipmapEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetFramebufferAttachmentParameterivEXT
                as *const _ as usize
        },
        7728usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetFramebufferAttachmentParameterivEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetRenderbufferParameterivEXT as *const _
                as usize
        },
        7736usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetRenderbufferParameterivEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsFramebufferEXT as *const _ as usize
        },
        7744usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsFramebufferEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsRenderbufferEXT as *const _ as usize
        },
        7752usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsRenderbufferEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).RenderbufferStorageEXT as *const _
                as usize
        },
        7760usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(RenderbufferStorageEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ProgramParameteriEXT as *const _ as usize
        },
        7768usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ProgramParameteriEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FramebufferTextureEXT as *const _ as usize
        },
        7776usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FramebufferTextureEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FramebufferTextureLayerEXT as *const _
                as usize
        },
        7784usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FramebufferTextureLayerEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FramebufferTextureFaceEXT as *const _
                as usize
        },
        7792usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FramebufferTextureFaceEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DrawBuffersARB as *const _ as usize
        },
        7800usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DrawBuffersARB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).ElementPointerAPPLE as *const _ as usize
        },
        7808usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(ElementPointerAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DrawElementArrayAPPLE as *const _ as usize
        },
        7816usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DrawElementArrayAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DrawRangeElementArrayAPPLE as *const _
                as usize
        },
        7824usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DrawRangeElementArrayAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiDrawElementArrayAPPLE as *const _
                as usize
        },
        7832usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiDrawElementArrayAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).MultiDrawRangeElementArrayAPPLE
                as *const _ as usize
        },
        7840usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(MultiDrawRangeElementArrayAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenFencesAPPLE as *const _ as usize
        },
        7848usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenFencesAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteFencesAPPLE as *const _ as usize
        },
        7856usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteFencesAPPLE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).SetFenceAPPLE as *const _ as usize },
        7864usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(SetFenceAPPLE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsFenceAPPLE as *const _ as usize },
        7872usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsFenceAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TestFenceAPPLE as *const _ as usize
        },
        7880usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TestFenceAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FinishFenceAPPLE as *const _ as usize
        },
        7888usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FinishFenceAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TestObjectAPPLE as *const _ as usize
        },
        7896usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TestObjectAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FinishObjectAPPLE as *const _ as usize
        },
        7904usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FinishObjectAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).BindVertexArrayAPPLE as *const _ as usize
        },
        7912usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(BindVertexArrayAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).DeleteVertexArraysAPPLE as *const _
                as usize
        },
        7920usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(DeleteVertexArraysAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GenVertexArraysAPPLE as *const _ as usize
        },
        7928usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GenVertexArraysAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).IsVertexArrayAPPLE as *const _ as usize
        },
        7936usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(IsVertexArrayAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexArrayRangeAPPLE as *const _ as usize
        },
        7944usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexArrayRangeAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).FlushVertexArrayRangeAPPLE as *const _
                as usize
        },
        7952usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(FlushVertexArrayRangeAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).VertexArrayParameteriAPPLE as *const _
                as usize
        },
        7960usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(VertexArrayParameteriAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).TextureRangeAPPLE as *const _ as usize
        },
        7968usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(TextureRangeAPPLE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_jit_gl_extprocs>())).GetTexParameterPointervAPPLE as *const _
                as usize
        },
        7976usize,
        concat!(
            "Offset of field: ",
            stringify!(t_jit_gl_extprocs),
            "::",
            stringify!(GetTexParameterPointervAPPLE)
        )
    );
}
pub type t_jit_gl_pixel_attribute = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_gl_pixelformat {
    pub target: ::std::os::raw::c_long,
    pub pixel_type: ::std::os::raw::c_long,
    pub pixel_size: ::std::os::raw::c_long,
    pub pixel_float: ::std::os::raw::c_long,
    pub pixel_float_target: ::std::os::raw::c_long,
    pub red_size: ::std::os::raw::c_long,
    pub green_size: ::std::os::raw::c_long,
    pub blue_size: ::std::os::raw::c_long,
    pub alpha_size: ::std::os::raw::c_long,
    pub depth_size: ::std::os::raw::c_long,
    pub stencil_size: ::std::os::raw::c_long,
    pub accum_size: ::std::os::raw::c_long,
    pub accum_red_size: ::std::os::raw::c_long,
    pub accum_green_size: ::std::os::raw::c_long,
    pub accum_blue_size: ::std::os::raw::c_long,
    pub accum_alpha_size: ::std::os::raw::c_long,
    pub samples: ::std::os::raw::c_long,
    pub sample_buffers: ::std::os::raw::c_long,
    pub aux_buffers: ::std::os::raw::c_long,
    pub stereo: ::std::os::raw::c_long,
    pub quality: ::std::os::raw::c_long,
    pub doublebuffer: ::std::os::raw::c_long,
    pub accelerated: ::std::os::raw::c_long,
    pub rectangle: ::std::os::raw::c_long,
    pub fullscreen: ::std::os::raw::c_long,
    pub flags: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__jit_gl_pixelformat() {
    assert_eq!(
        ::std::mem::size_of::<_jit_gl_pixelformat>(),
        208usize,
        concat!("Size of: ", stringify!(_jit_gl_pixelformat))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_gl_pixelformat>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_gl_pixelformat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).target as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).pixel_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(pixel_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).pixel_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(pixel_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).pixel_float as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(pixel_float)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_pixelformat>())).pixel_float_target as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(pixel_float_target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).red_size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(red_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).green_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(green_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).blue_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(blue_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).alpha_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(alpha_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).depth_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(depth_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_pixelformat>())).stencil_size as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(stencil_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).accum_size as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(accum_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_pixelformat>())).accum_red_size as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(accum_red_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_pixelformat>())).accum_green_size as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(accum_green_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_pixelformat>())).accum_blue_size as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(accum_blue_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_pixelformat>())).accum_alpha_size as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(accum_alpha_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).samples as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_pixelformat>())).sample_buffers as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(sample_buffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).aux_buffers as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(aux_buffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).stereo as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(stereo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).quality as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(quality)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_pixelformat>())).doublebuffer as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(doublebuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).accelerated as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(accelerated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).rectangle as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(rectangle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).fullscreen as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(fullscreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_pixelformat>())).flags as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_pixelformat),
            "::",
            stringify!(flags)
        )
    );
}
pub type t_jit_gl_pixelformat = _jit_gl_pixelformat;
extern "C" {
    pub fn jit_gl_pixelformat_new() -> *mut t_jit_gl_pixelformat;
}
extern "C" {
    pub fn jit_gl_pixelformat_create_attributes(
        x: *mut t_jit_gl_pixelformat,
        pfattrib: *mut *mut t_jit_gl_pixel_attribute,
        pfcount: *mut GLuint,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_pixelformat_create_native_from_attributes(
        attrib: *mut t_jit_gl_pixel_attribute,
        device: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_gl_pixelformat_create_native(
        x: *mut t_jit_gl_pixelformat,
        device: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_gl_pixelformat_create_no_context(
        x: *mut t_jit_gl_pixelformat,
        device: *mut ::std::os::raw::c_void,
        window: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_gl_pixelformat_destroy_native(native: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_pixelformat_reset(x: *mut t_jit_gl_pixelformat) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_pixelformat_free(x: *mut t_jit_gl_pixelformat);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_gl_context_struct {
    pub context: t_jit_gl_native_context,
    pub device: t_jit_gl_native_device,
    pub pixelformat: t_jit_gl_native_pixelformat,
    pub procs: *mut t_jit_gl_extprocs,
    pub support: *mut t_jit_gl_support,
    pub extensions: *const ::std::os::raw::c_char,
    pub target: *mut ::std::os::raw::c_void,
    pub targettype: ::std::os::raw::c_long,
    pub renderer_id: ::std::os::raw::c_long,
    pub flags: ::std::os::raw::c_long,
    pub auxdata: *mut ::std::os::raw::c_void,
    pub offscreentex: *mut ::std::os::raw::c_void,
    pub offscreenfbo: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__jit_gl_context_struct() {
    assert_eq!(
        ::std::mem::size_of::<_jit_gl_context_struct>(),
        104usize,
        concat!("Size of: ", stringify!(_jit_gl_context_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_gl_context_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_gl_context_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_struct>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_struct),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_struct>())).device as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_struct),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_struct>())).pixelformat as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_struct),
            "::",
            stringify!(pixelformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_struct>())).procs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_struct),
            "::",
            stringify!(procs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_struct>())).support as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_struct),
            "::",
            stringify!(support)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_struct>())).extensions as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_struct),
            "::",
            stringify!(extensions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_struct>())).target as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_struct),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_struct>())).targettype as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_struct),
            "::",
            stringify!(targettype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_struct>())).renderer_id as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_struct),
            "::",
            stringify!(renderer_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_struct>())).flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_struct),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_struct>())).auxdata as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_struct),
            "::",
            stringify!(auxdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_struct>())).offscreentex as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_struct),
            "::",
            stringify!(offscreentex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_struct>())).offscreenfbo as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_struct),
            "::",
            stringify!(offscreenfbo)
        )
    );
}
pub type t_jit_gl_context = *mut _jit_gl_context_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_gl_context_info {
    pub flags: ::std::os::raw::c_long,
    pub targettype: ::std::os::raw::c_long,
    pub renderer_id: ::std::os::raw::c_long,
    pub share: t_jit_gl_context,
    pub pixelformat: *mut t_jit_gl_pixelformat,
    pub nativewin: *mut ::std::os::raw::c_void,
    pub samples: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__jit_gl_context_info() {
    assert_eq!(
        ::std::mem::size_of::<_jit_gl_context_info>(),
        56usize,
        concat!("Size of: ", stringify!(_jit_gl_context_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_gl_context_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_gl_context_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_info>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_info>())).targettype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_info),
            "::",
            stringify!(targettype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_info>())).renderer_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_info),
            "::",
            stringify!(renderer_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_info>())).share as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_info),
            "::",
            stringify!(share)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_info>())).pixelformat as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_info),
            "::",
            stringify!(pixelformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_info>())).nativewin as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_info),
            "::",
            stringify!(nativewin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_info>())).samples as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_info),
            "::",
            stringify!(samples)
        )
    );
}
pub type t_jit_gl_context_info = _jit_gl_context_info;
extern "C" {
    pub fn jit_gl_create_context(
        target: *mut ::std::os::raw::c_void,
        info: *mut t_jit_gl_context_info,
    ) -> t_jit_gl_context;
}
extern "C" {
    pub fn jit_gl_destroy_context(ctx: t_jit_gl_context) -> GLboolean;
}
extern "C" {
    pub fn jit_gl_destroy_native_context(native: t_jit_gl_native_context) -> GLboolean;
}
extern "C" {
    pub fn jit_gl_update_context(ctx: t_jit_gl_context) -> GLboolean;
}
extern "C" {
    pub fn jit_gl_set_context(ctx: t_jit_gl_context) -> GLboolean;
}
extern "C" {
    pub fn jit_gl_get_context() -> t_jit_gl_context;
}
extern "C" {
    pub fn jit_gl_get_support() -> *mut t_jit_gl_support;
}
extern "C" {
    pub fn jit_gl_context_swap_buffers(ctx: t_jit_gl_context) -> GLboolean;
}
extern "C" {
    pub fn jit_gl_configure(pname: GLenum, param: GLuint) -> GLboolean;
}
extern "C" {
    pub fn jit_gl_set_swap_interval(
        ctx: t_jit_gl_context,
        interval: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_is_extension_supported(
        ctx: t_jit_gl_context,
        ext: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
#[doc = " t_jit_gl_drawinfo struct used for tasks such as multi texture unit binding."]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_gl_drawinfo {
    #[doc = "< current t_jit_gl_context"]
    pub ctx: t_jit_gl_context,
    #[doc = "< object's t_jit_ob3d pointer"]
    pub ob3d: *mut ::std::os::raw::c_void,
    #[doc = "< reserved for future use"]
    pub rfu: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout__jit_gl_drawinfo() {
    assert_eq!(
        ::std::mem::size_of::<_jit_gl_drawinfo>(),
        64usize,
        concat!("Size of: ", stringify!(_jit_gl_drawinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_gl_drawinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_gl_drawinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_drawinfo>())).ctx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_drawinfo),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_drawinfo>())).ob3d as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_drawinfo),
            "::",
            stringify!(ob3d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_drawinfo>())).rfu as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_drawinfo),
            "::",
            stringify!(rfu)
        )
    );
}
#[doc = " t_jit_gl_drawinfo struct used for tasks such as multi texture unit binding."]
#[doc = ""]
pub type t_jit_gl_drawinfo = _jit_gl_drawinfo;
extern "C" {
    pub fn jit_gl_drawinfo_setup(
        x: *mut ::std::os::raw::c_void,
        drawinfo: *mut t_jit_gl_drawinfo,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_drawinfo_active_textures(
        drawinfo: *mut t_jit_gl_drawinfo,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_texcoord1f(drawinfo: *mut t_jit_gl_drawinfo, s: f64);
}
extern "C" {
    pub fn jit_gl_texcoord2f(drawinfo: *mut t_jit_gl_drawinfo, s: f64, t: f64);
}
extern "C" {
    pub fn jit_gl_texcoord3f(drawinfo: *mut t_jit_gl_drawinfo, s: f64, t: f64, r: f64);
}
extern "C" {
    pub fn jit_gl_texcoord1fv(drawinfo: *mut t_jit_gl_drawinfo, v: *mut f32);
}
extern "C" {
    pub fn jit_gl_texcoord2fv(drawinfo: *mut t_jit_gl_drawinfo, v: *mut f32);
}
extern "C" {
    pub fn jit_gl_texcoord3fv(drawinfo: *mut t_jit_gl_drawinfo, v: *mut f32);
}
extern "C" {
    pub fn jit_gl_bindtexture(
        drawinfo: *mut t_jit_gl_drawinfo,
        s: *mut t_symbol,
        i: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jit_gl_unbindtexture(
        drawinfo: *mut t_jit_gl_drawinfo,
        s: *mut t_symbol,
        i: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jit_gl_begincapture(
        drawinfo: *mut t_jit_gl_drawinfo,
        s: *mut t_symbol,
        i: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jit_gl_endcapture(
        drawinfo: *mut t_jit_gl_drawinfo,
        s: *mut t_symbol,
        i: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn jit_gl_object_is_texture(x: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_texture_get(
        tex: *mut *mut ::std::os::raw::c_void,
        dest_name: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_slab_get(
        slab: *mut *mut ::std::os::raw::c_void,
        dest_name: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_mesh_get(
        mesh: *mut *mut ::std::os::raw::c_void,
        dest_name: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_available() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_init();
}
extern "C" {
    pub fn jit_gl_renderer_set(p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn jit_gl_renderer_get() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_gl_set_floats(pf: *mut f32, count: ::std::os::raw::c_int, ...);
}
extern "C" {
    pub fn jit_gl_get_blend_mode(index: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jit_gl_report_error(prefix: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_object_report_error(
        x: *mut ::std::os::raw::c_void,
        prefix: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_object_error(x: *mut ::std::os::raw::c_void, s: *mut ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn jit_gl_get_current_scalefactor() -> f64;
}
extern "C" {
    pub fn jit_gl_get_vendor() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn jit_gl_get_renderer() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn jit_gl_get_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn jit_gl_get_glu_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn jit_gl_get_extensions() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn jit_gl_get_glsl_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn jit_gl_is_min_version(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        release: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn jit_gl_plane_from_format(format: GLenum) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_get_datasize_from_datatype(e: GLenum) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_worldtoscreen(
        x: *mut t_jit_object,
        p_world: *mut f32,
        p_screen: *mut f32,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_screentoworld(
        x: *mut t_jit_object,
        p_screen: *mut f32,
        p_world: *mut f32,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_getscenegraph(ctx: *mut t_symbol) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_gl_err_from_max_err(err: t_max_err) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_unsupported(
        x: *mut t_jit_object,
        attr: *mut ::std::os::raw::c_void,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
    ) -> t_jit_err;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jit_gl_cache {
    pub data: *mut ::std::os::raw::c_void,
    pub bytes: ::std::os::raw::c_long,
    pub manage: ::std::os::raw::c_long,
    pub type_: ::std::os::raw::c_long,
    pub buffertype: ::std::os::raw::c_long,
    pub datatype: ::std::os::raw::c_long,
    pub datasize: ::std::os::raw::c_long,
    pub enumtype: ::std::os::raw::c_long,
    pub geomsize: ::std::os::raw::c_long,
    pub elements: ::std::os::raw::c_long,
    pub drawcount: ::std::os::raw::c_long,
    pub drawsize: ::std::os::raw::c_long,
    pub count: ::std::os::raw::c_long,
    pub coords: ::std::os::raw::c_long,
    pub stride: ::std::os::raw::c_long,
    pub start: ::std::os::raw::c_long,
    pub end: ::std::os::raw::c_long,
    pub used: ::std::os::raw::c_long,
    pub update: ::std::os::raw::c_long,
    pub capacity: ::std::os::raw::c_long,
    pub grow: ::std::os::raw::c_long,
    pub id: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__jit_gl_cache() {
    assert_eq!(
        ::std::mem::size_of::<_jit_gl_cache>(),
        176usize,
        concat!("Size of: ", stringify!(_jit_gl_cache))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_gl_cache>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_gl_cache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).manage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(manage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).buffertype as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(buffertype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).datatype as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(datatype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).datasize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(datasize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).enumtype as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(enumtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).geomsize as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(geomsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).elements as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).drawcount as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(drawcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).drawsize as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(drawsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).count as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).coords as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(coords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).stride as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).start as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).end as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).used as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).update as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).capacity as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).grow as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(grow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_cache>())).id as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_cache),
            "::",
            stringify!(id)
        )
    );
}
pub type t_jit_gl_cache = _jit_gl_cache;
extern "C" {
    pub fn jit_gl_cache_init() -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_cache_new(
        count: ::std::os::raw::c_long,
        coords: ::std::os::raw::c_long,
        datatype: ::std::os::raw::c_long,
    ) -> *mut t_jit_gl_cache;
}
extern "C" {
    pub fn jit_gl_cache_free(x: *mut t_jit_gl_cache);
}
extern "C" {
    pub fn jit_gl_cache_clear(x: *mut t_jit_gl_cache) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_cache_buffer_destroy(x: *mut t_jit_gl_cache) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_cache_destroy(x: *mut t_jit_gl_cache) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_cache_reset(x: *mut t_jit_gl_cache) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_cache_compare(
        x: *mut t_jit_gl_cache,
        a: ::std::os::raw::c_long,
        b: ::std::os::raw::c_long,
        epsilon: f64,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_cache_weld(x: *mut t_jit_gl_cache, epsilon: f64) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_cache_grow(
        x: *mut t_jit_gl_cache,
        bytes: ::std::os::raw::c_long,
        copy: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_cache_resize(
        x: *mut t_jit_gl_cache,
        elements: ::std::os::raw::c_long,
        coords: ::std::os::raw::c_long,
        datatype: ::std::os::raw::c_long,
        copy: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_cache_append(
        x: *mut t_jit_gl_cache,
        data: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_long,
        coords: ::std::os::raw::c_long,
        datatype: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_cache_replace(
        x: *mut t_jit_gl_cache,
        index: ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_long,
        coords: ::std::os::raw::c_long,
        datatype: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_cache_datatype_from_symbol(s: *mut t_symbol) -> GLenum;
}
extern "C" {
    pub fn jit_gl_cache_datasize_from_datatype(e: GLenum) -> ::std::os::raw::c_long;
}
pub type t_jit_gl_context_status = t_atom_long;
#[doc = " t_jit_gl_context_view object struct."]
#[doc = ""]
#[doc = " Manages an OpenGL context within a rectangle.  Objects that use a t_jit_gl_context_view"]
#[doc = " to manage an OpenGL context should attach themselves to the object for its lifetime"]
#[doc = " and implement an \"update\" method in order to handle modifications to the"]
#[doc = " t_jit_gl_context_view that may require a rebuild or further response within the embedding"]
#[doc = " object."]
#[doc = ""]
#[doc = " @ingroup gl"]
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _jit_gl_context_view {
    #[doc = "< jitter object"]
    pub ob: t_object,
    #[doc = "< rebuild flag"]
    pub rebuild: ::std::os::raw::c_long,
    #[doc = "< OpenGL context"]
    pub context: t_jit_gl_context,
    #[doc = "< data for mouse events"]
    pub mouse_info: t_wind_mouse_info,
    #[doc = "< data for mouse wheel events"]
    pub mousewheel_info: t_wind_mousewheel_info,
    #[doc = "< data for key events"]
    pub key_info: t_wind_key_info,
    #[doc = "< flag for whether the context can rebuild or not"]
    pub canrebuild: ::std::os::raw::c_long,
    #[doc = "< double buffer flag"]
    pub doublebuffer: ::std::os::raw::c_long,
    #[doc = "< depth buffer flag"]
    pub depthbuffer: ::std::os::raw::c_long,
    #[doc = "< active stereo flag"]
    pub stereo: ::std::os::raw::c_long,
    #[doc = "< frame of context"]
    pub frame: t_jit_rect,
    #[doc = "< FSAA flag"]
    pub fsaa: ::std::os::raw::c_long,
    #[doc = "< V-sync flag"]
    pub sync: ::std::os::raw::c_long,
    #[doc = "< Shader context flag"]
    pub shared: ::std::os::raw::c_long,
    #[doc = "< Hashtab of shared context names"]
    pub shared_contexts: *mut t_hashtab,
    #[doc = "< Idlemouse flag (events on mouse move)"]
    pub idlemouse: ::std::os::raw::c_long,
    #[doc = "< mosuewheel flag (events on mouse wheel)"]
    pub mousewheel: ::std::os::raw::c_long,
    #[doc = "< target object we're controlled by"]
    pub target: *mut ::std::os::raw::c_void,
    #[doc = "< target type we're controlled by"]
    pub targettype: ::std::os::raw::c_long,
    #[doc = "< name of the view"]
    pub name: *mut t_symbol,
    #[doc = "< flag for breaking cycles on reshape notification"]
    pub reshaping: ::std::os::raw::c_long,
    #[doc = "< flag for if the owner handles reshaping the context"]
    pub ownerreshape: ::std::os::raw::c_long,
    #[doc = "< in the process of freeing flag"]
    pub freeing: ::std::os::raw::c_long,
    #[doc = "< in the process of creating flag"]
    pub creating: ::std::os::raw::c_long,
    #[doc = "< in the process of destroying flag"]
    pub destroying: ::std::os::raw::c_long,
    pub recreating: ::std::os::raw::c_long,
    #[doc = "< scaling factor when drawing to retina display"]
    pub scalefactor: f32,
    #[doc = "< allows for high resolution drawing when available"]
    pub allow_hi_res: ::std::os::raw::c_long,
    pub view_valid: ::std::os::raw::c_char,
    pub first_frame: ::std::os::raw::c_char,
    #[doc = "< patcher native window handle, for offscreen contexts"]
    pub nativewinhandle: *mut ::std::os::raw::c_void,
    pub is_mfl: ::std::os::raw::c_char,
    pub threaded: ::std::os::raw::c_char,
    pub ext_objects: *mut t_linklist,
}
#[test]
fn bindgen_test_layout__jit_gl_context_view() {
    assert_eq!(
        ::std::mem::size_of::<_jit_gl_context_view>(),
        848usize,
        concat!("Size of: ", stringify!(_jit_gl_context_view))
    );
    assert_eq!(
        ::std::mem::align_of::<_jit_gl_context_view>(),
        8usize,
        concat!("Alignment of ", stringify!(_jit_gl_context_view))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).ob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(ob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).rebuild as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(rebuild)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).context as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).mouse_info as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(mouse_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_view>())).mousewheel_info as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(mousewheel_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).key_info as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(key_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).canrebuild as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(canrebuild)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_view>())).doublebuffer as *const _ as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(doublebuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_view>())).depthbuffer as *const _ as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(depthbuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).stereo as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(stereo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).frame as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).fsaa as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(fsaa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).sync as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).shared as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_view>())).shared_contexts as *const _ as usize
        },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(shared_contexts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).idlemouse as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(idlemouse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).mousewheel as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(mousewheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).target as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).targettype as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(targettype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).name as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).reshaping as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(reshaping)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_view>())).ownerreshape as *const _ as usize
        },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(ownerreshape)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).freeing as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(freeing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).creating as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(creating)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).destroying as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(destroying)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).recreating as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(recreating)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_view>())).scalefactor as *const _ as usize
        },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(scalefactor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_view>())).allow_hi_res as *const _ as usize
        },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(allow_hi_res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).view_valid as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(view_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_view>())).first_frame as *const _ as usize
        },
        817usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(first_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_view>())).nativewinhandle as *const _ as usize
        },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(nativewinhandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).is_mfl as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(is_mfl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_jit_gl_context_view>())).threaded as *const _ as usize },
        833usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(threaded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_jit_gl_context_view>())).ext_objects as *const _ as usize
        },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(_jit_gl_context_view),
            "::",
            stringify!(ext_objects)
        )
    );
}
#[doc = " t_jit_gl_context_view object struct."]
#[doc = ""]
#[doc = " Manages an OpenGL context within a rectangle.  Objects that use a t_jit_gl_context_view"]
#[doc = " to manage an OpenGL context should attach themselves to the object for its lifetime"]
#[doc = " and implement an \"update\" method in order to handle modifications to the"]
#[doc = " t_jit_gl_context_view that may require a rebuild or further response within the embedding"]
#[doc = " object."]
#[doc = ""]
#[doc = " @ingroup gl"]
#[doc = ""]
pub type t_jit_gl_context_view = _jit_gl_context_view;
extern "C" {
    pub fn jit_gl_context_view_are_shared(
        ctx1: *mut t_symbol,
        ctx2: *mut t_symbol,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_context_view_funall(fun: method, arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn jit_gl_context_view_init() -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_new() -> *mut t_jit_gl_context_view;
}
extern "C" {
    pub fn jit_gl_context_view_free(x: *mut t_jit_gl_context_view);
}
extern "C" {
    pub fn jit_gl_context_view_is_available(
        x: *mut t_jit_gl_context_view,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_gl_context_view_rebuild(x: *mut t_jit_gl_context_view) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_destroy(x: *mut t_jit_gl_context_view) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_update(x: *mut t_jit_gl_context_view) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_clear(x: *mut t_jit_gl_context_view) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_attach(
        x: *mut t_jit_gl_context_view,
        target: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_detach(x: *mut t_jit_gl_context_view) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_reshape(x: *mut t_jit_gl_context_view) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_set_viewport(
        x: *mut t_jit_gl_context_view,
        rect: t_jit_rect,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_set_frame(
        x: *mut t_jit_gl_context_view,
        rect: *mut t_jit_rect,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_get_frame(
        x: *mut t_jit_gl_context_view,
        rect: *mut t_jit_rect,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_getcontext(x: *mut t_jit_gl_context_view) -> t_jit_gl_context;
}
extern "C" {
    pub fn jit_gl_context_view_gettarget(
        x: *mut t_jit_gl_context_view,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_gl_context_view_handle_key_event(
        x: *mut t_jit_gl_context_view,
        s: *mut t_symbol,
        keydown: ::std::os::raw::c_long,
        keycode: ::std::os::raw::c_long,
        textcharacter: ::std::os::raw::c_long,
        modifiers: t_jit_gl_context_modifier,
    );
}
extern "C" {
    pub fn jit_gl_context_view_get_key_info(
        x: *mut t_jit_gl_context_view,
        kinfo: *mut *mut t_wind_key_info,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_handle_mouse_event(
        x: *mut t_jit_gl_context_view,
        s: *mut t_symbol,
        mousedown: ::std::os::raw::c_long,
        pt: t_jit_pt,
        modifiers: t_jit_gl_context_modifier,
    );
}
extern "C" {
    pub fn jit_gl_context_view_handle_mousewheel_event(
        x: *mut t_jit_gl_context_view,
        s: *mut t_symbol,
        mousedown: ::std::os::raw::c_long,
        pt: t_jit_pt,
        modifiers: t_jit_gl_context_modifier,
        dx: f64,
        dy: f64,
    );
}
extern "C" {
    pub fn jit_gl_context_view_get_mouse_info(
        x: *mut t_jit_gl_context_view,
        minfo: *mut *mut t_wind_mouse_info,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_get_mousewheel_info(
        x: *mut t_jit_gl_context_view,
        minfo: *mut *mut t_wind_mousewheel_info,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_setname(
        x: *mut t_jit_gl_context_view,
        attr: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_setflag(
        x: *mut t_jit_gl_context_view,
        attr: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_context_view_calcpickray(
        x: *mut t_jit_gl_context_view,
        ac: ::std::os::raw::c_long,
        av: *mut t_atom,
        rv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_gl_camera_calcpickray(
        camera: *mut ::std::os::raw::c_void,
        px: ::std::os::raw::c_long,
        py: ::std::os::raw::c_long,
        p1i: *mut t_jit_vec3,
        p2i: *mut t_jit_vec3,
        scalefactor: f64,
    );
}
extern "C" {
    pub fn jit_gl_context_view_make_current(
        x: *mut t_jit_gl_context_view,
    ) -> t_jit_gl_context_status;
}
extern "C" {
    pub fn jit_gl_context_view_swap(x: *mut t_jit_gl_context_view) -> t_jit_gl_context_status;
}
extern "C" {
    pub fn jit_gl_context_view_leave(x: *mut t_jit_gl_context_view) -> t_jit_gl_context_status;
}
extern "C" {
    pub fn jit_gl_context_view_describe(
        x: *mut t_jit_gl_context_view,
        d: *mut t_dictionary,
    ) -> t_jit_err;
}
pub type half = ::std::os::raw::c_ushort;
extern "C" {
    pub fn jit_half_init();
}
extern "C" {
    pub fn jit_float_to_half(i: f32) -> half;
}
extern "C" {
    pub fn jit_half_to_float(y: half) -> f32;
}
extern "C" {
    pub fn jit_half_round(h: half, n: ::std::os::raw::c_uint) -> half;
}
extern "C" {
    pub fn jit_half_negate(h: half) -> half;
}
extern "C" {
    pub fn jit_half_add(h: half, a: half) -> half;
}
extern "C" {
    pub fn jit_half_add_float(h: half, a: f32) -> half;
}
extern "C" {
    pub fn jit_half_sub(h: half, a: half) -> half;
}
extern "C" {
    pub fn jit_half_sub_float(h: half, a: f32) -> half;
}
extern "C" {
    pub fn jit_half_mul(h: half, a: half) -> half;
}
extern "C" {
    pub fn jit_half_mul_float(h: half, a: f32) -> half;
}
extern "C" {
    pub fn jit_half_div(h: half, a: half) -> half;
}
extern "C" {
    pub fn jit_half_div_float(h: half, a: f32) -> half;
}
extern "C" {
    pub fn jit_half_is_finite(h: half) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_half_is_normalized(h: half) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_half_is_denormalized(h: half) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_half_is_zero(h: half) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_half_is_negative(h: half) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_half_is_nan(h: half) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_half_is_inf(h: half) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jit_mac_gestalt(selector: OSType, response: *mut ::std::os::raw::c_long) -> OSErr;
}
extern "C" {
    pub fn jit_matrix_list_get_matrices(
        list: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_long,
        matrices: *mut *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_matrix_array_lock(
        matrices: *mut *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_long,
        savelock: *mut ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_matrix_array_unlock(
        matrices: *mut *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_long,
        savelock: *mut ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_matrix_array_get_matrix_info(
        matrices: *mut *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_long,
        matrix_info: *mut t_jit_matrix_info,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_matrix_array_get_data(
        matrices: *mut *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_long,
        data: *mut *mut ::std::os::raw::c_char,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_matrix_info_equal_matrix_structure(
        minfo1: *mut t_jit_matrix_info,
        minfo2: *mut t_jit_matrix_info,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_matrix_info_uniform_planecount(
        matrix_info: *mut t_jit_matrix_info,
        n: ::std::os::raw::c_long,
        info_list: *mut t_jit_matrix_info,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_matrix_info_uniform_type(
        matrix_info: *mut t_jit_matrix_info,
        n: ::std::os::raw::c_long,
        info_list: *mut t_jit_matrix_info,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_matrix_info_uniform_dim(
        matrix_info: *mut t_jit_matrix_info,
        n: ::std::os::raw::c_long,
        info_list: *mut t_jit_matrix_info,
    ) -> t_jit_err;
}
extern "C" {
    pub fn jit_namespace_init();
}
extern "C" {
    pub fn jit_namespace_lookup(
        reference: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_namespace_attach(
        reference: *mut ::std::os::raw::c_void,
        name: *mut t_symbol,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_namespace_attach_decorated(
        reference: *mut ::std::os::raw::c_void,
        name: *mut t_symbol,
        data: *mut ::std::os::raw::c_void,
        out_name: *mut *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn jit_window_dragcheck(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn jit_window_init() -> t_jit_err;
}
extern "C" {
    pub fn max_jit_classex_mop_wrap(
        mclass: *mut ::std::os::raw::c_void,
        jclass: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_class_mop_wrap(
        mclass: *mut t_class,
        jclass: *mut t_class,
        flags: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_classex_mop_mproc(
        mclass: *mut ::std::os::raw::c_void,
        jclass: *mut ::std::os::raw::c_void,
        mproc: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_object_mop_wrap(
        mob: *mut t_object,
        job: *mut t_object,
        flags: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_object_mop_mproc(
        mob: *mut ::std::os::raw::c_void,
        job: *mut ::std::os::raw::c_void,
        mproc: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_setup(x: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_inputs(x: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_inputs_resize(
        x: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_outputs(x: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_outputs_resize(
        x: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_matrix_args(
        x: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_jit_matrix(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_assist(
        x: *mut ::std::os::raw::c_void,
        b: *mut ::std::os::raw::c_void,
        m: ::std::os::raw::c_long,
        a: ::std::os::raw::c_long,
        s: *mut ::std::os::raw::c_char,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_bang(x: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_outputmatrix(x: *mut ::std::os::raw::c_void) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_matrixout_new(
        x: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_clear(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn max_jit_mop_notify(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        msg: *mut t_symbol,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_free(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn max_jit_mop_name(
        x: *mut ::std::os::raw::c_void,
        attr: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_getname(
        x: *mut ::std::os::raw::c_void,
        attr: *mut ::std::os::raw::c_void,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_type(
        x: *mut ::std::os::raw::c_void,
        attr: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_gettype(
        x: *mut ::std::os::raw::c_void,
        attr: *mut ::std::os::raw::c_void,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_dim(
        x: *mut ::std::os::raw::c_void,
        attr: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_getdim(
        x: *mut ::std::os::raw::c_void,
        attr: *mut ::std::os::raw::c_void,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_planecount(
        x: *mut ::std::os::raw::c_void,
        attr: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_getplanecount(
        x: *mut ::std::os::raw::c_void,
        attr: *mut ::std::os::raw::c_void,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_parse_name(
        name: *mut t_symbol,
        type_: *mut ::std::os::raw::c_long,
        idx: *mut ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_restrict_info(
        x: *mut ::std::os::raw::c_void,
        p: *mut ::std::os::raw::c_void,
        info: *mut t_jit_matrix_info,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_get_io_by_name(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_mop_outputmode(
        x: *mut ::std::os::raw::c_void,
        attr: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_getoutputmode_attr(
        x: *mut ::std::os::raw::c_void,
        attr: *mut ::std::os::raw::c_void,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_adapt(
        x: *mut ::std::os::raw::c_void,
        attr: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_getadapt(
        x: *mut ::std::os::raw::c_void,
        attr: *mut ::std::os::raw::c_void,
        argc: *mut ::std::os::raw::c_long,
        argv: *mut *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_getinput(
        x: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_mop_getoutput(
        x: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_mop_getoutputmode(x: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn max_jit_mop_io_getoutlet(
        mop_io: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_mop_io_setoutlet(
        mop_io: *mut ::std::os::raw::c_void,
        o: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_getmproc(mop: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn max_jit_mop_adapt_matrix_all(
        x: *mut ::std::os::raw::c_void,
        y: *mut ::std::os::raw::c_void,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_variable_parse_sym(
        name: *mut t_symbol,
        msg: *mut *mut t_symbol,
        set: *mut ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_variable_anything(
        x: *mut ::std::os::raw::c_void,
        s: *mut t_symbol,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_variable_addinputs(
        x: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_variable_addoutputs(
        x: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_long,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_setup_simple(
        x: *mut ::std::os::raw::c_void,
        o: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_long,
        argv: *mut t_atom,
    ) -> t_jit_err;
}
extern "C" {
    pub fn max_jit_mop_setup_probing(mclass: *mut t_class) -> t_jit_err;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sysparallel_thread_pool {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ugenbox {
    pub _address: u8,
}
